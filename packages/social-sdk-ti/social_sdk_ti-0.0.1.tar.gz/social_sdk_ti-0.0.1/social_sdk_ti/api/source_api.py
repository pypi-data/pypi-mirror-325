# coding: utf-8

"""
    Social Toolkit

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from social_sdk_ti.models.source_response_schema import SourceResponseSchema

from social_sdk_ti.api_client import ApiClient, RequestSerialized
from social_sdk_ti.api_response import ApiResponse
from social_sdk_ti.rest import RESTResponseType


class SourceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_get(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> SourceResponseSchema:
        """List sources for a brand


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_get_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': None,
            '200': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_get_with_http_info(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[SourceResponseSchema]:
        """List sources for a brand


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_get_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': None,
            '200': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_get_without_preload_content(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """List sources for a brand


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_get_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': None,
            '200': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _tenant_tenant_id_brand_brand_id_source_get_serialize(
        self,
        tenant_id,
        brand_id,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if tenant_id is not None:
            _path_params['tenant_id'] = tenant_id
        if brand_id is not None:
            _path_params['brand_id'] = brand_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'tenant_authorizer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenant/{tenant_id}/brand/{brand_id}/source',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def tenant_tenant_id_brand_brand_id_source_post(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        name: Annotated[str, Field(min_length=1, strict=True, max_length=100)],
        source_type: StrictStr,
        content_type: Optional[StrictStr] = None,
        description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = None,
        location: Optional[StrictStr] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> SourceResponseSchema:
        """Create a new source for a brand


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param name: (required)
        :type name: str
        :param source_type: (required)
        :type source_type: str
        :param content_type:
        :type content_type: str
        :param description:
        :type description: str
        :param location:
        :type location: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_post_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            name=name,
            source_type=source_type,
            content_type=content_type,
            description=description,
            location=location,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '400': None,
            '201': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_post_with_http_info(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        name: Annotated[str, Field(min_length=1, strict=True, max_length=100)],
        source_type: StrictStr,
        content_type: Optional[StrictStr] = None,
        description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = None,
        location: Optional[StrictStr] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[SourceResponseSchema]:
        """Create a new source for a brand


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param name: (required)
        :type name: str
        :param source_type: (required)
        :type source_type: str
        :param content_type:
        :type content_type: str
        :param description:
        :type description: str
        :param location:
        :type location: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_post_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            name=name,
            source_type=source_type,
            content_type=content_type,
            description=description,
            location=location,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '400': None,
            '201': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_post_without_preload_content(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        name: Annotated[str, Field(min_length=1, strict=True, max_length=100)],
        source_type: StrictStr,
        content_type: Optional[StrictStr] = None,
        description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = None,
        location: Optional[StrictStr] = None,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """Create a new source for a brand


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param name: (required)
        :type name: str
        :param source_type: (required)
        :type source_type: str
        :param content_type:
        :type content_type: str
        :param description:
        :type description: str
        :param location:
        :type location: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_post_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            name=name,
            source_type=source_type,
            content_type=content_type,
            description=description,
            location=location,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '400': None,
            '201': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _tenant_tenant_id_brand_brand_id_source_post_serialize(
        self,
        tenant_id,
        brand_id,
        name,
        source_type,
        content_type,
        description,
        location,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if tenant_id is not None:
            _path_params['tenant_id'] = tenant_id
        if brand_id is not None:
            _path_params['brand_id'] = brand_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if content_type is not None:
            _form_params.append(('content_type', content_type))
        if description is not None:
            _form_params.append(('description', description))
        if location is not None:
            _form_params.append(('location', location))
        if name is not None:
            _form_params.append(('name', name))
        if source_type is not None:
            _form_params.append(('source_type', source_type))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if content_type__:
            _header_params['Content-Type'] = content_type__
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'tenant_authorizer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tenant/{tenant_id}/brand/{brand_id}/source',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def tenant_tenant_id_brand_brand_id_source_source_id_delete(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        source_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> None:
        """Delete a source and its associated data


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param source_id: (required)
        :type source_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_source_id_delete_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            source_id=source_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_source_id_delete_with_http_info(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        source_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[None]:
        """Delete a source and its associated data


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param source_id: (required)
        :type source_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_source_id_delete_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            source_id=source_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_source_id_delete_without_preload_content(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        source_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """Delete a source and its associated data


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param source_id: (required)
        :type source_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_source_id_delete_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            source_id=source_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _tenant_tenant_id_brand_brand_id_source_source_id_delete_serialize(
        self,
        tenant_id,
        brand_id,
        source_id,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if tenant_id is not None:
            _path_params['tenant_id'] = tenant_id
        if brand_id is not None:
            _path_params['brand_id'] = brand_id
        if source_id is not None:
            _path_params['source_id'] = source_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'tenant_authorizer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenant/{tenant_id}/brand/{brand_id}/source/{source_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def tenant_tenant_id_brand_brand_id_source_source_id_get(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        source_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> SourceResponseSchema:
        """Get source details


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param source_id: (required)
        :type source_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_source_id_get_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            source_id=source_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '200': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_source_id_get_with_http_info(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        source_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[SourceResponseSchema]:
        """Get source details


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param source_id: (required)
        :type source_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_source_id_get_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            source_id=source_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '200': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_source_id_get_without_preload_content(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        source_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """Get source details


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param source_id: (required)
        :type source_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_source_id_get_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            source_id=source_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '200': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _tenant_tenant_id_brand_brand_id_source_source_id_get_serialize(
        self,
        tenant_id,
        brand_id,
        source_id,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if tenant_id is not None:
            _path_params['tenant_id'] = tenant_id
        if brand_id is not None:
            _path_params['brand_id'] = brand_id
        if source_id is not None:
            _path_params['source_id'] = source_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'tenant_authorizer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenant/{tenant_id}/brand/{brand_id}/source/{source_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )




    @validate_call
    def tenant_tenant_id_brand_brand_id_source_source_id_reprocess_post(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        source_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> SourceResponseSchema:
        """Reprocess a source


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param source_id: (required)
        :type source_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_source_id_reprocess_post_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            source_id=source_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '202': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_source_id_reprocess_post_with_http_info(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        source_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> ApiResponse[SourceResponseSchema]:
        """Reprocess a source


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param source_id: (required)
        :type source_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_source_id_reprocess_post_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            source_id=source_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '202': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenant_tenant_id_brand_brand_id_source_source_id_reprocess_post_without_preload_content(
        self,
        tenant_id: StrictStr,
        brand_id: StrictStr,
        source_id: StrictStr,
        request_timeout__: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        request_auth__: Optional[Dict[StrictStr, Any]] = None,
        content_type__: Optional[StrictStr] = None,
        headers__: Optional[Dict[StrictStr, Any]] = None,
        host__: Optional[StrictStr] = None,
    ) -> RESTResponseType:
        """Reprocess a source


        :param tenant_id: (required)
        :type tenant_id: str
        :param brand_id: (required)
        :type brand_id: str
        :param source_id: (required)
        :type source_id: str
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenant_tenant_id_brand_brand_id_source_source_id_reprocess_post_serialize(
            tenant_id=tenant_id,
            brand_id=brand_id,
            source_id=source_id,
            request_auth__=request_auth__,
            content_type__=content_type__,
            headers__=headers__,
            host__=host__
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '202': "SourceResponseSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            request_timeout__=request_timeout__
        )
        return response_data.response


    def _tenant_tenant_id_brand_brand_id_source_source_id_reprocess_post_serialize(
        self,
        tenant_id,
        brand_id,
        source_id,
        request_auth__,
        content_type__,
        headers__,
        host__,
    ) -> RequestSerialized:


        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = headers__ or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if tenant_id is not None:
            _path_params['tenant_id'] = tenant_id
        if brand_id is not None:
            _path_params['brand_id'] = brand_id
        if source_id is not None:
            _path_params['source_id'] = source_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'tenant_authorizer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tenant/{tenant_id}/brand/{brand_id}/source/{source_id}/reprocess',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            host__=host__,
            request_auth__=request_auth__
        )


