Metadata-Version: 2.2
Name: mo-sqlite
Version: 2.673.25037
Summary: Multithreading for Sqlite, plus expression composition
Home-page: https://github.com/klahnakoski/mo-sqlite
Author: Kyle Lahnakoski
Author-email: kyle@lahnakoski.com
License: MPL 2.0
Classifier: Development Status :: 4 - Beta
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)
Classifier: Topic :: Database
Classifier: Topic :: Utilities
Classifier: Programming Language :: SQL
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: jx-python==4.673.25037
Requires-Dist: mo-dots==10.672.25036
Requires-Dist: mo-files==6.672.25036
Requires-Dist: mo-future==7.672.25036
Requires-Dist: mo-imports==7.672.25036
Requires-Dist: mo-json==6.672.25036
Requires-Dist: mo-kwargs==7.672.25036
Requires-Dist: mo-logs==8.672.25036
Requires-Dist: mo-math==7.672.25036
Requires-Dist: mo-sql==4.672.25036
Requires-Dist: mo-sql==4.672.25036
Requires-Dist: mo-threads==6.672.25036
Requires-Dist: mo-times==5.672.25036
Provides-Extra: tests
Requires-Dist: mo-testing>=8.623.24125; extra == "tests"
Requires-Dist: beautifulsoup4>=4.12.3; extra == "tests"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: summary

# More SQLite!

Multithreading for Sqlite, plus expression composition


[![PyPI Latest Release](https://img.shields.io/pypi/v/mo-sqlite.svg)](https://pypi.org/project/mo-sqlite/)
[![Build Status](https://github.com/klahnakoski/mo-sqlite/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/klahnakoski/mo-sqlite/actions/workflows/build.yml)
[![Coverage Status](https://coveralls.io/repos/github/klahnakoski/mo-sqlite/badge.svg?branch=dev)](https://coveralls.io/github/klahnakoski/mo-sqlite?branch=dev)
[![Downloads](https://static.pepy.tech/badge/mo-sqlite/month)](https://pepy.tech/project/mo-sqlite)


## Multi-threaded Sqlite

This module wraps the `sqlite3.connection` with thread-safe traffic manager.  Here is typical usage: 

    from mo_sqlite import Sqlite
    db = Sqlite("mydb.sqlite")
    with db.transaction() as t:
        t.command("insert into mytable values (1, 2, 3)")

While you may have each thread own a `sqlite3.connection` to the same file, you will still get exceptions when another thread has the file locked.

## Pull JSON out of database

This module includes a minimum experimental structure that can describe pulling deeply nested JSON documents out of a normalized database.  The tactic is to shape a single query who's resultset can be easily converted to the desired JSON by Python. Read more on [pulling json from a database](docs/JSON%20in%20Database.md)

There are multiple normal forms, including domain key normal form, and columnar form;  these have a multitude one-to-one relations, all represent the same logical schema, but differ in their access patterns to optimize for particular use cases.  This module intends to hide the particular database schema from the caller; exposing just the logical schema. 



This experiment compliments the [mo-columns](https://github.com/klahnakoski/mo-columns) experiment, which is about pushing JSON into a database. 
   
