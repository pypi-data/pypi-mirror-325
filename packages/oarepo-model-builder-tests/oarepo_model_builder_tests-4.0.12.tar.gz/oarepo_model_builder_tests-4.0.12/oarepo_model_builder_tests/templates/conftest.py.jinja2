from pathlib import Path
import pytest
import yaml
from flask_security import login_user
from invenio_access import current_access, ActionUsers
from flask_security.utils import hash_password
from invenio_accounts.proxies import current_datastore
from invenio_accounts.testutils import login_user_via_session
from invenio_app.factory import create_api
from invenio_records_resources.services.uow import UnitOfWork, RecordCommitOp
import os

{{ vars.resource_config.class|generate_import }}
from {{ vars.proxy.module }} import {{ vars.service.proxy }}
{{ vars.record.class|generate_import }}

BASE_URLS = {
        "base_url": {{ vars.resource_config.class|base_name }}.url_prefix,
        "base_html_url": "{{ vars.resource_config.base_html_url }}"
}

APP_CONFIG = {
    "JSONSCHEMAS_HOST" : "localhost",
    "RECORDS_REFRESOLVER_CLS": "invenio_records.resolver.InvenioRefResolver",
    "RECORDS_REFRESOLVER_STORE": "invenio_jsonschemas.proxies.current_refresolver_store",
    "RATELIMIT_AUTHENTICATED_USER": "200 per second",
    "SEARCH_HOSTS": [
        {
            'host': os.environ.get('OPENSEARCH_HOST', 'localhost'),
            'port': os.environ.get('OPENSEARCH_PORT', '9200'),
        }
    ],
    # disable redis cache
    "CACHE_TYPE": "SimpleCache",  # Flask-Caching related configs
    "CACHE_DEFAULT_TIMEOUT": 300,
    "RDM_PERSISTENT_IDENTIFIERS": {},
    "RDM_USER_MODERATION_ENABLED": False,
    "RDM_RECORDS_ALLOW_RESTRICTION_AFTER_GRACE_PERIOD": False,
    "RDM_ALLOW_METADATA_ONLY_RECORDS": True,
    "RDM_DEFAULT_FILES_ENABLED": False,
    "SQLALCHEMY_ENGINE_OPTIONS": { # hack to avoid pool_timeout set in invenio_app_rdm
        "pool_pre_ping": False,
        "pool_recycle": 3600
    },
    "REST_CSRF_ENABLED": False
}

@pytest.fixture
def base_urls():
    return BASE_URLS

@pytest.fixture
def record_service():
    return current_service

@pytest.fixture(scope="function")
def sample_metadata_list():
    data_path = f"{Path(__file__).parent.parent}/{{ vars.sample.file }}"
    docs = list(yaml.load_all(open(data_path), Loader=yaml.SafeLoader))
    return docs

@pytest.fixture()
def input_data(sample_metadata_list):
    return sample_metadata_list[0]


@pytest.fixture(scope="module")
def create_app(instance_path, entry_points):
    """Application factory fixture."""
    return create_api


@pytest.fixture(scope="module")
def app_config(app_config):
    for k, v in APP_CONFIG.items():
        app_config[k] = v
    return app_config


@pytest.fixture(scope="function")
def sample_record(app, db, input_data):
    # record = {{ vars.service.proxy }}.create(system_identity, sample_data[0])
    # return record
    with UnitOfWork(db.session) as uow:
        record = {{ vars.record.class|base_name }}.create(input_data)
        uow.register(RecordCommitOp(record, {{ vars.service.proxy }}.indexer, True))
        uow.commit()
        return record


@pytest.fixture(scope="function")
def sample_records(app, db, sample_metadata_list):
    # record = {{ vars.service.proxy }}.create(system_identity, sample_data[0])
    # return record
    with UnitOfWork(db.session) as uow:
        records = []
        for sample_metadata in sample_metadata_list:
            record = {{ vars.record.class|base_name }}.create(sample_metadata)
            uow.register(RecordCommitOp(record, {{ vars.service.proxy }}.indexer, True))
            records.append(record)
        uow.commit()
        return records


@pytest.fixture()
def user(app, db):
    """Create example user."""
    with db.session.begin_nested():
        datastore = app.extensions["security"].datastore
        _user = datastore.create_user(
            email="info@inveniosoftware.org",
            password=hash_password("password"),
            active=True,
        )
    db.session.commit()
    return _user


@pytest.fixture()
def role(app, db):
    """Create some roles."""
    with db.session.begin_nested():
        datastore = app.extensions["security"].datastore
        role = datastore.create_role(name="admin", description="admin role")

    db.session.commit()
    return role

@pytest.fixture(scope="function")
def anonymous_client(app):
    """Test client for the base application fixture.

    Scope: function

    If you need the database and search indexes initialized, simply use the
    Pytest-Flask fixture ``client`` instead. This fixture is mainly useful if
    you need a test client without needing to initialize both the database and
    search indexes.
    """
    with app.test_client() as client:
        yield client

@pytest.fixture()
def client_with_credentials(db, client, user, role, sample_metadata_list):
    """Log in a user to the client."""

    current_datastore.add_role_to_user(user, role)
    action = current_access.actions["superuser-access"]
    db.session.add(ActionUsers.allow(action, user_id=user.id))

    login_user(user, remember=True)
    login_user_via_session(client, email=user.email)

    return client

{{ vars.tests.extra_code }}