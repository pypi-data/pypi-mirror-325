import logging
from typing import Any
from typing import Dict
from typing import List
import requests

import neo4j
from dateutil import parser as dt_parse
from requests import Session

from cartography.client.core.tx import load
from cartography.graph.job import GraphJob
from cartography.models.{{ entity._module.name|lower }}.{{ entity.name|lower }} import {{ entity.node_class }}
from cartography.util import timeit


logger = logging.getLogger(__name__)
# Connect and read timeouts of 60 seconds each; see https://requests.readthedocs.io/en/master/user/advanced/#timeouts
_TIMEOUT = (60, 60)


@timeit
def sync(
    neo4j_session: neo4j.Session,
    api_session: requests.Session,
    {%- for arg in entity.needed_params.values() %}
    {{ arg.arg_name }},
    {%- endfor %}
    update_tag: int,
    common_job_parameters: Dict[str, Any],
) -> List[Dict]:
    {{ entity.name|lower}}s = get(
        api_session,
        common_job_parameters['BASE_URL'],
        {%- for arg in entity.needed_params.values() %}
        {{ arg.arg_name }},
        {%- endfor %}
    )
    # FIXME: You can configure here a transform operation
    # formated_{{ entity.name|lower}}s = transform({{ entity.name|lower}}s)
    load_{{ entity.name|lower}}s(
        neo4j_session,
        {{ entity.name|lower}}s,  # FIXME: replace with `formated_{{ entity.name|lower}}s` if your added a transform step
        {%- for arg in entity.needed_params.values() %}
        {{ arg.arg_name }},
        {%- endfor %}
        update_tag)
    cleanup(neo4j_session, common_job_parameters)

@timeit
def get(
    api_session: requests.Session,
    base_url: str,
    {%- for arg in entity.needed_params.values() %}
    {{ arg.arg_name }},
    {%- endfor %}
) -> Dict[str, Any]:
    # FIXME: You have to handle pagination if needed
    req = api_session.get(
        "{base_url}{{ entity.enumeration_path.path }}".format(
            base_url=base_url,
        {%- for k, v in entity.needed_params.items() %}
            {{ k }}={{ v.arg_name }},
        {%- endfor %}
        ),
        timeout=_TIMEOUT
    )
    req.raise_for_status()
    return req.json()

def load_{{ entity.name|lower}}s(
    neo4j_session: neo4j.Session,
    data: List[Dict[str, Any]],
    {%- for arg in entity.needed_params.values() %}
    {{ arg.arg_name }},
    {%- endfor %}
    update_tag: int,
) -> None:
    load(
        neo4j_session,
        {{ entity.node_class }}(),
        data,
        lastupdated=update_tag,
        {%- for arg in entity.needed_params.values() %}
        {{arg.arg_name}}={{ arg.arg_name }},
        {%- endfor %}
    )


def cleanup(neo4j_session: neo4j.Session, common_job_parameters: Dict[str, Any]) -> None:
    GraphJob.from_node_schema(
        {{ entity.node_class }}(),
        common_job_parameters
    ).run(neo4j_session)
