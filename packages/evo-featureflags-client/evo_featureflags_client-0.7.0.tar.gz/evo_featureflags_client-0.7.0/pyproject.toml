[project]
name = "evo-featureflags-client"
dynamic = []
description = "Feature flags client"
readme = "README.md"
authors = [
    { name = "d.zakharchuk", email = "d.zakharchuk@smartweb.com.ua" },
    { name = "m.kindritskiy", email = "m.kindritskiy@smartweb.com.ua" },
    { name = "Vladimir Magamedov", email = "vladimir@magamedov.com" },
]
dependencies = [
    "dataclass-wizard~=0.26",
]
requires-python = ">=3.9"
version = "0.7.0"

[project.license]
text = "MIT"

[project.optional-dependencies]
httpx = [
    "httpx~=0.25",
]
aiohttp = [
    "aiohttp~=3.10",
]
requests = [
    "requests~=2.32",
]

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[tool.pdm.version]
source = "file"
path = "featureflags_client/__init__.py"

[tool.pdm.scripts]
release = "./scripts/release.sh"
ishell = "ptpython --asyncio --dark-bg --history-file=.ptpython {args}"
test = "python -m pytest {args}"
docs = "sphinx-build -a -b html docs public"
ruff = "ruff check featureflags_client examples {args} --fix"
ruff-diff = "ruff check featureflags_client examples {args}"
mypy = "mypy featureflags_client {args}"
black = "black featureflags_client examples {args}"

[tool.pdm.scripts.fmt]
composite = [
    "black",
    "ruff",
]

[tool.pdm.dev-dependencies]
dev = [
    "ptpython>=3.0.25",
]
test = [
    "pytest~=7.1",
    "pytest-asyncio~=0.18",
    "faker==18.13",
    "tox-pdm==0.7.0",
    "protobuf<4.0.0",
    "httpx>=0.25",
    "aiohttp>=3.10",
    "requests>=2.32",
]
lint = [
    "black>=24.8.0",
    "ruff>=0.9.0",
    "mypy>=1.14.1",
    "types-requests>=2.32.0.20241016",
]
docs = [
    "sphinx==5.3.0",
    "sphinx-rtd-theme==1.3.0",
    "sphinxcontrib-asyncio==0.3.0",
]
examples = [
    "aiohttp>=3.10",
    "flask>=2.3.3",
    "sanic>=24.12.0",
    "httpx>=0.25",
    "requests>=2.32",
]

[tool.pytest.ini_options]
addopts = "-p no:warnings -p no:cacheprovider -q --tb=native"
filterwarnings = [
    "ignore::DeprecationWarning:google.*",
]
log_cli = true
testpaths = [
    "featureflags_client/tests",
]
asyncio_mode = "auto"

[tool.black]
line-length = 80
target-version = [
    "py38",
]
extend-exclude = "/(\n  | .git\n  | __pycache__\n  | __pypackages__\n  | .venv\n  | venv\n  | .ve\n)/\n"

[tool.ruff]
line-length = 80
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "C90",
    "I",
    "N",
    "UP",
    "ASYNC",
    "S",
    "DTZ",
    "A",
    "B",
    "C4",
    "T20",
    "SIM",
    "ERA",
    "PL",
    "RUF",
]
ignore = [
    "S101",
    "S104",
    "S105",
    "DTZ003",
    "DTZ006",
    "A003",
    "B008",
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    ".venv",
    "venv",
    ".ve",
    "__pycache__",
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"featureflags_client/tests/*" = [
    "A002",
    "E501",
    "S101",
    "S105",
    "S106",
    "PLR2004",
    "PLR0913",
    "DTZ005",
    "DTZ003",
    "T201",
]
"featureflags_client/http/types.py" = [
    "A005",
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = [
    "featureflags_client",
]

[tool.mypy]
python_version = "3.9"
follow_imports = "skip"
pretty = true
strict_optional = false
warn_no_return = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    ".git",
    "__pycache__",
    "__pypackages__",
    ".venv",
    "venv",
    ".ve",
    "featureflags_client/tests",
]
