services:
  
  api: &api
    build:
      context: .
    image: {{ cookiecutter.project_name }}:latest
    container_name: {{ cookiecutter.project_name }}-api
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      {% if cookiecutter.use_postgres %}
      postgres:
        condition: service_healthy
      {% endif %}
    environment:
      {{ cookiecutter.project_name|upper|replace('-', '_') }}_RELOAD: "True"
      {{ cookiecutter.project_name|upper|replace('-', '_') }}_SERVER_HOST: 0.0.0.0
      {{ cookiecutter.project_name|upper|replace('-', '_') }}_SERVER_PORT: 8000
      {{ cookiecutter.project_name|upper|replace('-', '_') }}_PG_HOST: {{ cookiecutter.project_name }}-pg
      {{ cookiecutter.project_name|upper|replace('-', '_') }}_PG_PORT: 5432
      {{ cookiecutter.project_name|upper|replace('-', '_') }}_PG_USER: {{ cookiecutter.project_name }}
      {{ cookiecutter.project_name|upper|replace('-', '_') }}_PG_PASS: {{ cookiecutter.project_name }}
      {{ cookiecutter.project_name|upper|replace('-', '_') }}_PG_DATABASE: {{ cookiecutter.project_name }}
    volumes:
    - ./src:/app/src
    - ./tests:/app/tests
    {% if cookiecutter.use_alembic %}
    - ./migrations:/app/migrations
    {% endif %}
  
  {% if cookiecutter.use_postgres %}
  postgres:
    image: postgres:13.8-bullseye
    hostname: {{ cookiecutter.project_name }}-pg
    container_name: {{ cookiecutter.project_name }}-pg
    environment:
      POSTGRES_PASSWORD: {{ cookiecutter.project_name }}
      POSTGRES_USER: {{ cookiecutter.project_name }}
      POSTGRES_DB: {{ cookiecutter.project_name }}
    volumes:
    - {{ cookiecutter.project_name }}-pg-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U {{ cookiecutter.project_name }}
      interval: 2s
      timeout: 3s
      retries: 40
  {% endif %}
volumes:
  {{ cookiecutter.project_name }}-pg-data:
    name: {{ cookiecutter.project_name }}-pg-data
