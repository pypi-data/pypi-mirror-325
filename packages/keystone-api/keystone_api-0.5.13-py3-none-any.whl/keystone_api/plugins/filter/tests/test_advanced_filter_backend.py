"""Tests for the `AdvancedFilterBackend` class."""

from unittest.mock import Mock

from django.db import models
from django.test import TestCase
from django_filters import FilterSet

from plugins.filter import AdvancedFilterBackend, FactoryBuiltFilterSet


class SampleModel(models.Model):
    """Sample database model for testing"""

    class Meta:
        app_label = 'plugins'

    bool_field = models.BooleanField()
    char_field = models.CharField(max_length=100)
    integer_field = models.IntegerField()
    date_field = models.DateField(auto_now_add=True)
    time_field = models.TimeField(auto_now_add=True)
    datetime_field = models.DateTimeField(auto_now_add=True)
    text_field = models.TextField()


class GetFiltersetClass(TestCase):
    """Test the fetching of filterset classes for different view/querysets"""

    def test_user_provided_filterset(self) -> None:
        """Test existing filtersets are not overwritten"""

        # Mock a view with a filterset already defined
        mock_view = Mock()
        mock_view.filterset_class = Mock(spec=FilterSet)

        result = AdvancedFilterBackend().get_filterset_class(mock_view)
        self.assertEqual(result, mock_view.filterset_class, 'User defined filterset class was overwritten')

    def test_auto_generated_filterset(self) -> None:
        """Test the generation of factory filtersets"""

        # Mock a view without a filterset defined
        mock_view = Mock()
        mock_view.filterset_class = None
        mock_view.filterset_fields = None

        mock_queryset = Mock()
        mock_queryset.model = SampleModel

        backend = AdvancedFilterBackend()
        result = backend.get_filterset_class(mock_view, mock_queryset)

        # Test the factory method returned an autogenerated filterset
        self.assertTrue(issubclass(result, FactoryBuiltFilterSet))
        self.assertEqual(result.Meta.model, SampleModel, 'Factory built filterset has incorrect DB model')

        fields = result.Meta.fields
        filters = backend.field_filter_map
        self.assertEqual(fields['bool_field'], filters[models.BooleanField], 'bool type field has incorrect filters')
        self.assertEqual(fields['char_field'], filters[models.CharField], 'char type field has incorrect filters')
        self.assertEqual(fields['integer_field'], filters[models.IntegerField], 'integer type field has incorrect filters')
        self.assertEqual(fields['date_field'], filters[models.DateField], 'date type field has incorrect filters')
        self.assertEqual(fields['time_field'], filters[models.TimeField], 'time type field has incorrect filters')
        self.assertEqual(fields['datetime_field'], filters[models.DateTimeField], 'datetime type field has incorrect filters')
        self.assertEqual(fields['text_field'], filters[models.TextField], 'text type field has incorrect filters')
