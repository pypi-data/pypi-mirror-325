"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class EcdhNistTest(google.protobuf.message.Message):
    """A single NIST test for ECDH. The coordinates and private value are in bytes to ensure
    that they fit - the values used for e.g B-571 are roughly 70 bits long.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COUNT_FIELD_NUMBER: builtins.int
    PEER_X_FIELD_NUMBER: builtins.int
    PEER_Y_FIELD_NUMBER: builtins.int
    OWN_D_FIELD_NUMBER: builtins.int
    OWN_X_FIELD_NUMBER: builtins.int
    OWN_Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    count: builtins.int
    """The test ID. It should be unique among tests for the same curve."""
    peer_x: builtins.bytes
    """The peer's public x-coordinate."""
    peer_y: builtins.bytes
    """The peer's public y-coordinate."""
    own_d: builtins.bytes
    """Our secret value."""
    own_x: builtins.bytes
    """Our public x-coordinate."""
    own_y: builtins.bytes
    """Our public y-coordinate."""
    z: builtins.bytes
    """The resulting shared secret."""
    def __init__(
        self,
        *,
        count: builtins.int = ...,
        peer_x: builtins.bytes = ...,
        peer_y: builtins.bytes = ...,
        own_d: builtins.bytes = ...,
        own_x: builtins.bytes = ...,
        own_y: builtins.bytes = ...,
        z: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["count", b"count", "own_d", b"own_d", "own_x", b"own_x", "own_y", b"own_y", "peer_x", b"peer_x", "peer_y", b"peer_y", "z", b"z"]) -> None: ...

global___EcdhNistTest = EcdhNistTest

@typing.final
class EcdhNistVectors(google.protobuf.message.Message):
    """NIST test vectors for a given curve."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CURVE_FIELD_NUMBER: builtins.int
    TESTS_FIELD_NUMBER: builtins.int
    curve: builtins.str
    """The name of the curve."""
    @property
    def tests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EcdhNistTest]:
        """A list of tests for this curve."""

    def __init__(
        self,
        *,
        curve: builtins.str = ...,
        tests: collections.abc.Iterable[global___EcdhNistTest] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["curve", b"curve", "tests", b"tests"]) -> None: ...

global___EcdhNistVectors = EcdhNistVectors

@typing.final
class EcdhWycheproofTest(google.protobuf.message.Message):
    """A single Wycheproof test vector for ECDH. It is common to both types of tests
    (encoded point and encoded public key).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    PUBLIC_FIELD_NUMBER: builtins.int
    PRIVATE_FIELD_NUMBER: builtins.int
    SHARED_FIELD_NUMBER: builtins.int
    RESULT_FIELD_NUMBER: builtins.int
    FLAGS_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Test ID. Should be unique in a file of vectors."""
    comment: builtins.str
    """A comment describing what is being tested."""
    public: builtins.bytes
    """The peer's public key - either an encoded point or an encoded public key. See the type
    of EcdhWycheproofGroup.
    """
    private: builtins.bytes
    """The private value. Stored as bytes to ensure it fits."""
    shared: builtins.bytes
    """The resulting shared secret."""
    result: builtins.str
    """The TestType."""
    @property
    def flags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Flags annotating this test."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        comment: builtins.str = ...,
        public: builtins.bytes = ...,
        private: builtins.bytes = ...,
        shared: builtins.bytes = ...,
        result: builtins.str = ...,
        flags: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "flags", b"flags", "id", b"id", "private", b"private", "public", b"public", "result", b"result", "shared", b"shared"]) -> None: ...

global___EcdhWycheproofTest = EcdhWycheproofTest

@typing.final
class EcdhWycheproofGroup(google.protobuf.message.Message):
    """A group of Wycheproof tests."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CURVE_FIELD_NUMBER: builtins.int
    ENCODING_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    TESTS_FIELD_NUMBER: builtins.int
    curve: builtins.str
    """The name of the curve."""
    encoding: builtins.str
    """The type of encoding used for the public key."""
    type: builtins.str
    """The type of test: either EcdhTest where the public key is wholly encoded, or
    EcdhEcpointTest where only the encoded coordinates are given.
    """
    @property
    def tests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EcdhWycheproofTest]:
        """A list of tests."""

    def __init__(
        self,
        *,
        curve: builtins.str = ...,
        encoding: builtins.str = ...,
        type: builtins.str = ...,
        tests: collections.abc.Iterable[global___EcdhWycheproofTest] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["curve", b"curve", "encoding", b"encoding", "tests", b"tests", "type", b"type"]) -> None: ...

global___EcdhWycheproofGroup = EcdhWycheproofGroup

@typing.final
class EcdhWycheproofVectors(google.protobuf.message.Message):
    """A file of Wycheproof test vectors for ECDH."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class NotesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    ALGORITHM_FIELD_NUMBER: builtins.int
    GENERATOR_VERSION_FIELD_NUMBER: builtins.int
    NUMBER_OF_TESTS_FIELD_NUMBER: builtins.int
    HEADER_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    GROUPS_FIELD_NUMBER: builtins.int
    FILENAME_FIELD_NUMBER: builtins.int
    algorithm: builtins.str
    """The algorithm - ECDH in this case."""
    generator_version: builtins.str
    """The version of the generator used - refer to Wycheproof."""
    number_of_tests: builtins.int
    """The total number of tests included in this file."""
    header: builtins.str
    """Additional information about these tests."""
    schema: builtins.str
    """The JSON scheme of the original file."""
    filename: builtins.str
    """The name of the source file."""
    @property
    def notes(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Notes describing the flags that annotate the tests."""

    @property
    def groups(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___EcdhWycheproofGroup]:
        """The groups of tests."""

    def __init__(
        self,
        *,
        algorithm: builtins.str = ...,
        generator_version: builtins.str = ...,
        number_of_tests: builtins.int = ...,
        header: builtins.str = ...,
        notes: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        schema: builtins.str = ...,
        groups: collections.abc.Iterable[global___EcdhWycheproofGroup] | None = ...,
        filename: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["algorithm", b"algorithm", "filename", b"filename", "generator_version", b"generator_version", "groups", b"groups", "header", b"header", "notes", b"notes", "number_of_tests", b"number_of_tests", "schema", b"schema"]) -> None: ...

global___EcdhWycheproofVectors = EcdhWycheproofVectors
