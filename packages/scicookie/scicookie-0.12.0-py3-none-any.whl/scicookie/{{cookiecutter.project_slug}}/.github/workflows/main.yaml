{%- raw -%}
name: main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check-branch:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    timeout-minutes: 2
    concurrency:
      group: check-pr-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if the PR's branch is updated
        uses: osl-incubator/gh-check-pr-is-updated@1.0.0
        with:
          remote_branch: origin/main
          pr_sha: ${{ github.event.pull_request.head.sha }}

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: ci-${{ github.event_name }}-${{ github.ref }}
      cancel-in-progress: true

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4
{%- endraw %}
{% if cookiecutter.use_conda == "yes" %}
      - name: Cache Conda Packages
        uses: actions/cache@v3
        with:
          path: ~/.conda/envs/{{ cookiecutter.project_slug }}
{%- raw %}
          key: ubuntu-latest-conda-${{ hashFiles('conda/dev.yaml') }}
{%- endraw %}
          restore-keys: |
            ubuntu-latest-conda-

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          environment-file: conda/dev.yaml
          channels: conda-forge,nodefaults
          activate-environment: {{ cookiecutter.project_slug }}
          auto-update-conda: true
          conda-solver: libmamba
{% else %}
      - uses: actions/setup-python@v4
        with:
          python-version: "pypy3.9"

      - name: Create virtual environment
        run: source {{ cookiecutter.project_slug }}/bin/activate

      - name: Install build-system
        run: pip install -r requirements.txt
{%- endif %}
      - name: Install dependencies
        run: |
          {%- if cookiecutter.build_system == "poetry" %}
          poetry install
          {%- elif cookiecutter.build_system == "flit" %}
          flit install
          {%- elif cookiecutter.build_system == "pdm" %}
          pdm install
          {%- elif cookiecutter.build_system == "pixi" %}
          pixi install
          {%- else %}
          pip install .
          {%- endif %}

      - name: Run tests
        run: |
          {%- if cookiecutter.use_makim == "yes" %}
          makim tests.unit
          {%- elif cookiecutter.use_make == "yes" %}
          make test
          {%- else %}
          # add your command for running tests here
          {%- endif %}

      - name: Run style checks
        if: success() || failure()
        run: |
          {%- if cookiecutter.use_pre_commit == "yes" %}
          pre-commit install
          {%- if cookiecutter.use_makim == "yes" %}
          makim tests.linter
          {%- elif cookiecutter.use_make == "yes" %}
          make lint
          {%- else %}
          # add your command for running the linter here
          {%- endif %}
          {%- else %}
          # add your command for running the linter here
          {%- endif %}
