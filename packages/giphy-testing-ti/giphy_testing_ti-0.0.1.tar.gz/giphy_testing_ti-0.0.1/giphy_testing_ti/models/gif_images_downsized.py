# coding: utf-8

"""
    Giphy API

    Giphy API

    The version of the OpenAPI document: 1.0
    Contact: support@giphy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GifImagesDownsized(BaseModel):
    """
    GifImagesDownsized
    """ # noqa: E501
    frames: Optional[StrictStr] = Field(default=None, description="The number of frames in this GIF.")
    height: Optional[StrictStr] = Field(default=None, description="The height of this GIF in pixels.")
    mp4: Optional[StrictStr] = Field(default=None, description="The URL for this GIF in .MP4 format.")
    mp4_size: Optional[StrictStr] = Field(default=None, description="The size in bytes of the .MP4 file corresponding to this GIF.")
    size: Optional[StrictStr] = Field(default=None, description="The size of this GIF in bytes.")
    url: Optional[StrictStr] = Field(default=None, description="The publicly-accessible direct URL for this GIF.")
    webp: Optional[StrictStr] = Field(default=None, description="The URL for this GIF in .webp format.")
    webp_size: Optional[StrictStr] = Field(default=None, description="The size in bytes of the .webp file corresponding to this GIF.")
    width: Optional[StrictStr] = Field(default=None, description="The width of this GIF in pixels.")
    __properties: ClassVar[List[str]] = ["frames", "height", "mp4", "mp4_size", "size", "url", "webp", "webp_size", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GifImagesDownsized from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GifImagesDownsized from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frames": obj.get("frames"),
            "height": obj.get("height"),
            "mp4": obj.get("mp4"),
            "mp4_size": obj.get("mp4_size"),
            "size": obj.get("size"),
            "url": obj.get("url"),
            "webp": obj.get("webp"),
            "webp_size": obj.get("webp_size"),
            "width": obj.get("width")
        })
        return _obj


