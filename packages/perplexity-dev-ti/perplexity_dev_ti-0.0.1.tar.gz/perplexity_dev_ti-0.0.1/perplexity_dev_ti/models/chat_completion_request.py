# coding: utf-8

"""
    Perplexity API

    API for generating chat completions using Perplexity's AI models

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from perplexity_dev_ti.models.message import Message
from typing import Optional, Set
from typing_extensions import Self

class ChatCompletionRequest(BaseModel):
    """
    ChatCompletionRequest
    """ # noqa: E501
    messages: List[Message] = Field(description="A list of messages comprising the conversation so far.")
    model: StrictStr = Field(description="The name of the model that will complete your prompt.")
    frequency_penalty: Optional[Union[Annotated[float, Field(strict=True, gt=0)], Annotated[int, Field(strict=True, gt=0)]]] = Field(default=1, description="A multiplicative penalty greater than 0. Values greater than 1.0 penalize new tokens based on their existing frequency.")
    max_tokens: Optional[StrictInt] = Field(default=None, description="The maximum number of completion tokens returned by the API.")
    presence_penalty: Optional[Union[Annotated[float, Field(le=2, strict=True, ge=-2)], Annotated[int, Field(le=2, strict=True, ge=-2)]]] = Field(default=0, description="A value between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.")
    response_format: Optional[Dict[str, Any]] = Field(default=None, description="Enable structured outputs with a JSON or Regex schema. Only available to Tier-3 users.")
    return_images: Optional[StrictBool] = Field(default=False, description="Determines whether or not a request should return images. Only available to Tier-2 users.")
    return_related_questions: Optional[StrictBool] = Field(default=False, description="Determines whether or not a request should return related questions. Only available to Tier-2 users.")
    search_domain_filter: Optional[List[StrictStr]] = Field(default=None, description="List of domains to limit citations to specific URLs. Limited to 3 domains.")
    search_recency_filter: Optional[StrictStr] = Field(default=None, description="Returns search results within the specified time interval.")
    stream: Optional[StrictBool] = Field(default=False, description="Whether to stream the response with server-sent events.")
    temperature: Optional[Union[Annotated[float, Field(lt=2, strict=True, ge=0)], Annotated[int, Field(lt=2, strict=True, ge=0)]]] = Field(default=0.2, description="The amount of randomness in the response.")
    top_k: Optional[Union[Annotated[float, Field(le=2048, strict=True, ge=0)], Annotated[int, Field(le=2048, strict=True, ge=0)]]] = Field(default=0, description="The number of tokens to keep for highest top-k filtering.")
    top_p: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=0.9, description="The nucleus sampling threshold.")
    __properties: ClassVar[List[str]] = ["messages", "model", "frequency_penalty", "max_tokens", "presence_penalty", "response_format", "return_images", "return_related_questions", "search_domain_filter", "search_recency_filter", "stream", "temperature", "top_k", "top_p"]

    @field_validator('search_recency_filter')
    def search_recency_filter_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['month', 'week', 'day', 'hour']):
            raise ValueError("must be one of enum values ('month', 'week', 'day', 'hour')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "messages": [Message.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "model": obj.get("model"),
            "frequency_penalty": obj.get("frequency_penalty") if obj.get("frequency_penalty") is not None else 1,
            "max_tokens": obj.get("max_tokens"),
            "presence_penalty": obj.get("presence_penalty") if obj.get("presence_penalty") is not None else 0,
            "response_format": obj.get("response_format"),
            "return_images": obj.get("return_images") if obj.get("return_images") is not None else False,
            "return_related_questions": obj.get("return_related_questions") if obj.get("return_related_questions") is not None else False,
            "search_domain_filter": obj.get("search_domain_filter"),
            "search_recency_filter": obj.get("search_recency_filter"),
            "stream": obj.get("stream") if obj.get("stream") is not None else False,
            "temperature": obj.get("temperature") if obj.get("temperature") is not None else 0.2,
            "top_k": obj.get("top_k") if obj.get("top_k") is not None else 0,
            "top_p": obj.get("top_p") if obj.get("top_p") is not None else 0.9
        })
        return _obj


