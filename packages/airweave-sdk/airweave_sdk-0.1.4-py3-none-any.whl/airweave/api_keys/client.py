# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.api_key import ApiKey
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
import datetime as dt
from ..types.api_key_with_plain_key import ApiKeyWithPlainKey
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ApiKeysClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def read_api_keys(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ApiKey]:
        """
        Retrieve all API keys for the current user.

        Args:
        ----
            db (AsyncSession): The database session.
            skip (int): Number of records to skip for pagination.
            limit (int): Maximum number of records to return.
            user (schemas.User): The current user.

        Returns:
        -------
            List[schemas.APIKey]: A list of API keys.

        Parameters
        ----------
        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiKey]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.read_api_keys()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api_keys/",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ApiKey],
                    parse_obj_as(
                        type_=typing.List[ApiKey],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_api_key(
        self,
        *,
        expiration_date: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiKeyWithPlainKey:
        """
        Create a new API key for the current user.

        Returns a temporary plain key for the user to store securely.
        This is not stored in the database.

        Args:
        ----
            db (AsyncSession): The database session.
            api_key_in (schemas.APIKeyCreate): The API key creation data.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.APIKeyWithPlainKey: The created API key object, including the key.

        Parameters
        ----------
        expiration_date : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKeyWithPlainKey
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.create_api_key()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api_keys/",
            method="POST",
            json={
                "expiration_date": expiration_date,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiKeyWithPlainKey,
                    parse_obj_as(
                        type_=ApiKeyWithPlainKey,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_api_key(self, *, id: str, request_options: typing.Optional[RequestOptions] = None) -> ApiKey:
        """
        Delete an API key.

        Args:
        ----
            db (AsyncSession): The database session.
            id (UUID): The ID of the API key.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.APIKey: The revoked API key object.

        Raises:
        ------
            HTTPException: If the API key is not found.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.delete_api_key(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api_keys/",
            method="DELETE",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiKey,
                    parse_obj_as(
                        type_=ApiKey,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def read_api_key(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ApiKey:
        """
        Retrieve an API key by ID.

        Args:
        ----
            db (AsyncSession): The database session.
            id (UUID): The ID of the API key.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.APIKey: The API key object.

        Raises:
        ------
            HTTPException: If the API key is not found.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.read_api_key(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api_keys/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiKey,
                    parse_obj_as(
                        type_=ApiKey,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncApiKeysClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def read_api_keys(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ApiKey]:
        """
        Retrieve all API keys for the current user.

        Args:
        ----
            db (AsyncSession): The database session.
            skip (int): Number of records to skip for pagination.
            limit (int): Maximum number of records to return.
            user (schemas.User): The current user.

        Returns:
        -------
            List[schemas.APIKey]: A list of API keys.

        Parameters
        ----------
        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiKey]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.read_api_keys()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api_keys/",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ApiKey],
                    parse_obj_as(
                        type_=typing.List[ApiKey],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_api_key(
        self,
        *,
        expiration_date: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiKeyWithPlainKey:
        """
        Create a new API key for the current user.

        Returns a temporary plain key for the user to store securely.
        This is not stored in the database.

        Args:
        ----
            db (AsyncSession): The database session.
            api_key_in (schemas.APIKeyCreate): The API key creation data.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.APIKeyWithPlainKey: The created API key object, including the key.

        Parameters
        ----------
        expiration_date : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKeyWithPlainKey
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.create_api_key()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api_keys/",
            method="POST",
            json={
                "expiration_date": expiration_date,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiKeyWithPlainKey,
                    parse_obj_as(
                        type_=ApiKeyWithPlainKey,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_api_key(self, *, id: str, request_options: typing.Optional[RequestOptions] = None) -> ApiKey:
        """
        Delete an API key.

        Args:
        ----
            db (AsyncSession): The database session.
            id (UUID): The ID of the API key.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.APIKey: The revoked API key object.

        Raises:
        ------
            HTTPException: If the API key is not found.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.delete_api_key(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api_keys/",
            method="DELETE",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiKey,
                    parse_obj_as(
                        type_=ApiKey,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def read_api_key(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ApiKey:
        """
        Retrieve an API key by ID.

        Args:
        ----
            db (AsyncSession): The database session.
            id (UUID): The ID of the API key.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.APIKey: The API key object.

        Raises:
        ------
            HTTPException: If the API key is not found.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.read_api_key(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api_keys/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiKey,
                    parse_obj_as(
                        type_=ApiKey,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
