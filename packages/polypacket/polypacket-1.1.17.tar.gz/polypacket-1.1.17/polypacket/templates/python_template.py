"""
@file ${proto.fileName}.py
@brief Generated code for ${proto.name} packet service
@author Generated by PolyPacket v${version}
@date ${proto.genTime}
@hash ${proto.hash}
"""

from enum import IntEnum, IntFlag
from typing import Optional
from poly_packet import PolyPacket

# Service hash definition
${proto.namespace.upper()}_SERVICE_HASH = 0x${proto.hash}

###############################################################################
# Enums
###############################################################################
% for field in proto.fields:
% if field.isEnum:
class ${field.namespace}${field.name}(IntEnum):
    """Enums for ${field.name} field"""
    % for val in field.vals:
    % if val.val == None:
    ${val.name.upper()} = ${loop.index}  # ${val.desc}
    % else:
    ${val.name.upper()} = ${val.val}  # ${val.desc}
    % endif
    % endfor

% endif
% endfor

###############################################################################
# Bits/Flags
###############################################################################
% for field in proto.fields:
% if field.isMask:
class ${field.namespace}${field.name}(IntFlag):
    """Flags for ${field.name} field"""
    % for idx, val in enumerate(field.vals):
    ${val.name.upper()} = 1 << ${idx}  # ${val.desc}
    % endfor

% endif
% endfor

###############################################################################
# Packet Classes
###############################################################################
% for packet in proto.packets:
class ${packet.name}(PolyPacket):
    """
    ${packet.desc if hasattr(packet, 'desc') else packet.name + ' packet'}
    """
    def __init__(self):
        super().__init__("${packet.name}")
        % for field in packet.fields:
        % if field.isArray:
        % if field.cType == 'uint8_t':
        self.${field.name}: bytes | None = None
        % else:
        self.${field.name}: list[${field.pyType}] | None = None
        % endif
        % else:
        self.${field.name}: ${field.pyType} | None = None
        % endif
        % endfor

% endfor

###############################################################################
# Service Functions
###############################################################################
class ${proto.namespace}Service:
    """Service class for ${proto.name} protocol"""
    
    @staticmethod
    def init(interface_count: int, depth: int) -> None:
        """
        Initialize protocol service
        
        Args:
            interface_count: Number of interfaces to use
            depth: Spool size for each interface
        """
        # Implementation here
        pass
    
    @staticmethod
    def process() -> None:
        """Process data in buffers"""
        # Implementation here
        pass
    
    @staticmethod
    def feed(iface: int, data: bytes) -> None:
        """
        Feed bytes to service at given interface for processing
        
        Args:
            iface: Index of interface to send on
            data: Data to be processed
        """
        # Implementation here
        pass
    
    @staticmethod
    def send(iface: int, packet: PolyPacket) -> bool:
        """
        Send packet over given interface
        
        Args:
            iface: Index of interface to send on
            packet: Packet to be sent
            
        Returns:
            bool: True if send was successful
        """
        # Implementation here
        return True

    @staticmethod
    def handle_json(req: str) -> str:
        """
        Handle JSON message and shortcut the servicing process
        
        Args:
            req: Incoming JSON message string
            
        Returns:
            str: Response data
        """
        # Implementation here
        return ""