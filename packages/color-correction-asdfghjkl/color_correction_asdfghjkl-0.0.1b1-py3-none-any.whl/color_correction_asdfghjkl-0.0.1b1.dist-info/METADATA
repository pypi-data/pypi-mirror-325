Metadata-Version: 2.4
Name: color-correction-asdfghjkl
Version: 0.0.1b1
Summary: help to do color correction on images based on color checker card classic 24 patch.
Project-URL: Repository, https://github.com/agfianf/color-correction-asdfghjkl
Project-URL: Issues, https://github.com/agfianf/color-correction-asdfghjkl/issues
Author-email: magfianf <muhammadagfian96@gmail.com>
Keywords: color consistency,color correction,color-consistency,color-correction
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Typing :: Typed
Requires-Python: >=3.10
Requires-Dist: colour-science>=0.4.6
Requires-Dist: httpx>=0.28.1
Requires-Dist: matplotlib>=3.10.0
Requires-Dist: onnx>=1.17.0
Requires-Dist: onnxruntime>=1.20.1
Requires-Dist: opencv-python-headless>=4.11.0.86
Requires-Dist: pydantic-settings>=2.7.1
Requires-Dist: pydantic>=2.10.5
Requires-Dist: scikit-learn>=1.6.1
Requires-Dist: shapely>=2.0.6
Description-Content-Type: text/markdown


# üé® Color Correction

> **Note:** The "asdfghjkl" is just a placeholder due to some naming difficulties.

This package is designed to perform color correction on images using the Color Checker Classic 24 Patch card. It provides a robust solution for ensuring accurate color representation in your images.

## üì¶ Installation

```bash
pip install color-correction-asdfghjkl
```

## üèãÔ∏è‚Äç‚ôÄÔ∏è How it works
![How it works](assets/color-correction-how-it-works.png)


## ‚ö° How to use

```python
# Step 1: Define the path to the input image
image_path = "asset/images/cc-19.png"

# Step 2: Load the input image
input_image = cv2.imread(image_path)

# Step 3: Initialize the color correction model with specified parameters
color_corrector = ColorCorrection(
    detection_model="yolov8",
    detection_conf_th=0.25,
    correction_model="polynomial", # "least_squares", "affine_reg", "linear_reg"
    degree=3,  # for polynomial correction model
    use_gpu=True,
)

# Step 4: Extract color patches from the input image
# you can set reference patches from another image (image has color checker card)
# or use the default D50
# color_corrector.set_reference_patches(image=None, debug=True)
color_corrector.set_input_patches(image=input_image, debug=True)
color_corrector.fit()
corrected_image = color_corrector.predict(
    input_image=input_image,
    debug=True,
    debug_output_dir="zzz",
)

# Step 5: Evaluate the color correction results
eval_result = color_corrector.calc_color_diff_patches()
print(eval_result)
```
- Output evaluation result:
    ```json
    {
        "initial": {
            "min": 2.254003059526461,
            "max": 13.461066402633447,
            "mean": 8.3072755187654,
            "std": 3.123962754767539,
        },
        "corrected": {
            "min": 0.30910031798755183,
            "max": 5.422311999126372,
            "mean": 1.4965478752947827,
            "std": 1.2915738724958112,
        },
        "delta": {
            "min": 1.9449027415389093,
            "max": 8.038754403507074,
            "mean": 6.810727643470616,
            "std": 1.8323888822717276,
        },
    }
    ```
- Sample output debug image (polynomial degree=2):
    ![Sample Output](assets/sample-output-debug.jpg)

## üìà Benefits
- **Consistency**: Ensure uniform color correction across multiple images.
- **Accuracy**: Leverage the color correction matrix for precise color adjustments.
- **Flexibility**: Adaptable for various image sets with different color profiles.


## ü§∏ TODO
- [ ] Add Loggers
- [ ] Add detection MCC:CCheckerDetector from opencv
- [ ] Add Segmentation Color Checker using YOLOv11 ONNX
- [ ] Improve validation preprocessing (e.g., auto-match-orientation CC)
- [ ] Add more analysis and evaluation metrics (Still thinking...)

<!-- write reference -->
## üìö References
- [Color Checker Classic 24 Patch Card](https://www.xrite.com/categories/calibration-profiling/colorchecker-classic)
- [Color Correction Tool ML](https://github.com/collinswakholi/ML_ColorCorrection_tool/tree/Pip_package)
- [Colour Science Python](https://www.colour-science.org/colour-checker-detection/)
- [Fast and Robust Multiple ColorChecker Detection ()](https://github.com/pedrodiamel/colorchecker-detection)
- [Automatic color correction with OpenCV and Python (PyImageSearch)](https://pyimagesearch.com/2021/02/15/automatic-color-correction-with-opencv-and-python/)
- [ONNX-YOLOv8-Object-Detection](https://github.com/ibaiGorordo/ONNX-YOLOv8-Object-Detection)
- [yolov8-triton](https://github.com/omarabid59/yolov8-triton/tree/main)
- [Streamlined Data Science Development: Organizing, Developing and Documenting Your Code](https://medium.com/henkel-data-and-analytics/streamlined-data-science-development-organizing-developing-and-documenting-your-code-bfd69e3ef4fb)
