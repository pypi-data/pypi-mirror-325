# -*- coding: utf-8 -*-
# ------------------------------------------------------------------------------
#
#   Copyright 2023 {{author}}
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol `{{protocol_name}}`."""

import sys
from abc import ABC
from typing import Optional, Any
from aea.skills.behaviours import FSMBehaviour, State
from enum import Enum

# Define states
{% for state in states %}
class {{ state }}(State):
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._is_done = False  # Initially, the state is not done

    def act(self) -> None:
        print("{{ state }}: Performing action")
        self._is_done = True
        self._event = {{class_name}}Events.DONE

    def is_done(self) -> bool:
        return self._is_done

    @property
    def event(self) -> Optional[str]:
        return self._event

{% endfor %}


class {{class_name}}Events(Enum):
    {%for event in events %}
    {{event}} = '{{event}}'{% endfor %}


class {{class_name}}FsmBehaviour(FSMBehaviour):
    """This class implements a simple Finite State Machine behaviour."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.register_state('{{default_start_state.lower()}}', {{default_start_state}}(**kwargs), True)
        {% for state in final_states%}
        self.register_state('{{state.lower()}}', {{state}}(**kwargs)){% endfor %}
        {% if remaining_states %}
        {% for state in remaining_states%}
        self.register_state('{{state.lower()}}', {{state}}(**kwargs)) {% endfor %}{% endif %}
        {% for transition in transitions%}
        self.register_transition(
            source='{{transition.source.lower()}}', 
            event={{class_name}}Events.{{transition.event}},
            destination='{{transition.destination.lower()}}'
        ){% endfor %}


    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up {{class_name}} FSM behaviour.")


    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down {{class_name}} FSM behaviour.")

    def act(self) -> None:
        """Implement the act."""
        super().act()
        if self.current is None:
            self.context.logger.info("No state to act on.")
            self.terminate()

    def terminate(self) -> None:
        """Implement the termination."""
        print("Terminating the agent.")
        sys.exit(0)