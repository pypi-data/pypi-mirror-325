# ruff: noqa: D102

"""[tauri::webview](https://docs.rs/tauri/latest/tauri/webview/index.html)"""

from typing import (
    TYPE_CHECKING,
    Optional,
    final,
)

from pytauri.ffi._ext_mod import pytauri_mod

__all__ = ["Webview", "WebviewWindow"]

_webview_mod = pytauri_mod.webview

if TYPE_CHECKING:

    @final
    class WebviewWindow:
        """[tauri::webview::WebviewWindow](https://docs.rs/tauri/latest/tauri/webview/struct.WebviewWindow.html)"""

        def label(self) -> str: ...

        def is_fullscreen(self) -> bool: ...

        def is_minimized(self) -> bool: ...

        def is_maximized(self) -> bool: ...

        def is_focused(self) -> bool: ...

        def is_decorated(self) -> bool: ...

        def is_resizable(self) -> bool: ...

        def is_enabled(self) -> bool: ...

        def is_maximizable(self) -> bool: ...

        def is_minimizable(self) -> bool: ...

        def is_closable(self) -> bool: ...

        def is_visible(self) -> bool: ...

        def title(self) -> str: ...

        def center(self) -> None: ...

        def set_resizable(self, resizable: bool, /) -> None: ...

        def set_enabled(self, enabled: bool, /) -> None: ...

        def set_maximizable(self, maximizable: bool, /) -> None: ...

        def set_minimizable(self, minimizable: bool, /) -> None: ...

        def set_closable(self, closable: bool, /) -> None: ...

        def set_title(self, title: str, /) -> None: ...

        def maximize(self) -> None: ...

        def unmaximize(self) -> None: ...

        def minimize(self) -> None: ...

        def unminimize(self) -> None: ...

        def show(self) -> None: ...

        def hide(self) -> None: ...

        def close(self) -> None: ...

        def destroy(self) -> None: ...

        def set_decorations(self, decorations: bool, /) -> None: ...

        def set_shadow(self, shadow: bool, /) -> None: ...

        def set_always_on_bottom(self, always_on_bottom: bool, /) -> None: ...

        def set_always_on_top(self, always_on_top: bool, /) -> None: ...

        def set_visible_on_all_workspaces(
            self, visible_on_all_workspaces: bool, /
        ) -> None: ...

        def set_content_protected(self, protected: bool, /) -> None: ...

        def set_fullscreen(self, fullscreen: bool, /) -> None: ...

        def set_focus(self) -> None: ...

        def set_skip_taskbar(self, skip: bool, /) -> None: ...

        def set_cursor_grab(self, grab: bool, /) -> None: ...

        def set_cursor_visible(self, visible: bool, /) -> None: ...

        def set_ignore_cursor_events(self, ignore: bool, /) -> None: ...

        def start_dragging(self) -> None: ...

        def set_badge_count(self, count: Optional[int], /) -> None: ...

        def print(self) -> None: ...

        def url(self) -> str: ...

        def eval(self, js: str, /) -> None: ...

        def set_zoom(self, scale_factor: float, /) -> None: ...

        def clear_all_browsing_data(self) -> None: ...

        def as_ref_webview(self) -> "Webview": ...

    @final
    class Webview:
        """[tauri::webview::Webview](https://docs.rs/tauri/latest/tauri/webview/struct.Webview.html)"""

        ...

else:
    WebviewWindow = _webview_mod.WebviewWindow
    Webview = _webview_mod.Webview
