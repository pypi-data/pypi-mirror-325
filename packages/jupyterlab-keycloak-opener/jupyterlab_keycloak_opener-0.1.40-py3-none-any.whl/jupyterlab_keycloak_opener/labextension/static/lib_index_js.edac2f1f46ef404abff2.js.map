{"version":3,"file":"lib_index_js.edac2f1f46ef404abff2.js","mappings":"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","sources":["webpack://jupyterlab-keycloak-opener/./src/handler.ts","webpack://jupyterlab-keycloak-opener/./src/index.ts"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  init: RequestInit = {}\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    'jupyterlab-keycloak-opener', // API Namespace\n    endPoint\n  );\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error as any);\n  }\n\n  let data: any = await response.text();\n\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data.message || data);\n  }\n\n  return data;\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { usersIcon } from '@jupyterlab/ui-components';\n\nimport { requestAPI } from './handler';\n\nconst PALETTE_CATEGORY = 'Admin tools';\nnamespace CommandIDs {\n  export const createNew = 'jupyterlab-keycloak-opener:open-keycloak-console';\n}\n\n/**\n * Initialization data for the jupyterlab-keycloak-opener extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-keycloak-opener:plugin',\n  description: 'A JupyterLab extension.',\n  autoStart: true,\n  optional: [ILauncher, ICommandPalette],\n  activate: (app: JupyterFrontEnd,\n    launcher: ILauncher | null,\n    palette: ICommandPalette | null\n  ) => {\n    console.log('JupyterLab extension jupyterlab-keycloak-opener is activated!');\n\n    let idpserver: string = '';\n    requestAPI<any>('idpserver')\n      .then(data => {\n        idpserver = (data.hasOwnProperty('data')) ? data.data : '';\n      })\n      .catch(reason => {\n        console.error(\n          `The jupyterlab_keycloak_opener server extension appears to be missing.\\n${reason}`\n        );\n      });\n\n    const { commands } = app;\n    const command = CommandIDs.createNew;\n\n    commands.addCommand(command, {\n      label: 'Users',\n      caption: 'Users',\n      icon: args => (args['isPalette'] ? undefined : usersIcon),\n      execute: async args => {\n        window.open(\n          idpserver,\n          '_blank',\n          'noreferrer'\n        );\n      }\n    });\n\n    if (launcher) {\n      launcher.add({\n        command,\n        category: 'Admin tools',\n        rank: 1\n      });\n    }\n\n    if (palette) {\n      palette.addItem({\n        command,\n        args: { isPalette: true },\n        category: PALETTE_CATEGORY\n      });\n    }\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}