# coding: utf-8

"""
    Boltzbit API

    Definitions for Boltzbit's product API's

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from bzapi.models.database_record_fields_value import DatabaseRecordFieldsValue
from typing import Optional, Set
from typing_extensions import Self

class DatabaseRecord(BaseModel):
    """
    DatabaseRecord
    """ # noqa: E501
    id: StrictInt
    database_id: Optional[StrictStr] = Field(default=None, alias="databaseId")
    db_table_name: StrictStr = Field(alias="dbTableName")
    created_at: datetime = Field(alias="createdAt")
    created_by: StrictStr = Field(alias="createdBy")
    updated_at: datetime = Field(alias="updatedAt")
    extraction_job_id: Optional[StrictStr] = Field(default=None, alias="extractionJobId")
    fields: Dict[str, DatabaseRecordFieldsValue]
    __properties: ClassVar[List[str]] = ["id", "databaseId", "dbTableName", "createdAt", "createdBy", "updatedAt", "extractionJobId", "fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in fields (dict)
        _field_dict = {}
        if self.fields:
            for _key_fields in self.fields:
                if self.fields[_key_fields]:
                    _field_dict[_key_fields] = self.fields[_key_fields].to_dict()
            _dict['fields'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "databaseId": obj.get("databaseId"),
            "dbTableName": obj.get("dbTableName"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "updatedAt": obj.get("updatedAt"),
            "extractionJobId": obj.get("extractionJobId"),
            "fields": dict(
                (_k, DatabaseRecordFieldsValue.from_dict(_v))
                for _k, _v in obj["fields"].items()
            )
            if obj.get("fields") is not None
            else None
        })
        return _obj


