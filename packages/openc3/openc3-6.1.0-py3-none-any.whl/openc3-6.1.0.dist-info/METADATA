Metadata-Version: 2.3
Name: openc3
Version: 6.1.0
Summary: Python support for OpenC3 COSMOS
Author: Support
Author-email: support@openc3.com
Requires-Python: >=3.10,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: boto3 (>=1.28.34,<2.0.0)
Requires-Dist: cbor2 (>=5.4.6,<6.0.0)
Requires-Dist: certifi (>=2023.7.22,<2025.0.0)
Requires-Dist: chardet (>=5.1.0,<6.0.0)
Requires-Dist: hiredis (==2.2.3)
Requires-Dist: idna (>=3.7,<4.0)
Requires-Dist: jsonpath-ng (>=1.6.0,<2.0.0)
Requires-Dist: lxml (>=5.3.0,<6.0.0)
Requires-Dist: redis[hiredis] (==4.6.0)
Requires-Dist: requests (>=2.32.3,<3.0.0)
Requires-Dist: schedule (>=1.2.0,<2.0.0)
Requires-Dist: websockets (>=11.0.3,<12.0.0)
Description-Content-Type: text/markdown

## Python support for OpenC3 COSMOS v5

---

This project allows accessing the COSMOS v5 API from the python programming language.
Additional functionality and support will be added over time.

---

[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

## Installation:

```
pip install openc3
```

See the docs, examples for usage

## Create a Virtual Python Environment

`cd` to your project directory and run `virtualenv` to create the new virtual environment.

The following commands will create a new virtual environment under `openc3/venv`.

```
cd openc3
py -m pip install venv
py -m venv venv
```

### Activate the Environment

Now that we have a virtual environment, we need to activate it.

```
.\venv\Scripts\activate
```

After you activate the environment, your command prompt will be modified to reflect the change.

### Development requirements-dev.txt

Although requests is required, when doing development work it is helpful to test with pytest, use black, and coverage. These can be found in `requirements-dev.txt`

```
> py -m pip install -r requirements-dev.txt
```

### Add Libraries and Create a requirements.txt File

After you activate the virtual environment, you can add packages to it using `pip`. You can also create a description of your dependencies using `pip`.

The following command creates a file called `requirements.txt` that enumerates the installed packages.

```
py -m pip freeze > requirements.txt
```

This file can then be used by collaborators to update virtual environments using the following command.

```
py -m pip install -r requirements.txt
```

### Deactivate the Environment

To return to normal system settings, use the deactivate command.

```
deactivate
```

After you issue this command, youâ€™ll notice that the command prompt returns to normal.

