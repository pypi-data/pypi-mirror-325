[build-system]
requires = [
    "setuptools >= 64",
    "setuptools-scm[toml] >= 8"
]
build-backend = "setuptools.build_meta"

[project]
name = "pyblackjack"
authors = [
    { name = "Jonathan Goble", email = "jcgoble3@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Games/Entertainment",
]
description = "Simple terminal-based blackjack game"
keywords = [
    "game",
    "blackjack",
]
requires-python = ">=3.10"
dynamic = [
    "version",
    "dependencies",
]

[project.license]
text = "MIT license"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Home = "https://gitlab.com/jgoble/blackjack"

[project.scripts]
blackjack = "pyblackjack.controller:entrypoint"

[tool.setuptools]
include-package-data = false

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[tool.setuptools.packages.find]
where = [
    "src",
]
namespaces = false

[tool.setuptools_scm]
version_file = "src/pyblackjack/__version__.py"

[tool.pytest.ini_options]
addopts = "--cov --color=yes -rX --cov-report term-missing --cov-report html --cov-report xml"

[tool.coverage.run]
source = [
    "src/",
]
omit = [
    "src/pyblackjack/__version__.py",
    "src/pyblackjack/__main__.py",
]
branch = true

[tool.coverage.report]
precision = 2

[tool.mypy]
exclude = [
    "src/pyblackjack/__version__.py",
]

[[tool.mypy.overrides]]
module = "pyblackjack.__version__"
ignore_missing_imports = true

[tool.pylint.main]
ignore = [
    "__version__.py",
]

# Minimum Python version to use for version dependent checks. Will default to the
# version used to run pylint.
py-version = "3.10"

[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"

# Naming style matching correct attribute names.
attr-naming-style = "snake_case"

# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"

# Naming style matching correct class constant names.
class-const-naming-style = "UPPER_CASE"

# Naming style matching correct class names.
class-naming-style = "PascalCase"

# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"

# Naming style matching correct function names.
function-naming-style = "snake_case"

# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "e", "_"]

# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"

# Naming style matching correct method names.
method-naming-style = "snake_case"

# Naming style matching correct module names.
module-naming-style = "snake_case"

# Naming style matching correct variable names.
variable-naming-style = "snake_case"

[tool.pylint.classes]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 5

# Maximum number of attributes for a class (see R0902).
max-attributes = 7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5

# Maximum number of branch for function / method body.
max-branches = 12

# Maximum number of locals for function / method body.
max-locals = 15

# Maximum number of parents for a class (see R0901).
max-parents = 7

# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

# Maximum number of return / yield for function / method body.
max-returns = 6

# Maximum number of statements in function / method body.
max-statements = 50

# Minimum number of public methods for a class (see R0903).
min-public-methods = 2

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format = "LF"

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string = "    "

# Maximum number of characters on a single line.
max-line-length = 100

# Maximum number of lines in a module.
max-module-lines = 1000

[tool.pylint."messages control"]
# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "missing-function-docstring",
    "missing-module-docstring",
    "missing-class-docstring",
    "invalid-name",
    "no-else-return",
]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where it
# should appear only once). See also the "--disable" option for examples.
enable = [
    "c-extension-no-member",
]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

# Regular expression of note tags to take in consideration.
# notes-rgx =

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

# Complete name of functions that never returns. When checking for inconsistent-
# return-statements if a never returning function is called then it will be
# considered as an explicit return statement and no message will be printed.
never-returning-functions = [
    "sys.exit",
    "argparse.parse_error",
    "unreachable",
]

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format = "colorized"

# Activate the evaluation score.
score = true

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true

# Docstrings are removed from the similarity computation
ignore-docstrings = true

# Imports are removed from the similarity computation
ignore-imports = true

# Signatures are removed from the similarity computation
ignore-signatures = true

# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.string]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency = true

# This flag controls whether the implicit-str-concat should generate a warning on
# implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps = true

[tool.pylint.variables]
allowed-redefined-builtins = [
    "min",
    "max",
]

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = true

# A regular expression matching the name of dummy variables (i.e. expected to not
# be used).
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"

# Argument names that match this expression will be ignored. Default to name with
# leading underscore.
ignored-argument-names = "_.*|^ignored_|^unused_"

# Tells whether we should check for unused import in __init__ files.
init-import = false
