# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from acre_api.models.cdm_add_case_document_response import CdmAddCaseDocumentResponse
from acre_api.models.cdm_create_document_verification_response import CdmCreateDocumentVerificationResponse
from acre_api.models.cdm_delete_case_document_response import CdmDeleteCaseDocumentResponse
from acre_api.models.cdm_delete_document_response import CdmDeleteDocumentResponse
from acre_api.models.cdm_get_document_response import CdmGetDocumentResponse
from acre_api.models.cdm_get_document_summaries_response import CdmGetDocumentSummariesResponse
from acre_api.models.cdm_get_document_verification_response import CdmGetDocumentVerificationResponse
from acre_api.models.cdm_render_template_request import CdmRenderTemplateRequest
from acre_api.models.cdm_render_template_response import CdmRenderTemplateResponse
from acre_api.models.cdm_replace_document_response import CdmReplaceDocumentResponse
from acre_api.models.cdm_template_context_request import CdmTemplateContextRequest
from acre_api.models.cdm_template_context_response import CdmTemplateContextResponse
from acre_api.models.cdm_test_render_template_request import CdmTestRenderTemplateRequest
from acre_api.models.cdm_test_render_template_response import CdmTestRenderTemplateResponse
from acre_api.models.cdm_update_document_response import CdmUpdateDocumentResponse
from acre_api.models.cdm_upload_document_request import CdmUploadDocumentRequest
from acre_api.models.cdm_upload_document_response import CdmUploadDocumentResponse
from acre_api.models.complete_details_of_the_document_to_be_replaced_required import CompleteDetailsOfTheDocumentToBeReplacedRequired
from acre_api.models.partial_details_of_the_document_to_be_patched_required import PartialDetailsOfTheDocumentToBePatchedRequired
from acre_api.models.srv_acre_processor_add_case_document_body import SrvAcreProcessorAddCaseDocumentBody
from acre_api.models.srv_acre_processor_create_document_verification_body import SrvAcreProcessorCreateDocumentVerificationBody

from acre_api.api_client import ApiClient, RequestSerialized
from acre_api.api_response import ApiResponse
from acre_api.rest import RESTResponseType


class DocumentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_case_document(
        self,
        document_id: Annotated[StrictStr, Field(description="ID of the document to be added to the case. Required.")],
        body: SrvAcreProcessorAddCaseDocumentBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmAddCaseDocumentResponse:
        """Add a document to an existing case.


        :param document_id: ID of the document to be added to the case. Required. (required)
        :type document_id: str
        :param body: (required)
        :type body: SrvAcreProcessorAddCaseDocumentBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_case_document_serialize(
            document_id=document_id,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmAddCaseDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_case_document_with_http_info(
        self,
        document_id: Annotated[StrictStr, Field(description="ID of the document to be added to the case. Required.")],
        body: SrvAcreProcessorAddCaseDocumentBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmAddCaseDocumentResponse]:
        """Add a document to an existing case.


        :param document_id: ID of the document to be added to the case. Required. (required)
        :type document_id: str
        :param body: (required)
        :type body: SrvAcreProcessorAddCaseDocumentBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_case_document_serialize(
            document_id=document_id,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmAddCaseDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_case_document_without_preload_content(
        self,
        document_id: Annotated[StrictStr, Field(description="ID of the document to be added to the case. Required.")],
        body: SrvAcreProcessorAddCaseDocumentBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add a document to an existing case.


        :param document_id: ID of the document to be added to the case. Required. (required)
        :type document_id: str
        :param body: (required)
        :type body: SrvAcreProcessorAddCaseDocumentBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_case_document_serialize(
            document_id=document_id,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmAddCaseDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_case_document_serialize(
        self,
        document_id,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if document_id is not None:
            _path_params['document_id'] = document_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/acre/document/{document_id}/case',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_document_verification(
        self,
        document_id: Annotated[StrictStr, Field(description="UUID of the document being verified. Required.")],
        body: SrvAcreProcessorCreateDocumentVerificationBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmCreateDocumentVerificationResponse:
        """Create a document verification.


        :param document_id: UUID of the document being verified. Required. (required)
        :type document_id: str
        :param body: (required)
        :type body: SrvAcreProcessorCreateDocumentVerificationBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_document_verification_serialize(
            document_id=document_id,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmCreateDocumentVerificationResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_document_verification_with_http_info(
        self,
        document_id: Annotated[StrictStr, Field(description="UUID of the document being verified. Required.")],
        body: SrvAcreProcessorCreateDocumentVerificationBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmCreateDocumentVerificationResponse]:
        """Create a document verification.


        :param document_id: UUID of the document being verified. Required. (required)
        :type document_id: str
        :param body: (required)
        :type body: SrvAcreProcessorCreateDocumentVerificationBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_document_verification_serialize(
            document_id=document_id,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmCreateDocumentVerificationResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_document_verification_without_preload_content(
        self,
        document_id: Annotated[StrictStr, Field(description="UUID of the document being verified. Required.")],
        body: SrvAcreProcessorCreateDocumentVerificationBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a document verification.


        :param document_id: UUID of the document being verified. Required. (required)
        :type document_id: str
        :param body: (required)
        :type body: SrvAcreProcessorCreateDocumentVerificationBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_document_verification_serialize(
            document_id=document_id,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmCreateDocumentVerificationResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_document_verification_serialize(
        self,
        document_id,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if document_id is not None:
            _path_params['document_id'] = document_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/acre/document/{document_id}/verification',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_case_document(
        self,
        document_id: Annotated[StrictStr, Field(description="ID of the document to remove. Required.")],
        case_id: Annotated[StrictStr, Field(description="Case to remove the document. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmDeleteCaseDocumentResponse:
        """Delete (DELETE) document from an existing case.


        :param document_id: ID of the document to remove. Required. (required)
        :type document_id: str
        :param case_id: Case to remove the document. Required. (required)
        :type case_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_case_document_serialize(
            document_id=document_id,
            case_id=case_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmDeleteCaseDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_case_document_with_http_info(
        self,
        document_id: Annotated[StrictStr, Field(description="ID of the document to remove. Required.")],
        case_id: Annotated[StrictStr, Field(description="Case to remove the document. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmDeleteCaseDocumentResponse]:
        """Delete (DELETE) document from an existing case.


        :param document_id: ID of the document to remove. Required. (required)
        :type document_id: str
        :param case_id: Case to remove the document. Required. (required)
        :type case_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_case_document_serialize(
            document_id=document_id,
            case_id=case_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmDeleteCaseDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_case_document_without_preload_content(
        self,
        document_id: Annotated[StrictStr, Field(description="ID of the document to remove. Required.")],
        case_id: Annotated[StrictStr, Field(description="Case to remove the document. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete (DELETE) document from an existing case.


        :param document_id: ID of the document to remove. Required. (required)
        :type document_id: str
        :param case_id: Case to remove the document. Required. (required)
        :type case_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_case_document_serialize(
            document_id=document_id,
            case_id=case_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmDeleteCaseDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_case_document_serialize(
        self,
        document_id,
        case_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if document_id is not None:
            _path_params['document_id'] = document_id
        if case_id is not None:
            _path_params['case_id'] = case_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/acre/document/{document_id}/case/{case_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_document(
        self,
        document_id: Annotated[StrictStr, Field(description="ID of the document to remove. Required.")],
        delete_reason: Annotated[Optional[StrictStr], Field(description="Reason for deleting the document. Required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmDeleteDocumentResponse:
        """Delete (DELETE) document.


        :param document_id: ID of the document to remove. Required. (required)
        :type document_id: str
        :param delete_reason: Reason for deleting the document. Required.
        :type delete_reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_document_serialize(
            document_id=document_id,
            delete_reason=delete_reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmDeleteDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_document_with_http_info(
        self,
        document_id: Annotated[StrictStr, Field(description="ID of the document to remove. Required.")],
        delete_reason: Annotated[Optional[StrictStr], Field(description="Reason for deleting the document. Required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmDeleteDocumentResponse]:
        """Delete (DELETE) document.


        :param document_id: ID of the document to remove. Required. (required)
        :type document_id: str
        :param delete_reason: Reason for deleting the document. Required.
        :type delete_reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_document_serialize(
            document_id=document_id,
            delete_reason=delete_reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmDeleteDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_document_without_preload_content(
        self,
        document_id: Annotated[StrictStr, Field(description="ID of the document to remove. Required.")],
        delete_reason: Annotated[Optional[StrictStr], Field(description="Reason for deleting the document. Required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete (DELETE) document.


        :param document_id: ID of the document to remove. Required. (required)
        :type document_id: str
        :param delete_reason: Reason for deleting the document. Required.
        :type delete_reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_document_serialize(
            document_id=document_id,
            delete_reason=delete_reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmDeleteDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_document_serialize(
        self,
        document_id,
        delete_reason,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if document_id is not None:
            _path_params['document_id'] = document_id
        # process the query parameters
        if delete_reason is not None:
            
            _query_params.append(('delete_reason', delete_reason))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/acre/document/{document_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_document(
        self,
        document_document_id: Annotated[StrictStr, Field(description="Requested document ID. Required.")],
        document_details: Annotated[Optional[StrictBool], Field(description="Return the entire document details. By default this value is false, and only the IDs are returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmGetDocumentResponse:
        """Get a document.


        :param document_document_id: Requested document ID. Required. (required)
        :type document_document_id: str
        :param document_details: Return the entire document details. By default this value is false, and only the IDs are returned.
        :type document_details: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_serialize(
            document_document_id=document_document_id,
            document_details=document_details,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_document_with_http_info(
        self,
        document_document_id: Annotated[StrictStr, Field(description="Requested document ID. Required.")],
        document_details: Annotated[Optional[StrictBool], Field(description="Return the entire document details. By default this value is false, and only the IDs are returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmGetDocumentResponse]:
        """Get a document.


        :param document_document_id: Requested document ID. Required. (required)
        :type document_document_id: str
        :param document_details: Return the entire document details. By default this value is false, and only the IDs are returned.
        :type document_details: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_serialize(
            document_document_id=document_document_id,
            document_details=document_details,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_document_without_preload_content(
        self,
        document_document_id: Annotated[StrictStr, Field(description="Requested document ID. Required.")],
        document_details: Annotated[Optional[StrictBool], Field(description="Return the entire document details. By default this value is false, and only the IDs are returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a document.


        :param document_document_id: Requested document ID. Required. (required)
        :type document_document_id: str
        :param document_details: Return the entire document details. By default this value is false, and only the IDs are returned.
        :type document_details: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_serialize(
            document_document_id=document_document_id,
            document_details=document_details,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_document_serialize(
        self,
        document_document_id,
        document_details,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if document_document_id is not None:
            _path_params['document.document_id'] = document_document_id
        # process the query parameters
        if document_details is not None:
            
            _query_params.append(('document_details', document_details))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/acre/document/{document.document_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_document_summaries(
        self,
        filter_owning_client_id: Annotated[Optional[StrictStr], Field(description="Return document summaries for all documents with the specified `owning_client_id`. Incompatible with `filter_case_id`. One of `filter_owning_client_id` and `filter_case_id` is required.")] = None,
        filter_case_id: Annotated[Optional[StrictStr], Field(description="Return document summaries for all documents associated with a case. Incompatible with `filter_owning_client_id`. One of `filter_owning_client_id` and `filter_case_id` is required.")] = None,
        filter_archived: Annotated[Optional[StrictBool], Field(description="Return only document summaries for archived/non-archived documents. Compatible with one of `filter_owning_client_id` or `filter_case_id`.")] = None,
        document_types: Annotated[Optional[List[StrictStr]], Field(description="Return only document summaries with any of the provided types. If provided, either filter_owning_client_id or filter_case_id must also be supplied.   - INVALID_DOCUMENT_TYPE: Invalid document type.  - TEMPLATE: Template document type.  - PAYSLIP: Account statement document type. *DEPRECATED*: This is replaced by BANK_STATEMENT and will be removed in a later PR. ACRE-1022. ACCOUNT_STATEMENT = 2; Payslip document type.  - INVESTMENT_STATEMENT: Investment statement document type.  - P60: P60 document type.  - SA302: SA302 document type.  - COMPANY_ACCOUNTS: Company accounts document type.  - BIRTH_CERTIFICATE: Birth certificate document type.  - PASSPORT: Passport document type.  - UTILITY_BILL: Utility bill document type.  - LETTER_OF_GIFT: Letter of gift document type.  - TEMPLATE_COMPLIANCE_EMAIL: Drivers license. DRIVERS_LICENSE = 12; // Disabled. See DRIVERS_LICENSE_{FRONT,BACK} below. Template compliance E-mail.  - OFFER_LETTER: Offer letter.  - LIVE_PHOTO: Live photo.  - NATIONAL_IDENTITY_CARD: National identity card. Deprecated. See NATIONAL_IDENTITY_CARD_{FRONT,BACK} below.  - DRIVERS_LICENSE_FRONT: Drivers license (front).  - DRIVERS_LICENSE_BACK: Drivers license (back).  - AGREEMENT_IN_PRINCIPLE: Agreement in principle.  - POLICY_LETTER: Policy letter.  - INSURANCE_ILLUSTRATION: Insurance illustration.  - INSURANCE_KEY_FACTS: Insurance key facts.  - THIRD_PARTY_PRIVACY_NOTICE: Thirdparty privacy notice.  - INTERNAL: Internal.  - OTHER: Other  - MORTGAGE_STATEMENT: Mortgage statement.  - MORTGAGE_APPLICATION: Mortgage application.  - PENSION_STATEMENT: Pension statement.  - BANK_STATEMENT: Bank statement.  - APPLICATION_LETTER: Application letter.  - INSURANCE_APPLICATION: Insurance application.  - DEBT_CONSOLIDATION_COMPARISON_FORM: Debt consolidation comparison form.  - DEBT_CONSOLIDATION_SUPPLEMENT: Debt consolidation supplement.  - IMPORTED_IDD: Imported IDD document. Requires acre/case_import permission to be able to upload.  - IMPORTED_ESIS: Imported ESIS document. Requires acre/case_import permission to be able to upload.  - IMPORTED_SUITABILITY_REPORT: Imported suitability report. Requires acre/case_import permission to be able to upload.  - PROPERTY_TITLE: Property title from Land Registry.  - PROPERTY_TITLE_PLAN: Title plan from Land Registry.  - AFFORDABILITY_SCREENSHOT: Affordability calculator screenshot.  - CREDIT_REPORT: Credit Report.  - ANNUAL_MORTGAGE_STATEMENT: Acre Annual Mortgage Statement.  - EXTERNAL_EVIDENCE_OF_RESEARCH: External Evidence Of Research.  - DIRECT_DEBIT_MANDATE: Direct debit mandate.  - LEGAL_CHARGE: Legal charge.  - INCOME_DECLARATION: Income declaration.  - CREDIT_SEARCH: Credit search.  - VALUATION: Valuation.  - MORTGAGE_QUESTIONNAIRE: Mortgage questionnaire.  - CONSENT: Consent.  - DEED_OF_POSTPONEMENT: Deed of postponement.  - REDEMPTION_FIGURE: Redemption figure.  - BTL_PORTFOLIO: BTL portfolio.  - LENDING_INTO_RETIREMENT_DECLARATION: Lending into retirement declaration.  - OCCUPIERS_CONSENT_FORM: Occupiers consent form.  - INDEPENDENT_LEGAL_ADVICE_FORM: Independent legal advice form.  - PURPOSE_OF_LOAN_DECLARATION: Purpose of loan declaration.  - INTEREST_ONLY_DECLARATION: Interest only declaration.  - LIMITED_COMPANY_ACCOUNTS: Limited company accounts.  - MANAGEMENT_ACCOUNTS: Management accounts.  - EMPLOYMENT_CONTRACT: Employment contract.  - AFFORDABILITY_CALCULATOR: Affordability calculator.  - LOAN_SETTLEMENT_FIGURE: Loan settlement figure.  - CREDIT_CARD_STATEMENT: Credit card statement.  - LETTER_OF_EXPLANATION: Letter of explanation.  - PROPERTY_LEASE: Property lease.  - GROUND_RENT_SERVICE_CHARGE_CONFIRMATION: Ground rent / Service charge confirmation.  - STATEMENT_OF_NEEDS: Statement of needs.  - LAST_WILL_AND_TESTAMENT: Last will and testament.  - DECLARATION_OF_TRUST: Declaration of trust.  - SURVEY_REPORT: Survey report.  - POWER_OF_ATTORNEY: Power of attorney.  - EPC_REPORT: Energy Performance Certificate (EPC).  - VISA: Visa / Indefinite leave to remain.  - TAX_YEAR_OVERVIEW: Tax year overview.  - PROOF_OF_DEPOSIT: Proof of deposit.  - LENDER_ESIS: ESIS generated by Lender.  - MEMORANDUM_OF_SALE: Memorandum of sale.  - CALL_RECORDING: Call recording.  - NATIONAL_IDENTITY_CARD_FRONT: National identity card (front).  - NATIONAL_IDENTITY_CARD_BACK: National identity card (back).  - COST_OF_MOVE: Cost of move.  - BUDGET_STRESS_TEST: Budget stress test.  - WELLBEING_ASSESSMENT: Wellbeing assessment.  - INSURANCE_DECLARATION: Insurance declaration.  - BENEFIT_REPORT: Benefit report.  - RISK_INFORMATION_PACK: Risk information pack.  - EQUITY_RELEASE_FACT_FIND: Equity release fact find.  - WITNESS_DECLARATION: Witness declaration.  - FEE_ELECTION: Fee election.  - INSURANCE_COMPARISON_REPORT: Insurance product comparison report.  - CUSTOMER_COMMUNICATION: Customer Communication.  - THIRD_PARTY_COMMUNICATION: Third Party Communication.")] = None,
        filter_order_reverse: Annotated[Optional[StrictBool], Field(description="Reverse the order of the filtered results. Defaults to false and results are returned in creation order (oldest to newest).")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmark. Set to the empty string (or omit) to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. Defaults to 500.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmGetDocumentSummariesResponse:
        """Get summaries for multiple documents. No document details are returned.


        :param filter_owning_client_id: Return document summaries for all documents with the specified `owning_client_id`. Incompatible with `filter_case_id`. One of `filter_owning_client_id` and `filter_case_id` is required.
        :type filter_owning_client_id: str
        :param filter_case_id: Return document summaries for all documents associated with a case. Incompatible with `filter_owning_client_id`. One of `filter_owning_client_id` and `filter_case_id` is required.
        :type filter_case_id: str
        :param filter_archived: Return only document summaries for archived/non-archived documents. Compatible with one of `filter_owning_client_id` or `filter_case_id`.
        :type filter_archived: bool
        :param document_types: Return only document summaries with any of the provided types. If provided, either filter_owning_client_id or filter_case_id must also be supplied.   - INVALID_DOCUMENT_TYPE: Invalid document type.  - TEMPLATE: Template document type.  - PAYSLIP: Account statement document type. *DEPRECATED*: This is replaced by BANK_STATEMENT and will be removed in a later PR. ACRE-1022. ACCOUNT_STATEMENT = 2; Payslip document type.  - INVESTMENT_STATEMENT: Investment statement document type.  - P60: P60 document type.  - SA302: SA302 document type.  - COMPANY_ACCOUNTS: Company accounts document type.  - BIRTH_CERTIFICATE: Birth certificate document type.  - PASSPORT: Passport document type.  - UTILITY_BILL: Utility bill document type.  - LETTER_OF_GIFT: Letter of gift document type.  - TEMPLATE_COMPLIANCE_EMAIL: Drivers license. DRIVERS_LICENSE = 12; // Disabled. See DRIVERS_LICENSE_{FRONT,BACK} below. Template compliance E-mail.  - OFFER_LETTER: Offer letter.  - LIVE_PHOTO: Live photo.  - NATIONAL_IDENTITY_CARD: National identity card. Deprecated. See NATIONAL_IDENTITY_CARD_{FRONT,BACK} below.  - DRIVERS_LICENSE_FRONT: Drivers license (front).  - DRIVERS_LICENSE_BACK: Drivers license (back).  - AGREEMENT_IN_PRINCIPLE: Agreement in principle.  - POLICY_LETTER: Policy letter.  - INSURANCE_ILLUSTRATION: Insurance illustration.  - INSURANCE_KEY_FACTS: Insurance key facts.  - THIRD_PARTY_PRIVACY_NOTICE: Thirdparty privacy notice.  - INTERNAL: Internal.  - OTHER: Other  - MORTGAGE_STATEMENT: Mortgage statement.  - MORTGAGE_APPLICATION: Mortgage application.  - PENSION_STATEMENT: Pension statement.  - BANK_STATEMENT: Bank statement.  - APPLICATION_LETTER: Application letter.  - INSURANCE_APPLICATION: Insurance application.  - DEBT_CONSOLIDATION_COMPARISON_FORM: Debt consolidation comparison form.  - DEBT_CONSOLIDATION_SUPPLEMENT: Debt consolidation supplement.  - IMPORTED_IDD: Imported IDD document. Requires acre/case_import permission to be able to upload.  - IMPORTED_ESIS: Imported ESIS document. Requires acre/case_import permission to be able to upload.  - IMPORTED_SUITABILITY_REPORT: Imported suitability report. Requires acre/case_import permission to be able to upload.  - PROPERTY_TITLE: Property title from Land Registry.  - PROPERTY_TITLE_PLAN: Title plan from Land Registry.  - AFFORDABILITY_SCREENSHOT: Affordability calculator screenshot.  - CREDIT_REPORT: Credit Report.  - ANNUAL_MORTGAGE_STATEMENT: Acre Annual Mortgage Statement.  - EXTERNAL_EVIDENCE_OF_RESEARCH: External Evidence Of Research.  - DIRECT_DEBIT_MANDATE: Direct debit mandate.  - LEGAL_CHARGE: Legal charge.  - INCOME_DECLARATION: Income declaration.  - CREDIT_SEARCH: Credit search.  - VALUATION: Valuation.  - MORTGAGE_QUESTIONNAIRE: Mortgage questionnaire.  - CONSENT: Consent.  - DEED_OF_POSTPONEMENT: Deed of postponement.  - REDEMPTION_FIGURE: Redemption figure.  - BTL_PORTFOLIO: BTL portfolio.  - LENDING_INTO_RETIREMENT_DECLARATION: Lending into retirement declaration.  - OCCUPIERS_CONSENT_FORM: Occupiers consent form.  - INDEPENDENT_LEGAL_ADVICE_FORM: Independent legal advice form.  - PURPOSE_OF_LOAN_DECLARATION: Purpose of loan declaration.  - INTEREST_ONLY_DECLARATION: Interest only declaration.  - LIMITED_COMPANY_ACCOUNTS: Limited company accounts.  - MANAGEMENT_ACCOUNTS: Management accounts.  - EMPLOYMENT_CONTRACT: Employment contract.  - AFFORDABILITY_CALCULATOR: Affordability calculator.  - LOAN_SETTLEMENT_FIGURE: Loan settlement figure.  - CREDIT_CARD_STATEMENT: Credit card statement.  - LETTER_OF_EXPLANATION: Letter of explanation.  - PROPERTY_LEASE: Property lease.  - GROUND_RENT_SERVICE_CHARGE_CONFIRMATION: Ground rent / Service charge confirmation.  - STATEMENT_OF_NEEDS: Statement of needs.  - LAST_WILL_AND_TESTAMENT: Last will and testament.  - DECLARATION_OF_TRUST: Declaration of trust.  - SURVEY_REPORT: Survey report.  - POWER_OF_ATTORNEY: Power of attorney.  - EPC_REPORT: Energy Performance Certificate (EPC).  - VISA: Visa / Indefinite leave to remain.  - TAX_YEAR_OVERVIEW: Tax year overview.  - PROOF_OF_DEPOSIT: Proof of deposit.  - LENDER_ESIS: ESIS generated by Lender.  - MEMORANDUM_OF_SALE: Memorandum of sale.  - CALL_RECORDING: Call recording.  - NATIONAL_IDENTITY_CARD_FRONT: National identity card (front).  - NATIONAL_IDENTITY_CARD_BACK: National identity card (back).  - COST_OF_MOVE: Cost of move.  - BUDGET_STRESS_TEST: Budget stress test.  - WELLBEING_ASSESSMENT: Wellbeing assessment.  - INSURANCE_DECLARATION: Insurance declaration.  - BENEFIT_REPORT: Benefit report.  - RISK_INFORMATION_PACK: Risk information pack.  - EQUITY_RELEASE_FACT_FIND: Equity release fact find.  - WITNESS_DECLARATION: Witness declaration.  - FEE_ELECTION: Fee election.  - INSURANCE_COMPARISON_REPORT: Insurance product comparison report.  - CUSTOMER_COMMUNICATION: Customer Communication.  - THIRD_PARTY_COMMUNICATION: Third Party Communication.
        :type document_types: List[str]
        :param filter_order_reverse: Reverse the order of the filtered results. Defaults to false and results are returned in creation order (oldest to newest).
        :type filter_order_reverse: bool
        :param bookmark: Opaque pagination bookmark. Set to the empty string (or omit) to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. Defaults to 500.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_summaries_serialize(
            filter_owning_client_id=filter_owning_client_id,
            filter_case_id=filter_case_id,
            filter_archived=filter_archived,
            document_types=document_types,
            filter_order_reverse=filter_order_reverse,
            bookmark=bookmark,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetDocumentSummariesResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_document_summaries_with_http_info(
        self,
        filter_owning_client_id: Annotated[Optional[StrictStr], Field(description="Return document summaries for all documents with the specified `owning_client_id`. Incompatible with `filter_case_id`. One of `filter_owning_client_id` and `filter_case_id` is required.")] = None,
        filter_case_id: Annotated[Optional[StrictStr], Field(description="Return document summaries for all documents associated with a case. Incompatible with `filter_owning_client_id`. One of `filter_owning_client_id` and `filter_case_id` is required.")] = None,
        filter_archived: Annotated[Optional[StrictBool], Field(description="Return only document summaries for archived/non-archived documents. Compatible with one of `filter_owning_client_id` or `filter_case_id`.")] = None,
        document_types: Annotated[Optional[List[StrictStr]], Field(description="Return only document summaries with any of the provided types. If provided, either filter_owning_client_id or filter_case_id must also be supplied.   - INVALID_DOCUMENT_TYPE: Invalid document type.  - TEMPLATE: Template document type.  - PAYSLIP: Account statement document type. *DEPRECATED*: This is replaced by BANK_STATEMENT and will be removed in a later PR. ACRE-1022. ACCOUNT_STATEMENT = 2; Payslip document type.  - INVESTMENT_STATEMENT: Investment statement document type.  - P60: P60 document type.  - SA302: SA302 document type.  - COMPANY_ACCOUNTS: Company accounts document type.  - BIRTH_CERTIFICATE: Birth certificate document type.  - PASSPORT: Passport document type.  - UTILITY_BILL: Utility bill document type.  - LETTER_OF_GIFT: Letter of gift document type.  - TEMPLATE_COMPLIANCE_EMAIL: Drivers license. DRIVERS_LICENSE = 12; // Disabled. See DRIVERS_LICENSE_{FRONT,BACK} below. Template compliance E-mail.  - OFFER_LETTER: Offer letter.  - LIVE_PHOTO: Live photo.  - NATIONAL_IDENTITY_CARD: National identity card. Deprecated. See NATIONAL_IDENTITY_CARD_{FRONT,BACK} below.  - DRIVERS_LICENSE_FRONT: Drivers license (front).  - DRIVERS_LICENSE_BACK: Drivers license (back).  - AGREEMENT_IN_PRINCIPLE: Agreement in principle.  - POLICY_LETTER: Policy letter.  - INSURANCE_ILLUSTRATION: Insurance illustration.  - INSURANCE_KEY_FACTS: Insurance key facts.  - THIRD_PARTY_PRIVACY_NOTICE: Thirdparty privacy notice.  - INTERNAL: Internal.  - OTHER: Other  - MORTGAGE_STATEMENT: Mortgage statement.  - MORTGAGE_APPLICATION: Mortgage application.  - PENSION_STATEMENT: Pension statement.  - BANK_STATEMENT: Bank statement.  - APPLICATION_LETTER: Application letter.  - INSURANCE_APPLICATION: Insurance application.  - DEBT_CONSOLIDATION_COMPARISON_FORM: Debt consolidation comparison form.  - DEBT_CONSOLIDATION_SUPPLEMENT: Debt consolidation supplement.  - IMPORTED_IDD: Imported IDD document. Requires acre/case_import permission to be able to upload.  - IMPORTED_ESIS: Imported ESIS document. Requires acre/case_import permission to be able to upload.  - IMPORTED_SUITABILITY_REPORT: Imported suitability report. Requires acre/case_import permission to be able to upload.  - PROPERTY_TITLE: Property title from Land Registry.  - PROPERTY_TITLE_PLAN: Title plan from Land Registry.  - AFFORDABILITY_SCREENSHOT: Affordability calculator screenshot.  - CREDIT_REPORT: Credit Report.  - ANNUAL_MORTGAGE_STATEMENT: Acre Annual Mortgage Statement.  - EXTERNAL_EVIDENCE_OF_RESEARCH: External Evidence Of Research.  - DIRECT_DEBIT_MANDATE: Direct debit mandate.  - LEGAL_CHARGE: Legal charge.  - INCOME_DECLARATION: Income declaration.  - CREDIT_SEARCH: Credit search.  - VALUATION: Valuation.  - MORTGAGE_QUESTIONNAIRE: Mortgage questionnaire.  - CONSENT: Consent.  - DEED_OF_POSTPONEMENT: Deed of postponement.  - REDEMPTION_FIGURE: Redemption figure.  - BTL_PORTFOLIO: BTL portfolio.  - LENDING_INTO_RETIREMENT_DECLARATION: Lending into retirement declaration.  - OCCUPIERS_CONSENT_FORM: Occupiers consent form.  - INDEPENDENT_LEGAL_ADVICE_FORM: Independent legal advice form.  - PURPOSE_OF_LOAN_DECLARATION: Purpose of loan declaration.  - INTEREST_ONLY_DECLARATION: Interest only declaration.  - LIMITED_COMPANY_ACCOUNTS: Limited company accounts.  - MANAGEMENT_ACCOUNTS: Management accounts.  - EMPLOYMENT_CONTRACT: Employment contract.  - AFFORDABILITY_CALCULATOR: Affordability calculator.  - LOAN_SETTLEMENT_FIGURE: Loan settlement figure.  - CREDIT_CARD_STATEMENT: Credit card statement.  - LETTER_OF_EXPLANATION: Letter of explanation.  - PROPERTY_LEASE: Property lease.  - GROUND_RENT_SERVICE_CHARGE_CONFIRMATION: Ground rent / Service charge confirmation.  - STATEMENT_OF_NEEDS: Statement of needs.  - LAST_WILL_AND_TESTAMENT: Last will and testament.  - DECLARATION_OF_TRUST: Declaration of trust.  - SURVEY_REPORT: Survey report.  - POWER_OF_ATTORNEY: Power of attorney.  - EPC_REPORT: Energy Performance Certificate (EPC).  - VISA: Visa / Indefinite leave to remain.  - TAX_YEAR_OVERVIEW: Tax year overview.  - PROOF_OF_DEPOSIT: Proof of deposit.  - LENDER_ESIS: ESIS generated by Lender.  - MEMORANDUM_OF_SALE: Memorandum of sale.  - CALL_RECORDING: Call recording.  - NATIONAL_IDENTITY_CARD_FRONT: National identity card (front).  - NATIONAL_IDENTITY_CARD_BACK: National identity card (back).  - COST_OF_MOVE: Cost of move.  - BUDGET_STRESS_TEST: Budget stress test.  - WELLBEING_ASSESSMENT: Wellbeing assessment.  - INSURANCE_DECLARATION: Insurance declaration.  - BENEFIT_REPORT: Benefit report.  - RISK_INFORMATION_PACK: Risk information pack.  - EQUITY_RELEASE_FACT_FIND: Equity release fact find.  - WITNESS_DECLARATION: Witness declaration.  - FEE_ELECTION: Fee election.  - INSURANCE_COMPARISON_REPORT: Insurance product comparison report.  - CUSTOMER_COMMUNICATION: Customer Communication.  - THIRD_PARTY_COMMUNICATION: Third Party Communication.")] = None,
        filter_order_reverse: Annotated[Optional[StrictBool], Field(description="Reverse the order of the filtered results. Defaults to false and results are returned in creation order (oldest to newest).")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmark. Set to the empty string (or omit) to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. Defaults to 500.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmGetDocumentSummariesResponse]:
        """Get summaries for multiple documents. No document details are returned.


        :param filter_owning_client_id: Return document summaries for all documents with the specified `owning_client_id`. Incompatible with `filter_case_id`. One of `filter_owning_client_id` and `filter_case_id` is required.
        :type filter_owning_client_id: str
        :param filter_case_id: Return document summaries for all documents associated with a case. Incompatible with `filter_owning_client_id`. One of `filter_owning_client_id` and `filter_case_id` is required.
        :type filter_case_id: str
        :param filter_archived: Return only document summaries for archived/non-archived documents. Compatible with one of `filter_owning_client_id` or `filter_case_id`.
        :type filter_archived: bool
        :param document_types: Return only document summaries with any of the provided types. If provided, either filter_owning_client_id or filter_case_id must also be supplied.   - INVALID_DOCUMENT_TYPE: Invalid document type.  - TEMPLATE: Template document type.  - PAYSLIP: Account statement document type. *DEPRECATED*: This is replaced by BANK_STATEMENT and will be removed in a later PR. ACRE-1022. ACCOUNT_STATEMENT = 2; Payslip document type.  - INVESTMENT_STATEMENT: Investment statement document type.  - P60: P60 document type.  - SA302: SA302 document type.  - COMPANY_ACCOUNTS: Company accounts document type.  - BIRTH_CERTIFICATE: Birth certificate document type.  - PASSPORT: Passport document type.  - UTILITY_BILL: Utility bill document type.  - LETTER_OF_GIFT: Letter of gift document type.  - TEMPLATE_COMPLIANCE_EMAIL: Drivers license. DRIVERS_LICENSE = 12; // Disabled. See DRIVERS_LICENSE_{FRONT,BACK} below. Template compliance E-mail.  - OFFER_LETTER: Offer letter.  - LIVE_PHOTO: Live photo.  - NATIONAL_IDENTITY_CARD: National identity card. Deprecated. See NATIONAL_IDENTITY_CARD_{FRONT,BACK} below.  - DRIVERS_LICENSE_FRONT: Drivers license (front).  - DRIVERS_LICENSE_BACK: Drivers license (back).  - AGREEMENT_IN_PRINCIPLE: Agreement in principle.  - POLICY_LETTER: Policy letter.  - INSURANCE_ILLUSTRATION: Insurance illustration.  - INSURANCE_KEY_FACTS: Insurance key facts.  - THIRD_PARTY_PRIVACY_NOTICE: Thirdparty privacy notice.  - INTERNAL: Internal.  - OTHER: Other  - MORTGAGE_STATEMENT: Mortgage statement.  - MORTGAGE_APPLICATION: Mortgage application.  - PENSION_STATEMENT: Pension statement.  - BANK_STATEMENT: Bank statement.  - APPLICATION_LETTER: Application letter.  - INSURANCE_APPLICATION: Insurance application.  - DEBT_CONSOLIDATION_COMPARISON_FORM: Debt consolidation comparison form.  - DEBT_CONSOLIDATION_SUPPLEMENT: Debt consolidation supplement.  - IMPORTED_IDD: Imported IDD document. Requires acre/case_import permission to be able to upload.  - IMPORTED_ESIS: Imported ESIS document. Requires acre/case_import permission to be able to upload.  - IMPORTED_SUITABILITY_REPORT: Imported suitability report. Requires acre/case_import permission to be able to upload.  - PROPERTY_TITLE: Property title from Land Registry.  - PROPERTY_TITLE_PLAN: Title plan from Land Registry.  - AFFORDABILITY_SCREENSHOT: Affordability calculator screenshot.  - CREDIT_REPORT: Credit Report.  - ANNUAL_MORTGAGE_STATEMENT: Acre Annual Mortgage Statement.  - EXTERNAL_EVIDENCE_OF_RESEARCH: External Evidence Of Research.  - DIRECT_DEBIT_MANDATE: Direct debit mandate.  - LEGAL_CHARGE: Legal charge.  - INCOME_DECLARATION: Income declaration.  - CREDIT_SEARCH: Credit search.  - VALUATION: Valuation.  - MORTGAGE_QUESTIONNAIRE: Mortgage questionnaire.  - CONSENT: Consent.  - DEED_OF_POSTPONEMENT: Deed of postponement.  - REDEMPTION_FIGURE: Redemption figure.  - BTL_PORTFOLIO: BTL portfolio.  - LENDING_INTO_RETIREMENT_DECLARATION: Lending into retirement declaration.  - OCCUPIERS_CONSENT_FORM: Occupiers consent form.  - INDEPENDENT_LEGAL_ADVICE_FORM: Independent legal advice form.  - PURPOSE_OF_LOAN_DECLARATION: Purpose of loan declaration.  - INTEREST_ONLY_DECLARATION: Interest only declaration.  - LIMITED_COMPANY_ACCOUNTS: Limited company accounts.  - MANAGEMENT_ACCOUNTS: Management accounts.  - EMPLOYMENT_CONTRACT: Employment contract.  - AFFORDABILITY_CALCULATOR: Affordability calculator.  - LOAN_SETTLEMENT_FIGURE: Loan settlement figure.  - CREDIT_CARD_STATEMENT: Credit card statement.  - LETTER_OF_EXPLANATION: Letter of explanation.  - PROPERTY_LEASE: Property lease.  - GROUND_RENT_SERVICE_CHARGE_CONFIRMATION: Ground rent / Service charge confirmation.  - STATEMENT_OF_NEEDS: Statement of needs.  - LAST_WILL_AND_TESTAMENT: Last will and testament.  - DECLARATION_OF_TRUST: Declaration of trust.  - SURVEY_REPORT: Survey report.  - POWER_OF_ATTORNEY: Power of attorney.  - EPC_REPORT: Energy Performance Certificate (EPC).  - VISA: Visa / Indefinite leave to remain.  - TAX_YEAR_OVERVIEW: Tax year overview.  - PROOF_OF_DEPOSIT: Proof of deposit.  - LENDER_ESIS: ESIS generated by Lender.  - MEMORANDUM_OF_SALE: Memorandum of sale.  - CALL_RECORDING: Call recording.  - NATIONAL_IDENTITY_CARD_FRONT: National identity card (front).  - NATIONAL_IDENTITY_CARD_BACK: National identity card (back).  - COST_OF_MOVE: Cost of move.  - BUDGET_STRESS_TEST: Budget stress test.  - WELLBEING_ASSESSMENT: Wellbeing assessment.  - INSURANCE_DECLARATION: Insurance declaration.  - BENEFIT_REPORT: Benefit report.  - RISK_INFORMATION_PACK: Risk information pack.  - EQUITY_RELEASE_FACT_FIND: Equity release fact find.  - WITNESS_DECLARATION: Witness declaration.  - FEE_ELECTION: Fee election.  - INSURANCE_COMPARISON_REPORT: Insurance product comparison report.  - CUSTOMER_COMMUNICATION: Customer Communication.  - THIRD_PARTY_COMMUNICATION: Third Party Communication.
        :type document_types: List[str]
        :param filter_order_reverse: Reverse the order of the filtered results. Defaults to false and results are returned in creation order (oldest to newest).
        :type filter_order_reverse: bool
        :param bookmark: Opaque pagination bookmark. Set to the empty string (or omit) to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. Defaults to 500.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_summaries_serialize(
            filter_owning_client_id=filter_owning_client_id,
            filter_case_id=filter_case_id,
            filter_archived=filter_archived,
            document_types=document_types,
            filter_order_reverse=filter_order_reverse,
            bookmark=bookmark,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetDocumentSummariesResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_document_summaries_without_preload_content(
        self,
        filter_owning_client_id: Annotated[Optional[StrictStr], Field(description="Return document summaries for all documents with the specified `owning_client_id`. Incompatible with `filter_case_id`. One of `filter_owning_client_id` and `filter_case_id` is required.")] = None,
        filter_case_id: Annotated[Optional[StrictStr], Field(description="Return document summaries for all documents associated with a case. Incompatible with `filter_owning_client_id`. One of `filter_owning_client_id` and `filter_case_id` is required.")] = None,
        filter_archived: Annotated[Optional[StrictBool], Field(description="Return only document summaries for archived/non-archived documents. Compatible with one of `filter_owning_client_id` or `filter_case_id`.")] = None,
        document_types: Annotated[Optional[List[StrictStr]], Field(description="Return only document summaries with any of the provided types. If provided, either filter_owning_client_id or filter_case_id must also be supplied.   - INVALID_DOCUMENT_TYPE: Invalid document type.  - TEMPLATE: Template document type.  - PAYSLIP: Account statement document type. *DEPRECATED*: This is replaced by BANK_STATEMENT and will be removed in a later PR. ACRE-1022. ACCOUNT_STATEMENT = 2; Payslip document type.  - INVESTMENT_STATEMENT: Investment statement document type.  - P60: P60 document type.  - SA302: SA302 document type.  - COMPANY_ACCOUNTS: Company accounts document type.  - BIRTH_CERTIFICATE: Birth certificate document type.  - PASSPORT: Passport document type.  - UTILITY_BILL: Utility bill document type.  - LETTER_OF_GIFT: Letter of gift document type.  - TEMPLATE_COMPLIANCE_EMAIL: Drivers license. DRIVERS_LICENSE = 12; // Disabled. See DRIVERS_LICENSE_{FRONT,BACK} below. Template compliance E-mail.  - OFFER_LETTER: Offer letter.  - LIVE_PHOTO: Live photo.  - NATIONAL_IDENTITY_CARD: National identity card. Deprecated. See NATIONAL_IDENTITY_CARD_{FRONT,BACK} below.  - DRIVERS_LICENSE_FRONT: Drivers license (front).  - DRIVERS_LICENSE_BACK: Drivers license (back).  - AGREEMENT_IN_PRINCIPLE: Agreement in principle.  - POLICY_LETTER: Policy letter.  - INSURANCE_ILLUSTRATION: Insurance illustration.  - INSURANCE_KEY_FACTS: Insurance key facts.  - THIRD_PARTY_PRIVACY_NOTICE: Thirdparty privacy notice.  - INTERNAL: Internal.  - OTHER: Other  - MORTGAGE_STATEMENT: Mortgage statement.  - MORTGAGE_APPLICATION: Mortgage application.  - PENSION_STATEMENT: Pension statement.  - BANK_STATEMENT: Bank statement.  - APPLICATION_LETTER: Application letter.  - INSURANCE_APPLICATION: Insurance application.  - DEBT_CONSOLIDATION_COMPARISON_FORM: Debt consolidation comparison form.  - DEBT_CONSOLIDATION_SUPPLEMENT: Debt consolidation supplement.  - IMPORTED_IDD: Imported IDD document. Requires acre/case_import permission to be able to upload.  - IMPORTED_ESIS: Imported ESIS document. Requires acre/case_import permission to be able to upload.  - IMPORTED_SUITABILITY_REPORT: Imported suitability report. Requires acre/case_import permission to be able to upload.  - PROPERTY_TITLE: Property title from Land Registry.  - PROPERTY_TITLE_PLAN: Title plan from Land Registry.  - AFFORDABILITY_SCREENSHOT: Affordability calculator screenshot.  - CREDIT_REPORT: Credit Report.  - ANNUAL_MORTGAGE_STATEMENT: Acre Annual Mortgage Statement.  - EXTERNAL_EVIDENCE_OF_RESEARCH: External Evidence Of Research.  - DIRECT_DEBIT_MANDATE: Direct debit mandate.  - LEGAL_CHARGE: Legal charge.  - INCOME_DECLARATION: Income declaration.  - CREDIT_SEARCH: Credit search.  - VALUATION: Valuation.  - MORTGAGE_QUESTIONNAIRE: Mortgage questionnaire.  - CONSENT: Consent.  - DEED_OF_POSTPONEMENT: Deed of postponement.  - REDEMPTION_FIGURE: Redemption figure.  - BTL_PORTFOLIO: BTL portfolio.  - LENDING_INTO_RETIREMENT_DECLARATION: Lending into retirement declaration.  - OCCUPIERS_CONSENT_FORM: Occupiers consent form.  - INDEPENDENT_LEGAL_ADVICE_FORM: Independent legal advice form.  - PURPOSE_OF_LOAN_DECLARATION: Purpose of loan declaration.  - INTEREST_ONLY_DECLARATION: Interest only declaration.  - LIMITED_COMPANY_ACCOUNTS: Limited company accounts.  - MANAGEMENT_ACCOUNTS: Management accounts.  - EMPLOYMENT_CONTRACT: Employment contract.  - AFFORDABILITY_CALCULATOR: Affordability calculator.  - LOAN_SETTLEMENT_FIGURE: Loan settlement figure.  - CREDIT_CARD_STATEMENT: Credit card statement.  - LETTER_OF_EXPLANATION: Letter of explanation.  - PROPERTY_LEASE: Property lease.  - GROUND_RENT_SERVICE_CHARGE_CONFIRMATION: Ground rent / Service charge confirmation.  - STATEMENT_OF_NEEDS: Statement of needs.  - LAST_WILL_AND_TESTAMENT: Last will and testament.  - DECLARATION_OF_TRUST: Declaration of trust.  - SURVEY_REPORT: Survey report.  - POWER_OF_ATTORNEY: Power of attorney.  - EPC_REPORT: Energy Performance Certificate (EPC).  - VISA: Visa / Indefinite leave to remain.  - TAX_YEAR_OVERVIEW: Tax year overview.  - PROOF_OF_DEPOSIT: Proof of deposit.  - LENDER_ESIS: ESIS generated by Lender.  - MEMORANDUM_OF_SALE: Memorandum of sale.  - CALL_RECORDING: Call recording.  - NATIONAL_IDENTITY_CARD_FRONT: National identity card (front).  - NATIONAL_IDENTITY_CARD_BACK: National identity card (back).  - COST_OF_MOVE: Cost of move.  - BUDGET_STRESS_TEST: Budget stress test.  - WELLBEING_ASSESSMENT: Wellbeing assessment.  - INSURANCE_DECLARATION: Insurance declaration.  - BENEFIT_REPORT: Benefit report.  - RISK_INFORMATION_PACK: Risk information pack.  - EQUITY_RELEASE_FACT_FIND: Equity release fact find.  - WITNESS_DECLARATION: Witness declaration.  - FEE_ELECTION: Fee election.  - INSURANCE_COMPARISON_REPORT: Insurance product comparison report.  - CUSTOMER_COMMUNICATION: Customer Communication.  - THIRD_PARTY_COMMUNICATION: Third Party Communication.")] = None,
        filter_order_reverse: Annotated[Optional[StrictBool], Field(description="Reverse the order of the filtered results. Defaults to false and results are returned in creation order (oldest to newest).")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmark. Set to the empty string (or omit) to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. Defaults to 500.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get summaries for multiple documents. No document details are returned.


        :param filter_owning_client_id: Return document summaries for all documents with the specified `owning_client_id`. Incompatible with `filter_case_id`. One of `filter_owning_client_id` and `filter_case_id` is required.
        :type filter_owning_client_id: str
        :param filter_case_id: Return document summaries for all documents associated with a case. Incompatible with `filter_owning_client_id`. One of `filter_owning_client_id` and `filter_case_id` is required.
        :type filter_case_id: str
        :param filter_archived: Return only document summaries for archived/non-archived documents. Compatible with one of `filter_owning_client_id` or `filter_case_id`.
        :type filter_archived: bool
        :param document_types: Return only document summaries with any of the provided types. If provided, either filter_owning_client_id or filter_case_id must also be supplied.   - INVALID_DOCUMENT_TYPE: Invalid document type.  - TEMPLATE: Template document type.  - PAYSLIP: Account statement document type. *DEPRECATED*: This is replaced by BANK_STATEMENT and will be removed in a later PR. ACRE-1022. ACCOUNT_STATEMENT = 2; Payslip document type.  - INVESTMENT_STATEMENT: Investment statement document type.  - P60: P60 document type.  - SA302: SA302 document type.  - COMPANY_ACCOUNTS: Company accounts document type.  - BIRTH_CERTIFICATE: Birth certificate document type.  - PASSPORT: Passport document type.  - UTILITY_BILL: Utility bill document type.  - LETTER_OF_GIFT: Letter of gift document type.  - TEMPLATE_COMPLIANCE_EMAIL: Drivers license. DRIVERS_LICENSE = 12; // Disabled. See DRIVERS_LICENSE_{FRONT,BACK} below. Template compliance E-mail.  - OFFER_LETTER: Offer letter.  - LIVE_PHOTO: Live photo.  - NATIONAL_IDENTITY_CARD: National identity card. Deprecated. See NATIONAL_IDENTITY_CARD_{FRONT,BACK} below.  - DRIVERS_LICENSE_FRONT: Drivers license (front).  - DRIVERS_LICENSE_BACK: Drivers license (back).  - AGREEMENT_IN_PRINCIPLE: Agreement in principle.  - POLICY_LETTER: Policy letter.  - INSURANCE_ILLUSTRATION: Insurance illustration.  - INSURANCE_KEY_FACTS: Insurance key facts.  - THIRD_PARTY_PRIVACY_NOTICE: Thirdparty privacy notice.  - INTERNAL: Internal.  - OTHER: Other  - MORTGAGE_STATEMENT: Mortgage statement.  - MORTGAGE_APPLICATION: Mortgage application.  - PENSION_STATEMENT: Pension statement.  - BANK_STATEMENT: Bank statement.  - APPLICATION_LETTER: Application letter.  - INSURANCE_APPLICATION: Insurance application.  - DEBT_CONSOLIDATION_COMPARISON_FORM: Debt consolidation comparison form.  - DEBT_CONSOLIDATION_SUPPLEMENT: Debt consolidation supplement.  - IMPORTED_IDD: Imported IDD document. Requires acre/case_import permission to be able to upload.  - IMPORTED_ESIS: Imported ESIS document. Requires acre/case_import permission to be able to upload.  - IMPORTED_SUITABILITY_REPORT: Imported suitability report. Requires acre/case_import permission to be able to upload.  - PROPERTY_TITLE: Property title from Land Registry.  - PROPERTY_TITLE_PLAN: Title plan from Land Registry.  - AFFORDABILITY_SCREENSHOT: Affordability calculator screenshot.  - CREDIT_REPORT: Credit Report.  - ANNUAL_MORTGAGE_STATEMENT: Acre Annual Mortgage Statement.  - EXTERNAL_EVIDENCE_OF_RESEARCH: External Evidence Of Research.  - DIRECT_DEBIT_MANDATE: Direct debit mandate.  - LEGAL_CHARGE: Legal charge.  - INCOME_DECLARATION: Income declaration.  - CREDIT_SEARCH: Credit search.  - VALUATION: Valuation.  - MORTGAGE_QUESTIONNAIRE: Mortgage questionnaire.  - CONSENT: Consent.  - DEED_OF_POSTPONEMENT: Deed of postponement.  - REDEMPTION_FIGURE: Redemption figure.  - BTL_PORTFOLIO: BTL portfolio.  - LENDING_INTO_RETIREMENT_DECLARATION: Lending into retirement declaration.  - OCCUPIERS_CONSENT_FORM: Occupiers consent form.  - INDEPENDENT_LEGAL_ADVICE_FORM: Independent legal advice form.  - PURPOSE_OF_LOAN_DECLARATION: Purpose of loan declaration.  - INTEREST_ONLY_DECLARATION: Interest only declaration.  - LIMITED_COMPANY_ACCOUNTS: Limited company accounts.  - MANAGEMENT_ACCOUNTS: Management accounts.  - EMPLOYMENT_CONTRACT: Employment contract.  - AFFORDABILITY_CALCULATOR: Affordability calculator.  - LOAN_SETTLEMENT_FIGURE: Loan settlement figure.  - CREDIT_CARD_STATEMENT: Credit card statement.  - LETTER_OF_EXPLANATION: Letter of explanation.  - PROPERTY_LEASE: Property lease.  - GROUND_RENT_SERVICE_CHARGE_CONFIRMATION: Ground rent / Service charge confirmation.  - STATEMENT_OF_NEEDS: Statement of needs.  - LAST_WILL_AND_TESTAMENT: Last will and testament.  - DECLARATION_OF_TRUST: Declaration of trust.  - SURVEY_REPORT: Survey report.  - POWER_OF_ATTORNEY: Power of attorney.  - EPC_REPORT: Energy Performance Certificate (EPC).  - VISA: Visa / Indefinite leave to remain.  - TAX_YEAR_OVERVIEW: Tax year overview.  - PROOF_OF_DEPOSIT: Proof of deposit.  - LENDER_ESIS: ESIS generated by Lender.  - MEMORANDUM_OF_SALE: Memorandum of sale.  - CALL_RECORDING: Call recording.  - NATIONAL_IDENTITY_CARD_FRONT: National identity card (front).  - NATIONAL_IDENTITY_CARD_BACK: National identity card (back).  - COST_OF_MOVE: Cost of move.  - BUDGET_STRESS_TEST: Budget stress test.  - WELLBEING_ASSESSMENT: Wellbeing assessment.  - INSURANCE_DECLARATION: Insurance declaration.  - BENEFIT_REPORT: Benefit report.  - RISK_INFORMATION_PACK: Risk information pack.  - EQUITY_RELEASE_FACT_FIND: Equity release fact find.  - WITNESS_DECLARATION: Witness declaration.  - FEE_ELECTION: Fee election.  - INSURANCE_COMPARISON_REPORT: Insurance product comparison report.  - CUSTOMER_COMMUNICATION: Customer Communication.  - THIRD_PARTY_COMMUNICATION: Third Party Communication.
        :type document_types: List[str]
        :param filter_order_reverse: Reverse the order of the filtered results. Defaults to false and results are returned in creation order (oldest to newest).
        :type filter_order_reverse: bool
        :param bookmark: Opaque pagination bookmark. Set to the empty string (or omit) to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. Defaults to 500.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_summaries_serialize(
            filter_owning_client_id=filter_owning_client_id,
            filter_case_id=filter_case_id,
            filter_archived=filter_archived,
            document_types=document_types,
            filter_order_reverse=filter_order_reverse,
            bookmark=bookmark,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetDocumentSummariesResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_document_summaries_serialize(
        self,
        filter_owning_client_id,
        filter_case_id,
        filter_archived,
        document_types,
        filter_order_reverse,
        bookmark,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'document_types': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter_owning_client_id is not None:
            
            _query_params.append(('filter_owning_client_id', filter_owning_client_id))
            
        if filter_case_id is not None:
            
            _query_params.append(('filter_case_id', filter_case_id))
            
        if filter_archived is not None:
            
            _query_params.append(('filter_archived', filter_archived))
            
        if document_types is not None:
            
            _query_params.append(('document_types', document_types))
            
        if filter_order_reverse is not None:
            
            _query_params.append(('filter_order_reverse', filter_order_reverse))
            
        if bookmark is not None:
            
            _query_params.append(('bookmark', bookmark))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/acre/document',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_document_verification(
        self,
        document_id: Annotated[StrictStr, Field(description="Filter to only include verifications for the specified document. Required.")],
        verification_details: Annotated[Optional[StrictBool], Field(description="Return the entire document verification details. By default this value is false, and only the IDs are returned.")] = None,
        verification_ids: Annotated[Optional[List[StrictStr]], Field(description="Verification IDs (optional, default wildcard for all IDs user can access).")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmark. Set to the empty string (or omit) to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 1000.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmGetDocumentVerificationResponse:
        """Get a document verification.


        :param document_id: Filter to only include verifications for the specified document. Required. (required)
        :type document_id: str
        :param verification_details: Return the entire document verification details. By default this value is false, and only the IDs are returned.
        :type verification_details: bool
        :param verification_ids: Verification IDs (optional, default wildcard for all IDs user can access).
        :type verification_ids: List[str]
        :param bookmark: Opaque pagination bookmark. Set to the empty string (or omit) to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 1000.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_verification_serialize(
            document_id=document_id,
            verification_details=verification_details,
            verification_ids=verification_ids,
            bookmark=bookmark,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetDocumentVerificationResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_document_verification_with_http_info(
        self,
        document_id: Annotated[StrictStr, Field(description="Filter to only include verifications for the specified document. Required.")],
        verification_details: Annotated[Optional[StrictBool], Field(description="Return the entire document verification details. By default this value is false, and only the IDs are returned.")] = None,
        verification_ids: Annotated[Optional[List[StrictStr]], Field(description="Verification IDs (optional, default wildcard for all IDs user can access).")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmark. Set to the empty string (or omit) to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 1000.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmGetDocumentVerificationResponse]:
        """Get a document verification.


        :param document_id: Filter to only include verifications for the specified document. Required. (required)
        :type document_id: str
        :param verification_details: Return the entire document verification details. By default this value is false, and only the IDs are returned.
        :type verification_details: bool
        :param verification_ids: Verification IDs (optional, default wildcard for all IDs user can access).
        :type verification_ids: List[str]
        :param bookmark: Opaque pagination bookmark. Set to the empty string (or omit) to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 1000.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_verification_serialize(
            document_id=document_id,
            verification_details=verification_details,
            verification_ids=verification_ids,
            bookmark=bookmark,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetDocumentVerificationResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_document_verification_without_preload_content(
        self,
        document_id: Annotated[StrictStr, Field(description="Filter to only include verifications for the specified document. Required.")],
        verification_details: Annotated[Optional[StrictBool], Field(description="Return the entire document verification details. By default this value is false, and only the IDs are returned.")] = None,
        verification_ids: Annotated[Optional[List[StrictStr]], Field(description="Verification IDs (optional, default wildcard for all IDs user can access).")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmark. Set to the empty string (or omit) to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 1000.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a document verification.


        :param document_id: Filter to only include verifications for the specified document. Required. (required)
        :type document_id: str
        :param verification_details: Return the entire document verification details. By default this value is false, and only the IDs are returned.
        :type verification_details: bool
        :param verification_ids: Verification IDs (optional, default wildcard for all IDs user can access).
        :type verification_ids: List[str]
        :param bookmark: Opaque pagination bookmark. Set to the empty string (or omit) to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 1000.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_verification_serialize(
            document_id=document_id,
            verification_details=verification_details,
            verification_ids=verification_ids,
            bookmark=bookmark,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetDocumentVerificationResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_document_verification_serialize(
        self,
        document_id,
        verification_details,
        verification_ids,
        bookmark,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'verification_ids': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if document_id is not None:
            _path_params['document_id'] = document_id
        # process the query parameters
        if verification_details is not None:
            
            _query_params.append(('verification_details', verification_details))
            
        if verification_ids is not None:
            
            _query_params.append(('verification_ids', verification_ids))
            
        if bookmark is not None:
            
            _query_params.append(('bookmark', bookmark))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/acre/document/{document_id}/verification',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def render_template(
        self,
        body: Annotated[CdmRenderTemplateRequest, Field(description="Request to render a template.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmRenderTemplateResponse:
        """Render a template to generate a document and (optionally) store it.


        :param body: Request to render a template. (required)
        :type body: CdmRenderTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._render_template_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmRenderTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def render_template_with_http_info(
        self,
        body: Annotated[CdmRenderTemplateRequest, Field(description="Request to render a template.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmRenderTemplateResponse]:
        """Render a template to generate a document and (optionally) store it.


        :param body: Request to render a template. (required)
        :type body: CdmRenderTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._render_template_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmRenderTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def render_template_without_preload_content(
        self,
        body: Annotated[CdmRenderTemplateRequest, Field(description="Request to render a template.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Render a template to generate a document and (optionally) store it.


        :param body: Request to render a template. (required)
        :type body: CdmRenderTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._render_template_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmRenderTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _render_template_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/acre/document/render_template',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def replace_document(
        self,
        document_document_id: Annotated[StrictStr, Field(description="Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically.")],
        document: Annotated[CompleteDetailsOfTheDocumentToBeReplacedRequired, Field(description="Complete details of the document to be replaced. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmReplaceDocumentResponse:
        """Replace (PUT) an existing document.


        :param document_document_id: Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically. (required)
        :type document_document_id: str
        :param document: Complete details of the document to be replaced. Required. (required)
        :type document: CompleteDetailsOfTheDocumentToBeReplacedRequired
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._replace_document_serialize(
            document_document_id=document_document_id,
            document=document,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmReplaceDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def replace_document_with_http_info(
        self,
        document_document_id: Annotated[StrictStr, Field(description="Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically.")],
        document: Annotated[CompleteDetailsOfTheDocumentToBeReplacedRequired, Field(description="Complete details of the document to be replaced. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmReplaceDocumentResponse]:
        """Replace (PUT) an existing document.


        :param document_document_id: Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically. (required)
        :type document_document_id: str
        :param document: Complete details of the document to be replaced. Required. (required)
        :type document: CompleteDetailsOfTheDocumentToBeReplacedRequired
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._replace_document_serialize(
            document_document_id=document_document_id,
            document=document,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmReplaceDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def replace_document_without_preload_content(
        self,
        document_document_id: Annotated[StrictStr, Field(description="Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically.")],
        document: Annotated[CompleteDetailsOfTheDocumentToBeReplacedRequired, Field(description="Complete details of the document to be replaced. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Replace (PUT) an existing document.


        :param document_document_id: Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically. (required)
        :type document_document_id: str
        :param document: Complete details of the document to be replaced. Required. (required)
        :type document: CompleteDetailsOfTheDocumentToBeReplacedRequired
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._replace_document_serialize(
            document_document_id=document_document_id,
            document=document,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmReplaceDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _replace_document_serialize(
        self,
        document_document_id,
        document,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if document_document_id is not None:
            _path_params['document.document_id'] = document_document_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if document is not None:
            _body_params = document


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/acre/document/{document.document_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def template_ctx(
        self,
        body: Annotated[CdmTemplateContextRequest, Field(description="Request to get the context a template would be rendered with.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmTemplateContextResponse:
        """Return the context a given template would have been rendered with.


        :param body: Request to get the context a template would be rendered with. (required)
        :type body: CdmTemplateContextRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._template_ctx_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmTemplateContextResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def template_ctx_with_http_info(
        self,
        body: Annotated[CdmTemplateContextRequest, Field(description="Request to get the context a template would be rendered with.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmTemplateContextResponse]:
        """Return the context a given template would have been rendered with.


        :param body: Request to get the context a template would be rendered with. (required)
        :type body: CdmTemplateContextRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._template_ctx_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmTemplateContextResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def template_ctx_without_preload_content(
        self,
        body: Annotated[CdmTemplateContextRequest, Field(description="Request to get the context a template would be rendered with.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return the context a given template would have been rendered with.


        :param body: Request to get the context a template would be rendered with. (required)
        :type body: CdmTemplateContextRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._template_ctx_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmTemplateContextResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _template_ctx_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/acre/document/render_template/ctx',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def test_render_template(
        self,
        body: Annotated[CdmTestRenderTemplateRequest, Field(description="Request to test a template. This won't allow the rendered document to be stored.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmTestRenderTemplateResponse:
        """Test rendering a template without having to store it, by passing the code.


        :param body: Request to test a template. This won't allow the rendered document to be stored. (required)
        :type body: CdmTestRenderTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_render_template_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmTestRenderTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_render_template_with_http_info(
        self,
        body: Annotated[CdmTestRenderTemplateRequest, Field(description="Request to test a template. This won't allow the rendered document to be stored.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmTestRenderTemplateResponse]:
        """Test rendering a template without having to store it, by passing the code.


        :param body: Request to test a template. This won't allow the rendered document to be stored. (required)
        :type body: CdmTestRenderTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_render_template_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmTestRenderTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def test_render_template_without_preload_content(
        self,
        body: Annotated[CdmTestRenderTemplateRequest, Field(description="Request to test a template. This won't allow the rendered document to be stored.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Test rendering a template without having to store it, by passing the code.


        :param body: Request to test a template. This won't allow the rendered document to be stored. (required)
        :type body: CdmTestRenderTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_render_template_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmTestRenderTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _test_render_template_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/acre/document/render_template/test',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_document(
        self,
        document_document_id: Annotated[StrictStr, Field(description="Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically.")],
        document: Annotated[PartialDetailsOfTheDocumentToBePatchedRequired, Field(description="Partial details of the document to be patched. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmUpdateDocumentResponse:
        """Update (PATCH) an existing document.


        :param document_document_id: Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically. (required)
        :type document_document_id: str
        :param document: Partial details of the document to be patched. Required. (required)
        :type document: PartialDetailsOfTheDocumentToBePatchedRequired
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_document_serialize(
            document_document_id=document_document_id,
            document=document,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmUpdateDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_document_with_http_info(
        self,
        document_document_id: Annotated[StrictStr, Field(description="Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically.")],
        document: Annotated[PartialDetailsOfTheDocumentToBePatchedRequired, Field(description="Partial details of the document to be patched. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmUpdateDocumentResponse]:
        """Update (PATCH) an existing document.


        :param document_document_id: Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically. (required)
        :type document_document_id: str
        :param document: Partial details of the document to be patched. Required. (required)
        :type document: PartialDetailsOfTheDocumentToBePatchedRequired
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_document_serialize(
            document_document_id=document_document_id,
            document=document,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmUpdateDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_document_without_preload_content(
        self,
        document_document_id: Annotated[StrictStr, Field(description="Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically.")],
        document: Annotated[PartialDetailsOfTheDocumentToBePatchedRequired, Field(description="Partial details of the document to be patched. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update (PATCH) an existing document.


        :param document_document_id: Unique identifier for this document. This field is populated automatically and cannot be set. **IMPORTANT:** This field cannot be updated and is populated automatically. (required)
        :type document_document_id: str
        :param document: Partial details of the document to be patched. Required. (required)
        :type document: PartialDetailsOfTheDocumentToBePatchedRequired
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_document_serialize(
            document_document_id=document_document_id,
            document=document,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmUpdateDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_document_serialize(
        self,
        document_document_id,
        document,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if document_document_id is not None:
            _path_params['document.document_id'] = document_document_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if document is not None:
            _body_params = document


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/acre/document/{document.document_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def upload_document(
        self,
        body: Annotated[CdmUploadDocumentRequest, Field(description="Request to upload a document.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmUploadDocumentResponse:
        """Upload a document.


        :param body: Request to upload a document. (required)
        :type body: CdmUploadDocumentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_document_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmUploadDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def upload_document_with_http_info(
        self,
        body: Annotated[CdmUploadDocumentRequest, Field(description="Request to upload a document.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmUploadDocumentResponse]:
        """Upload a document.


        :param body: Request to upload a document. (required)
        :type body: CdmUploadDocumentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_document_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmUploadDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def upload_document_without_preload_content(
        self,
        body: Annotated[CdmUploadDocumentRequest, Field(description="Request to upload a document.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a document.


        :param body: Request to upload a document. (required)
        :type body: CdmUploadDocumentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_document_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmUploadDocumentResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _upload_document_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/acre/document',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


