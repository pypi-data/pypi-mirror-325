# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from acre_api.models.cdm_client_employment_income import CdmClientEmploymentIncome
from acre_api.models.cdm_client_pension_income import CdmClientPensionIncome
from acre_api.models.cdm_client_self_employment_income import CdmClientSelfEmploymentIncome
from acre_api.models.cdm_origo_codes import CdmOrigoCodes
from acre_api.models.client_income_sick_pay import ClientIncomeSickPay
from typing import Optional, Set
from typing_extensions import Self

class CdmClientIncome(BaseModel):
    """
    CdmClientIncome
    """ # noqa: E501
    employment: Optional[CdmClientEmploymentIncome] = None
    self_employment: Optional[CdmClientSelfEmploymentIncome] = None
    pension: Optional[CdmClientPensionIncome] = None
    documents: Optional[List[StrictStr]] = Field(default=None, description="Evidence of this income. Element strings should be valid document IDs.")
    document_verifies: Optional[StrictBool] = Field(default=None, description="Does the document provided verify the details provided.")
    pay_rise_expected: Optional[StrictBool] = Field(default=None, description="Flag indicating whether a pay rise is expected in the foreseeable future.")
    pay_rise_expected_details: Optional[StrictStr] = Field(default=None, description="Additional details on why a pay rise is expected in the foreseeable future.")
    pay_rise_due_in_num_months: Optional[StrictInt] = Field(default=None, description="The number of months until a pay rise is due.")
    pay_rise_new_salary: Optional[StrictStr] = Field(default=None, description="The new income amount after the pay rise takes effect (in pence, not GBP).")
    income_likely_to_reduce_in_future: Optional[StrictBool] = Field(default=None, description="Flag indicating whether the individual's income is likely to reduce in the future.")
    income_likely_to_reduce_in_future_description: Optional[StrictStr] = Field(default=None, description="DEPRECATED: due to GBP to pence conversion.  string pay_rise_new_salary = 18;  google.protobuf.UInt64Value foreign_currency_amount = 5;  google.protobuf.UInt64Value earned_income_guaranteed = 7;  google.protobuf.UInt64Value earned_income_regular = 8;  google.protobuf.UInt64Value earned_income_irregular = 9;")
    occupation_title: Optional[StrictStr] = Field(default=None, description="Unrestricted job title.")
    standardised_occupation_code: Optional[CdmOrigoCodes] = CdmOrigoCodes.INVALID_ORIGO_CODE
    is_retired: Optional[StrictBool] = Field(default=None, description="Indicates if the client is retired.")
    date_of_retirement: Optional[StrictStr] = Field(default=None, description="The date that the client retired (YYYY-MM-DD).")
    monthly_net_income: Optional[StrictStr] = Field(default=None, description="Monthly income from client_income_source in pence.")
    is_current: Optional[StrictBool] = Field(default=None, description="Is true if this entry for ClientIncome is current.")
    id: Optional[StrictStr] = Field(default=None, description="A unique identifier for this entry.")
    sick_pay: Optional[ClientIncomeSickPay] = None
    abi_industry: Optional[StrictStr] = Field(default=None, description="ABI industry code of the employment.")
    __properties: ClassVar[List[str]] = ["employment", "self_employment", "pension", "documents", "document_verifies", "pay_rise_expected", "pay_rise_expected_details", "pay_rise_due_in_num_months", "pay_rise_new_salary", "income_likely_to_reduce_in_future", "income_likely_to_reduce_in_future_description", "occupation_title", "standardised_occupation_code", "is_retired", "date_of_retirement", "monthly_net_income", "is_current", "id", "sick_pay", "abi_industry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdmClientIncome from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employment
        if self.employment:
            _dict['employment'] = self.employment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of self_employment
        if self.self_employment:
            _dict['self_employment'] = self.self_employment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pension
        if self.pension:
            _dict['pension'] = self.pension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sick_pay
        if self.sick_pay:
            _dict['sick_pay'] = self.sick_pay.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdmClientIncome from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "employment": CdmClientEmploymentIncome.from_dict(obj["employment"]) if obj.get("employment") is not None else None,
            "self_employment": CdmClientSelfEmploymentIncome.from_dict(obj["self_employment"]) if obj.get("self_employment") is not None else None,
            "pension": CdmClientPensionIncome.from_dict(obj["pension"]) if obj.get("pension") is not None else None,
            "documents": obj.get("documents"),
            "document_verifies": obj.get("document_verifies"),
            "pay_rise_expected": obj.get("pay_rise_expected"),
            "pay_rise_expected_details": obj.get("pay_rise_expected_details"),
            "pay_rise_due_in_num_months": obj.get("pay_rise_due_in_num_months"),
            "pay_rise_new_salary": obj.get("pay_rise_new_salary"),
            "income_likely_to_reduce_in_future": obj.get("income_likely_to_reduce_in_future"),
            "income_likely_to_reduce_in_future_description": obj.get("income_likely_to_reduce_in_future_description"),
            "occupation_title": obj.get("occupation_title"),
            "standardised_occupation_code": obj.get("standardised_occupation_code") if obj.get("standardised_occupation_code") is not None else CdmOrigoCodes.INVALID_ORIGO_CODE,
            "is_retired": obj.get("is_retired"),
            "date_of_retirement": obj.get("date_of_retirement"),
            "monthly_net_income": obj.get("monthly_net_income"),
            "is_current": obj.get("is_current"),
            "id": obj.get("id"),
            "sick_pay": ClientIncomeSickPay.from_dict(obj["sick_pay"]) if obj.get("sick_pay") is not None else None,
            "abi_industry": obj.get("abi_industry")
        })
        return _obj


