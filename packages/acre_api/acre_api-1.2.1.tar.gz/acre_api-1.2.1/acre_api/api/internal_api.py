# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from acre_api.models.cdm_hydrated_case_response import CdmHydratedCaseResponse

from acre_api.api_client import ApiClient, RequestSerialized
from acre_api.api_response import ApiResponse
from acre_api.rest import RESTResponseType


class InternalApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_hydrated_case(
        self,
        case_id: Annotated[StrictStr, Field(description="The case ID to retrieve.")],
        include_mortgages: Annotated[Optional[StrictBool], Field(description="Whether to include any mortgages in the response.")] = None,
        all_properties: Annotated[Optional[StrictBool], Field(description="Whether to include all properties the clients own or just those that are party to the transaction.")] = None,
        all_mortgages: Annotated[Optional[StrictBool], Field(description="Whether to include all mortgages for the clients or just those pertinent to the transaction.")] = None,
        include_donors: Annotated[Optional[StrictBool], Field(description="Whether to include donors in the response.")] = None,
        include_source_response: Annotated[Optional[StrictBool], Field(description="Whether to include source response in mortgages. Default false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmHydratedCaseResponse:
        """Get hydrated case.


        :param case_id: The case ID to retrieve. (required)
        :type case_id: str
        :param include_mortgages: Whether to include any mortgages in the response.
        :type include_mortgages: bool
        :param all_properties: Whether to include all properties the clients own or just those that are party to the transaction.
        :type all_properties: bool
        :param all_mortgages: Whether to include all mortgages for the clients or just those pertinent to the transaction.
        :type all_mortgages: bool
        :param include_donors: Whether to include donors in the response.
        :type include_donors: bool
        :param include_source_response: Whether to include source response in mortgages. Default false.
        :type include_source_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_hydrated_case_serialize(
            case_id=case_id,
            include_mortgages=include_mortgages,
            all_properties=all_properties,
            all_mortgages=all_mortgages,
            include_donors=include_donors,
            include_source_response=include_source_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmHydratedCaseResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_hydrated_case_with_http_info(
        self,
        case_id: Annotated[StrictStr, Field(description="The case ID to retrieve.")],
        include_mortgages: Annotated[Optional[StrictBool], Field(description="Whether to include any mortgages in the response.")] = None,
        all_properties: Annotated[Optional[StrictBool], Field(description="Whether to include all properties the clients own or just those that are party to the transaction.")] = None,
        all_mortgages: Annotated[Optional[StrictBool], Field(description="Whether to include all mortgages for the clients or just those pertinent to the transaction.")] = None,
        include_donors: Annotated[Optional[StrictBool], Field(description="Whether to include donors in the response.")] = None,
        include_source_response: Annotated[Optional[StrictBool], Field(description="Whether to include source response in mortgages. Default false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmHydratedCaseResponse]:
        """Get hydrated case.


        :param case_id: The case ID to retrieve. (required)
        :type case_id: str
        :param include_mortgages: Whether to include any mortgages in the response.
        :type include_mortgages: bool
        :param all_properties: Whether to include all properties the clients own or just those that are party to the transaction.
        :type all_properties: bool
        :param all_mortgages: Whether to include all mortgages for the clients or just those pertinent to the transaction.
        :type all_mortgages: bool
        :param include_donors: Whether to include donors in the response.
        :type include_donors: bool
        :param include_source_response: Whether to include source response in mortgages. Default false.
        :type include_source_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_hydrated_case_serialize(
            case_id=case_id,
            include_mortgages=include_mortgages,
            all_properties=all_properties,
            all_mortgages=all_mortgages,
            include_donors=include_donors,
            include_source_response=include_source_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmHydratedCaseResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_hydrated_case_without_preload_content(
        self,
        case_id: Annotated[StrictStr, Field(description="The case ID to retrieve.")],
        include_mortgages: Annotated[Optional[StrictBool], Field(description="Whether to include any mortgages in the response.")] = None,
        all_properties: Annotated[Optional[StrictBool], Field(description="Whether to include all properties the clients own or just those that are party to the transaction.")] = None,
        all_mortgages: Annotated[Optional[StrictBool], Field(description="Whether to include all mortgages for the clients or just those pertinent to the transaction.")] = None,
        include_donors: Annotated[Optional[StrictBool], Field(description="Whether to include donors in the response.")] = None,
        include_source_response: Annotated[Optional[StrictBool], Field(description="Whether to include source response in mortgages. Default false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get hydrated case.


        :param case_id: The case ID to retrieve. (required)
        :type case_id: str
        :param include_mortgages: Whether to include any mortgages in the response.
        :type include_mortgages: bool
        :param all_properties: Whether to include all properties the clients own or just those that are party to the transaction.
        :type all_properties: bool
        :param all_mortgages: Whether to include all mortgages for the clients or just those pertinent to the transaction.
        :type all_mortgages: bool
        :param include_donors: Whether to include donors in the response.
        :type include_donors: bool
        :param include_source_response: Whether to include source response in mortgages. Default false.
        :type include_source_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_hydrated_case_serialize(
            case_id=case_id,
            include_mortgages=include_mortgages,
            all_properties=all_properties,
            all_mortgages=all_mortgages,
            include_donors=include_donors,
            include_source_response=include_source_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmHydratedCaseResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_hydrated_case_serialize(
        self,
        case_id,
        include_mortgages,
        all_properties,
        all_mortgages,
        include_donors,
        include_source_response,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if case_id is not None:
            _path_params['case_id'] = case_id
        # process the query parameters
        if include_mortgages is not None:
            
            _query_params.append(('include_mortgages', include_mortgages))
            
        if all_properties is not None:
            
            _query_params.append(('all_properties', all_properties))
            
        if all_mortgages is not None:
            
            _query_params.append(('all_mortgages', all_mortgages))
            
        if include_donors is not None:
            
            _query_params.append(('include_donors', include_donors))
            
        if include_source_response is not None:
            
            _query_params.append(('include_source_response', include_source_response))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/acre/case/{case_id}/hydrated',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


