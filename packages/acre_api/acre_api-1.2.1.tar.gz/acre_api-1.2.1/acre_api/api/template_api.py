# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from acre_api.models.cdm_create_template_response import CdmCreateTemplateResponse
from acre_api.models.cdm_email_template_request import CdmEmailTemplateRequest
from acre_api.models.cdm_email_template_response import CdmEmailTemplateResponse
from acre_api.models.cdm_get_template_response import CdmGetTemplateResponse
from acre_api.models.cdm_template import CdmTemplate

from acre_api.api_client import ApiClient, RequestSerialized
from acre_api.api_response import ApiResponse
from acre_api.rest import RESTResponseType


class TemplateApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_template(
        self,
        template: Annotated[CdmTemplate, Field(description="Details of the new template to be created. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmCreateTemplateResponse:
        """Create a template.


        :param template: Details of the new template to be created. Required. (required)
        :type template: CdmTemplate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_template_serialize(
            template=template,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmCreateTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_template_with_http_info(
        self,
        template: Annotated[CdmTemplate, Field(description="Details of the new template to be created. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmCreateTemplateResponse]:
        """Create a template.


        :param template: Details of the new template to be created. Required. (required)
        :type template: CdmTemplate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_template_serialize(
            template=template,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmCreateTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_template_without_preload_content(
        self,
        template: Annotated[CdmTemplate, Field(description="Details of the new template to be created. Required.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a template.


        :param template: Details of the new template to be created. Required. (required)
        :type template: CdmTemplate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_template_serialize(
            template=template,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmCreateTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_template_serialize(
        self,
        template,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if template is not None:
            _body_params = template


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/acre/template',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def email_template(
        self,
        body: Annotated[CdmEmailTemplateRequest, Field(description="Request to email a template.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmEmailTemplateResponse:
        """Email Template.


        :param body: Request to email a template. (required)
        :type body: CdmEmailTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._email_template_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmEmailTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def email_template_with_http_info(
        self,
        body: Annotated[CdmEmailTemplateRequest, Field(description="Request to email a template.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmEmailTemplateResponse]:
        """Email Template.


        :param body: Request to email a template. (required)
        :type body: CdmEmailTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._email_template_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmEmailTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def email_template_without_preload_content(
        self,
        body: Annotated[CdmEmailTemplateRequest, Field(description="Request to email a template.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Email Template.


        :param body: Request to email a template. (required)
        :type body: CdmEmailTemplateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._email_template_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmEmailTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _email_template_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/acre/email_template',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_template(
        self,
        show_outdated: Annotated[Optional[StrictBool], Field(description="Show outdated templates. By default this value is false and only the most recent templates per name per organisation are returned.")] = None,
        template_details: Annotated[Optional[StrictBool], Field(description="Return the entire template details. By default this value is false, and only the IDs are returned.")] = None,
        template_ids: Annotated[Optional[List[StrictStr]], Field(description="Template IDs (optional, default wildcard for all IDs user can access).")] = None,
        filter_organisation_id: Annotated[Optional[StrictStr], Field(description="Filter to only include templates for the specified organisation.")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter to only include the latest template with the given name. Use INVALID_TEMPLATE_NAME to disable this filter. This filter must be used with filter_organisation_id.   - INVALID_TEMPLATE_NAME: Unknown template name.  - NETWORK_PRIVACY_NOTICE: Network Privacy Notice that is set on the Principle and enforced on all ARs  - ORGANISATION_PRIVACY_NOTICE: Organisation (i.e. Brokerage) Privacy Notice  - IDD: IDD describing a firms services and fees.  - VERBAL_IDD: Verbal version of IDD  - WELCOME_EMAIL: Default welcome e-mail.  - WELCOME_EMAIL_AUTOMATED: Welcome e-mail when case is created.  - WELCOME_EMAIL_KBA: Welcome e-mail when broker invites client.  - ESIS: ESIS  - SUITABILITY_REPORT: Suitability Report  - COMPLIANCE_NOTIFICATION_EMAIL: Compliance notification email.  - CLIENT_PORTAL_IDD: Client portal version of IDD.  - PROTECTION_SUITABILITY_REPORT: Suitability Report for protection-only cases.  - CLIENT_EMAIL: Parent type for client emails  - SCHEDULING_EMAIL: Scheduling meeting invite email.  - FACT_FIND: Fact find template.")] = None,
        filter_sub_type: Annotated[Optional[StrictStr], Field(description="Filter to only include the latest template with the given sub_type. This filter must be used with filter_organisation_id and filter_name.")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmark. Set to the empty string (or omit) to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 500.")] = None,
        show_disabled: Annotated[Optional[StrictBool], Field(description="Include disabled templates in response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmGetTemplateResponse:
        """Get the template details.


        :param show_outdated: Show outdated templates. By default this value is false and only the most recent templates per name per organisation are returned.
        :type show_outdated: bool
        :param template_details: Return the entire template details. By default this value is false, and only the IDs are returned.
        :type template_details: bool
        :param template_ids: Template IDs (optional, default wildcard for all IDs user can access).
        :type template_ids: List[str]
        :param filter_organisation_id: Filter to only include templates for the specified organisation.
        :type filter_organisation_id: str
        :param filter_name: Filter to only include the latest template with the given name. Use INVALID_TEMPLATE_NAME to disable this filter. This filter must be used with filter_organisation_id.   - INVALID_TEMPLATE_NAME: Unknown template name.  - NETWORK_PRIVACY_NOTICE: Network Privacy Notice that is set on the Principle and enforced on all ARs  - ORGANISATION_PRIVACY_NOTICE: Organisation (i.e. Brokerage) Privacy Notice  - IDD: IDD describing a firms services and fees.  - VERBAL_IDD: Verbal version of IDD  - WELCOME_EMAIL: Default welcome e-mail.  - WELCOME_EMAIL_AUTOMATED: Welcome e-mail when case is created.  - WELCOME_EMAIL_KBA: Welcome e-mail when broker invites client.  - ESIS: ESIS  - SUITABILITY_REPORT: Suitability Report  - COMPLIANCE_NOTIFICATION_EMAIL: Compliance notification email.  - CLIENT_PORTAL_IDD: Client portal version of IDD.  - PROTECTION_SUITABILITY_REPORT: Suitability Report for protection-only cases.  - CLIENT_EMAIL: Parent type for client emails  - SCHEDULING_EMAIL: Scheduling meeting invite email.  - FACT_FIND: Fact find template.
        :type filter_name: str
        :param filter_sub_type: Filter to only include the latest template with the given sub_type. This filter must be used with filter_organisation_id and filter_name.
        :type filter_sub_type: str
        :param bookmark: Opaque pagination bookmark. Set to the empty string (or omit) to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 500.
        :type page_size: int
        :param show_disabled: Include disabled templates in response.
        :type show_disabled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_template_serialize(
            show_outdated=show_outdated,
            template_details=template_details,
            template_ids=template_ids,
            filter_organisation_id=filter_organisation_id,
            filter_name=filter_name,
            filter_sub_type=filter_sub_type,
            bookmark=bookmark,
            page_size=page_size,
            show_disabled=show_disabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_template_with_http_info(
        self,
        show_outdated: Annotated[Optional[StrictBool], Field(description="Show outdated templates. By default this value is false and only the most recent templates per name per organisation are returned.")] = None,
        template_details: Annotated[Optional[StrictBool], Field(description="Return the entire template details. By default this value is false, and only the IDs are returned.")] = None,
        template_ids: Annotated[Optional[List[StrictStr]], Field(description="Template IDs (optional, default wildcard for all IDs user can access).")] = None,
        filter_organisation_id: Annotated[Optional[StrictStr], Field(description="Filter to only include templates for the specified organisation.")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter to only include the latest template with the given name. Use INVALID_TEMPLATE_NAME to disable this filter. This filter must be used with filter_organisation_id.   - INVALID_TEMPLATE_NAME: Unknown template name.  - NETWORK_PRIVACY_NOTICE: Network Privacy Notice that is set on the Principle and enforced on all ARs  - ORGANISATION_PRIVACY_NOTICE: Organisation (i.e. Brokerage) Privacy Notice  - IDD: IDD describing a firms services and fees.  - VERBAL_IDD: Verbal version of IDD  - WELCOME_EMAIL: Default welcome e-mail.  - WELCOME_EMAIL_AUTOMATED: Welcome e-mail when case is created.  - WELCOME_EMAIL_KBA: Welcome e-mail when broker invites client.  - ESIS: ESIS  - SUITABILITY_REPORT: Suitability Report  - COMPLIANCE_NOTIFICATION_EMAIL: Compliance notification email.  - CLIENT_PORTAL_IDD: Client portal version of IDD.  - PROTECTION_SUITABILITY_REPORT: Suitability Report for protection-only cases.  - CLIENT_EMAIL: Parent type for client emails  - SCHEDULING_EMAIL: Scheduling meeting invite email.  - FACT_FIND: Fact find template.")] = None,
        filter_sub_type: Annotated[Optional[StrictStr], Field(description="Filter to only include the latest template with the given sub_type. This filter must be used with filter_organisation_id and filter_name.")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmark. Set to the empty string (or omit) to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 500.")] = None,
        show_disabled: Annotated[Optional[StrictBool], Field(description="Include disabled templates in response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmGetTemplateResponse]:
        """Get the template details.


        :param show_outdated: Show outdated templates. By default this value is false and only the most recent templates per name per organisation are returned.
        :type show_outdated: bool
        :param template_details: Return the entire template details. By default this value is false, and only the IDs are returned.
        :type template_details: bool
        :param template_ids: Template IDs (optional, default wildcard for all IDs user can access).
        :type template_ids: List[str]
        :param filter_organisation_id: Filter to only include templates for the specified organisation.
        :type filter_organisation_id: str
        :param filter_name: Filter to only include the latest template with the given name. Use INVALID_TEMPLATE_NAME to disable this filter. This filter must be used with filter_organisation_id.   - INVALID_TEMPLATE_NAME: Unknown template name.  - NETWORK_PRIVACY_NOTICE: Network Privacy Notice that is set on the Principle and enforced on all ARs  - ORGANISATION_PRIVACY_NOTICE: Organisation (i.e. Brokerage) Privacy Notice  - IDD: IDD describing a firms services and fees.  - VERBAL_IDD: Verbal version of IDD  - WELCOME_EMAIL: Default welcome e-mail.  - WELCOME_EMAIL_AUTOMATED: Welcome e-mail when case is created.  - WELCOME_EMAIL_KBA: Welcome e-mail when broker invites client.  - ESIS: ESIS  - SUITABILITY_REPORT: Suitability Report  - COMPLIANCE_NOTIFICATION_EMAIL: Compliance notification email.  - CLIENT_PORTAL_IDD: Client portal version of IDD.  - PROTECTION_SUITABILITY_REPORT: Suitability Report for protection-only cases.  - CLIENT_EMAIL: Parent type for client emails  - SCHEDULING_EMAIL: Scheduling meeting invite email.  - FACT_FIND: Fact find template.
        :type filter_name: str
        :param filter_sub_type: Filter to only include the latest template with the given sub_type. This filter must be used with filter_organisation_id and filter_name.
        :type filter_sub_type: str
        :param bookmark: Opaque pagination bookmark. Set to the empty string (or omit) to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 500.
        :type page_size: int
        :param show_disabled: Include disabled templates in response.
        :type show_disabled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_template_serialize(
            show_outdated=show_outdated,
            template_details=template_details,
            template_ids=template_ids,
            filter_organisation_id=filter_organisation_id,
            filter_name=filter_name,
            filter_sub_type=filter_sub_type,
            bookmark=bookmark,
            page_size=page_size,
            show_disabled=show_disabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_template_without_preload_content(
        self,
        show_outdated: Annotated[Optional[StrictBool], Field(description="Show outdated templates. By default this value is false and only the most recent templates per name per organisation are returned.")] = None,
        template_details: Annotated[Optional[StrictBool], Field(description="Return the entire template details. By default this value is false, and only the IDs are returned.")] = None,
        template_ids: Annotated[Optional[List[StrictStr]], Field(description="Template IDs (optional, default wildcard for all IDs user can access).")] = None,
        filter_organisation_id: Annotated[Optional[StrictStr], Field(description="Filter to only include templates for the specified organisation.")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter to only include the latest template with the given name. Use INVALID_TEMPLATE_NAME to disable this filter. This filter must be used with filter_organisation_id.   - INVALID_TEMPLATE_NAME: Unknown template name.  - NETWORK_PRIVACY_NOTICE: Network Privacy Notice that is set on the Principle and enforced on all ARs  - ORGANISATION_PRIVACY_NOTICE: Organisation (i.e. Brokerage) Privacy Notice  - IDD: IDD describing a firms services and fees.  - VERBAL_IDD: Verbal version of IDD  - WELCOME_EMAIL: Default welcome e-mail.  - WELCOME_EMAIL_AUTOMATED: Welcome e-mail when case is created.  - WELCOME_EMAIL_KBA: Welcome e-mail when broker invites client.  - ESIS: ESIS  - SUITABILITY_REPORT: Suitability Report  - COMPLIANCE_NOTIFICATION_EMAIL: Compliance notification email.  - CLIENT_PORTAL_IDD: Client portal version of IDD.  - PROTECTION_SUITABILITY_REPORT: Suitability Report for protection-only cases.  - CLIENT_EMAIL: Parent type for client emails  - SCHEDULING_EMAIL: Scheduling meeting invite email.  - FACT_FIND: Fact find template.")] = None,
        filter_sub_type: Annotated[Optional[StrictStr], Field(description="Filter to only include the latest template with the given sub_type. This filter must be used with filter_organisation_id and filter_name.")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmark. Set to the empty string (or omit) to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 500.")] = None,
        show_disabled: Annotated[Optional[StrictBool], Field(description="Include disabled templates in response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the template details.


        :param show_outdated: Show outdated templates. By default this value is false and only the most recent templates per name per organisation are returned.
        :type show_outdated: bool
        :param template_details: Return the entire template details. By default this value is false, and only the IDs are returned.
        :type template_details: bool
        :param template_ids: Template IDs (optional, default wildcard for all IDs user can access).
        :type template_ids: List[str]
        :param filter_organisation_id: Filter to only include templates for the specified organisation.
        :type filter_organisation_id: str
        :param filter_name: Filter to only include the latest template with the given name. Use INVALID_TEMPLATE_NAME to disable this filter. This filter must be used with filter_organisation_id.   - INVALID_TEMPLATE_NAME: Unknown template name.  - NETWORK_PRIVACY_NOTICE: Network Privacy Notice that is set on the Principle and enforced on all ARs  - ORGANISATION_PRIVACY_NOTICE: Organisation (i.e. Brokerage) Privacy Notice  - IDD: IDD describing a firms services and fees.  - VERBAL_IDD: Verbal version of IDD  - WELCOME_EMAIL: Default welcome e-mail.  - WELCOME_EMAIL_AUTOMATED: Welcome e-mail when case is created.  - WELCOME_EMAIL_KBA: Welcome e-mail when broker invites client.  - ESIS: ESIS  - SUITABILITY_REPORT: Suitability Report  - COMPLIANCE_NOTIFICATION_EMAIL: Compliance notification email.  - CLIENT_PORTAL_IDD: Client portal version of IDD.  - PROTECTION_SUITABILITY_REPORT: Suitability Report for protection-only cases.  - CLIENT_EMAIL: Parent type for client emails  - SCHEDULING_EMAIL: Scheduling meeting invite email.  - FACT_FIND: Fact find template.
        :type filter_name: str
        :param filter_sub_type: Filter to only include the latest template with the given sub_type. This filter must be used with filter_organisation_id and filter_name.
        :type filter_sub_type: str
        :param bookmark: Opaque pagination bookmark. Set to the empty string (or omit) to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 100 if not specified and can be specified up to 500.
        :type page_size: int
        :param show_disabled: Include disabled templates in response.
        :type show_disabled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_template_serialize(
            show_outdated=show_outdated,
            template_details=template_details,
            template_ids=template_ids,
            filter_organisation_id=filter_organisation_id,
            filter_name=filter_name,
            filter_sub_type=filter_sub_type,
            bookmark=bookmark,
            page_size=page_size,
            show_disabled=show_disabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetTemplateResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_template_serialize(
        self,
        show_outdated,
        template_details,
        template_ids,
        filter_organisation_id,
        filter_name,
        filter_sub_type,
        bookmark,
        page_size,
        show_disabled,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'template_ids': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if show_outdated is not None:
            
            _query_params.append(('show_outdated', show_outdated))
            
        if template_details is not None:
            
            _query_params.append(('template_details', template_details))
            
        if template_ids is not None:
            
            _query_params.append(('template_ids', template_ids))
            
        if filter_organisation_id is not None:
            
            _query_params.append(('filter_organisation_id', filter_organisation_id))
            
        if filter_name is not None:
            
            _query_params.append(('filter_name', filter_name))
            
        if filter_sub_type is not None:
            
            _query_params.append(('filter_sub_type', filter_sub_type))
            
        if bookmark is not None:
            
            _query_params.append(('bookmark', bookmark))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if show_disabled is not None:
            
            _query_params.append(('show_disabled', show_disabled))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/acre/template',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


