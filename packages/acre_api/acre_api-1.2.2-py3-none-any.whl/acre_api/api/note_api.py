# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from acre_api.models.cdm_create_note_response import CdmCreateNoteResponse
from acre_api.models.cdm_get_note_response import CdmGetNoteResponse
from acre_api.models.cdm_note import CdmNote
from acre_api.models.cdm_update_note_response import CdmUpdateNoteResponse
from acre_api.models.partial_details_of_the_note_to_be_updated import PartialDetailsOfTheNoteToBeUpdated

from acre_api.api_client import ApiClient, RequestSerialized
from acre_api.api_response import ApiResponse
from acre_api.rest import RESTResponseType


class NoteApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_note(
        self,
        note: Annotated[CdmNote, Field(description="Note to be created.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmCreateNoteResponse:
        """Create a note.


        :param note: Note to be created. (required)
        :type note: CdmNote
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_note_serialize(
            note=note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmCreateNoteResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_note_with_http_info(
        self,
        note: Annotated[CdmNote, Field(description="Note to be created.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmCreateNoteResponse]:
        """Create a note.


        :param note: Note to be created. (required)
        :type note: CdmNote
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_note_serialize(
            note=note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmCreateNoteResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_note_without_preload_content(
        self,
        note: Annotated[CdmNote, Field(description="Note to be created.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a note.


        :param note: Note to be created. (required)
        :type note: CdmNote
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_note_serialize(
            note=note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmCreateNoteResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_note_serialize(
        self,
        note,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if note is not None:
            _body_params = note


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/acre/note',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_note(
        self,
        note_ids: Annotated[Optional[List[StrictStr]], Field(description="Return notes by IDs. Must also provide organisation_id.")] = None,
        organisation_id: Annotated[Optional[StrictStr], Field(description="Organisation ID of the notes to be retrieved. Must be provided with 1 other parameter and can't be provided on its own.")] = None,
        filter_case_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this case ID. Must also provide organisation_id.")] = None,
        filter_client_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this client ID. Must also provide organisation_id.")] = None,
        filter_property_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this property ID. Must also provide organisation_id.")] = None,
        filter_mortgage_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this mortgage ID. Must also provide organisation_id.")] = None,
        filter_assignee_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this assignee ID. Must also provide organisation_id.")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmarks for ID filters. It may be omitted to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 30 if not specified and can be specified up to 100.")] = None,
        filter_ext_ids: Annotated[Optional[List[StrictStr]], Field(description="Only include notes with the specified external IDs. This filter must be used in conjunction with filter_ext_source. Cannot be used with note_ids.")] = None,
        filter_ext_source: Annotated[Optional[StrictStr], Field(description="Filtering by external source. This filter must be used in conjunction with filter_ext_ids. Cannot be used with note_ids.   - ONFIDO: Onfido (https://onfido.com/).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmGetNoteResponse:
        """Retrieve note.


        :param note_ids: Return notes by IDs. Must also provide organisation_id.
        :type note_ids: List[str]
        :param organisation_id: Organisation ID of the notes to be retrieved. Must be provided with 1 other parameter and can't be provided on its own.
        :type organisation_id: str
        :param filter_case_id: Return notes linked to this case ID. Must also provide organisation_id.
        :type filter_case_id: str
        :param filter_client_id: Return notes linked to this client ID. Must also provide organisation_id.
        :type filter_client_id: str
        :param filter_property_id: Return notes linked to this property ID. Must also provide organisation_id.
        :type filter_property_id: str
        :param filter_mortgage_id: Return notes linked to this mortgage ID. Must also provide organisation_id.
        :type filter_mortgage_id: str
        :param filter_assignee_id: Return notes linked to this assignee ID. Must also provide organisation_id.
        :type filter_assignee_id: str
        :param bookmark: Opaque pagination bookmarks for ID filters. It may be omitted to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 30 if not specified and can be specified up to 100.
        :type page_size: int
        :param filter_ext_ids: Only include notes with the specified external IDs. This filter must be used in conjunction with filter_ext_source. Cannot be used with note_ids.
        :type filter_ext_ids: List[str]
        :param filter_ext_source: Filtering by external source. This filter must be used in conjunction with filter_ext_ids. Cannot be used with note_ids.   - ONFIDO: Onfido (https://onfido.com/).
        :type filter_ext_source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_note_serialize(
            note_ids=note_ids,
            organisation_id=organisation_id,
            filter_case_id=filter_case_id,
            filter_client_id=filter_client_id,
            filter_property_id=filter_property_id,
            filter_mortgage_id=filter_mortgage_id,
            filter_assignee_id=filter_assignee_id,
            bookmark=bookmark,
            page_size=page_size,
            filter_ext_ids=filter_ext_ids,
            filter_ext_source=filter_ext_source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetNoteResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_note_with_http_info(
        self,
        note_ids: Annotated[Optional[List[StrictStr]], Field(description="Return notes by IDs. Must also provide organisation_id.")] = None,
        organisation_id: Annotated[Optional[StrictStr], Field(description="Organisation ID of the notes to be retrieved. Must be provided with 1 other parameter and can't be provided on its own.")] = None,
        filter_case_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this case ID. Must also provide organisation_id.")] = None,
        filter_client_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this client ID. Must also provide organisation_id.")] = None,
        filter_property_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this property ID. Must also provide organisation_id.")] = None,
        filter_mortgage_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this mortgage ID. Must also provide organisation_id.")] = None,
        filter_assignee_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this assignee ID. Must also provide organisation_id.")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmarks for ID filters. It may be omitted to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 30 if not specified and can be specified up to 100.")] = None,
        filter_ext_ids: Annotated[Optional[List[StrictStr]], Field(description="Only include notes with the specified external IDs. This filter must be used in conjunction with filter_ext_source. Cannot be used with note_ids.")] = None,
        filter_ext_source: Annotated[Optional[StrictStr], Field(description="Filtering by external source. This filter must be used in conjunction with filter_ext_ids. Cannot be used with note_ids.   - ONFIDO: Onfido (https://onfido.com/).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmGetNoteResponse]:
        """Retrieve note.


        :param note_ids: Return notes by IDs. Must also provide organisation_id.
        :type note_ids: List[str]
        :param organisation_id: Organisation ID of the notes to be retrieved. Must be provided with 1 other parameter and can't be provided on its own.
        :type organisation_id: str
        :param filter_case_id: Return notes linked to this case ID. Must also provide organisation_id.
        :type filter_case_id: str
        :param filter_client_id: Return notes linked to this client ID. Must also provide organisation_id.
        :type filter_client_id: str
        :param filter_property_id: Return notes linked to this property ID. Must also provide organisation_id.
        :type filter_property_id: str
        :param filter_mortgage_id: Return notes linked to this mortgage ID. Must also provide organisation_id.
        :type filter_mortgage_id: str
        :param filter_assignee_id: Return notes linked to this assignee ID. Must also provide organisation_id.
        :type filter_assignee_id: str
        :param bookmark: Opaque pagination bookmarks for ID filters. It may be omitted to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 30 if not specified and can be specified up to 100.
        :type page_size: int
        :param filter_ext_ids: Only include notes with the specified external IDs. This filter must be used in conjunction with filter_ext_source. Cannot be used with note_ids.
        :type filter_ext_ids: List[str]
        :param filter_ext_source: Filtering by external source. This filter must be used in conjunction with filter_ext_ids. Cannot be used with note_ids.   - ONFIDO: Onfido (https://onfido.com/).
        :type filter_ext_source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_note_serialize(
            note_ids=note_ids,
            organisation_id=organisation_id,
            filter_case_id=filter_case_id,
            filter_client_id=filter_client_id,
            filter_property_id=filter_property_id,
            filter_mortgage_id=filter_mortgage_id,
            filter_assignee_id=filter_assignee_id,
            bookmark=bookmark,
            page_size=page_size,
            filter_ext_ids=filter_ext_ids,
            filter_ext_source=filter_ext_source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetNoteResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_note_without_preload_content(
        self,
        note_ids: Annotated[Optional[List[StrictStr]], Field(description="Return notes by IDs. Must also provide organisation_id.")] = None,
        organisation_id: Annotated[Optional[StrictStr], Field(description="Organisation ID of the notes to be retrieved. Must be provided with 1 other parameter and can't be provided on its own.")] = None,
        filter_case_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this case ID. Must also provide organisation_id.")] = None,
        filter_client_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this client ID. Must also provide organisation_id.")] = None,
        filter_property_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this property ID. Must also provide organisation_id.")] = None,
        filter_mortgage_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this mortgage ID. Must also provide organisation_id.")] = None,
        filter_assignee_id: Annotated[Optional[StrictStr], Field(description="Return notes linked to this assignee ID. Must also provide organisation_id.")] = None,
        bookmark: Annotated[Optional[StrictStr], Field(description="Opaque pagination bookmarks for ID filters. It may be omitted to begin.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 30 if not specified and can be specified up to 100.")] = None,
        filter_ext_ids: Annotated[Optional[List[StrictStr]], Field(description="Only include notes with the specified external IDs. This filter must be used in conjunction with filter_ext_source. Cannot be used with note_ids.")] = None,
        filter_ext_source: Annotated[Optional[StrictStr], Field(description="Filtering by external source. This filter must be used in conjunction with filter_ext_ids. Cannot be used with note_ids.   - ONFIDO: Onfido (https://onfido.com/).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve note.


        :param note_ids: Return notes by IDs. Must also provide organisation_id.
        :type note_ids: List[str]
        :param organisation_id: Organisation ID of the notes to be retrieved. Must be provided with 1 other parameter and can't be provided on its own.
        :type organisation_id: str
        :param filter_case_id: Return notes linked to this case ID. Must also provide organisation_id.
        :type filter_case_id: str
        :param filter_client_id: Return notes linked to this client ID. Must also provide organisation_id.
        :type filter_client_id: str
        :param filter_property_id: Return notes linked to this property ID. Must also provide organisation_id.
        :type filter_property_id: str
        :param filter_mortgage_id: Return notes linked to this mortgage ID. Must also provide organisation_id.
        :type filter_mortgage_id: str
        :param filter_assignee_id: Return notes linked to this assignee ID. Must also provide organisation_id.
        :type filter_assignee_id: str
        :param bookmark: Opaque pagination bookmarks for ID filters. It may be omitted to begin.
        :type bookmark: str
        :param page_size: Specify a limit on the number of items returned in a page. Values that are too large will be rejected. All requests are subject to the page size, which is 30 if not specified and can be specified up to 100.
        :type page_size: int
        :param filter_ext_ids: Only include notes with the specified external IDs. This filter must be used in conjunction with filter_ext_source. Cannot be used with note_ids.
        :type filter_ext_ids: List[str]
        :param filter_ext_source: Filtering by external source. This filter must be used in conjunction with filter_ext_ids. Cannot be used with note_ids.   - ONFIDO: Onfido (https://onfido.com/).
        :type filter_ext_source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_note_serialize(
            note_ids=note_ids,
            organisation_id=organisation_id,
            filter_case_id=filter_case_id,
            filter_client_id=filter_client_id,
            filter_property_id=filter_property_id,
            filter_mortgage_id=filter_mortgage_id,
            filter_assignee_id=filter_assignee_id,
            bookmark=bookmark,
            page_size=page_size,
            filter_ext_ids=filter_ext_ids,
            filter_ext_source=filter_ext_source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmGetNoteResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_note_serialize(
        self,
        note_ids,
        organisation_id,
        filter_case_id,
        filter_client_id,
        filter_property_id,
        filter_mortgage_id,
        filter_assignee_id,
        bookmark,
        page_size,
        filter_ext_ids,
        filter_ext_source,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'note_ids': 'multi',
            'filter_ext_ids': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if note_ids is not None:
            
            _query_params.append(('note_ids', note_ids))
            
        if organisation_id is not None:
            
            _query_params.append(('organisation_id', organisation_id))
            
        if filter_case_id is not None:
            
            _query_params.append(('filter_case_id', filter_case_id))
            
        if filter_client_id is not None:
            
            _query_params.append(('filter_client_id', filter_client_id))
            
        if filter_property_id is not None:
            
            _query_params.append(('filter_property_id', filter_property_id))
            
        if filter_mortgage_id is not None:
            
            _query_params.append(('filter_mortgage_id', filter_mortgage_id))
            
        if filter_assignee_id is not None:
            
            _query_params.append(('filter_assignee_id', filter_assignee_id))
            
        if bookmark is not None:
            
            _query_params.append(('bookmark', bookmark))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if filter_ext_ids is not None:
            
            _query_params.append(('filter_ext_ids', filter_ext_ids))
            
        if filter_ext_source is not None:
            
            _query_params.append(('filter_ext_source', filter_ext_source))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/acre/note',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_note(
        self,
        note_note_id: Annotated[StrictStr, Field(description="Reference ID of the note. **IMPORTANT:** This field cannot be updated and is populated automatically.")],
        note: Annotated[PartialDetailsOfTheNoteToBeUpdated, Field(description="Partial details of the note to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdmUpdateNoteResponse:
        """Update a note.


        :param note_note_id: Reference ID of the note. **IMPORTANT:** This field cannot be updated and is populated automatically. (required)
        :type note_note_id: str
        :param note: Partial details of the note to be updated. (required)
        :type note: PartialDetailsOfTheNoteToBeUpdated
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_note_serialize(
            note_note_id=note_note_id,
            note=note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmUpdateNoteResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_note_with_http_info(
        self,
        note_note_id: Annotated[StrictStr, Field(description="Reference ID of the note. **IMPORTANT:** This field cannot be updated and is populated automatically.")],
        note: Annotated[PartialDetailsOfTheNoteToBeUpdated, Field(description="Partial details of the note to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdmUpdateNoteResponse]:
        """Update a note.


        :param note_note_id: Reference ID of the note. **IMPORTANT:** This field cannot be updated and is populated automatically. (required)
        :type note_note_id: str
        :param note: Partial details of the note to be updated. (required)
        :type note: PartialDetailsOfTheNoteToBeUpdated
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_note_serialize(
            note_note_id=note_note_id,
            note=note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmUpdateNoteResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_note_without_preload_content(
        self,
        note_note_id: Annotated[StrictStr, Field(description="Reference ID of the note. **IMPORTANT:** This field cannot be updated and is populated automatically.")],
        note: Annotated[PartialDetailsOfTheNoteToBeUpdated, Field(description="Partial details of the note to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a note.


        :param note_note_id: Reference ID of the note. **IMPORTANT:** This field cannot be updated and is populated automatically. (required)
        :type note_note_id: str
        :param note: Partial details of the note to be updated. (required)
        :type note: PartialDetailsOfTheNoteToBeUpdated
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_note_serialize(
            note_note_id=note_note_id,
            note=note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CdmUpdateNoteResponse",
            '400': "V1ExceptionResponse",
            '401': "V1ExceptionResponse",
            '403': "V1ExceptionResponse",
            '404': "V1ExceptionResponse",
            '405': "str",
            '500': "V1ExceptionResponse",
            '503': "V1ExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_note_serialize(
        self,
        note_note_id,
        note,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if note_note_id is not None:
            _path_params['note.note_id'] = note_note_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if note is not None:
            _body_params = note


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/acre/note/{note.note_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


