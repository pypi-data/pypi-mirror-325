# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from acre_api.models.cdm_extended_device_details import CdmExtendedDeviceDetails
from acre_api.models.cdm_verification_result import CdmVerificationResult
from acre_api.models.cdm_verification_source_type import CdmVerificationSourceType
from acre_api.models.cdm_verification_type import CdmVerificationType
from typing import Optional, Set
from typing_extensions import Self

class CdmDocumentVerification(BaseModel):
    """
    A verification of a document.
    """ # noqa: E501
    verification_id: Optional[StrictStr] = Field(default=None, description="Identifier for this verification.")
    document_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for document being verified.")
    verification_date: Optional[StrictStr] = Field(default=None, description="When this verification happened.")
    verification_type: Optional[CdmVerificationType] = CdmVerificationType.INVALID_VERIFICATION_TYPE
    source: Optional[CdmVerificationSourceType] = CdmVerificationSourceType.INVALID_VERIFICATION_SOURCE_TYPE
    source_user_id: Optional[StrictStr] = Field(default=None, description="If verified by a user, the UUID for said user.")
    client_id: Optional[StrictStr] = Field(default=None, description="If verified by a client directly in the client portal or if verified by an advisor on behalf of a client, the UUID of said client.")
    verification_fingerprint_ip: Optional[StrictStr] = Field(default=None, description="Verification fingerprint ip. This field cannot be updated/set directly, and is populated by the backend automatically.")
    verification_fingerprint_user_agent: Optional[StrictStr] = Field(default=None, description="Verification fingerprint user_agent. This field cannot be updated/set directly, and is populated by the backend automatically.")
    verification_fingerprint_referer: Optional[StrictStr] = Field(default=None, description="Verification fingerprint referer. This field cannot be updated/set directly, and is populated by the backend automatically.")
    verification_fingerprint_browser_id: Optional[StrictStr] = Field(default=None, description="Verification fingerprint browser id. This field is set by the client.")
    document_signature: Optional[StrictStr] = Field(default=None, description="The signature of the document as returned from retrieve document/render template API.")
    signature_key_id: Optional[StrictStr] = Field(default=None, description="Key ID for the key used to generated the document signature.")
    extracted_metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="If verification is automated, any data extracted during the automated verification process. E..g. For Payslip this could be salary and date.")
    result: Optional[CdmVerificationResult] = CdmVerificationResult.INVALID_VERIFICATION_RESULT
    result_justification: Optional[List[StrictStr]] = Field(default=None, description="Result justification.")
    extended_result: Optional[StrictStr] = Field(default=None, description="Justification for the verification result.")
    provider_reference: Optional[StrictStr] = Field(default=None, description="If verification is automated, provider UID for this verification.")
    extended_device_details: Optional[CdmExtendedDeviceDetails] = None
    source_response: Optional[StrictStr] = Field(default=None, description="If verification is automated, raw response from verification provider.")
    __properties: ClassVar[List[str]] = ["verification_id", "document_id", "verification_date", "verification_type", "source", "source_user_id", "client_id", "verification_fingerprint_ip", "verification_fingerprint_user_agent", "verification_fingerprint_referer", "verification_fingerprint_browser_id", "document_signature", "signature_key_id", "extracted_metadata", "result", "result_justification", "extended_result", "provider_reference", "extended_device_details", "source_response"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdmDocumentVerification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extended_device_details
        if self.extended_device_details:
            _dict['extended_device_details'] = self.extended_device_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdmDocumentVerification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "verification_id": obj.get("verification_id"),
            "document_id": obj.get("document_id"),
            "verification_date": obj.get("verification_date"),
            "verification_type": obj.get("verification_type") if obj.get("verification_type") is not None else CdmVerificationType.INVALID_VERIFICATION_TYPE,
            "source": obj.get("source") if obj.get("source") is not None else CdmVerificationSourceType.INVALID_VERIFICATION_SOURCE_TYPE,
            "source_user_id": obj.get("source_user_id"),
            "client_id": obj.get("client_id"),
            "verification_fingerprint_ip": obj.get("verification_fingerprint_ip"),
            "verification_fingerprint_user_agent": obj.get("verification_fingerprint_user_agent"),
            "verification_fingerprint_referer": obj.get("verification_fingerprint_referer"),
            "verification_fingerprint_browser_id": obj.get("verification_fingerprint_browser_id"),
            "document_signature": obj.get("document_signature"),
            "signature_key_id": obj.get("signature_key_id"),
            "extracted_metadata": obj.get("extracted_metadata"),
            "result": obj.get("result") if obj.get("result") is not None else CdmVerificationResult.INVALID_VERIFICATION_RESULT,
            "result_justification": obj.get("result_justification"),
            "extended_result": obj.get("extended_result"),
            "provider_reference": obj.get("provider_reference"),
            "extended_device_details": CdmExtendedDeviceDetails.from_dict(obj["extended_device_details"]) if obj.get("extended_device_details") is not None else None,
            "source_response": obj.get("source_response")
        })
        return _obj


