# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from acre_api.models.cdm_credit_search_consent_type import CdmCreditSearchConsentType
from acre_api.models.cdm_fingerprint import CdmFingerprint
from typing import Optional, Set
from typing_extensions import Self

class CdmCreditSearchConsent(BaseModel):
    """
    CdmCreditSearchConsent
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="UUID - this field cannot be updated/set directly, and is populated by the backend automatically.")
    consented_at: Optional[StrictStr] = Field(default=None, description="The date a consent was given in RFC3339 format - this field cannot be updated/set directly, and is populated by the backend automatically.")
    consenting_entity: Optional[CdmCreditSearchConsentType] = CdmCreditSearchConsentType.CONSENTED_BY_INVALID
    consented_by: Optional[StrictStr] = Field(default=None, description="The user ID of the consenting entity. This will be empty if `consenting_entity == CONSENTED_BY_CLIENT`.")
    fingerprint: Optional[CdmFingerprint] = None
    __properties: ClassVar[List[str]] = ["id", "consented_at", "consenting_entity", "consented_by", "fingerprint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdmCreditSearchConsent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fingerprint
        if self.fingerprint:
            _dict['fingerprint'] = self.fingerprint.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdmCreditSearchConsent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "consented_at": obj.get("consented_at"),
            "consenting_entity": obj.get("consenting_entity") if obj.get("consenting_entity") is not None else CdmCreditSearchConsentType.CONSENTED_BY_INVALID,
            "consented_by": obj.get("consented_by"),
            "fingerprint": CdmFingerprint.from_dict(obj["fingerprint"]) if obj.get("fingerprint") is not None else None
        })
        return _obj


