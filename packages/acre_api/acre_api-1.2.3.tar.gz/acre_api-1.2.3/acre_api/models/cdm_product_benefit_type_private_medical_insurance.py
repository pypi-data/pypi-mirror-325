# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from acre_api.models.cdm_hospital_list import CdmHospitalList
from acre_api.models.cdm_product_type import CdmProductType
from acre_api.models.cdm_underwriting_level import CdmUnderwritingLevel
from typing import Optional, Set
from typing_extensions import Self

class CdmProductBenefitTypePrivateMedicalInsurance(BaseModel):
    """
    CdmProductBenefitTypePrivateMedicalInsurance
    """ # noqa: E501
    client_ids: Optional[List[StrictStr]] = Field(default=None, description="The client(s) to whom the product benefit is tied.")
    excess_amount: Optional[StrictStr] = Field(default=None, description="The amount of excess the client would need to pay on claim.")
    underwriting_level: Optional[CdmUnderwritingLevel] = CdmUnderwritingLevel.UNDERWRITING_LEVEL_INVALID
    outpatient_cover: Optional[StrictStr] = Field(default=None, description="Outpatient cover amount.")
    hospital_list: Optional[CdmHospitalList] = CdmHospitalList.HOSPITAL_LIST_INVALID
    cancer_cover: Optional[StrictBool] = Field(default=None, description="Indicates whether the policy includes cancer coverage.")
    dental_and_optical: Optional[StrictBool] = Field(default=None, description="Indicates whether the policy includes dental and optical coverage.")
    therapies: Optional[StrictBool] = Field(default=None, description="Indicates whether the policy includes therapy coverage.")
    physiotherapy: Optional[StrictBool] = Field(default=None, description="Indicates whether the policy includes physiotherapy coverage.")
    six_week_option: Optional[StrictBool] = Field(default=None, description="Indicates whether the six week options applies to this policy. A six week option means that if the patient is able to be treated by the NHS within a six week period by the NHS, they must use NHS treatment as their policy will not cover private treatment. Once the six week period has elapsed, the policy will cover treatment outside of the NHS. This option is used to reduce premiums.")
    travel_international: Optional[StrictBool] = Field(default=None, description="Indicates whether the policy includes coverage for  medical expenses incurred whilst travelling abroad. This can include medical treatment, hospital stays and repatriation costs.")
    private_gp_cover: Optional[StrictBool] = Field(default=None, description="Indicates whether the policy includes private GP coverage.")
    additional_notes: Optional[StrictStr] = None
    product_type: Optional[CdmProductType] = CdmProductType.PRODUCT_TYPE_INVALID
    outpatient_full_cover: Optional[StrictBool] = Field(default=None, description="Indicates whether the outpatient coverage is unlimited.")
    mental_health: Optional[StrictBool] = Field(default=None, description="Indicates whether the policy includes mental health coverage.")
    __properties: ClassVar[List[str]] = ["client_ids", "excess_amount", "underwriting_level", "outpatient_cover", "hospital_list", "cancer_cover", "dental_and_optical", "therapies", "physiotherapy", "six_week_option", "travel_international", "private_gp_cover", "additional_notes", "product_type", "outpatient_full_cover", "mental_health"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdmProductBenefitTypePrivateMedicalInsurance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdmProductBenefitTypePrivateMedicalInsurance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_ids": obj.get("client_ids"),
            "excess_amount": obj.get("excess_amount"),
            "underwriting_level": obj.get("underwriting_level") if obj.get("underwriting_level") is not None else CdmUnderwritingLevel.UNDERWRITING_LEVEL_INVALID,
            "outpatient_cover": obj.get("outpatient_cover"),
            "hospital_list": obj.get("hospital_list") if obj.get("hospital_list") is not None else CdmHospitalList.HOSPITAL_LIST_INVALID,
            "cancer_cover": obj.get("cancer_cover"),
            "dental_and_optical": obj.get("dental_and_optical"),
            "therapies": obj.get("therapies"),
            "physiotherapy": obj.get("physiotherapy"),
            "six_week_option": obj.get("six_week_option"),
            "travel_international": obj.get("travel_international"),
            "private_gp_cover": obj.get("private_gp_cover"),
            "additional_notes": obj.get("additional_notes"),
            "product_type": obj.get("product_type") if obj.get("product_type") is not None else CdmProductType.PRODUCT_TYPE_INVALID,
            "outpatient_full_cover": obj.get("outpatient_full_cover"),
            "mental_health": obj.get("mental_health")
        })
        return _obj


