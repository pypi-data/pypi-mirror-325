# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from acre_api.models.cdm_case_details_status import CdmCaseDetailsStatus
from acre_api.models.cdm_property_id_and_version import CdmPropertyIDAndVersion
from typing import Optional, Set
from typing_extensions import Self

class CdmTransitionPropertyVersions(BaseModel):
    """
    ID and version of the properties when the case was transitioning to a particular status. The snapshot is made just before the transition happens and changes are done to the entities.
    """ # noqa: E501
    entity_versions: Optional[List[CdmPropertyIDAndVersion]] = Field(default=None, description="List of property IDs and their version just before the case transitioned to the status. Properties linked to case via preference_target_property or preference_related_property_sale are versioned.")
    transition_to: Optional[CdmCaseDetailsStatus] = CdmCaseDetailsStatus.INVALID_STATUS
    created_at: Optional[StrictStr] = Field(default=None, description="Date (RFC3339) of when the versions for this transition where created. **IMPORTANT:** This field cannot be updated and is populated automatically. This will help determine the order of the transitions in case the same one was saved multiple times (like when reopening a case).")
    __properties: ClassVar[List[str]] = ["entity_versions", "transition_to", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdmTransitionPropertyVersions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entity_versions (list)
        _items = []
        if self.entity_versions:
            for _item_entity_versions in self.entity_versions:
                if _item_entity_versions:
                    _items.append(_item_entity_versions.to_dict())
            _dict['entity_versions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdmTransitionPropertyVersions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entity_versions": [CdmPropertyIDAndVersion.from_dict(_item) for _item in obj["entity_versions"]] if obj.get("entity_versions") is not None else None,
            "transition_to": obj.get("transition_to") if obj.get("transition_to") is not None else CdmCaseDetailsStatus.INVALID_STATUS,
            "created_at": obj.get("created_at")
        })
        return _obj


