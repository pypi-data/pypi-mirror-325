# coding: utf-8

"""
    Acre Platform User API

    # CORS CORS is implemented by all Acre API endpoints and only certain hostnames are allowed for each deployment of the API. If your use case requires calling the Acre User API from a browser, please contact Acre to arrange the appropriate configuration. # API Authentication The primary method of authentication for users of the Acre API is with the use of JSON Web Tokens (JWTs), which are suplemented by an application specific API Key. The API key must be provided through the `X-API-KEY` HTTP header and will be provided by your Acre Customer Success Manager. The JWT must be provided through a cookie with key of `authorization`. The JWT must be generated and signed as per the following section. # Generating JWTs JWT must either be generated by a third-party such as Azure ADB2C that has been configured for the appropriate service and/or user account, or alternatively can be generated locally and signed by an private key for which the public key has been made available to Acre via a JWKS URL. In addition to being signed by your private key, the JWT will also need to contain at a minimum:  * An issuer `iss`, which must be a valid URI previously agreed with Acre.  * A subject `sub`, which must be a unique identifier for the user and/or service account previously agreed with Acre.  * An expiry time `exp` which must not be more than four hours in the future.  * A not before time `nbf` which must be in the past, but not greater than six hours in the past.  The JWT should be signed using RS256.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from acre_api.models.case_details_mortgage_reason import CaseDetailsMortgageReason
from acre_api.models.cdm_commission_type import CdmCommissionType
from acre_api.models.cdm_conditional_on_introducer import CdmConditionalOnIntroducer
from acre_api.models.cdm_conditional_on_related_user import CdmConditionalOnRelatedUser
from acre_api.models.cdm_deduction_type import CdmDeductionType
from acre_api.models.cdm_frequency import CdmFrequency
from acre_api.models.cdm_related_user_relationship_type import CdmRelatedUserRelationshipType
from acre_api.models.cdm_revenue_type import CdmRevenueType
from acre_api.models.cdm_tier_commission import CdmTierCommission
from acre_api.models.commission_details_commission_payment_due import CommissionDetailsCommissionPaymentDue
from typing import Optional, Set
from typing_extensions import Self

class CdmCommissionDetails(BaseModel):
    """
    CdmCommissionDetails
    """ # noqa: E501
    type: Optional[CdmCommissionType] = CdmCommissionType.INVALID_COMMISSION_TYPE
    case_types: Optional[List[CaseDetailsMortgageReason]] = Field(default=None, description="If commission is for cost per lead, this indicates which type of cases it will apply to.")
    revenue_types: Optional[List[CdmRevenueType]] = Field(default=None, description="If commission is for revenue share or tier commission, this field is mandatory and indicates which revenue types it should take into account.")
    deduction_types: Optional[List[CdmDeductionType]] = Field(default=None, description="If commission is for revenue share, this indicates which deductions need to be applied.")
    fixed_value: Optional[StrictStr] = Field(default=None, description="The fixed value that the commission will apply (in pence). This field is not compatible with percentage or tier_commission.")
    percentage: Optional[StrictInt] = Field(default=None, description="The percentage applicable for the commission. This field is not compatible with fixed_value or tier_commission. This value must be in our standard 5dp percentage format.")
    tier_commission: Optional[CdmTierCommission] = None
    frequency: Optional[CdmFrequency] = CdmFrequency.INVALID
    number_of_payments: Optional[StrictInt] = Field(default=None, description="This indicates the number of payments that will need to be done. If the frequency is MONTHLY, the payments will be one each month one by one. If the frequency is ONCE, this indicates the number of payments that will be paid in one lump sum.")
    payment_due: Optional[CommissionDetailsCommissionPaymentDue] = CommissionDetailsCommissionPaymentDue.INVALID_PAYMENT_DUE
    user_relation_to_case: Optional[List[CdmRelatedUserRelationshipType]] = Field(default=None, description="Users relationship to case.")
    introducer_condition: Optional[CdmConditionalOnIntroducer] = None
    related_user_condition: Optional[CdmConditionalOnRelatedUser] = None
    __properties: ClassVar[List[str]] = ["type", "case_types", "revenue_types", "deduction_types", "fixed_value", "percentage", "tier_commission", "frequency", "number_of_payments", "payment_due", "user_relation_to_case", "introducer_condition", "related_user_condition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdmCommissionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tier_commission
        if self.tier_commission:
            _dict['tier_commission'] = self.tier_commission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of introducer_condition
        if self.introducer_condition:
            _dict['introducer_condition'] = self.introducer_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of related_user_condition
        if self.related_user_condition:
            _dict['related_user_condition'] = self.related_user_condition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdmCommissionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type") if obj.get("type") is not None else CdmCommissionType.INVALID_COMMISSION_TYPE,
            "case_types": obj.get("case_types"),
            "revenue_types": obj.get("revenue_types"),
            "deduction_types": obj.get("deduction_types"),
            "fixed_value": obj.get("fixed_value"),
            "percentage": obj.get("percentage"),
            "tier_commission": CdmTierCommission.from_dict(obj["tier_commission"]) if obj.get("tier_commission") is not None else None,
            "frequency": obj.get("frequency") if obj.get("frequency") is not None else CdmFrequency.INVALID,
            "number_of_payments": obj.get("number_of_payments"),
            "payment_due": obj.get("payment_due") if obj.get("payment_due") is not None else CommissionDetailsCommissionPaymentDue.INVALID_PAYMENT_DUE,
            "user_relation_to_case": obj.get("user_relation_to_case"),
            "introducer_condition": CdmConditionalOnIntroducer.from_dict(obj["introducer_condition"]) if obj.get("introducer_condition") is not None else None,
            "related_user_condition": CdmConditionalOnRelatedUser.from_dict(obj["related_user_condition"]) if obj.get("related_user_condition") is not None else None
        })
        return _obj


