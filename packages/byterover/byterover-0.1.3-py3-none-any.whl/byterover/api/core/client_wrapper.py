# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from byterover.api.core.http_client import HttpClient, AsyncHttpClient


class BaseClientWrapper:
    def __init__(
        self,
        *,
        public_token: typing.Optional[str] = None,
        secret_token: typing.Optional[str] = None,
		username: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        base_url: str,
        timeout: typing.Optional[float] = None,
    ):
        self._public_token = public_token
        self._secret_token = secret_token
        self._username = username
        self._base_url = base_url
        self._timeout = timeout

    def get_headers(self) -> typing.Dict[str, str]:
        headers: typing.Dict[str, str] = {"Content-Type": "application/json"}
        public_token = self._public_token
        if self._public_token is not None:
            headers["x-byterover-Public-Key"] = public_token
        if self._secret_token is not None:
            headers["x-byterover-Secret-Key"] = self._secret_token
        return headers

    def _get_username(self) -> typing.Optional[str]:
        if isinstance(self._username, str) or self._username is None:
            return self._username
        else:
            return self._username()

    def get_base_url(self) -> str:
        return self._base_url

    def get_timeout(self) -> typing.Optional[float]:
        return self._timeout


class SyncClientWrapper(BaseClientWrapper):
    def __init__(
        self,
        *,
        public_token: typing.Optional[str] = None,
        secret_token: typing.Optional[str] = None,
        username: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        base_url: str,
        timeout: typing.Optional[float] = None,
        httpx_client: httpx.Client,
    ):
        super().__init__(
            public_token=public_token,
            secret_token=secret_token,
            username=username,
            base_url=base_url,
            timeout=timeout,
        )
        self.httpx_client = HttpClient(
            httpx_client=httpx_client,
            base_headers=self.get_headers(),
            base_timeout=self.get_timeout(),
            base_url=self.get_base_url(),
        )


class AsyncClientWrapper(BaseClientWrapper):
    def __init__(
        self,
        *,
        public_token: typing.Optional[str] = None,
        secret_token: typing.Optional[str] = None,
        username: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        base_url: str,
        timeout: typing.Optional[float] = None,
        httpx_client: httpx.AsyncClient,
    ):
        super().__init__(
            public_token=public_token,
            secret_token=secret_token,
            username=username,
            base_url=base_url,
            timeout=timeout,
        )
        self.httpx_client = AsyncHttpClient(
            httpx_client=httpx_client,
            base_headers=self.get_headers(),
            base_timeout=self.get_timeout(),
            base_url=self.get_base_url(),
        )
