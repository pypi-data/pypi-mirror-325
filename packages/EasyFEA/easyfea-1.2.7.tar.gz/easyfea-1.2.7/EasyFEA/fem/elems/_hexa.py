# Copyright (C) 2021-2025 UniversitÃ© Gustave Eiffel.
# This file is part of the EasyFEA project.
# EasyFEA is distributed under the terms of the GNU General Public License v3 or later, see LICENSE.txt and CREDITS.md for more information.

"""Hexa element module."""

import numpy as np

from .._group_elems import _GroupElem

class HEXA8(_GroupElem):
    #        v
    # 3----------2
    # |\     ^   |\
    # | \    |   | \
    # |  \   |   |  \
    # |   7------+---6
    # |   |  +-- |-- | -> u
    # 0---+---\--1   |
    #  \  |    \  \  |
    #   \ |     \  \ |
    #    \|      w  \|
    #     4----------5

    def __init__(self, gmshId: int, connect: np.ndarray, coordoGlob: np.ndarray, nodes: np.ndarray):

        super().__init__(gmshId, connect, coordoGlob, nodes)

    @property
    def origin(self) -> list[int]:
        return [-1, -1, -1]

    @property
    def triangles(self) -> list[int]:
        return super().triangles

    @property
    def faces(self) -> list[int]:
        return [0,1,2,3,
                0,4,5,1,
                0,3,7,4,
                6,7,3,2,
                6,2,1,5,
                6,5,4,7]
    
    @property
    def segments(self) -> np.ndarray:
        return np.array([[0,1],[1,5],[5,4],[4,0],[3,2],[2,6],[6,7],[7,3],[0,3],[1,2],[5,6],[4,7]])

    def _N(self) -> np.ndarray:

        N1 = lambda x,y,z: 1/8 * (1-x) * (1-y) * (1-z)
        N2 = lambda x,y,z: 1/8 * (1+x) * (1-y) * (1-z)
        N3 = lambda x,y,z: 1/8 * (1+x) * (1+y) * (1-z)
        N4 = lambda x,y,z: 1/8 * (1-x) * (1+y) * (1-z)
        N5 = lambda x,y,z: 1/8 * (1-x) * (1-y) * (1+z)
        N6 = lambda x,y,z: 1/8 * (1+x) * (1-y) * (1+z)
        N7 = lambda x,y,z: 1/8 * (1+x) * (1+y) * (1+z)
        N8 = lambda x,y,z: 1/8 * (1-x) * (1+y) * (1+z)

        N = np.array([N1, N2, N3, N4, N5, N6, N7, N8]).reshape(-1, 1)

        return N
    
    def _dN(self) -> np.ndarray:

        dN1 = [lambda x,y,z: -1/8 * (1-y) * (1-z),   lambda x,y,z: -1/8 * (1-x) * (1-z),   lambda x,y,z: -1/8 * (1-x) * (1-y)]
        dN2 = [lambda x,y,z: 1/8 * (1-y) * (1-z),    lambda x,y,z: -1/8 * (1+x) * (1-z),    lambda x,y,z: -1/8 * (1+x) * (1-y)]
        dN3 = [lambda x,y,z: 1/8 * (1+y) * (1-z),    lambda x,y,z: 1/8 * (1+x) * (1-z),    lambda x,y,z: -1/8 * (1+x) * (1+y)]
        dN4 = [lambda x,y,z: -1/8 * (1+y) * (1-z),    lambda x,y,z: 1/8 * (1-x) * (1-z),    lambda x,y,z: -1/8 * (1-x) * (1+y)]
        dN5 = [lambda x,y,z: -1/8 * (1-y) * (1+z),    lambda x,y,z: -1/8 * (1-x) * (1+z),    lambda x,y,z: 1/8 * (1-x) * (1-y)]
        dN6 = [lambda x,y,z: 1/8 * (1-y) * (1+z),    lambda x,y,z: -1/8 * (1+x) * (1+z),    lambda x,y,z: 1/8 * (1+x) * (1-y)]
        dN7 = [lambda x,y,z: 1/8 * (1+y) * (1+z),    lambda x,y,z: 1/8 * (1+x) * (1+z),    lambda x,y,z: 1/8 * (1+x) * (1+y)]
        dN8 = [lambda x,y,z: -1/8 * (1+y) * (1+z),    lambda x,y,z: 1/8 * (1-x) * (1+z),    lambda x,y,z: 1/8 * (1-x) * (1+y)]

        dN = np.array([dN1, dN2, dN3, dN4, dN5, dN6, dN7, dN8])

        return dN

    def _ddN(self) -> np.ndarray:
        return super()._ddN()

    def _dddN(self) -> np.ndarray:
        return super()._dddN()
    
    def _ddddN(self) -> np.ndarray:
        return super()._ddddN()

class HEXA20(_GroupElem):
    #        v
    # 3----13----2
    # |\     ^   |\
    # | 15   |   | 14
    # 9  \   |   11 \
    # |   7----19+---6
    # |   |  +-- |-- | -> u
    # 0---+-8-\--1   |
    #  \  17   \  \  18
    #  10 |     \  12|
    #    \|      w  \|
    #     4----16----5

    def __init__(self, gmshId: int, connect: np.ndarray, coordoGlob: np.ndarray, nodes: np.ndarray):

        super().__init__(gmshId, connect, coordoGlob, nodes)

    @property
    def origin(self) -> list[int]:
        return [-1, -1, -1]

    @property
    def triangles(self) -> list[int]:
        return super().triangles

    @property
    def faces(self) -> list[int]:
        return [0,8,1,11,2,13,3,9,
                0,10,4,16,5,12,1,8,
                0,9,3,15,7,17,4,10,
                6,19,7,15,3,13,2,14,
                6,14,2,11,1,12,5,18,
                6,18,5,16,4,17,7,19]
    
    @property
    def segments(self) -> np.ndarray:
        return np.array([[0,1],[1,5],[5,4],[4,0],[3,2],[2,6],[6,7],[7,3],[0,3],[1,2],[5,6],[4,7]])

    def _N(self) -> np.ndarray:

        N1 = lambda x,y,z: 0.125*x**2*y*z + 0.125*y**2*x*z + 0.125*z**2*x*y + -0.125*x**2*y + -0.125*y**2*x + -0.125*z**2*x + -0.125*x**2*z + -0.125*y**2*z + -0.125*z**2*y + 0.125*x**2 + 0.125*y**2 + 0.125*z**2 + 0.0*x*y + 0.0*x*z + 0.0*y*z + 0.125*x + 0.125*y + 0.125*z + -0.125*x*y*z + -0.25
        N2 = lambda x,y,z: 0.125*x**2*y*z + -0.125*y**2*x*z + -0.125*z**2*x*y + -0.125*x**2*y + 0.125*y**2*x + 0.125*z**2*x + -0.125*x**2*z + -0.125*y**2*z + -0.125*z**2*y + 0.125*x**2 + 0.125*y**2 + 0.125*z**2 + 0.0*x*y + 0.0*x*z + 0.0*y*z + -0.125*x + 0.125*y + 0.125*z + 0.125*x*y*z + -0.25
        N3 = lambda x,y,z: -0.125*x**2*y*z + -0.125*y**2*x*z + 0.125*z**2*x*y + 0.125*x**2*y + 0.125*y**2*x + 0.125*z**2*x + -0.125*x**2*z + -0.125*y**2*z + 0.125*z**2*y + 0.125*x**2 + 0.125*y**2 + 0.125*z**2 + 0.0*x*y + 0.0*x*z + 0.0*y*z + -0.125*x + -0.125*y + 0.125*z + -0.125*x*y*z + -0.25
        N4 = lambda x,y,z: -0.125*x**2*y*z + 0.125*y**2*x*z + -0.125*z**2*x*y + 0.125*x**2*y + -0.125*y**2*x + -0.125*z**2*x + -0.125*x**2*z + -0.125*y**2*z + 0.125*z**2*y + 0.125*x**2 + 0.125*y**2 + 0.125*z**2 + 0.0*x*y + 0.0*x*z + 0.0*y*z + 0.125*x + -0.125*y + 0.125*z + 0.125*x*y*z + -0.25
        N5 = lambda x,y,z: -0.125*x**2*y*z + -0.125*y**2*x*z + 0.125*z**2*x*y + -0.125*x**2*y + -0.125*y**2*x + -0.125*z**2*x + 0.125*x**2*z + 0.125*y**2*z + -0.125*z**2*y + 0.125*x**2 + 0.125*y**2 + 0.125*z**2 + 0.0*x*y + 0.0*x*z + 0.0*y*z + 0.125*x + 0.125*y + -0.125*z + 0.125*x*y*z + -0.25
        N6 = lambda x,y,z: -0.125*x**2*y*z + 0.125*y**2*x*z + -0.125*z**2*x*y + -0.125*x**2*y + 0.125*y**2*x + 0.125*z**2*x + 0.125*x**2*z + 0.125*y**2*z + -0.125*z**2*y + 0.125*x**2 + 0.125*y**2 + 0.125*z**2 + 0.0*x*y + 0.0*x*z + 0.0*y*z + -0.125*x + 0.125*y + -0.125*z + -0.125*x*y*z + -0.25
        N7 = lambda x,y,z: 0.125*x**2*y*z + 0.125*y**2*x*z + 0.125*z**2*x*y + 0.125*x**2*y + 0.125*y**2*x + 0.125*z**2*x + 0.125*x**2*z + 0.125*y**2*z + 0.125*z**2*y + 0.125*x**2 + 0.125*y**2 + 0.125*z**2 + 0.0*x*y + 0.0*x*z + 0.0*y*z + -0.125*x + -0.125*y + -0.125*z + 0.125*x*y*z + -0.25
        N8 = lambda x,y,z: 0.125*x**2*y*z + -0.125*y**2*x*z + -0.125*z**2*x*y + 0.125*x**2*y + -0.125*y**2*x + -0.125*z**2*x + 0.125*x**2*z + 0.125*y**2*z + 0.125*z**2*y + 0.125*x**2 + 0.125*y**2 + 0.125*z**2 + 0.0*x*y + 0.0*x*z + 0.0*y*z + 0.125*x + -0.125*y + -0.125*z + -0.125*x*y*z + -0.25
        N9 = lambda x,y,z: -0.25*x**2*y*z + 0.0*y**2*x*z + 0.0*z**2*x*y + 0.25*x**2*y + 0.0*y**2*x + 0.0*z**2*x + 0.25*x**2*z + 0.0*y**2*z + 0.0*z**2*y + -0.25*x**2 + 0.0*y**2 + 0.0*z**2 + 0.0*x*y + 0.0*x*z + 0.25*y*z + 0.0*x + -0.25*y + -0.25*z + 0.0*x*y*z + 0.25
        N10 = lambda x,y,z: 0.0*x**2*y*z + -0.25*y**2*x*z + 0.0*z**2*x*y + 0.0*x**2*y + 0.25*y**2*x + 0.0*z**2*x + 0.0*x**2*z + 0.25*y**2*z + 0.0*z**2*y + 0.0*x**2 + -0.25*y**2 + 0.0*z**2 + 0.0*x*y + 0.25*x*z + 0.0*y*z + -0.25*x + 0.0*y + -0.25*z + 0.0*x*y*z + 0.25
        N11 = lambda x,y,z: 0.0*x**2*y*z + 0.0*y**2*x*z + -0.25*z**2*x*y + 0.0*x**2*y + 0.0*y**2*x + 0.25*z**2*x + 0.0*x**2*z + 0.0*y**2*z + 0.25*z**2*y + 0.0*x**2 + 0.0*y**2 + -0.25*z**2 + 0.25*x*y + 0.0*x*z + 0.0*y*z + -0.25*x + -0.25*y + 0.0*z + 0.0*x*y*z + 0.25
        N12 = lambda x,y,z: 0.0*x**2*y*z + 0.25*y**2*x*z + 0.0*z**2*x*y + 0.0*x**2*y + -0.25*y**2*x + 0.0*z**2*x + 0.0*x**2*z + 0.25*y**2*z + 0.0*z**2*y + 0.0*x**2 + -0.25*y**2 + 0.0*z**2 + 0.0*x*y + -0.25*x*z + 0.0*y*z + 0.25*x + 0.0*y + -0.25*z + 0.0*x*y*z + 0.25
        N13 = lambda x,y,z: 0.0*x**2*y*z + 0.0*y**2*x*z + 0.25*z**2*x*y + 0.0*x**2*y + 0.0*y**2*x + -0.25*z**2*x + 0.0*x**2*z + 0.0*y**2*z + 0.25*z**2*y + 0.0*x**2 + 0.0*y**2 + -0.25*z**2 + -0.25*x*y + 0.0*x*z + 0.0*y*z + 0.25*x + -0.25*y + 0.0*z + 0.0*x*y*z + 0.25
        N14 = lambda x,y,z: 0.25*x**2*y*z + 0.0*y**2*x*z + 0.0*z**2*x*y + -0.25*x**2*y + 0.0*y**2*x + 0.0*z**2*x + 0.25*x**2*z + 0.0*y**2*z + 0.0*z**2*y + -0.25*x**2 + 0.0*y**2 + 0.0*z**2 + 0.0*x*y + 0.0*x*z + -0.25*y*z + 0.0*x + 0.25*y + -0.25*z + 0.0*x*y*z + 0.25
        N15 = lambda x,y,z: 0.0*x**2*y*z + 0.0*y**2*x*z + -0.25*z**2*x*y + 0.0*x**2*y + 0.0*y**2*x + -0.25*z**2*x + 0.0*x**2*z + 0.0*y**2*z + -0.25*z**2*y + 0.0*x**2 + 0.0*y**2 + -0.25*z**2 + 0.25*x*y + 0.0*x*z + 0.0*y*z + 0.25*x + 0.25*y + 0.0*z + 0.0*x*y*z + 0.25
        N16 = lambda x,y,z: 0.0*x**2*y*z + 0.0*y**2*x*z + 0.25*z**2*x*y + 0.0*x**2*y + 0.0*y**2*x + 0.25*z**2*x + 0.0*x**2*z + 0.0*y**2*z + -0.25*z**2*y + 0.0*x**2 + 0.0*y**2 + -0.25*z**2 + -0.25*x*y + 0.0*x*z + 0.0*y*z + -0.25*x + 0.25*y + 0.0*z + 0.0*x*y*z + 0.25
        N17 = lambda x,y,z: 0.25*x**2*y*z + 0.0*y**2*x*z + 0.0*z**2*x*y + 0.25*x**2*y + 0.0*y**2*x + 0.0*z**2*x + -0.25*x**2*z + 0.0*y**2*z + 0.0*z**2*y + -0.25*x**2 + 0.0*y**2 + 0.0*z**2 + 0.0*x*y + 0.0*x*z + -0.25*y*z + 0.0*x + -0.25*y + 0.25*z + 0.0*x*y*z + 0.25
        N18 = lambda x,y,z: 0.0*x**2*y*z + 0.25*y**2*x*z + 0.0*z**2*x*y + 0.0*x**2*y + 0.25*y**2*x + 0.0*z**2*x + 0.0*x**2*z + -0.25*y**2*z + 0.0*z**2*y + 0.0*x**2 + -0.25*y**2 + 0.0*z**2 + 0.0*x*y + -0.25*x*z + 0.0*y*z + -0.25*x + 0.0*y + 0.25*z + 0.0*x*y*z + 0.25
        N19 = lambda x,y,z: 0.0*x**2*y*z + -0.25*y**2*x*z + 0.0*z**2*x*y + 0.0*x**2*y + -0.25*y**2*x + 0.0*z**2*x + 0.0*x**2*z + -0.25*y**2*z + 0.0*z**2*y + 0.0*x**2 + -0.25*y**2 + 0.0*z**2 + 0.0*x*y + 0.25*x*z + 0.0*y*z + 0.25*x + 0.0*y + 0.25*z + 0.0*x*y*z + 0.25
        N20 = lambda x,y,z: -0.25*x**2*y*z + 0.0*y**2*x*z + 0.0*z**2*x*y + -0.25*x**2*y + 0.0*y**2*x + 0.0*z**2*x + -0.25*x**2*z + 0.0*y**2*z + 0.0*z**2*y + -0.25*x**2 + 0.0*y**2 + 0.0*z**2 + 0.0*x*y + 0.0*x*z + 0.25*y*z + 0.0*x + 0.25*y + 0.25*z + 0.0*x*y*z + 0.25        

        N = np.array([N1, N2, N3, N4, N5, N6, N7, N8, N9, N10, N11, N12, N13, N14, N15, N16, N17, N18, N19, N20]).reshape(-1, 1)

        return N
    
    def _dN(self) -> np.ndarray:

        dN1 = [lambda x,y,z: 0.25*x*y*z + 0.125*y**2*z + 0.125*z**2*y + -0.25*x*y + -0.125*y**2 + -0.125*z**2 + -0.25*x*z + 0.25*x + 0.0*y + 0.0*z + 0.125 + -0.125*y*z,
            lambda x,y,z: 0.125*x**2*z + 0.25*y*x*z + 0.125*z**2*x + -0.125*x**2 + -0.25*y*x + -0.25*y*z + -0.125*z**2 + 0.25*y + 0.0*x + 0.0*z + 0.125 + -0.125*x*z,
            lambda x,y,z: 0.125*x**2*y + 0.125*y**2*x + 0.25*z*x*y + -0.25*z*x + -0.125*x**2 + -0.125*y**2 + -0.25*z*y + 0.25*z + 0.0*x + 0.0*y + 0.125 + -0.125*x*y]
        dN2 = [lambda x,y,z: 0.25*x*y*z + -0.125*y**2*z + -0.125*z**2*y + -0.25*x*y + 0.125*y**2 + 0.125*z**2 + -0.25*x*z + 0.25*x + 0.0*y + 0.0*z + -0.125 + 0.125*y*z,
            lambda x,y,z: 0.125*x**2*z + -0.25*y*x*z + -0.125*z**2*x + -0.125*x**2 + 0.25*y*x + -0.25*y*z + -0.125*z**2 + 0.25*y + 0.0*x + 0.0*z + 0.125 + 0.125*x*z,
            lambda x,y,z: 0.125*x**2*y + -0.125*y**2*x + -0.25*z*x*y + 0.25*z*x + -0.125*x**2 + -0.125*y**2 + -0.25*z*y + 0.25*z + 0.0*x + 0.0*y + 0.125 + 0.125*x*y]
        dN3 = [lambda x,y,z: -0.25*x*y*z + -0.125*y**2*z + 0.125*z**2*y + 0.25*x*y + 0.125*y**2 + 0.125*z**2 + -0.25*x*z + 0.25*x + 0.0*y + 0.0*z + -0.125 + -0.125*y*z,
            lambda x,y,z: -0.125*x**2*z + -0.25*y*x*z + 0.125*z**2*x + 0.125*x**2 + 0.25*y*x + -0.25*y*z + 0.125*z**2 + 0.25*y + 0.0*x + 0.0*z + -0.125 + -0.125*x*z,
            lambda x,y,z: -0.125*x**2*y + -0.125*y**2*x + 0.25*z*x*y + 0.25*z*x + -0.125*x**2 + -0.125*y**2 + 0.25*z*y + 0.25*z + 0.0*x + 0.0*y + 0.125 + -0.125*x*y]
        dN4 = [lambda x,y,z: -0.25*x*y*z + 0.125*y**2*z + -0.125*z**2*y + 0.25*x*y + -0.125*y**2 + -0.125*z**2 + -0.25*x*z + 0.25*x + 0.0*y + 0.0*z + 0.125 + 0.125*y*z,
            lambda x,y,z: -0.125*x**2*z + 0.25*y*x*z + -0.125*z**2*x + 0.125*x**2 + -0.25*y*x + -0.25*y*z + 0.125*z**2 + 0.25*y + 0.0*x + 0.0*z + -0.125 + 0.125*x*z,
            lambda x,y,z: -0.125*x**2*y + 0.125*y**2*x + -0.25*z*x*y + -0.25*z*x + -0.125*x**2 + -0.125*y**2 + 0.25*z*y + 0.25*z + 0.0*x + 0.0*y + 0.125 + 0.125*x*y]
        dN5 = [lambda x,y,z: -0.25*x*y*z + -0.125*y**2*z + 0.125*z**2*y + -0.25*x*y + -0.125*y**2 + -0.125*z**2 + 0.25*x*z + 0.25*x + 0.0*y + 0.0*z + 0.125 + 0.125*y*z,
            lambda x,y,z: -0.125*x**2*z + -0.25*y*x*z + 0.125*z**2*x + -0.125*x**2 + -0.25*y*x + 0.25*y*z + -0.125*z**2 + 0.25*y + 0.0*x + 0.0*z + 0.125 + 0.125*x*z,
            lambda x,y,z: -0.125*x**2*y + -0.125*y**2*x + 0.25*z*x*y + -0.25*z*x + 0.125*x**2 + 0.125*y**2 + -0.25*z*y + 0.25*z + 0.0*x + 0.0*y + -0.125 + 0.125*x*y]
        dN6 = [lambda x,y,z: -0.25*x*y*z + 0.125*y**2*z + -0.125*z**2*y + -0.25*x*y + 0.125*y**2 + 0.125*z**2 + 0.25*x*z + 0.25*x + 0.0*y + 0.0*z + -0.125 + -0.125*y*z,
            lambda x,y,z: -0.125*x**2*z + 0.25*y*x*z + -0.125*z**2*x + -0.125*x**2 + 0.25*y*x + 0.25*y*z + -0.125*z**2 + 0.25*y + 0.0*x + 0.0*z + 0.125 + -0.125*x*z,
            lambda x,y,z: -0.125*x**2*y + 0.125*y**2*x + -0.25*z*x*y + 0.25*z*x + 0.125*x**2 + 0.125*y**2 + -0.25*z*y + 0.25*z + 0.0*x + 0.0*y + -0.125 + -0.125*x*y]
        dN7 = [lambda x,y,z: 0.25*x*y*z + 0.125*y**2*z + 0.125*z**2*y + 0.25*x*y + 0.125*y**2 + 0.125*z**2 + 0.25*x*z + 0.25*x + 0.0*y + 0.0*z + -0.125 + 0.125*y*z,
            lambda x,y,z: 0.125*x**2*z + 0.25*y*x*z + 0.125*z**2*x + 0.125*x**2 + 0.25*y*x + 0.25*y*z + 0.125*z**2 + 0.25*y + 0.0*x + 0.0*z + -0.125 + 0.125*x*z,
            lambda x,y,z: 0.125*x**2*y + 0.125*y**2*x + 0.25*z*x*y + 0.25*z*x + 0.125*x**2 + 0.125*y**2 + 0.25*z*y + 0.25*z + 0.0*x + 0.0*y + -0.125 + 0.125*x*y]
        dN8 = [lambda x,y,z: 0.25*x*y*z + -0.125*y**2*z + -0.125*z**2*y + 0.25*x*y + -0.125*y**2 + -0.125*z**2 + 0.25*x*z + 0.25*x + 0.0*y + 0.0*z + 0.125 + -0.125*y*z,
            lambda x,y,z: 0.125*x**2*z + -0.25*y*x*z + -0.125*z**2*x + 0.125*x**2 + -0.25*y*x + 0.25*y*z + 0.125*z**2 + 0.25*y + 0.0*x + 0.0*z + -0.125 + -0.125*x*z,
            lambda x,y,z: 0.125*x**2*y + -0.125*y**2*x + -0.25*z*x*y + -0.25*z*x + 0.125*x**2 + 0.125*y**2 + 0.25*z*y + 0.25*z + 0.0*x + 0.0*y + -0.125 + -0.125*x*y]
        dN9 = [lambda x,y,z: -0.5*x*y*z + 0.0*y**2*z + 0.0*z**2*y + 0.5*x*y + 0.0*y**2 + 0.0*z**2 + 0.5*x*z + -0.5*x + 0.0*y + 0.0*z + 0.0 + 0.0*y*z,
            lambda x,y,z: -0.25*x**2*z + 0.0*y*x*z + 0.0*z**2*x + 0.25*x**2 + 0.0*y*x + 0.0*y*z + 0.0*z**2 + 0.0*y + 0.0*x + 0.25*z + -0.25 + 0.0*x*z,
            lambda x,y,z: -0.25*x**2*y + 0.0*y**2*x + 0.0*z*x*y + 0.0*z*x + 0.25*x**2 + 0.0*y**2 + 0.0*z*y + 0.0*z + 0.0*x + 0.25*y + -0.25 + 0.0*x*y]
        dN10 = [lambda x,y,z: 0.0*x*y*z + -0.25*y**2*z + 0.0*z**2*y + 0.0*x*y + 0.25*y**2 + 0.0*z**2 + 0.0*x*z + 0.0*x + 0.0*y + 0.25*z + -0.25 + 0.0*y*z,
            lambda x,y,z: 0.0*x**2*z + -0.5*y*x*z + 0.0*z**2*x + 0.0*x**2 + 0.5*y*x + 0.5*y*z + 0.0*z**2 + -0.5*y + 0.0*x + 0.0*z + 0.0 + 0.0*x*z,
            lambda x,y,z: 0.0*x**2*y + -0.25*y**2*x + 0.0*z*x*y + 0.0*z*x + 0.0*x**2 + 0.25*y**2 + 0.0*z*y + 0.0*z + 0.25*x + 0.0*y + -0.25 + 0.0*x*y]
        dN11 = [lambda x,y,z: 0.0*x*y*z + 0.0*y**2*z + -0.25*z**2*y + 0.0*x*y + 0.0*y**2 + 0.25*z**2 + 0.0*x*z + 0.0*x + 0.25*y + 0.0*z + -0.25 + 0.0*y*z,
            lambda x,y,z: 0.0*x**2*z + 0.0*y*x*z + -0.25*z**2*x + 0.0*x**2 + 0.0*y*x + 0.0*y*z + 0.25*z**2 + 0.0*y + 0.25*x + 0.0*z + -0.25 + 0.0*x*z,
            lambda x,y,z: 0.0*x**2*y + 0.0*y**2*x + -0.5*z*x*y + 0.5*z*x + 0.0*x**2 + 0.0*y**2 + 0.5*z*y + -0.5*z + 0.0*x + 0.0*y + 0.0 + 0.0*x*y]
        dN12 = [lambda x,y,z: 0.0*x*y*z + 0.25*y**2*z + 0.0*z**2*y + 0.0*x*y + -0.25*y**2 + 0.0*z**2 + 0.0*x*z + 0.0*x + 0.0*y + -0.25*z + 0.25 + 0.0*y*z,
            lambda x,y,z: 0.0*x**2*z + 0.5*y*x*z + 0.0*z**2*x + 0.0*x**2 + -0.5*y*x + 0.5*y*z + 0.0*z**2 + -0.5*y + 0.0*x + 0.0*z + 0.0 + 0.0*x*z,
            lambda x,y,z: 0.0*x**2*y + 0.25*y**2*x + 0.0*z*x*y + 0.0*z*x + 0.0*x**2 + 0.25*y**2 + 0.0*z*y + 0.0*z + -0.25*x + 0.0*y + -0.25 + 0.0*x*y]
        dN13 = [lambda x,y,z: 0.0*x*y*z + 0.0*y**2*z + 0.25*z**2*y + 0.0*x*y + 0.0*y**2 + -0.25*z**2 + 0.0*x*z + 0.0*x + -0.25*y + 0.0*z + 0.25 + 0.0*y*z,
            lambda x,y,z: 0.0*x**2*z + 0.0*y*x*z + 0.25*z**2*x + 0.0*x**2 + 0.0*y*x + 0.0*y*z + 0.25*z**2 + 0.0*y + -0.25*x + 0.0*z + -0.25 + 0.0*x*z,
            lambda x,y,z: 0.0*x**2*y + 0.0*y**2*x + 0.5*z*x*y + -0.5*z*x + 0.0*x**2 + 0.0*y**2 + 0.5*z*y + -0.5*z + 0.0*x + 0.0*y + 0.0 + 0.0*x*y]
        dN14 = [lambda x,y,z: 0.5*x*y*z + 0.0*y**2*z + 0.0*z**2*y + -0.5*x*y + 0.0*y**2 + 0.0*z**2 + 0.5*x*z + -0.5*x + 0.0*y + 0.0*z + 0.0 + 0.0*y*z,
            lambda x,y,z: 0.25*x**2*z + 0.0*y*x*z + 0.0*z**2*x + -0.25*x**2 + 0.0*y*x + 0.0*y*z + 0.0*z**2 + 0.0*y + 0.0*x + -0.25*z + 0.25 + 0.0*x*z,
            lambda x,y,z: 0.25*x**2*y + 0.0*y**2*x + 0.0*z*x*y + 0.0*z*x + 0.25*x**2 + 0.0*y**2 + 0.0*z*y + 0.0*z + 0.0*x + -0.25*y + -0.25 + 0.0*x*y]
        dN15 = [lambda x,y,z: 0.0*x*y*z + 0.0*y**2*z + -0.25*z**2*y + 0.0*x*y + 0.0*y**2 + -0.25*z**2 + 0.0*x*z + 0.0*x + 0.25*y + 0.0*z + 0.25 + 0.0*y*z,
            lambda x,y,z: 0.0*x**2*z + 0.0*y*x*z + -0.25*z**2*x + 0.0*x**2 + 0.0*y*x + 0.0*y*z + -0.25*z**2 + 0.0*y + 0.25*x + 0.0*z + 0.25 + 0.0*x*z,
            lambda x,y,z: 0.0*x**2*y + 0.0*y**2*x + -0.5*z*x*y + -0.5*z*x + 0.0*x**2 + 0.0*y**2 + -0.5*z*y + -0.5*z + 0.0*x + 0.0*y + 0.0 + 0.0*x*y]
        dN16 = [lambda x,y,z: 0.0*x*y*z + 0.0*y**2*z + 0.25*z**2*y + 0.0*x*y + 0.0*y**2 + 0.25*z**2 + 0.0*x*z + 0.0*x + -0.25*y + 0.0*z + -0.25 + 0.0*y*z,
            lambda x,y,z: 0.0*x**2*z + 0.0*y*x*z + 0.25*z**2*x + 0.0*x**2 + 0.0*y*x + 0.0*y*z + -0.25*z**2 + 0.0*y + -0.25*x + 0.0*z + 0.25 + 0.0*x*z,
            lambda x,y,z: 0.0*x**2*y + 0.0*y**2*x + 0.5*z*x*y + 0.5*z*x + 0.0*x**2 + 0.0*y**2 + -0.5*z*y + -0.5*z + 0.0*x + 0.0*y + 0.0 + 0.0*x*y]
        dN17 = [lambda x,y,z: 0.5*x*y*z + 0.0*y**2*z + 0.0*z**2*y + 0.5*x*y + 0.0*y**2 + 0.0*z**2 + -0.5*x*z + -0.5*x + 0.0*y + 0.0*z + 0.0 + 0.0*y*z,
            lambda x,y,z: 0.25*x**2*z + 0.0*y*x*z + 0.0*z**2*x + 0.25*x**2 + 0.0*y*x + 0.0*y*z + 0.0*z**2 + 0.0*y + 0.0*x + -0.25*z + -0.25 + 0.0*x*z,
            lambda x,y,z: 0.25*x**2*y + 0.0*y**2*x + 0.0*z*x*y + 0.0*z*x + -0.25*x**2 + 0.0*y**2 + 0.0*z*y + 0.0*z + 0.0*x + -0.25*y + 0.25 + 0.0*x*y]
        dN18 = [lambda x,y,z: 0.0*x*y*z + 0.25*y**2*z + 0.0*z**2*y + 0.0*x*y + 0.25*y**2 + 0.0*z**2 + 0.0*x*z + 0.0*x + 0.0*y + -0.25*z + -0.25 + 0.0*y*z,
            lambda x,y,z: 0.0*x**2*z + 0.5*y*x*z + 0.0*z**2*x + 0.0*x**2 + 0.5*y*x + -0.5*y*z + 0.0*z**2 + -0.5*y + 0.0*x + 0.0*z + 0.0 + 0.0*x*z,
            lambda x,y,z: 0.0*x**2*y + 0.25*y**2*x + 0.0*z*x*y + 0.0*z*x + 0.0*x**2 + -0.25*y**2 + 0.0*z*y + 0.0*z + -0.25*x + 0.0*y + 0.25 + 0.0*x*y]
        dN19 = [lambda x,y,z: 0.0*x*y*z + -0.25*y**2*z + 0.0*z**2*y + 0.0*x*y + -0.25*y**2 + 0.0*z**2 + 0.0*x*z + 0.0*x + 0.0*y + 0.25*z + 0.25 + 0.0*y*z,
            lambda x,y,z: 0.0*x**2*z + -0.5*y*x*z + 0.0*z**2*x + 0.0*x**2 + -0.5*y*x + -0.5*y*z + 0.0*z**2 + -0.5*y + 0.0*x + 0.0*z + 0.0 + 0.0*x*z,
            lambda x,y,z: 0.0*x**2*y + -0.25*y**2*x + 0.0*z*x*y + 0.0*z*x + 0.0*x**2 + -0.25*y**2 + 0.0*z*y + 0.0*z + 0.25*x + 0.0*y + 0.25 + 0.0*x*y]
        dN20 = [lambda x,y,z: -0.5*x*y*z + 0.0*y**2*z + 0.0*z**2*y + -0.5*x*y + 0.0*y**2 + 0.0*z**2 + -0.5*x*z + -0.5*x + 0.0*y + 0.0*z + 0.0 + 0.0*y*z,
            lambda x,y,z: -0.25*x**2*z + 0.0*y*x*z + 0.0*z**2*x + -0.25*x**2 + 0.0*y*x + 0.0*y*z + 0.0*z**2 + 0.0*y + 0.0*x + 0.25*z + 0.25 + 0.0*x*z,
            lambda x,y,z: -0.25*x**2*y + 0.0*y**2*x + 0.0*z*x*y + 0.0*z*x + -0.25*x**2 + 0.0*y**2 + 0.0*z*y + 0.0*z + 0.0*x + 0.25*y + 0.25 + 0.0*x*y]
        
        dN = np.array([dN1, dN2, dN3, dN4, dN5, dN6, dN7, dN8, dN9, dN10, dN11, dN12, dN13, dN14, dN15, dN16, dN17, dN18, dN19, dN20])        

        return dN

    def _ddN(self) -> np.ndarray:

        ddN1 = [lambda x,y,z: 0.25*y*z + -0.25*y + -0.25*z + 0.25, lambda x,y,z: 0.25*x*z + -0.25*x + -0.25*z + 0.25, lambda x,y,z: 0.25*x*y + -0.25*x + -0.25*y + 0.25]
        ddN2 = [lambda x,y,z: 0.25*y*z + -0.25*y + -0.25*z + 0.25,lambda x,y,z: -0.25*x*z + 0.25*x + -0.25*z + 0.25, lambda x,y,z: -0.25*x*y + 0.25*x + -0.25*y + 0.25]
        ddN3 = [lambda x,y,z: -0.25*y*z + 0.25*y + -0.25*z + 0.25, lambda x,y,z: -0.25*x*z + 0.25*x + -0.25*z + 0.25, lambda x,y,z: 0.25*x*y + 0.25*x + 0.25*y + 0.25]
        ddN4 = [lambda x,y,z: -0.25*y*z + 0.25*y + -0.25*z + 0.25, lambda x,y,z: 0.25*x*z + -0.25*x + -0.25*z + 0.25, lambda x,y,z: -0.25*x*y + -0.25*x + 0.25*y + 0.25]
        ddN5 = [lambda x,y,z: -0.25*y*z + -0.25*y + 0.25*z + 0.25, lambda x,y,z: -0.25*x*z + -0.25*x + 0.25*z + 0.25, lambda x,y,z: 0.25*x*y + -0.25*x + -0.25*y + 0.25]
        ddN6 = [lambda x,y,z: -0.25*y*z + -0.25*y + 0.25*z + 0.25, lambda x,y,z: 0.25*x*z + 0.25*x + 0.25*z + 0.25, lambda x,y,z: -0.25*x*y + 0.25*x + -0.25*y + 0.25]
        ddN7 = [lambda x,y,z: 0.25*y*z + 0.25*y + 0.25*z + 0.25, lambda x,y,z: 0.25*x*z + 0.25*x + 0.25*z + 0.25, lambda x,y,z: 0.25*x*y + 0.25*x + 0.25*y + 0.25]
        ddN8 = [lambda x,y,z: 0.25*y*z + 0.25*y + 0.25*z + 0.25, lambda x,y,z: -0.25*x*z + -0.25*x + 0.25*z + 0.25, lambda x,y,z: -0.25*x*y + -0.25*x + 0.25*y + 0.25]
        ddN9 = [lambda x,y,z: -0.5*y*z + 0.5*y + 0.5*z + -0.5, lambda x,y,z: 0.0*x*z + 0.0*x + 0.0*z + 0.0, lambda x,y,z: 0.0*x*y + 0.0*x + 0.0*y + 0.0]
        ddN10 = [lambda x,y,z: 0.0*y*z + 0.0*y + 0.0*z + 0.0, lambda x,y,z: -0.5*x*z + 0.5*x + 0.5*z + -0.5, lambda x,y,z: 0.0*x*y + 0.0*x + 0.0*y + 0.0]
        ddN11 = [lambda x,y,z: 0.0*y*z + 0.0*y + 0.0*z + 0.0, lambda x,y,z: 0.0*x*z + 0.0*x + 0.0*z + 0.0, lambda x,y,z: -0.5*x*y + 0.5*x + 0.5*y + -0.5]
        ddN12 = [lambda x,y,z: 0.0*y*z + 0.0*y + 0.0*z + 0.0, lambda x,y,z: 0.5*x*z + -0.5*x + 0.5*z + -0.5, lambda x,y,z: 0.0*x*y + 0.0*x + 0.0*y + 0.0]
        ddN13 = [lambda x,y,z: 0.0*y*z + 0.0*y + 0.0*z + 0.0, lambda x,y,z: 0.0*x*z + 0.0*x + 0.0*z + 0.0, lambda x,y,z: 0.5*x*y + -0.5*x + 0.5*y + -0.5]
        ddN14 = [lambda x,y,z: 0.5*y*z + -0.5*y + 0.5*z + -0.5, lambda x,y,z: 0.0*x*z + 0.0*x + 0.0*z + 0.0, lambda x,y,z: 0.0*x*y + 0.0*x + 0.0*y + 0.0]
        ddN15 = [lambda x,y,z: 0.0*y*z + 0.0*y + 0.0*z + 0.0, lambda x,y,z: 0.0*x*z + 0.0*x + 0.0*z + 0.0, lambda x,y,z: -0.5*x*y + -0.5*x + -0.5*y + -0.5]
        ddN16 = [lambda x,y,z: 0.0*y*z + 0.0*y + 0.0*z + 0.0, lambda x,y,z: 0.0*x*z + 0.0*x + 0.0*z + 0.0, lambda x,y,z: 0.5*x*y + 0.5*x + -0.5*y + -0.5]
        ddN17 = [lambda x,y,z: 0.5*y*z + 0.5*y + -0.5*z + -0.5, lambda x,y,z: 0.0*x*z + 0.0*x + 0.0*z + 0.0, lambda x,y,z: 0.0*x*y + 0.0*x + 0.0*y + 0.0]
        ddN18 = [lambda x,y,z: 0.0*y*z + 0.0*y + 0.0*z + 0.0, lambda x,y,z: 0.5*x*z + 0.5*x + -0.5*z + -0.5, lambda x,y,z: 0.0*x*y + 0.0*x + 0.0*y + 0.0]
        ddN19 = [lambda x,y,z: 0.0*y*z + 0.0*y + 0.0*z + 0.0, lambda x,y,z: -0.5*x*z + -0.5*x + -0.5*z + -0.5, lambda x,y,z: 0.0*x*y + 0.0*x + 0.0*y + 0.0]
        ddN20 = [lambda x,y,z: -0.5*y*z + -0.5*y + -0.5*z + -0.5, lambda x,y,z: 0.0*x*z + 0.0*x + 0.0*z + 0.0, lambda x,y,z: 0.0*x*y + 0.0*x + 0.0*y + 0.0]

        ddN = np.array([ddN1, ddN2, ddN3, ddN4, ddN5, ddN6, ddN7, ddN8, ddN9, ddN10, ddN11, ddN12, ddN13, ddN14, ddN15, ddN16, ddN17, ddN18, ddN19, ddN20])        

        return ddN

    def _dddN(self) -> np.ndarray:
        return super()._dddN()
    
    def _ddddN(self) -> np.ndarray:
        return super()._ddddN()