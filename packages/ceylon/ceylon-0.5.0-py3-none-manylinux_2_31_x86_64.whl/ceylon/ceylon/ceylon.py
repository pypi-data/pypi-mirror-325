

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import asyncio
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_ceylon_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_ceylon_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_ceylon_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("uniffi_ceylon")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_ceylon_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_ceylon_checksum_func_cprint() != 23572:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_func_enable_log() != 1252:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_func_version() != 8017:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_method_eventhandler_on_agent_connected() != 2829:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_method_messagehandler_on_message() != 23570:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_method_processor_run() != 45674:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_method_unifiedagent_broadcast() != 60737:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_method_unifiedagent_details() != 9925:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_method_unifiedagent_get_connected_agents() != 43193:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_method_unifiedagent_send_direct() != 36542:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_method_unifiedagent_start() != 40832:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_method_unifiedagent_stop() != 44440:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ceylon_checksum_constructor_unifiedagent_new() != 7414:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UNIFFI_CALLBACK_INTERFACE_EVENT_HANDLER_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,_UniffiRustBuffer,_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_MESSAGE_HANDLER_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,_UniffiRustBuffer,ctypes.c_uint64,_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
_UNIFFI_CALLBACK_INTERFACE_PROCESSOR_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID,ctypes.c_uint64,ctypes.POINTER(_UniffiForeignFuture),
)
class _UniffiVTableCallbackInterfaceEventHandler(ctypes.Structure):
    _fields_ = [
        ("on_agent_connected", _UNIFFI_CALLBACK_INTERFACE_EVENT_HANDLER_METHOD0),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class _UniffiVTableCallbackInterfaceMessageHandler(ctypes.Structure):
    _fields_ = [
        ("on_message", _UNIFFI_CALLBACK_INTERFACE_MESSAGE_HANDLER_METHOD0),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class _UniffiVTableCallbackInterfaceProcessor(ctypes.Structure):
    _fields_ = [
        ("run", _UNIFFI_CALLBACK_INTERFACE_PROCESSOR_METHOD0),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_ceylon_fn_clone_eventhandler.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_clone_eventhandler.restype = ctypes.c_void_p
_UniffiLib.uniffi_ceylon_fn_free_eventhandler.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_free_eventhandler.restype = None
_UniffiLib.uniffi_ceylon_fn_init_callback_vtable_eventhandler.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceEventHandler),
)
_UniffiLib.uniffi_ceylon_fn_init_callback_vtable_eventhandler.restype = None
_UniffiLib.uniffi_ceylon_fn_method_eventhandler_on_agent_connected.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_ceylon_fn_method_eventhandler_on_agent_connected.restype = ctypes.c_uint64
_UniffiLib.uniffi_ceylon_fn_clone_messagehandler.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_clone_messagehandler.restype = ctypes.c_void_p
_UniffiLib.uniffi_ceylon_fn_free_messagehandler.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_free_messagehandler.restype = None
_UniffiLib.uniffi_ceylon_fn_init_callback_vtable_messagehandler.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceMessageHandler),
)
_UniffiLib.uniffi_ceylon_fn_init_callback_vtable_messagehandler.restype = None
_UniffiLib.uniffi_ceylon_fn_method_messagehandler_on_message.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_ceylon_fn_method_messagehandler_on_message.restype = ctypes.c_uint64
_UniffiLib.uniffi_ceylon_fn_clone_processor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_clone_processor.restype = ctypes.c_void_p
_UniffiLib.uniffi_ceylon_fn_free_processor.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_free_processor.restype = None
_UniffiLib.uniffi_ceylon_fn_init_callback_vtable_processor.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceProcessor),
)
_UniffiLib.uniffi_ceylon_fn_init_callback_vtable_processor.restype = None
_UniffiLib.uniffi_ceylon_fn_method_processor_run.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_ceylon_fn_method_processor_run.restype = ctypes.c_uint64
_UniffiLib.uniffi_ceylon_fn_clone_unifiedagent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_clone_unifiedagent.restype = ctypes.c_void_p
_UniffiLib.uniffi_ceylon_fn_free_unifiedagent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_free_unifiedagent.restype = None
_UniffiLib.uniffi_ceylon_fn_constructor_unifiedagent_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_constructor_unifiedagent_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_broadcast.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_broadcast.restype = ctypes.c_uint64
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_details.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_details.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_get_connected_agents.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_get_connected_agents.restype = ctypes.c_uint64
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_send_direct.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_send_direct.restype = ctypes.c_uint64
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_start.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_start.restype = ctypes.c_uint64
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_stop.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_stop.restype = ctypes.c_uint64
_UniffiLib.uniffi_ceylon_fn_func_cprint.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_func_cprint.restype = None
_UniffiLib.uniffi_ceylon_fn_func_enable_log.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_func_enable_log.restype = None
_UniffiLib.uniffi_ceylon_fn_func_version.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ceylon_fn_func_version.restype = _UniffiRustBuffer
_UniffiLib.ffi_ceylon_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_ceylon_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_ceylon_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rustbuffer_free.restype = None
_UniffiLib.ffi_ceylon_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_ceylon_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_u8.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_u8.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_ceylon_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_i8.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_i8.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_ceylon_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_u16.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_u16.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_ceylon_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_i16.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_i16.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_ceylon_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_u32.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_u32.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_ceylon_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_i32.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_i32.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_ceylon_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_u64.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_u64.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_ceylon_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_i64.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_i64.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_ceylon_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_f32.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_f32.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_ceylon_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_f64.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_f64.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_ceylon_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_pointer.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_ceylon_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_ceylon_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_poll_void.restype = None
_UniffiLib.ffi_ceylon_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_cancel_void.restype = None
_UniffiLib.ffi_ceylon_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ceylon_rust_future_free_void.restype = None
_UniffiLib.ffi_ceylon_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ceylon_rust_future_complete_void.restype = None
_UniffiLib.uniffi_ceylon_checksum_func_cprint.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_func_cprint.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_func_enable_log.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_func_enable_log.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_func_version.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_func_version.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_method_eventhandler_on_agent_connected.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_method_eventhandler_on_agent_connected.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_method_messagehandler_on_message.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_method_messagehandler_on_message.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_method_processor_run.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_method_processor_run.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_broadcast.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_broadcast.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_details.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_details.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_get_connected_agents.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_get_connected_agents.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_send_direct.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_send_direct.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_start.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_stop.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_method_unifiedagent_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_ceylon_checksum_constructor_unifiedagent_new.argtypes = (
)
_UniffiLib.uniffi_ceylon_checksum_constructor_unifiedagent_new.restype = ctypes.c_uint16
_UniffiLib.ffi_ceylon_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_ceylon_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt16(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u16"
    VALUE_MIN = 0
    VALUE_MAX = 2**16

    @staticmethod
    def read(buf):
        return buf.read_u16()

    @staticmethod
    def write(value, buf):
        buf.write_u16(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def check_lower(value):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))

    @staticmethod
    def write(value, buf):
        buf.write_i32(len(value))
        buf.write(value)



class EventHandler(typing.Protocol):
    def on_agent_connected(self, topic: "str",agent: "AgentDetail"):
        raise NotImplementedError


class EventHandlerImpl:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_free_eventhandler, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_clone_eventhandler, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    async def on_agent_connected(self, topic: "str",agent: "AgentDetail") -> None:

        _UniffiConverterString.check_lower(topic)
        
        _UniffiConverterTypeAgentDetail.check_lower(agent)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_ceylon_fn_method_eventhandler_on_agent_connected(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(topic),
        _UniffiConverterTypeAgentDetail.lower(agent)
            ),
            _UniffiLib.ffi_ceylon_rust_future_poll_void,
            _UniffiLib.ffi_ceylon_rust_future_complete_void,
            _UniffiLib.ffi_ceylon_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )


# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
_UNIFFI_IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplEventHandler:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_EVENT_HANDLER_METHOD0
    def on_agent_connected(
            uniffi_handle,
            topic,
            agent,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeEventHandler._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterString.lift(topic), _UniffiConverterTypeAgentDetail.lift(agent), )
            method = uniffi_obj.on_agent_connected
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async(make_call, handle_success, handle_error)

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeEventHandler._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceEventHandler(
        on_agent_connected,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_ceylon_fn_init_callback_vtable_eventhandler(ctypes.byref(_uniffi_vtable))



class _UniffiConverterTypeEventHandler:
    _handle_map = _UniffiHandleMap()

    @staticmethod
    def lift(value: int):
        return EventHandlerImpl._make_instance_(value)

    @staticmethod
    def check_lower(value: EventHandler):
        pass

    @staticmethod
    def lower(value: EventHandler):
        return _UniffiConverterTypeEventHandler._handle_map.insert(value)

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: EventHandler, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class MessageHandler(typing.Protocol):
    def on_message(self, agent: "AgentDetail",data: "bytes",time: "int"):
        raise NotImplementedError


class MessageHandlerImpl:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_free_messagehandler, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_clone_messagehandler, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    async def on_message(self, agent: "AgentDetail",data: "bytes",time: "int") -> None:

        _UniffiConverterTypeAgentDetail.check_lower(agent)
        
        _UniffiConverterBytes.check_lower(data)
        
        _UniffiConverterUInt64.check_lower(time)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_ceylon_fn_method_messagehandler_on_message(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeAgentDetail.lower(agent),
        _UniffiConverterBytes.lower(data),
        _UniffiConverterUInt64.lower(time)
            ),
            _UniffiLib.ffi_ceylon_rust_future_poll_void,
            _UniffiLib.ffi_ceylon_rust_future_complete_void,
            _UniffiLib.ffi_ceylon_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )




# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplMessageHandler:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_MESSAGE_HANDLER_METHOD0
    def on_message(
            uniffi_handle,
            agent,
            data,
            time,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeMessageHandler._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeAgentDetail.lift(agent), _UniffiConverterBytes.lift(data), _UniffiConverterUInt64.lift(time), )
            method = uniffi_obj.on_message
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async(make_call, handle_success, handle_error)

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeMessageHandler._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceMessageHandler(
        on_message,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_ceylon_fn_init_callback_vtable_messagehandler(ctypes.byref(_uniffi_vtable))



class _UniffiConverterTypeMessageHandler:
    _handle_map = _UniffiHandleMap()

    @staticmethod
    def lift(value: int):
        return MessageHandlerImpl._make_instance_(value)

    @staticmethod
    def check_lower(value: MessageHandler):
        pass

    @staticmethod
    def lower(value: MessageHandler):
        return _UniffiConverterTypeMessageHandler._handle_map.insert(value)

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: MessageHandler, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class Processor(typing.Protocol):
    def run(self, inputs: "bytes"):
        raise NotImplementedError


class ProcessorImpl:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_free_processor, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_clone_processor, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    async def run(self, inputs: "bytes") -> None:

        _UniffiConverterBytes.check_lower(inputs)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_ceylon_fn_method_processor_run(
                self._uniffi_clone_pointer(), 
        _UniffiConverterBytes.lower(inputs)
            ),
            _UniffiLib.ffi_ceylon_rust_future_poll_void,
            _UniffiLib.ffi_ceylon_rust_future_complete_void,
            _UniffiLib.ffi_ceylon_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )




# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplProcessor:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_PROCESSOR_METHOD0
    def run(
            uniffi_handle,
            inputs,
            uniffi_future_callback,
            uniffi_callback_data,
            uniffi_out_return,
        ):
        uniffi_obj = _UniffiConverterTypeProcessor._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterBytes.lift(inputs), )
            method = uniffi_obj.run
            return method(*args)

        
        def handle_success(return_value):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus.default()
                )
            )

        def handle_error(status_code, rust_buffer):
            uniffi_future_callback(
                uniffi_callback_data,
                _UniffiForeignFutureStructVoid(
                    _UniffiRustCallStatus(status_code, rust_buffer),
                )
            )
        uniffi_out_return[0] = _uniffi_trait_interface_call_async(make_call, handle_success, handle_error)

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeProcessor._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceProcessor(
        run,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_ceylon_fn_init_callback_vtable_processor(ctypes.byref(_uniffi_vtable))



class _UniffiConverterTypeProcessor:
    _handle_map = _UniffiHandleMap()

    @staticmethod
    def lift(value: int):
        return ProcessorImpl._make_instance_(value)

    @staticmethod
    def check_lower(value: Processor):
        pass

    @staticmethod
    def lower(value: Processor):
        return _UniffiConverterTypeProcessor._handle_map.insert(value)

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: Processor, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class UnifiedAgentProtocol(typing.Protocol):
    def broadcast(self, message: "bytes"):
        raise NotImplementedError
    def details(self, ):
        raise NotImplementedError
    def get_connected_agents(self, ):
        raise NotImplementedError
    def send_direct(self, to_peer: "str",message: "bytes"):
        raise NotImplementedError
    def start(self, inputs: "bytes",workers: "typing.Optional[typing.List[UnifiedAgent]]"):
        raise NotImplementedError
    def stop(self, ):
        raise NotImplementedError


class UnifiedAgent:
    _pointer: ctypes.c_void_p
    def __init__(self, config: "typing.Optional[UnifiedAgentConfig]",config_path: "typing.Optional[str]",on_message: "MessageHandler",processor: "Processor",on_event: "EventHandler",extra_data: "typing.Optional[bytes]"):
        _UniffiConverterOptionalTypeUnifiedAgentConfig.check_lower(config)
        
        _UniffiConverterOptionalString.check_lower(config_path)
        
        _UniffiConverterTypeMessageHandler.check_lower(on_message)
        
        _UniffiConverterTypeProcessor.check_lower(processor)
        
        _UniffiConverterTypeEventHandler.check_lower(on_event)
        
        _UniffiConverterOptionalBytes.check_lower(extra_data)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_constructor_unifiedagent_new,
        _UniffiConverterOptionalTypeUnifiedAgentConfig.lower(config),
        _UniffiConverterOptionalString.lower(config_path),
        _UniffiConverterTypeMessageHandler.lower(on_message),
        _UniffiConverterTypeProcessor.lower(processor),
        _UniffiConverterTypeEventHandler.lower(on_event),
        _UniffiConverterOptionalBytes.lower(extra_data))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_free_unifiedagent, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_clone_unifiedagent, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    async def broadcast(self, message: "bytes") -> None:

        _UniffiConverterBytes.check_lower(message)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_ceylon_fn_method_unifiedagent_broadcast(
                self._uniffi_clone_pointer(), 
        _UniffiConverterBytes.lower(message)
            ),
            _UniffiLib.ffi_ceylon_rust_future_poll_void,
            _UniffiLib.ffi_ceylon_rust_future_complete_void,
            _UniffiLib.ffi_ceylon_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )




    def details(self, ) -> "AgentDetail":
        return _UniffiConverterTypeAgentDetail.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_method_unifiedagent_details,self._uniffi_clone_pointer(),)
        )




    async def get_connected_agents(self, ) -> "typing.List[AgentDetail]":
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_ceylon_fn_method_unifiedagent_get_connected_agents(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_ceylon_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_ceylon_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_ceylon_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeAgentDetail.lift,
            
    # Error FFI converter

    None,

        )



    async def send_direct(self, to_peer: "str",message: "bytes") -> None:

        _UniffiConverterString.check_lower(to_peer)
        
        _UniffiConverterBytes.check_lower(message)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_ceylon_fn_method_unifiedagent_send_direct(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(to_peer),
        _UniffiConverterBytes.lower(message)
            ),
            _UniffiLib.ffi_ceylon_rust_future_poll_void,
            _UniffiLib.ffi_ceylon_rust_future_complete_void,
            _UniffiLib.ffi_ceylon_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def start(self, inputs: "bytes",workers: "typing.Optional[typing.List[UnifiedAgent]]") -> None:

        _UniffiConverterBytes.check_lower(inputs)
        
        _UniffiConverterOptionalSequenceTypeUnifiedAgent.check_lower(workers)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_ceylon_fn_method_unifiedagent_start(
                self._uniffi_clone_pointer(), 
        _UniffiConverterBytes.lower(inputs),
        _UniffiConverterOptionalSequenceTypeUnifiedAgent.lower(workers)
            ),
            _UniffiLib.ffi_ceylon_rust_future_poll_void,
            _UniffiLib.ffi_ceylon_rust_future_complete_void,
            _UniffiLib.ffi_ceylon_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def stop(self, ) -> None:

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_ceylon_fn_method_unifiedagent_stop(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_ceylon_rust_future_poll_void,
            _UniffiLib.ffi_ceylon_rust_future_complete_void,
            _UniffiLib.ffi_ceylon_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )





class _UniffiConverterTypeUnifiedAgent:

    @staticmethod
    def lift(value: int):
        return UnifiedAgent._make_instance_(value)

    @staticmethod
    def check_lower(value: UnifiedAgent):
        if not isinstance(value, UnifiedAgent):
            raise TypeError("Expected UnifiedAgent instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: UnifiedAgentProtocol):
        if not isinstance(value, UnifiedAgent):
            raise TypeError("Expected UnifiedAgent instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: UnifiedAgentProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class AgentDetail:
    name: "str"
    id: "str"
    role: "str"
    extra_data: "typing.Optional[bytes]"
    def __init__(self, *, name: "str", id: "str", role: "str", extra_data: "typing.Optional[bytes]"):
        self.name = name
        self.id = id
        self.role = role
        self.extra_data = extra_data

    def __str__(self):
        return "AgentDetail(name={}, id={}, role={}, extra_data={})".format(self.name, self.id, self.role, self.extra_data)

    def __eq__(self, other):
        if self.name != other.name:
            return False
        if self.id != other.id:
            return False
        if self.role != other.role:
            return False
        if self.extra_data != other.extra_data:
            return False
        return True

class _UniffiConverterTypeAgentDetail(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return AgentDetail(
            name=_UniffiConverterString.read(buf),
            id=_UniffiConverterString.read(buf),
            role=_UniffiConverterString.read(buf),
            extra_data=_UniffiConverterOptionalBytes.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.name)
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterString.check_lower(value.role)
        _UniffiConverterOptionalBytes.check_lower(value.extra_data)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterString.write(value.role, buf)
        _UniffiConverterOptionalBytes.write(value.extra_data, buf)


class UnifiedAgentConfig:
    name: "str"
    mode: "PeerMode"
    role: "typing.Optional[str]"
    work_space_id: "typing.Optional[str]"
    port: "typing.Optional[int]"
    admin_peer: "typing.Optional[str]"
    admin_ip: "typing.Optional[str]"
    buffer_size: "typing.Optional[int]"
    def __init__(self, *, name: "str", mode: "PeerMode", role: "typing.Optional[str]", work_space_id: "typing.Optional[str]", port: "typing.Optional[int]", admin_peer: "typing.Optional[str]", admin_ip: "typing.Optional[str]", buffer_size: "typing.Optional[int]"):
        self.name = name
        self.mode = mode
        self.role = role
        self.work_space_id = work_space_id
        self.port = port
        self.admin_peer = admin_peer
        self.admin_ip = admin_ip
        self.buffer_size = buffer_size

    def __str__(self):
        return "UnifiedAgentConfig(name={}, mode={}, role={}, work_space_id={}, port={}, admin_peer={}, admin_ip={}, buffer_size={})".format(self.name, self.mode, self.role, self.work_space_id, self.port, self.admin_peer, self.admin_ip, self.buffer_size)

    def __eq__(self, other):
        if self.name != other.name:
            return False
        if self.mode != other.mode:
            return False
        if self.role != other.role:
            return False
        if self.work_space_id != other.work_space_id:
            return False
        if self.port != other.port:
            return False
        if self.admin_peer != other.admin_peer:
            return False
        if self.admin_ip != other.admin_ip:
            return False
        if self.buffer_size != other.buffer_size:
            return False
        return True

class _UniffiConverterTypeUnifiedAgentConfig(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return UnifiedAgentConfig(
            name=_UniffiConverterString.read(buf),
            mode=_UniffiConverterTypePeerMode.read(buf),
            role=_UniffiConverterOptionalString.read(buf),
            work_space_id=_UniffiConverterOptionalString.read(buf),
            port=_UniffiConverterOptionalUInt16.read(buf),
            admin_peer=_UniffiConverterOptionalString.read(buf),
            admin_ip=_UniffiConverterOptionalString.read(buf),
            buffer_size=_UniffiConverterOptionalUInt16.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.name)
        _UniffiConverterTypePeerMode.check_lower(value.mode)
        _UniffiConverterOptionalString.check_lower(value.role)
        _UniffiConverterOptionalString.check_lower(value.work_space_id)
        _UniffiConverterOptionalUInt16.check_lower(value.port)
        _UniffiConverterOptionalString.check_lower(value.admin_peer)
        _UniffiConverterOptionalString.check_lower(value.admin_ip)
        _UniffiConverterOptionalUInt16.check_lower(value.buffer_size)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterTypePeerMode.write(value.mode, buf)
        _UniffiConverterOptionalString.write(value.role, buf)
        _UniffiConverterOptionalString.write(value.work_space_id, buf)
        _UniffiConverterOptionalUInt16.write(value.port, buf)
        _UniffiConverterOptionalString.write(value.admin_peer, buf)
        _UniffiConverterOptionalString.write(value.admin_ip, buf)
        _UniffiConverterOptionalUInt16.write(value.buffer_size, buf)





class PeerMode(enum.Enum):
    ADMIN = 0
    
    CLIENT = 1
    


class _UniffiConverterTypePeerMode(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PeerMode.ADMIN
        if variant == 2:
            return PeerMode.CLIENT
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == PeerMode.ADMIN:
            return
        if value == PeerMode.CLIENT:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == PeerMode.ADMIN:
            buf.write_i32(1)
        if value == PeerMode.CLIENT:
            buf.write_i32(2)





class _UniffiConverterOptionalUInt16(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt16.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt16.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt16.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalBytes(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterBytes.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterBytes.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterBytes.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeUnifiedAgentConfig(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeUnifiedAgentConfig.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeUnifiedAgentConfig.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeUnifiedAgentConfig.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceTypeUnifiedAgent(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceTypeUnifiedAgent.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceTypeUnifiedAgent.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceTypeUnifiedAgent.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceTypeUnifiedAgent(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeUnifiedAgent.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeUnifiedAgent.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeUnifiedAgent.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeAgentDetail(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeAgentDetail.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeAgentDetail.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeAgentDetail.read(buf) for i in range(count)
        ]

# Async support# RustFuturePoll values
_UNIFFI_RUST_FUTURE_POLL_READY = 0
_UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1

# Stores futures for _uniffi_continuation_callback
_UniffiContinuationHandleMap = _UniffiHandleMap()

_UNIFFI_GLOBAL_EVENT_LOOP = None

"""
Set the event loop to use for async functions

This is needed if some async functions run outside of the eventloop, for example:
    - A non-eventloop thread is spawned, maybe from `EventLoop.run_in_executor` or maybe from the
      Rust code spawning its own thread.
    - The Rust code calls an async callback method from a sync callback function, using something
      like `pollster` to block on the async call.

In this case, we need an event loop to run the Python async function, but there's no eventloop set
for the thread.  Use `uniffi_set_event_loop` to force an eventloop to be used in this case.
"""
def uniffi_set_event_loop(eventloop: asyncio.BaseEventLoop):
    global _UNIFFI_GLOBAL_EVENT_LOOP
    _UNIFFI_GLOBAL_EVENT_LOOP = eventloop

def _uniffi_get_event_loop():
    if _UNIFFI_GLOBAL_EVENT_LOOP is not None:
        return _UNIFFI_GLOBAL_EVENT_LOOP
    else:
        return asyncio.get_running_loop()

# Continuation callback for async functions
# lift the return value or error and resolve the future, causing the async function to resume.
@_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK
def _uniffi_continuation_callback(future_ptr, poll_code):
    (eventloop, future) = _UniffiContinuationHandleMap.remove(future_ptr)
    eventloop.call_soon_threadsafe(_uniffi_set_future_result, future, poll_code)

def _uniffi_set_future_result(future, poll_code):
    if not future.cancelled():
        future.set_result(poll_code)

async def _uniffi_rust_call_async(rust_future, ffi_poll, ffi_complete, ffi_free, lift_func, error_ffi_converter):
    try:
        eventloop = _uniffi_get_event_loop()

        # Loop and poll until we see a _UNIFFI_RUST_FUTURE_POLL_READY value
        while True:
            future = eventloop.create_future()
            ffi_poll(
                rust_future,
                _uniffi_continuation_callback,
                _UniffiContinuationHandleMap.insert((eventloop, future)),
            )
            poll_code = await future
            if poll_code == _UNIFFI_RUST_FUTURE_POLL_READY:
                break

        return lift_func(
            _uniffi_rust_call_with_error(error_ffi_converter, ffi_complete, rust_future)
        )
    finally:
        ffi_free(rust_future)
def _uniffi_trait_interface_call_async(make_call, handle_success, handle_error):
    async def make_call_and_call_callback():
        try:
            handle_success(await make_call())
        except Exception as e:
            print("UniFFI: Unhandled exception in trait interface call", file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            handle_error(
                _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR,
                _UniffiConverterString.lower(repr(e)),
            )
    eventloop = _uniffi_get_event_loop()
    task = asyncio.run_coroutine_threadsafe(make_call_and_call_callback(), eventloop)
    handle = _UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert((eventloop, task))
    return _UniffiForeignFuture(handle, _uniffi_foreign_future_free)

def _uniffi_trait_interface_call_async_with_error(make_call, handle_success, handle_error, error_type, lower_error):
    async def make_call_and_call_callback():
        try:
            try:
                handle_success(await make_call())
            except error_type as e:
                handle_error(
                    _UniffiRustCallStatus.CALL_ERROR,
                    lower_error(e),
                )
        except Exception as e:
            print("UniFFI: Unhandled exception in trait interface call", file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            handle_error(
                _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR,
                _UniffiConverterString.lower(repr(e)),
            )
    eventloop = _uniffi_get_event_loop()
    task = asyncio.run_coroutine_threadsafe(make_call_and_call_callback(), eventloop)
    handle = _UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert((eventloop, task))
    return _UniffiForeignFuture(handle, _uniffi_foreign_future_free)

_UNIFFI_FOREIGN_FUTURE_HANDLE_MAP = _UniffiHandleMap()

@_UNIFFI_FOREIGN_FUTURE_FREE
def _uniffi_foreign_future_free(handle):
    (eventloop, task) = _UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.remove(handle)
    eventloop.call_soon(_uniffi_foreign_future_do_free, task)

def _uniffi_foreign_future_do_free(task):
    if not task.done():
        task.cancel()

def cprint(message: "str") -> None:
    _UniffiConverterString.check_lower(message)
    
    _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_func_cprint,
        _UniffiConverterString.lower(message))


def enable_log(level: "str") -> None:
    _UniffiConverterString.check_lower(level)
    
    _uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_func_enable_log,
        _UniffiConverterString.lower(level))


def version() -> "str":
    return _UniffiConverterString.lift(_uniffi_rust_call(_UniffiLib.uniffi_ceylon_fn_func_version,))


__all__ = [
    "InternalError",
    "PeerMode",
    "AgentDetail",
    "UnifiedAgentConfig",
    "cprint",
    "enable_log",
    "version",
    "EventHandler",
    "MessageHandler",
    "Processor",
    "UnifiedAgent",
]

