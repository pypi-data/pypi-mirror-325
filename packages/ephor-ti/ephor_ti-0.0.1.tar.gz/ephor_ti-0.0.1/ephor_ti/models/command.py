# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.9.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ephor_ti.models.command_parameter import CommandParameter
from ephor_ti.models.command_step import CommandStep
from typing import Optional, Set
from typing_extensions import Self

class Command(BaseModel):
    """
    Command
    """ # noqa: E501
    command_id: StrictStr
    account_id: StrictStr
    name: StrictStr
    description: StrictStr
    parameters: List[CommandParameter]
    category: Optional[StrictStr] = None
    editable: Optional[StrictBool] = True
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    steps: Optional[Dict[str, CommandStep]] = None
    is_system: Optional[StrictBool] = False
    is_prompt_only: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["command_id", "account_id", "name", "description", "parameters", "category", "editable", "created_at", "updated_at", "steps", "is_system", "is_prompt_only"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Command from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in steps (dict)
        _field_dict = {}
        if self.steps:
            for _key_steps in self.steps:
                if self.steps[_key_steps]:
                    _field_dict[_key_steps] = self.steps[_key_steps].to_dict()
            _dict['steps'] = _field_dict
        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['category'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if steps (nullable) is None
        # and model_fields_set contains the field
        if self.steps is None and "steps" in self.model_fields_set:
            _dict['steps'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Command from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "command_id": obj.get("command_id"),
            "account_id": obj.get("account_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "parameters": [CommandParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "category": obj.get("category"),
            "editable": obj.get("editable") if obj.get("editable") is not None else True,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "steps": dict(
                (_k, CommandStep.from_dict(_v))
                for _k, _v in obj["steps"].items()
            )
            if obj.get("steps") is not None
            else None,
            "is_system": obj.get("is_system") if obj.get("is_system") is not None else False,
            "is_prompt_only": obj.get("is_prompt_only") if obj.get("is_prompt_only") is not None else False
        })
        return _obj


