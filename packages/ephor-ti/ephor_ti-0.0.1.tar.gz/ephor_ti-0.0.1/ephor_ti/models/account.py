# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.9.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ephor_ti.models.integration import Integration
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Account
    """ # noqa: E501
    account_id: StrictStr
    name: StrictStr
    picture: Optional[StrictStr] = None
    email: StrictStr
    updated_at: Optional[StrictStr] = None
    integrations: Optional[List[Integration]] = None
    private_metadata: Optional[Dict[str, Any]] = None
    public_metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["account_id", "name", "picture", "email", "updated_at", "integrations", "private_metadata", "public_metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in integrations (list)
        _items = []
        if self.integrations:
            for _item_integrations in self.integrations:
                if _item_integrations:
                    _items.append(_item_integrations.to_dict())
            _dict['integrations'] = _items
        # set to None if picture (nullable) is None
        # and model_fields_set contains the field
        if self.picture is None and "picture" in self.model_fields_set:
            _dict['picture'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if integrations (nullable) is None
        # and model_fields_set contains the field
        if self.integrations is None and "integrations" in self.model_fields_set:
            _dict['integrations'] = None

        # set to None if private_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.private_metadata is None and "private_metadata" in self.model_fields_set:
            _dict['private_metadata'] = None

        # set to None if public_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.public_metadata is None and "public_metadata" in self.model_fields_set:
            _dict['public_metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "name": obj.get("name"),
            "picture": obj.get("picture"),
            "email": obj.get("email"),
            "updated_at": obj.get("updated_at"),
            "integrations": [Integration.from_dict(_item) for _item in obj["integrations"]] if obj.get("integrations") is not None else None,
            "private_metadata": obj.get("private_metadata"),
            "public_metadata": obj.get("public_metadata")
        })
        return _obj


