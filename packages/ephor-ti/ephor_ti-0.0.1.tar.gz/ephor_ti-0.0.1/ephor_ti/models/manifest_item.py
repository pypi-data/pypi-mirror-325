# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.9.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManifestItem(BaseModel):
    """
    ManifestItem
    """ # noqa: E501
    id: StrictStr
    mime_type: StrictStr = Field(alias="mimeType")
    name: StrictStr
    web_view_link: Optional[StrictStr] = Field(default=None, alias="webViewLink")
    starred: Optional[StrictBool] = False
    priority: Optional[StrictInt] = 5
    ingested: Optional[StrictBool] = False
    ingestion_status: Optional[StrictStr] = None
    ingestion_error: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    content_hash: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "mimeType", "name", "webViewLink", "starred", "priority", "ingested", "ingestion_status", "ingestion_error", "updated_at", "content_hash", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManifestItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if web_view_link (nullable) is None
        # and model_fields_set contains the field
        if self.web_view_link is None and "web_view_link" in self.model_fields_set:
            _dict['webViewLink'] = None

        # set to None if ingestion_status (nullable) is None
        # and model_fields_set contains the field
        if self.ingestion_status is None and "ingestion_status" in self.model_fields_set:
            _dict['ingestion_status'] = None

        # set to None if ingestion_error (nullable) is None
        # and model_fields_set contains the field
        if self.ingestion_error is None and "ingestion_error" in self.model_fields_set:
            _dict['ingestion_error'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if content_hash (nullable) is None
        # and model_fields_set contains the field
        if self.content_hash is None and "content_hash" in self.model_fields_set:
            _dict['content_hash'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManifestItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "mimeType": obj.get("mimeType"),
            "name": obj.get("name"),
            "webViewLink": obj.get("webViewLink"),
            "starred": obj.get("starred") if obj.get("starred") is not None else False,
            "priority": obj.get("priority") if obj.get("priority") is not None else 5,
            "ingested": obj.get("ingested") if obj.get("ingested") is not None else False,
            "ingestion_status": obj.get("ingestion_status"),
            "ingestion_error": obj.get("ingestion_error"),
            "updated_at": obj.get("updated_at"),
            "content_hash": obj.get("content_hash"),
            "type": obj.get("type")
        })
        return _obj


