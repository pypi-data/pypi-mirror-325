# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.9.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ephor_ti.models.second_brain_node import SecondBrainNode
from ephor_ti.models.second_brain_source import SecondBrainSource
from ephor_ti.models.spov import Spov
from typing import Optional, Set
from typing_extensions import Self

class SecondBrain(BaseModel):
    """
    SecondBrain
    """ # noqa: E501
    id: Optional[StrictStr] = None
    project_id: StrictStr
    user_spovs: List[Spov]
    nodes: Optional[List[SecondBrainNode]] = None
    created_at: Optional[StrictInt] = None
    source: Optional[SecondBrainSource] = None
    library_id: Optional[StrictStr] = None
    experts: Optional[List[Dict[str, Any]]] = None
    __properties: ClassVar[List[str]] = ["id", "project_id", "user_spovs", "nodes", "created_at", "source", "library_id", "experts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecondBrain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in user_spovs (list)
        _items = []
        if self.user_spovs:
            for _item_user_spovs in self.user_spovs:
                if _item_user_spovs:
                    _items.append(_item_user_spovs.to_dict())
            _dict['user_spovs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if nodes (nullable) is None
        # and model_fields_set contains the field
        if self.nodes is None and "nodes" in self.model_fields_set:
            _dict['nodes'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if library_id (nullable) is None
        # and model_fields_set contains the field
        if self.library_id is None and "library_id" in self.model_fields_set:
            _dict['library_id'] = None

        # set to None if experts (nullable) is None
        # and model_fields_set contains the field
        if self.experts is None and "experts" in self.model_fields_set:
            _dict['experts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecondBrain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project_id": obj.get("project_id"),
            "user_spovs": [Spov.from_dict(_item) for _item in obj["user_spovs"]] if obj.get("user_spovs") is not None else None,
            "nodes": [SecondBrainNode.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None,
            "created_at": obj.get("created_at"),
            "source": SecondBrainSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "library_id": obj.get("library_id"),
            "experts": obj.get("experts")
        })
        return _obj


