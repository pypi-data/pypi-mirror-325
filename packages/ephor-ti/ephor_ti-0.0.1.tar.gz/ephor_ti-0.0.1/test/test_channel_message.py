# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.9.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ephor_ti.models.channel_message import ChannelMessage

class TestChannelMessage(unittest.TestCase):
    """ChannelMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChannelMessage:
        """Test ChannelMessage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChannelMessage`
        """
        model = ChannelMessage()
        if include_optional:
            return ChannelMessage(
                id = '',
                channel_id = '',
                user_id = '',
                user_name = '',
                artifacts = [
                    ephor_ti.models.artifact.Artifact(
                        artifact_id = '', 
                        template = '', 
                        content = '', 
                        published_url = '', 
                        artifact_name = '', 
                        extra_dependencies = {
                            'key' : ''
                            }, )
                    ],
                sources = [
                    ephor_ti.models.source.Source(
                        id = '', 
                        file_name = '', 
                        url = '', 
                        mime_type = '', 
                        priority = 56, 
                        text = '', 
                        sheet_name = '', )
                    ],
                slm_leaderboard = '',
                context_analysis = '',
                cost_analysis = '',
                lm_type = '',
                user_picture = '',
                content = '',
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                attachments = [
                    ephor_ti.models.attachment.Attachment(
                        index = 56, 
                        name = '', 
                        extension = '', 
                        is_image = True, 
                        attachment_id = '', 
                        base64 = '', )
                    ],
                parent_id = '',
                feedback_id = '',
                feedback_type = '',
                feedback_category = '',
                expert_summary = ephor_ti.models.message_expert_summary.MessageExpertSummary(
                    supporting_count = 56, 
                    opposing_count = 56, 
                    pinned_comment_ids = [
                        ''
                        ], 
                    agreement_recount = {
                        'key' : {
                            'key' : 56
                            }
                        }, ),
                pinned_expert_comments = [
                    ephor_ti.models.expert_comment.ExpertComment(
                        id = '', 
                        message_id = '', 
                        project_id = '', 
                        channel_id = '', 
                        expert_type = '', 
                        content = '', 
                        spov_truths_violated = [
                            ''
                            ], 
                        spov_myths_violated = [
                            ''
                            ], 
                        agreement = '', 
                        pinned = True, 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        metadata = ephor_ti.models.metadata.metadata(), )
                    ],
                expert_comments = [
                    ephor_ti.models.expert_comment.ExpertComment(
                        id = '', 
                        message_id = '', 
                        project_id = '', 
                        channel_id = '', 
                        expert_type = '', 
                        content = '', 
                        spov_truths_violated = [
                            ''
                            ], 
                        spov_myths_violated = [
                            ''
                            ], 
                        agreement = '', 
                        pinned = True, 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        metadata = ephor_ti.models.metadata.metadata(), )
                    ]
            )
        else:
            return ChannelMessage(
        )
        """

    def testChannelMessage(self):
        """Test ChannelMessage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
