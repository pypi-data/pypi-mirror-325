# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.9.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Integration(BaseModel):
    """
    Integration
    """ # noqa: E501
    platform: StrictStr
    access_token: Optional[StrictStr] = None
    expires_at: Optional[StrictStr] = None
    refresh_token: Optional[StrictStr] = None
    id_token: Optional[StrictStr] = None
    scope: Optional[StrictStr] = None
    token_type: Optional[StrictStr] = None
    webhook_url: Optional[StrictStr] = None
    is_active: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["platform", "access_token", "expires_at", "refresh_token", "id_token", "scope", "token_type", "webhook_url", "is_active"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Integration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if access_token (nullable) is None
        # and model_fields_set contains the field
        if self.access_token is None and "access_token" in self.model_fields_set:
            _dict['access_token'] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        # set to None if refresh_token (nullable) is None
        # and model_fields_set contains the field
        if self.refresh_token is None and "refresh_token" in self.model_fields_set:
            _dict['refresh_token'] = None

        # set to None if id_token (nullable) is None
        # and model_fields_set contains the field
        if self.id_token is None and "id_token" in self.model_fields_set:
            _dict['id_token'] = None

        # set to None if scope (nullable) is None
        # and model_fields_set contains the field
        if self.scope is None and "scope" in self.model_fields_set:
            _dict['scope'] = None

        # set to None if token_type (nullable) is None
        # and model_fields_set contains the field
        if self.token_type is None and "token_type" in self.model_fields_set:
            _dict['token_type'] = None

        # set to None if webhook_url (nullable) is None
        # and model_fields_set contains the field
        if self.webhook_url is None and "webhook_url" in self.model_fields_set:
            _dict['webhook_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Integration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "platform": obj.get("platform"),
            "access_token": obj.get("access_token"),
            "expires_at": obj.get("expires_at"),
            "refresh_token": obj.get("refresh_token"),
            "id_token": obj.get("id_token"),
            "scope": obj.get("scope"),
            "token_type": obj.get("token_type"),
            "webhook_url": obj.get("webhook_url"),
            "is_active": obj.get("is_active") if obj.get("is_active") is not None else False
        })
        return _obj


