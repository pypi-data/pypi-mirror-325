# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.9.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RetrieveResult(BaseModel):
    """
    RetrieveResult
    """ # noqa: E501
    id: StrictStr
    file_name: StrictStr
    sheet_name: StrictStr
    text: StrictStr
    score: Union[StrictFloat, StrictInt]
    mime_type: StrictStr
    web_view_link: StrictStr
    priority: StrictInt
    hierarchy_path: List[StrictStr]
    author: Optional[StrictStr] = None
    channel_id: Optional[StrictStr] = None
    lm_type: Optional[StrictStr] = None
    message_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "file_name", "sheet_name", "text", "score", "mime_type", "web_view_link", "priority", "hierarchy_path", "author", "channel_id", "lm_type", "message_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['author'] = None

        # set to None if channel_id (nullable) is None
        # and model_fields_set contains the field
        if self.channel_id is None and "channel_id" in self.model_fields_set:
            _dict['channel_id'] = None

        # set to None if lm_type (nullable) is None
        # and model_fields_set contains the field
        if self.lm_type is None and "lm_type" in self.model_fields_set:
            _dict['lm_type'] = None

        # set to None if message_id (nullable) is None
        # and model_fields_set contains the field
        if self.message_id is None and "message_id" in self.model_fields_set:
            _dict['message_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "file_name": obj.get("file_name"),
            "sheet_name": obj.get("sheet_name"),
            "text": obj.get("text"),
            "score": obj.get("score"),
            "mime_type": obj.get("mime_type"),
            "web_view_link": obj.get("web_view_link"),
            "priority": obj.get("priority"),
            "hierarchy_path": obj.get("hierarchy_path"),
            "author": obj.get("author"),
            "channel_id": obj.get("channel_id"),
            "lm_type": obj.get("lm_type"),
            "message_id": obj.get("message_id")
        })
        return _obj


