# coding: utf-8

"""
    Ephor.ai

    Collaborative AI

    The version of the OpenAPI document: 1.9.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpertComment(BaseModel):
    """
    Model for expert comments/feedback on messages
    """ # noqa: E501
    id: StrictStr
    message_id: StrictStr
    project_id: StrictStr
    channel_id: StrictStr
    expert_type: StrictStr
    content: StrictStr
    spov_truths_violated: List[StrictStr]
    spov_myths_violated: List[StrictStr]
    agreement: StrictStr
    pinned: Optional[StrictBool] = False
    timestamp: datetime
    metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "message_id", "project_id", "channel_id", "expert_type", "content", "spov_truths_violated", "spov_myths_violated", "agreement", "pinned", "timestamp", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpertComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpertComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "message_id": obj.get("message_id"),
            "project_id": obj.get("project_id"),
            "channel_id": obj.get("channel_id"),
            "expert_type": obj.get("expert_type"),
            "content": obj.get("content"),
            "spov_truths_violated": obj.get("spov_truths_violated"),
            "spov_myths_violated": obj.get("spov_myths_violated"),
            "agreement": obj.get("agreement"),
            "pinned": obj.get("pinned") if obj.get("pinned") is not None else False,
            "timestamp": obj.get("timestamp"),
            "metadata": obj.get("metadata")
        })
        return _obj


