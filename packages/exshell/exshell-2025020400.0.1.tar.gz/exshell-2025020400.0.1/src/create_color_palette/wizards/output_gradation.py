import openpyxl as xl
#import random

from openpyxl.styles import Font, PatternFill
from openpyxl.styles.alignment import Alignment

from src.create_color_palette import Color, ToneSystem


class OutputGradation():


    def play(number_of_color_samples, start_hue, saturation, brightness, exshell):
        # „ÉØ„Éº„ÇØ„Éñ„ÉÉ„ÇØ„ÇíÊñ∞Ë¶èÁîüÊàê
        wb = xl.Workbook()

        # „ÉØ„Éº„ÇØ„Ç∑„Éº„Éà
        ws = wb['Sheet']

        low, high = OutputGradation.create_tone(
                saturation=saturation,
                brightness=brightness)
        
        # Ëâ≤Áõ∏ [0.0, 1.0]
        #cur_hue = random.uniform(0, 1)
        cur_hue = start_hue
        step_hue = 1 / number_of_color_samples
#     print(f"""\
# {step_hue=}""")

        ws.column_dimensions['A'].width = 2.7 * 2    # 2.7 characters = about 30 pixels
        ws.column_dimensions['B'].width = 2.7 * 5    # 2.7 characters = about 30 pixels
        ws.column_dimensions['C'].width = 2.7 * 7    # 2.7 characters = about 30 pixels

        title_font = Font(color='F8F8F8')
        title_pattern_fill = PatternFill(
                patternType='solid',
                fgColor='333333')

        cell = ws[f'A1']
        cell.value = "No"
        cell.font = title_font
        cell.fill = title_pattern_fill
        cell.alignment = Alignment(horizontal='right', vertical='center')

        cell = ws[f'B1']
        cell.value = "Ëâ≤"
        cell.font = title_font
        cell.fill = title_pattern_fill
        cell.alignment = Alignment(horizontal='center', vertical='center')

        cell = ws[f'C1']
        cell.value = "„Ç¶„Çß„Éñ„Éª„Çª„Éº„Éï„Éª„Ç´„É©„Éº"
        cell.font = title_font
        cell.fill = title_pattern_fill
        cell.alignment = Alignment(horizontal='left', vertical='center')

        # „Éá„Éê„ÉÉ„Ç∞Áî®ÊÉÖÂ†±
        # cell = ws[f'A1']
        # cell.value = "Ëâ≤Áõ∏"

        # cell = ws[f'B1']
        # cell.value = "Ëâ≤Áõ∏Á®ÆÈ°û"

        # cell = ws[f'C1']
        # cell.value = "Ëâ≤Áõ∏ÂÜÖÊÆµÈöé"


        for index, row_th in enumerate(range(2, 2 + number_of_color_samples)):

            tone_system = ToneSystem(
                    low=low,
                    high=high,
                    hue=cur_hue)

            color_obj = Color(tone_system.get_red(), tone_system.get_green(), tone_system.get_blue())
    
            web_safe_color = color_obj.to_web_safe_color()
            xl_color = web_safe_color[1:]
            try:
                pattern_fill = PatternFill(
                        patternType='solid',
                        fgColor=xl_color)
            except:
                print(f'{xl_color=}')
                raise

            # ÈÄ£Áï™
            cell = ws[f'A{row_th}']
            cell.value = index

            # Ëâ≤
            cell = ws[f'B{row_th}']
            cell.fill = pattern_fill

            # „Ç¶„Çß„Éñ„Éª„Çª„Éº„Éï„Éª„Ç´„É©„Éº
            cell = ws[f'C{row_th}']
            cell.value = web_safe_color.upper()

            # „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±
            # cell = ws[f'A{row_th}']
            # cell.value = cur_hue

            # cell = ws[f'B{row_th}']
            # cell.value = tone_system.get_phase_name()

            # cell = ws[f'C{row_th}']
            # cell.value = tone_system.get_value_of_hue_in_phase()

            cur_hue += step_hue
            if 1 < cur_hue:
                cur_hue -= 1


        # „ÉØ„Éº„ÇØ„Éñ„ÉÉ„ÇØ‰øùÂ≠ò
        exshell.save_workbook(wb=wb)


        is_successful = False

        # „Ç®„ÇØ„Çª„É´Èñã„Åè
        exshell.open_virtual_display()


        message = f"""\
üôã„ÄÄPlease input
-----------------
„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ

„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÁµÇ‰∫Ü„Åô„Çã„Å™„Çâ `exit` „Çí„ÄÅ
„ÇÑ„ÇäÁõ¥„ÅôÂ†¥Âêà„ÅØ„ÄÄ„Åù„Çå‰ª•Â§ñ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

    Example of input
    ----------------
    exit

Input
-----
"""
        line = input(message)
        print() # Á©∫Ë°å


        # „Ç®„ÇØ„Çª„É´Èñâ„Åò„Çã
        exshell.close_virtual_display()


        return line == 'exit'


    @staticmethod
    def create_tone(saturation, brightness):
        """Ëâ≤Ë™ø„ÇíÔºë„Å§„Å´Ê±∫„ÇÅ„Åæ„Åô„ÄÇ

        Parameters
        ----------
        saturation : int
            ÂΩ©Â∫¶„ÄÇ[0, 255] „ÅÆÊï¥Êï∞
            NOTE „É¢„Éé„ÇØ„É≠„Å´Ëøë„Å•„Åè„Å®„ÄÅÊ®ôÊú¨Êï∞„ÅåÂ§ö„Åè„Å™„Çã„Å®„ÄÅËâ≤„ÅÆÈÅï„ÅÑ„ÇíÂá∫„Åó„Å´„Åè„ÅÑ„Åß„Åô„ÄÇ
        brightness : int
            ÊòéÂ∫¶
        """

        # NOTE „Ç¶„Çß„Éñ„Éª„Çª„Éº„Éï„Éª„Ç´„É©„Éº„ÅØ„ÄÅÊöó„ÅÑËâ≤„ÅÆÂπÖ„ÅåÂ§ö„ÇÅ„Å´Âèñ„Çâ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ 0ÔΩû255 „ÅÆ„ÅÜ„Å°„ÄÅ 180 „Åê„Çâ„ÅÑ„Åæ„ÅßÊöó„ÅÑËâ≤„Åß„Åô„ÄÇ
        # NOTE Ëâ≤„ÅÆÊ®ôÊú¨Êï∞„ÅåÂ§ö„Åè„Å™„Çã„Å®„ÄÅ low, high „ÅØÊ•µÁ´Ø„Å´„Åß„Åç„Åæ„Åõ„Çì„ÄÇÂ§âÂåñ„ÅÆÂπÖ„ÅåÁã≠„Åæ„Å£„Å¶„Åó„Åæ„ÅÑ„Åæ„Åô„ÄÇ

        # ‰∏äÈôê
        high = brightness
        # ‰∏ãÈôê
        low = brightness - saturation

        if 255 < high:
            raise ValueError(f'{high=} Others: {brightness=} {saturation=}')

        if low < 0:
            raise ValueError(f'{low=} Others: {brightness=} {saturation=}')


        return low, high
