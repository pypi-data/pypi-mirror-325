"""
CLI interface for the contrast-vulnerability-metrics tool.
Handles command line argument parsing and orchestration.
"""

import asyncio
import logging
from pathlib import Path
from typing import Optional, Annotated
from datetime import datetime, timedelta

import typer
from rich.console import Console
from rich.table import Table
from rich import box

from .analyzer import VulnerabilityAnalyzer
from .config import load_config
from .exceptions import ContrastAPIError
from .utils import write_to_csv

logger = logging.getLogger(__name__)

app = typer.Typer(
    help="Analyze vulnerability metrics in Contrast Security applications"
)
console = Console()


def parse_date(date_str: str) -> datetime:
    """Parse date string in YYYY-MM-DD format"""
    try:
        return datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        raise typer.BadParameter("Date must be in YYYY-MM-DD format")


async def analyze_vulnerabilities(
    csv_file: Annotated[
        Optional[Path],
        typer.Option(
            "--csv",
            help="Output results to the specified CSV file",
            dir_okay=False,
            file_okay=True,
            writable=True,
        ),
    ] = None,
    batch_size: Annotated[
        int,
        typer.Option(
            "--batch-size",
            "-b",
            help="Number of vulnerabilities to fetch per request",
            min=1,
            max=1000,
            show_default=True,
        ),
    ] = 100,
    concurrent_requests: Annotated[
        int,
        typer.Option(
            "--concurrent-requests",
            "-c",
            help="Maximum number of concurrent API requests",
            min=1,
            max=50,
            show_default=True,
        ),
    ] = 10,
    use_closed_time: Annotated[
        bool,
        typer.Option(
            "--use-closed-time/--use-last-seen",
            help="Use closed_time instead of last_time_seen for remediation calculations",
            show_default=True,
        ),
    ] = True,
    verbose: Annotated[
        bool, typer.Option("--verbose", "-v", help="Enable verbose logging")
    ] = False,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
) -> None:
    """Analyze vulnerability metrics in a Contrast Security application."""
    try:
        log_level = logging.DEBUG if verbose else logging.INFO
        logging.basicConfig(level=log_level)
        root_logger = logging.getLogger()
        root_logger.setLevel(log_level)

        config = load_config()

        console.print("\n[bold]Starting vulnerability analysis...[/bold]")

        if start_date:
            console.print(f"Start date filter: {start_date.strftime('%Y-%m-%d')}")
        if end_date:
            console.print(f"End date filter: {end_date.strftime('%Y-%m-%d')}")

        async with VulnerabilityAnalyzer(
            base_url=config["CONTRAST_BASE_URL"],
            org_uuid=config["CONTRAST_ORG_UUID"],
            api_key=config["CONTRAST_API_KEY"],
            auth=config["CONTRAST_AUTH"],
            batch_size=batch_size,
            max_concurrent=concurrent_requests,
            use_closed_time=use_closed_time,
            verbose=verbose,
            start_date=start_date,
            end_date=end_date,
        ) as analyzer:
            try:
                metrics, summary = await analyzer.analyze_vulnerabilities()
            except Exception as e:
                error_msg = f"[red bold]Error during analysis:[/red bold] {str(e)}"
                console.print(error_msg)
                raise typer.Exit(1)

            if csv_file:
                write_to_csv(csv_file, metrics, summary)

            console.print("\n")

            # Create summary table
            summary_table = Table(
                title="Vulnerability Metrics Summary",
                show_header=True,
                box=box.ROUNDED,
            )

            metric_type = "Time to Close" if use_closed_time else "Time to Last Seen"

            summary_table.add_column("Severity", style="bold")
            summary_table.add_column(
                f"Avg {metric_type} (Days)", justify="right", style="cyan"
            )
            summary_table.add_column(
                f"Median {metric_type} (Days)", justify="right", style="cyan"
            )
            summary_table.add_column("Count", justify="right", style="cyan")

            # Add rows for each severity and overall
            for severity in ["CRITICAL", "HIGH", "MEDIUM", "OVERALL"]:
                stats = summary[severity]
                summary_table.add_row(
                    severity,
                    str(stats["avg"]),
                    str(stats["median"]),
                    str(stats["count"]),
                )

            console.print(summary_table)

            if csv_file:
                console.print(
                    f"\nDetailed results have been written to: [cyan]{csv_file}[/cyan]"
                )

    except ValueError as e:
        error_msg = f"[red]Configuration error: {str(e)}[/red]"
        console.print(error_msg)
        raise typer.Exit(1)
    except ContrastAPIError as e:
        error_details = f": {e.response_text}" if e.response is not None else ""
        error_msg = f"[red]Error accessing the API: {str(e)}{error_details}[/red]"
        console.print(error_msg)
        raise typer.Exit(1)
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}", exc_info=True)
        error_msg = f"[red]An error occurred: {str(e)}[/red]"
        console.print(error_msg)
        raise typer.Exit(1)


@app.command()
def analyze(
    csv_file: Annotated[
        Optional[Path],
        typer.Option("--csv", help="Output results to the specified CSV file"),
    ] = None,
    batch_size: Annotated[
        int,
        typer.Option(
            "--batch-size", "-b", help="Number of vulnerabilities to fetch per request"
        ),
    ] = 100,
    concurrent_requests: Annotated[
        int,
        typer.Option(
            "--concurrent-requests",
            "-c",
            help="Maximum number of concurrent API requests",
        ),
    ] = 10,
    use_closed_time: Annotated[
        bool,
        typer.Option(
            "--use-closed-time/--use-last-seen",
            help="Use closed_time instead of last_time_seen for remediation calculations",
        ),
    ] = True,
    start_date: Annotated[
        Optional[str],
        typer.Option(
            "--start-date",
            "-s",
            help="Start date for filtering (YYYY-MM-DD)",
        ),
    ] = None,
    end_date: Annotated[
        Optional[str],
        typer.Option(
            "--end-date",
            "-e",
            help="End date for filtering (YYYY-MM-DD)",
        ),
    ] = None,
    days_back: Annotated[
        Optional[int],
        typer.Option(
            "--days-back",
            "-d",
            help="Number of days back from today to include",
        ),
    ] = None,
    verbose: Annotated[
        bool, typer.Option("--verbose", "-v", help="Enable verbose logging")
    ] = False,
) -> None:
    """Analyze vulnerability metrics in a Contrast Security application."""

    # Parse date filters
    parsed_start_date: Optional[datetime] = None
    parsed_end_date: Optional[datetime] = None

    if days_back is not None:
        if start_date or end_date:
            raise typer.BadParameter(
                "Cannot use --days-back with --start-date or --end-date"
            )
        parsed_start_date = datetime.now() - timedelta(days=days_back)
    else:
        if start_date:
            parsed_start_date = parse_date(start_date)
        if end_date:
            parsed_end_date = parse_date(end_date)

    asyncio.run(
        analyze_vulnerabilities(
            csv_file,
            batch_size,
            concurrent_requests,
            use_closed_time,
            verbose,
            parsed_start_date,
            parsed_end_date,
        )
    )
