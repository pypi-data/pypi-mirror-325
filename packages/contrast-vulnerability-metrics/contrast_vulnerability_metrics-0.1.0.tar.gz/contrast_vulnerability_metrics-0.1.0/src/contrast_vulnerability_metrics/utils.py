"""
Utility functions for the contrast-vulnerability-metrics tool.
"""

import csv
import logging
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime

from .models import VulnerabilityMetrics

logger = logging.getLogger(__name__)


def format_datetime(dt: datetime) -> str:
    """Format datetime for CSV output"""
    return dt.strftime("%Y-%m-%d %H:%M:%S")


def write_to_csv(
    output_file: Path, metrics: List[VulnerabilityMetrics], summary: Dict[str, Any]
) -> None:
    """Write vulnerability metrics and summary statistics to a CSV file"""
    logger.info(f"Writing results to {output_file}")

    with output_file.open("w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)

        # Write summary section
        writer.writerow(["Summary Statistics"])
        writer.writerow(["Severity", "Average Days", "Median Days", "Count"])

        for severity in ["CRITICAL", "HIGH", "MEDIUM", "OVERALL"]:
            stats = summary[severity]
            writer.writerow([severity, stats["avg"], stats["median"], stats["count"]])

        # Add blank row between sections
        writer.writerow([])

        # Write detailed metrics
        writer.writerow(
            [
                "UUID",
                "Severity",
                "First Seen",
                "Last Seen",
                "Closed Time",
                "Days to Last Seen",
                "Days to Remediation",
            ]
        )

        for metric in sorted(metrics, key=lambda x: x["severity"]):
            writer.writerow(
                [
                    metric["uuid"],
                    metric["severity"],
                    format_datetime(metric["first_time_seen"]),
                    format_datetime(metric["last_time_seen"]),
                    (
                        format_datetime(metric["closed_time"])
                        if metric["closed_time"]
                        else ""
                    ),
                    metric["time_to_last_seen"],
                    (
                        metric["time_to_remediation"]
                        if metric["time_to_remediation"] is not None
                        else ""
                    ),
                ]
            )

    logger.info(f"Successfully wrote results to {output_file}")
