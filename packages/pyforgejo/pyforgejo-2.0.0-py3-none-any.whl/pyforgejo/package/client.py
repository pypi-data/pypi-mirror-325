# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from .types.list_packages_request_type import ListPackagesRequestType
from ..core.request_options import RequestOptions
from ..types.package import Package
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.package_file import PackageFile
from ..core.client_wrapper import AsyncClientWrapper


class PackageClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_packages(
        self,
        owner: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        type: typing.Optional[ListPackagesRequestType] = None,
        q: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Package]:
        """
        Parameters
        ----------
        owner : str
            owner of the packages

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        type : typing.Optional[ListPackagesRequestType]
            package type filter

        q : typing.Optional[str]
            name filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Package]
            PackageList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.list_packages(
            owner="owner",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"packages/{jsonable_encoder(owner)}",
            method="GET",
            params={
                "page": page,
                "limit": limit,
                "type": type,
                "q": q,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Package],
                    parse_obj_as(
                        type_=typing.List[Package],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_package(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Package:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Package
            Package

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.get_package(
            owner="owner",
            type="type",
            name="name",
            version="version",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"packages/{jsonable_encoder(owner)}/{jsonable_encoder(type)}/{jsonable_encoder(name)}/{jsonable_encoder(version)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Package,
                    parse_obj_as(
                        type_=Package,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_package(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.delete_package(
            owner="owner",
            type="type",
            name="name",
            version="version",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"packages/{jsonable_encoder(owner)}/{jsonable_encoder(type)}/{jsonable_encoder(name)}/{jsonable_encoder(version)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_package_files(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PackageFile]:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PackageFile]
            PackageFileList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.list_package_files(
            owner="owner",
            type="type",
            name="name",
            version="version",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"packages/{jsonable_encoder(owner)}/{jsonable_encoder(type)}/{jsonable_encoder(name)}/{jsonable_encoder(version)}/files",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[PackageFile],
                    parse_obj_as(
                        type_=typing.List[PackageFile],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPackageClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_packages(
        self,
        owner: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        type: typing.Optional[ListPackagesRequestType] = None,
        q: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Package]:
        """
        Parameters
        ----------
        owner : str
            owner of the packages

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        type : typing.Optional[ListPackagesRequestType]
            package type filter

        q : typing.Optional[str]
            name filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Package]
            PackageList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.list_packages(
                owner="owner",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"packages/{jsonable_encoder(owner)}",
            method="GET",
            params={
                "page": page,
                "limit": limit,
                "type": type,
                "q": q,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Package],
                    parse_obj_as(
                        type_=typing.List[Package],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_package(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Package:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Package
            Package

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.get_package(
                owner="owner",
                type="type",
                name="name",
                version="version",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"packages/{jsonable_encoder(owner)}/{jsonable_encoder(type)}/{jsonable_encoder(name)}/{jsonable_encoder(version)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Package,
                    parse_obj_as(
                        type_=Package,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_package(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.delete_package(
                owner="owner",
                type="type",
                name="name",
                version="version",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"packages/{jsonable_encoder(owner)}/{jsonable_encoder(type)}/{jsonable_encoder(name)}/{jsonable_encoder(version)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_package_files(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PackageFile]:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PackageFile]
            PackageFileList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.list_package_files(
                owner="owner",
                type="type",
                name="name",
                version="version",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"packages/{jsonable_encoder(owner)}/{jsonable_encoder(type)}/{jsonable_encoder(name)}/{jsonable_encoder(version)}/files",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[PackageFile],
                    parse_obj_as(
                        type_=typing.List[PackageFile],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
