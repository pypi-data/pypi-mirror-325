# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..types.general_api_settings import GeneralApiSettings
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.general_attachment_settings import GeneralAttachmentSettings
from ..types.general_repo_settings import GeneralRepoSettings
from ..types.general_ui_settings import GeneralUiSettings
from ..core.client_wrapper import AsyncClientWrapper


class SettingsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_general_api_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralApiSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralApiSettings
            GeneralAPISettings

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.settings.get_general_api_settings()
        """
        _response = self._client_wrapper.httpx_client.request(
            "settings/api",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralApiSettings,
                    parse_obj_as(
                        type_=GeneralApiSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_general_attachment_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralAttachmentSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralAttachmentSettings
            GeneralAttachmentSettings

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.settings.get_general_attachment_settings()
        """
        _response = self._client_wrapper.httpx_client.request(
            "settings/attachment",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralAttachmentSettings,
                    parse_obj_as(
                        type_=GeneralAttachmentSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_general_repository_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralRepoSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralRepoSettings
            GeneralRepoSettings

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.settings.get_general_repository_settings()
        """
        _response = self._client_wrapper.httpx_client.request(
            "settings/repository",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralRepoSettings,
                    parse_obj_as(
                        type_=GeneralRepoSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_general_ui_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralUiSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralUiSettings
            GeneralUISettings

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.settings.get_general_ui_settings()
        """
        _response = self._client_wrapper.httpx_client.request(
            "settings/ui",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralUiSettings,
                    parse_obj_as(
                        type_=GeneralUiSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSettingsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_general_api_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralApiSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralApiSettings
            GeneralAPISettings

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.settings.get_general_api_settings()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "settings/api",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralApiSettings,
                    parse_obj_as(
                        type_=GeneralApiSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_general_attachment_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralAttachmentSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralAttachmentSettings
            GeneralAttachmentSettings

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.settings.get_general_attachment_settings()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "settings/attachment",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralAttachmentSettings,
                    parse_obj_as(
                        type_=GeneralAttachmentSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_general_repository_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralRepoSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralRepoSettings
            GeneralRepoSettings

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.settings.get_general_repository_settings()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "settings/repository",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralRepoSettings,
                    parse_obj_as(
                        type_=GeneralRepoSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_general_ui_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralUiSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralUiSettings
            GeneralUISettings

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.settings.get_general_ui_settings()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "settings/ui",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralUiSettings,
                    parse_obj_as(
                        type_=GeneralUiSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
