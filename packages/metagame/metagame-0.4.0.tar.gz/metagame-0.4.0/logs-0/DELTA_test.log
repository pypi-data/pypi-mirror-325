INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.3
INFO:__main__:Placing BID order for 0.37 at 50.15
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.6
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.45
INFO:__main__:Placing BID order for 0.37 at 50.9
INFO:__main__:Placing BID order for 0.37 at 50.9
INFO:__main__:Sleeping for 553.0862820148468 seconds
╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /Users/yoav/.pyenv/versions/3.8.19/envs/trading-bootcamp-client/lib/python3.8/site-packages/webs │
│ ockets/sync/connection.py:538 in recv_events                                                     │
│                                                                                                  │
│   535 │   │   │   │   try:                                                                       │
│   536 │   │   │   │   │   if self.close_deadline is not None:                                    │
│   537 │   │   │   │   │   │   self.socket.settimeout(self.close_deadline.timeout())              │
│ ❱ 538 │   │   │   │   │   data = self.socket.recv(self.recv_bufsize)                             │
│   539 │   │   │   │   except Exception as exc:                                                   │
│   540 │   │   │   │   │   if self.debug:                                                         │
│   541 │   │   │   │   │   │   self.logger.debug("error while receiving data", exc_info=True)     │
│                                                                                                  │
│ /Users/yoav/.pyenv/versions/3.8.19/lib/python3.8/ssl.py:1259 in recv                             │
│                                                                                                  │
│   1256 │   │   │   │   raise ValueError(                                                         │
│   1257 │   │   │   │   │   "non-zero flags not allowed in calls to recv() on %s" %               │
│   1258 │   │   │   │   │   self.__class__)                                                       │
│ ❱ 1259 │   │   │   return self.read(buflen)                                                      │
│   1260 │   │   else:                                                                             │
│   1261 │   │   │   return super().recv(buflen, flags)                                            │
│   1262                                                                                           │
│                                                                                                  │
│ /Users/yoav/.pyenv/versions/3.8.19/lib/python3.8/ssl.py:1134 in read                             │
│                                                                                                  │
│   1131 │   │   │   if buffer is not None:                                                        │
│   1132 │   │   │   │   return self._sslobj.read(len, buffer)                                     │
│   1133 │   │   │   else:                                                                         │
│ ❱ 1134 │   │   │   │   return self._sslobj.read(len)                                             │
│   1135 │   │   except SSLError as x:                                                             │
│   1136 │   │   │   if x.args[0] == SSL_ERROR_EOF and self.suppress_ragged_eofs:                  │
│   1137 │   │   │   │   if buffer is not None:                                                    │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
ConnectionResetError: [Errno 54] Connection reset by peer

The above exception was the direct cause of the following exception:

╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /Users/yoav/projects/trading-bootcamp-platform/client-py/constant_size_hedge_fund.py:37 in main  │
│                                                                                                  │
│    34 │   only_one_cycle: bool = False,                                                          │
│    35 ):                                                                                         │
│    36 │   with TradingClient(api_url, jwt, act_as) as client:                                    │
│ ❱  37 │   │   hedge_fund_bot(                                                                    │
│    38 │   │   │   client,                                                                        │
│    39 │   │   │   market_name=market_name,                                                       │
│    40 │   │   │   market_base_settlement_price=market_base_settlement_price,                     │
│                                                                                                  │
│ /Users/yoav/projects/trading-bootcamp-platform/client-py/constant_size_hedge_fund.py:100 in      │
│ hedge_fund_bot                                                                                   │
│                                                                                                  │
│    97 │   │                                                                                      │
│    98 │   │   for _ in range(int(ticks)):                                                        │
│    99 │   │   │   sleep(tick_seconds)                                                            │
│ ❱ 100 │   │   │   client.out(market_id)                                                          │
│   101 │   │   │                                                                                  │
│   102 │   │   │   state = client.state()                                                         │
│   103 │   │   │   position = next(                                                               │
│                                                                                                  │
│ /Users/yoav/projects/trading-bootcamp-platform/client-py/trading_client.py:103 in out            │
│                                                                                                  │
│   100 │   │   │   │   market_id=market_id,                                                       │
│   101 │   │   │   ),                                                                             │
│   102 │   │   )                                                                                  │
│ ❱ 103 │   │   response = self.request(msg)                                                       │
│   104 │   │   _, message = betterproto.which_one_of(response, "message")                         │
│   105 │   │   assert isinstance(message, websocket_api.Out)                                      │
│   106 │   │   return message                                                                     │
│                                                                                                  │
│ /Users/yoav/projects/trading-bootcamp-platform/client-py/trading_client.py:137 in request        │
│                                                                                                  │
│   134 │   │   │   message.request_id = str(uuid.uuid4())                                         │
│   135 │   │   self.send(message)                                                                 │
│   136 │   │   while True:                                                                        │
│ ❱ 137 │   │   │   server_message = self.recv()                                                   │
│   138 │   │   │   if server_message.request_id == message.request_id:                            │
│   139 │   │   │   │   _, message = betterproto.which_one_of(server_message, "message")           │
│   140 │   │   │   │   if isinstance(message, websocket_api.RequestFailed):                       │
│                                                                                                  │
│ /Users/yoav/projects/trading-bootcamp-platform/client-py/trading_client.py:180 in recv           │
│                                                                                                  │
│   177 │   │   Wait for a message from the server and update the state accordingly,               │
│   178 │   │   returning the kind of message and the message.                                     │
│   179 │   │   """                                                                                │
│ ❱ 180 │   │   message = self._ws.recv(timeout=timeout)                                           │
│   181 │   │   assert isinstance(message, bytes)                                                  │
│   182 │   │   decoded = websocket_api.ServerMessage().parse(message)                             │
│   183 │   │   self._state._update(decoded)                                                       │
│                                                                                                  │
│ /Users/yoav/.pyenv/versions/3.8.19/envs/trading-bootcamp-client/lib/python3.8/site-packages/webs │
│ ockets/sync/connection.py:201 in recv                                                            │
│                                                                                                  │
│   198 │   │   try:                                                                               │
│   199 │   │   │   return self.recv_messages.get(timeout)                                         │
│   200 │   │   except EOFError:                                                                   │
│ ❱ 201 │   │   │   raise self.protocol.close_exc from self.recv_events_exc                        │
│   202 │   │   except RuntimeError:                                                               │
│   203 │   │   │   raise RuntimeError(                                                            │
│   204 │   │   │   │   "cannot call recv while another thread "                                   │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
ConnectionClosedError: no close frame received or sent
