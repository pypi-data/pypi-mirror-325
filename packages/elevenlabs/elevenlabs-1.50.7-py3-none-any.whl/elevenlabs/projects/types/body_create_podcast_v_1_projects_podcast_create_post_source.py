# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.unchecked_base_model import UncheckedBaseModel
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
import typing_extensions
from ...core.unchecked_base_model import UnionMetadata


class BodyCreatePodcastV1ProjectsPodcastCreatePostSource_Text(UncheckedBaseModel):
    """
    The source content for the Podcast.
    """

    type: typing.Literal["text"] = "text"
    text: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BodyCreatePodcastV1ProjectsPodcastCreatePostSource_Url(UncheckedBaseModel):
    """
    The source content for the Podcast.
    """

    type: typing.Literal["url"] = "url"
    url: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


BodyCreatePodcastV1ProjectsPodcastCreatePostSource = typing_extensions.Annotated[
    typing.Union[
        BodyCreatePodcastV1ProjectsPodcastCreatePostSource_Text, BodyCreatePodcastV1ProjectsPodcastCreatePostSource_Url
    ],
    UnionMetadata(discriminant="type"),
]
