# Generated by 'python3 -m parameter_persistence.generate_models'

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class FoxgloveBridgeParameters(BaseModel):
    address: Optional[str] = Field(
        None, description="The host address to bind the WebSocket server to"
    )
    asset_uri_allowlist: Optional[List[str]] = Field(
        None,
        description="List of regular expressions (ECMAScript) of whitelisted parameter names.",
    )
    capabilities: Optional[List[str]] = Field(None, description="Server capabilities")
    certfile: Optional[str] = Field(None, description="Path to the certificate to use for TLS")
    client_topic_whitelist: Optional[List[str]] = Field(
        None,
        description="List of regular expressions (ECMAScript) of whitelisted parameter names.",
    )
    disable_load_message: Optional[bool] = Field(
        None,
        description="Do not publish as loaned message when publishing a client message",
    )
    include_hidden: Optional[bool] = Field(None, description="Include hidden topics and services")
    keyfile: Optional[str] = Field(None, description="Path to the private key to use for TLS")
    max_qos_depth: Optional[int] = Field(
        None, description="Maximum depth used for the QoS profile of subscriptions."
    )
    min_qos_depth: Optional[int] = Field(
        None, description="Minimum depth used for the QoS profile of subscriptions."
    )
    param_whitelist: Optional[List[str]] = Field(
        None,
        description="List of regular expressions (ECMAScript) of whitelisted parameter names.",
    )
    port: Optional[int] = Field(None, description="The TCP port to bind the WebSocket server to")
    send_buffer_limit: Optional[int] = Field(
        None,
        description="Connection send buffer limit in bytes. Messages will be dropped when a connection's send buffer reaches this limit to avoid a queue of outdated messages building up.",
    )
    service_whitelist: Optional[List[str]] = Field(
        None,
        description="List of regular expressions (ECMAScript) of whitelisted service names.",
    )
    tls: Optional[bool] = Field(
        None, description="Use Transport Layer Security for encrypted communication"
    )
    topic_whitelist: Optional[List[str]] = Field(
        None,
        description="List of regular expressions (ECMAScript) of whitelisted topic names.",
    )
    use_compression: Optional[bool] = Field(
        None,
        description="Use websocket compression (permessage-deflate). Suited for connections with smaller bandwidth, at the cost of additional CPU load.",
    )


class SourcesEnabledEnum(Enum):
    ais = "ais"
    arpa = "arpa"
    camera = "camera"
    object = "object"


class Track(BaseModel):
    stale_timeout: Optional[float] = Field(
        None,
        description="Time in seconds before a track is considered stale and removed",
    )
    spawn_radius: Optional[float] = Field(
        None, description="Radius in meters around the vessel to spawn tracks"
    )
    sources_enabled: Optional[List[SourcesEnabledEnum]] = Field(
        None, description="The sources of tracks that will spawn vessels in MIS-SIM"
    )


class VesselManagerParameters(BaseModel):
    enabled: Optional[bool] = Field(
        None, description="Whether to enable the vessel manager or not"
    )
    vessels: Optional[List[str]] = Field(None, description="List of vessels")
    hifi_mode: Optional[bool] = Field(
        None, description="Should we use the low-fidelity topic suffix"
    )
    objects_publish_rate: Optional[float] = Field(
        None, description="Rate at which to publish objects in Hz"
    )
    track: Optional[Track] = None


class PlaybackParameters(BaseModel):
    bag_directory: Optional[str] = Field(None, description="")
    storage_id: Optional[str] = Field(None, description="")


class RecorderParameters(BaseModel):
    bag_directory: Optional[str] = Field(None, description="")
    storage_id: Optional[str] = Field(None, description="")
    storage_preset_profile: Optional[str] = Field(None, description="")


class SimulatedClockParameters(BaseModel):
    enabled: Optional[bool] = Field(
        None, description="Whether to enable the simulated clock or not"
    )
    sim_speed: Optional[float] = Field(None, description="Speed at which to run the simulation")
    publish_rate: Optional[float] = Field(
        None, description="Rate at which to publish the clock at?"
    )


class HifiVesselManagerParameters(BaseModel):
    replay_mode: Optional[bool] = Field(None, description="Is the node in replay mode?")


class ScenarioRunnerParameters(BaseModel):
    scenarios: Optional[List[str]] = Field(None, description="List of scenarios")


class NodeConfigurationModel(BaseModel):
    node_name_regex: str = Field(..., title="Node Name Regex")
    parameter_name_regexes: List[str] = Field(..., title="Parameter Name Regexes")


class ParameterPersistenceParameters(BaseModel):
    params_path: Optional[str] = Field(
        None, description="Path to the file where the parameters are stored"
    )
    file_header: Optional[str] = Field(
        None, description="A message to add to the top of the params file"
    )
    path_within_file: Optional[str] = Field(
        None, description="Path within the file to store the parameters"
    )
    persistent_parameters: Optional[List[NodeConfigurationModel]] = Field(
        None, description="Regex describing which parameters should persist"
    )


class LaunchParameters(BaseModel):
    foxglove_bridge: Optional[FoxgloveBridgeParameters] = None
    vessel_manager: Optional[VesselManagerParameters] = None
    playback: Optional[PlaybackParameters] = None
    recorder: Optional[RecorderParameters] = None
    simulated_clock: Optional[SimulatedClockParameters] = None
    hifi_vessel_manager: Optional[HifiVesselManagerParameters] = None
    scenario_runner: Optional[ScenarioRunnerParameters] = None
    parameter_persistence: Optional[ParameterPersistenceParameters] = None
