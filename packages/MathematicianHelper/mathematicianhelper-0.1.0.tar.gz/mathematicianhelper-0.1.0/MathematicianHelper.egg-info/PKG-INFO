Metadata-Version: 2.2
Name: MathematicianHelper
Version: 0.1.0
Summary: A Python package for solving mathematical problems.
Home-page: https://github.com/lakshay-goyal/MathematicianHelper
Author: Lakshay
Author-email: lakshaygoyal201@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: sympy
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# MathUtils: Comprehensive Mathematical Utility Library

## Overview
MathUtils is a powerful Python library providing advanced mathematical functions across algebra, arithmetic, calculus, and numerical methods.

## Installation
```bash
pip install mathutils
```

## Modules and Functionalities

### Algebra Module
#### Quadratic Equation Solver
```python
from mathutils import solve_quadratic

# Solve x^2 - 5x + 6 = 0
roots = solve_quadratic(1, -5, 6)
# Returns: (3.0, 2.0)

# Solve equation with no real roots
no_roots = solve_quadratic(1, 2, 5)
# Returns: None
```

#### Linear System Solver
```python
from mathutils import solve_linear_system

# Solve system of linear equations: 
# 2x + y = 5
# x - y = 1
coefficients = [[2, 1], [1, -1]]
constants = [5, 1]
solution = solve_linear_system(coefficients, constants)
# Returns: [2.0, 0.0]
```

### Arithmetic Module
#### Number Theory Functions
```python
from mathutils import factorial, gcd, lcm

# Calculate factorial
fact_5 = factorial(5)  # 120

# Find Greatest Common Divisor
gcd_result = gcd(48, 18)  # 6

# Find Least Common Multiple
lcm_result = lcm(4, 6)  # 12
```

### Calculus Module
#### Symbolic Differentiation and Integration
```python
from mathutils import derivative, integral

# Differentiate x^2 + 3x
diff_result = derivative('x**2 + 3*x', 'x')
# Returns: 2*x + 3

# Integrate x^2 + 3x
integral_result = integral('x**2 + 3*x', 'x')
# Returns: x^3/3 + 3*x^2/2
```

### Numerical Methods Module
#### Fibonacci Sequence Generator
```python
from mathutils import fibonacci

# Generate first 10 Fibonacci numbers
fib_sequence = fibonacci(10)
# Returns: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
```

#### Root Finding with Newton-Raphson Method
```python
from mathutils import newton_raphson
import math

# Find root of f(x) = x^2 - 4
def f(x): return x**2 - 4
def df(x): return 2*x

root = newton_raphson(f, df, initial_guess=2)
# Returns: 2.0 (approximation of square root of 4)
```

## Advanced Use Cases
1. Scientific Computing
2. Engineering Calculations
3. Educational Mathematical Tools
4. Data Science Preprocessing
5. Financial Modeling

## Requirements
- NumPy
- SymPy
- Python 3.7+

## Contributing
Contributions welcome! Please submit pull requests to our GitHub repository.

## License
MIT License

## Project Links
- GitHub: [Your GitHub Repo]
- Documentation: [Documentation Link]
