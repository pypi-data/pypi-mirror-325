# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
import re
from typing import List, Dict, TypedDict, Union
from contextlib import suppress

from parsel import Selector, SelectorList

T_OngoingPage_ITEM = TypedDict(
    "T_OngoingPage_ITEM", {"url": str, "title": str, "thumbnail": str, "episode": str, "dub": str}
)
T_OngoingPage = List[T_OngoingPage_ITEM]
T_SearchPage_ITEM = TypedDict("T_SearchPage_ITEM", {"title": str, "thumbnail": str, "url": str})
T_SearchPage = List[T_SearchPage_ITEM]
T_AnimePage = TypedDict("T_AnimePage", {"title": str, "description": str, "thumbnail": str, "id": str, "raw_json": str})
T_EpisodeDubbersView = Dict[str, str]
T_EpisodesView_ITEM = TypedDict("T_EpisodesView_ITEM", {"num": str, "title": str, "id": str})
T_EpisodesView = List[T_EpisodesView_ITEM]
T_EpisodePage = TypedDict("T_EpisodePage", {"dubbers": T_EpisodeDubbersView, "episodes": T_EpisodesView})
T_SourceVideoView_ITEM = TypedDict(
    "T_SourceVideoView_ITEM", {"title": str, "url": str, "data_provider": str, "data_provide_dubbing": str}
)
T_SourceVideoView = List[T_SourceVideoView_ITEM]
T_SourceDubbersView = Dict[str, str]
T_SourcePage = TypedDict("T_SourcePage", {"dubbers": T_SourceDubbersView, "videos": T_SourceVideoView})


class OngoingPage:
    """Get all available ongoings from the main page

        GET https://animego.me


    [
        {
            "url": "String",
            "title": "String",
            "thumbnail": "String",
            "episode": "String",
            "dub": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: Selector) -> SelectorList:
        value1 = value.css(".border-bottom-0.cursor-pointer")
        return value1

    def _parse_url(self, value: Selector) -> str:
        value1 = value.attrib["onclick"]
        value2 = value1.lstrip("location.href=")
        value3 = value2.strip("'")
        value4 = "https://animego.me{}".format(value3) if value3 else value3
        return value4

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".last-update-title")
        value2 = "".join(value1.css("::text").getall())
        return value2

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".lazy")
        value2 = value1.attrib["style"]
        value3 = value2.lstrip("background-image: url(")
        value4 = value3.rstrip(");")
        return value4

    def _parse_episode(self, value: Selector) -> str:
        value1 = value.css(".text-truncate")
        value2 = "".join(value1.css("::text").getall())
        value3 = re.search("(\\d+)\\s", value2)[1]
        return value3

    def _parse_dub(self, value: Selector) -> str:
        value1 = value.css(".text-gray-dark-6")
        value2 = "".join(value1.css("::text").getall())
        value3 = value2.replace(")", "")
        value4 = value3.replace("(", "")
        return value4

    def parse(self) -> T_OngoingPage:
        return [
            {
                "url": self._parse_url(e),
                "title": self._parse_title(e),
                "thumbnail": self._parse_thumbnail(e),
                "episode": self._parse_episode(e),
                "dub": self._parse_dub(e),
            }
            for e in self._split_doc(self._doc)
        ]


class SearchPage:
    """Get all search results by query

        USAGE:

            GET https://animego.me/search/anime
            q={QUERY}

        EXAMPLE:

            GET https://animego.me/search/anime?q=LAIN


    [
        {
            "title": "String",
            "thumbnail": "String",
            "url": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: Selector) -> SelectorList:
        value1 = value.css(".row > .col-ul-2")
        return value1

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".text-truncate a")
        value2 = value1.attrib["title"]
        return value2

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".lazy")
        value2 = value1.attrib["data-original"]
        return value2

    def _parse_url(self, value: Selector) -> str:
        value1 = value.css(".text-truncate a")
        value2 = value1.attrib["href"]
        return value2

    def parse(self) -> T_SearchPage:
        return [
            {"title": self._parse_title(e), "thumbnail": self._parse_thumbnail(e), "url": self._parse_url(e)}
            for e in self._split_doc(self._doc)
        ]


class AnimePage:
    """Anime page information. anime path contains in SearchView.url or Ongoing.url

        - id needed for next API requests
        - raw_json used for extract extra metadata (unescape required)

        USAGE:

            GET https://animego.me/anime/<ANIME_PATH>

        EXAMPLE:

            GET https://animego.me/anime/eksperimenty-leyn-1114


    {
        "title": "String",
        "description": "String",
        "thumbnail": "String",
        "id": "String",
        "raw_json": "String"
    }"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".anime-title h1")
        value2 = "".join(value1.css("::text").getall())
        return value2

    def _parse_description(self, value: Selector) -> str:
        value1 = value
        with suppress(Exception):
            value2 = value1.css(".description")
            value3 = value2.css("::text").getall()
            value4 = "".join(value3)
            value5 = re.sub("^\\s+|\\s+$", "", value4)
            return value5
        return ""

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css("#content img")
        value2 = value1.attrib["src"]
        return value2

    def _parse_id(self, value: Selector) -> str:
        value1 = value.css(".br-2 .my-list-anime")
        value2 = value1.attrib["id"]
        value3 = value2.lstrip("my-list-")
        return value3

    def _parse_raw_json(self, value: Selector) -> str:
        value1 = value.css("script[type='application/ld+json']")
        value2 = "".join(value1.css("::text").getall())
        return value2

    def parse(self) -> T_AnimePage:
        return {
            "title": self._parse_title(self._doc),
            "description": self._parse_description(self._doc),
            "thumbnail": self._parse_thumbnail(self._doc),
            "id": self._parse_id(self._doc),
            "raw_json": self._parse_raw_json(self._doc),
        }


class EpisodeDubbersView:
    """

    {
        "<dubber_id>": "<dubber_name>",
        "<id>": "..."
    }"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: Selector) -> SelectorList:
        value1 = value.css("#video-dubbing .mb-1")
        return value1

    def _parse_key(self, value: Selector) -> str:
        value1 = value.attrib["data-dubbing"]
        return value1

    def _parse_value(self, value: Selector) -> str:
        value1 = value.css("span")
        value2 = "".join(value1.css("::text").getall())
        value3 = re.sub("^\\s+|\\s+$", "", value2)
        return value3

    def parse(self) -> T_EpisodeDubbersView:
        return {self._parse_key(e): self._parse_value(e) for e in self._split_doc(self._doc)}


class EpisodesView:
    """

    [
        {
            "num": "String",
            "title": "String",
            "id": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: Selector) -> SelectorList:
        value1 = value.css("#video-carousel .mb-0")
        return value1

    def _parse_num(self, value: Selector) -> str:
        value1 = value.attrib["data-episode"]
        return value1

    def _parse_title(self, value: Selector) -> str:
        value1 = value.attrib["data-episode-title"]
        return value1

    def _parse_id(self, value: Selector) -> str:
        value1 = value.attrib["data-id"]
        return value1

    def parse(self) -> T_EpisodesView:
        return [
            {"num": self._parse_num(e), "title": self._parse_title(e), "id": self._parse_id(e)}
            for e in self._split_doc(self._doc)
        ]


class EpisodePage:
    """Representation episodes

        Prepare:
          1. get id from Anime object
          2. GET 'https://animego.me/anime/{Anime.id}/player?_allow=true'
          3. extract html from json by ['content'] key
          4. OPTIONAL: unescape HTML

        EXAMPLE:

            GET https://animego.me/anime/anime/1114//player?_allow=true


    {
        "dubbers": {
            "<dubber_id>": "<dubber_name>",
            "<id>": "..."
        },
        "episodes": [
            {
                "num": "String",
                "title": "String",
                "id": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_dubbers(self, value: Selector) -> T_EpisodeDubbersView:
        value1 = EpisodeDubbersView(value).parse()
        return value1

    def _parse_episodes(self, value: Selector) -> T_EpisodesView:
        value1 = EpisodesView(value).parse()
        return value1

    def parse(self) -> T_EpisodePage:
        return {"dubbers": self._parse_dubbers(self._doc), "episodes": self._parse_episodes(self._doc)}


class SourceVideoView:
    """

    [
        {
            "title": "String",
            "url": "String",
            "data_provider": "String",
            "data_provide_dubbing": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: Selector) -> SelectorList:
        value1 = value.css("#video-players > span")
        return value1

    def _parse_title(self, value: Selector) -> str:
        value1 = "".join(value.css("::text").getall())
        return value1

    def _parse_url(self, value: Selector) -> str:
        value1 = value.attrib["data-player"]
        value2 = "https:{}".format(value1) if value1 else value1
        return value2

    def _parse_data_provider(self, value: Selector) -> str:
        value1 = value.attrib["data-provider"]
        return value1

    def _parse_data_provide_dubbing(self, value: Selector) -> str:
        value1 = value.attrib["data-provide-dubbing"]
        return value1

    def parse(self) -> T_SourceVideoView:
        return [
            {
                "title": self._parse_title(e),
                "url": self._parse_url(e),
                "data_provider": self._parse_data_provider(e),
                "data_provide_dubbing": self._parse_data_provide_dubbing(e),
            }
            for e in self._split_doc(self._doc)
        ]


class SourceDubbersView:
    """

    {
        "<dubber_id>": "<dubber_name>",
        "...": "..."
    }"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: Selector) -> SelectorList:
        value1 = value.css("#video-dubbing > span")
        return value1

    def _parse_key(self, value: Selector) -> str:
        value1 = value.attrib["data-dubbing"]
        return value1

    def _parse_value(self, value: Selector) -> str:
        value1 = "".join(value.css("::text").getall())
        value2 = re.sub("^\\s+", "", value1)
        value3 = re.sub("\\s+$", "", value2)
        return value3

    def parse(self) -> T_SourceDubbersView:
        return {self._parse_key(e): self._parse_value(e) for e in self._split_doc(self._doc)}


class SourcePage:
    """representation player urls

        Prepare:
          1. get num and id from Episode

          2.

          GET https://animego.me/anime/series
          dubbing=2&provider=24&episode={Episode.num}id={Episode.id}

          3. extract html from json by ["content"] key

          4. OPTIONAL: unescape document

        EXAMPLE:

            GET https://animego.me/anime/series?dubbing=2&provider=24&episode=2&id=15837


    {
        "dubbers": {
            "<dubber_id>": "<dubber_name>",
            "...": "..."
        },
        "videos": [
            {
                "title": "String",
                "url": "String",
                "data_provider": "String",
                "data_provide_dubbing": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_dubbers(self, value: Selector) -> T_SourceDubbersView:
        value1 = SourceDubbersView(value).parse()
        return value1

    def _parse_videos(self, value: Selector) -> T_SourceVideoView:
        value1 = SourceVideoView(value).parse()
        return value1

    def parse(self) -> T_SourcePage:
        return {"dubbers": self._parse_dubbers(self._doc), "videos": self._parse_videos(self._doc)}
