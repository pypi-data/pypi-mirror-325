# coding: utf-8

"""
    EmbedOps API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@embedops.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserGroupProps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"user_perm": "str", "group": "UserGroupPropsGroup"}

    attribute_map = {"user_perm": "userPerm", "group": "group"}

    def __init__(self, user_perm=None, group=None):  # noqa: E501
        """UserGroupProps - a model defined in Swagger"""  # noqa: E501
        self._user_perm = None
        self._group = None
        self.discriminator = None
        if user_perm is not None:
            self.user_perm = user_perm
        if group is not None:
            self.group = group

    @property
    def user_perm(self):
        """Gets the user_perm of this UserGroupProps.  # noqa: E501


        :return: The user_perm of this UserGroupProps.  # noqa: E501
        :rtype: str
        """
        return self._user_perm

    @user_perm.setter
    def user_perm(self, user_perm):
        """Sets the user_perm of this UserGroupProps.


        :param user_perm: The user_perm of this UserGroupProps.  # noqa: E501
        :type: str
        """
        allowed_values = ["admin", "read", "update"]  # noqa: E501
        if user_perm not in allowed_values:
            raise ValueError(
                "Invalid value for `user_perm` ({0}), must be one of {1}".format(  # noqa: E501
                    user_perm, allowed_values
                )
            )

        self._user_perm = user_perm

    @property
    def group(self):
        """Gets the group of this UserGroupProps.  # noqa: E501


        :return: The group of this UserGroupProps.  # noqa: E501
        :rtype: UserGroupPropsGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this UserGroupProps.


        :param group: The group of this UserGroupProps.  # noqa: E501
        :type: UserGroupPropsGroup
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserGroupProps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroupProps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
