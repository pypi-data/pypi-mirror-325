# coding: utf-8

"""
    EmbedOps API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@embedops.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "onboarding_dismissed": "bool",
        "bitbucket_code": "str",
        "auth0_id": "str",
        "created_at": "datetime",
        "email": "str",
        "family_name": "str",
        "given_name": "str",
        "groups": "list[UserGroupProps]",
        "id": "str",
        "name": "str",
        "nickname": "str",
        "invite_status": "str",
        "invite_ticket": "str",
        "updated_at": "datetime",
    }

    attribute_map = {
        "onboarding_dismissed": "onboardingDismissed",
        "bitbucket_code": "bitbucketCode",
        "auth0_id": "auth0Id",
        "created_at": "createdAt",
        "email": "email",
        "family_name": "familyName",
        "given_name": "givenName",
        "groups": "groups",
        "id": "id",
        "name": "name",
        "nickname": "nickname",
        "invite_status": "inviteStatus",
        "invite_ticket": "inviteTicket",
        "updated_at": "updatedAt",
    }

    def __init__(
        self,
        onboarding_dismissed=None,
        bitbucket_code=None,
        auth0_id=None,
        created_at=None,
        email=None,
        family_name=None,
        given_name=None,
        groups=None,
        id=None,
        name=None,
        nickname=None,
        invite_status=None,
        invite_ticket=None,
        updated_at=None,
    ):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._onboarding_dismissed = None
        self._bitbucket_code = None
        self._auth0_id = None
        self._created_at = None
        self._email = None
        self._family_name = None
        self._given_name = None
        self._groups = None
        self._id = None
        self._name = None
        self._nickname = None
        self._invite_status = None
        self._invite_ticket = None
        self._updated_at = None
        self.discriminator = None
        if onboarding_dismissed is not None:
            self.onboarding_dismissed = onboarding_dismissed
        if bitbucket_code is not None:
            self.bitbucket_code = bitbucket_code
        if auth0_id is not None:
            self.auth0_id = auth0_id
        if created_at is not None:
            self.created_at = created_at
        if email is not None:
            self.email = email
        if family_name is not None:
            self.family_name = family_name
        if given_name is not None:
            self.given_name = given_name
        if groups is not None:
            self.groups = groups
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if nickname is not None:
            self.nickname = nickname
        if invite_status is not None:
            self.invite_status = invite_status
        if invite_ticket is not None:
            self.invite_ticket = invite_ticket
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def onboarding_dismissed(self):
        """Gets the onboarding_dismissed of this User.  # noqa: E501


        :return: The onboarding_dismissed of this User.  # noqa: E501
        :rtype: bool
        """
        return self._onboarding_dismissed

    @onboarding_dismissed.setter
    def onboarding_dismissed(self, onboarding_dismissed):
        """Sets the onboarding_dismissed of this User.


        :param onboarding_dismissed: The onboarding_dismissed of this User.  # noqa: E501
        :type: bool
        """

        self._onboarding_dismissed = onboarding_dismissed

    @property
    def bitbucket_code(self):
        """Gets the bitbucket_code of this User.  # noqa: E501


        :return: The bitbucket_code of this User.  # noqa: E501
        :rtype: str
        """
        return self._bitbucket_code

    @bitbucket_code.setter
    def bitbucket_code(self, bitbucket_code):
        """Sets the bitbucket_code of this User.


        :param bitbucket_code: The bitbucket_code of this User.  # noqa: E501
        :type: str
        """

        self._bitbucket_code = bitbucket_code

    @property
    def auth0_id(self):
        """Gets the auth0_id of this User.  # noqa: E501


        :return: The auth0_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._auth0_id

    @auth0_id.setter
    def auth0_id(self, auth0_id):
        """Sets the auth0_id of this User.


        :param auth0_id: The auth0_id of this User.  # noqa: E501
        :type: str
        """

        self._auth0_id = auth0_id

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501


        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def family_name(self):
        """Gets the family_name of this User.  # noqa: E501


        :return: The family_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this User.


        :param family_name: The family_name of this User.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this User.  # noqa: E501


        :return: The given_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this User.


        :param given_name: The given_name of this User.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501


        :return: The groups of this User.  # noqa: E501
        :rtype: list[UserGroupProps]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.


        :param groups: The groups of this User.  # noqa: E501
        :type: list[UserGroupProps]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501


        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this User.  # noqa: E501


        :return: The nickname of this User.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this User.


        :param nickname: The nickname of this User.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def invite_status(self):
        """Gets the invite_status of this User.  # noqa: E501


        :return: The invite_status of this User.  # noqa: E501
        :rtype: str
        """
        return self._invite_status

    @invite_status.setter
    def invite_status(self, invite_status):
        """Sets the invite_status of this User.


        :param invite_status: The invite_status of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["accepted", "invited"]  # noqa: E501
        if invite_status not in allowed_values:
            raise ValueError(
                "Invalid value for `invite_status` ({0}), must be one of {1}".format(  # noqa: E501
                    invite_status, allowed_values
                )
            )

        self._invite_status = invite_status

    @property
    def invite_ticket(self):
        """Gets the invite_ticket of this User.  # noqa: E501


        :return: The invite_ticket of this User.  # noqa: E501
        :rtype: str
        """
        return self._invite_ticket

    @invite_ticket.setter
    def invite_ticket(self, invite_ticket):
        """Sets the invite_ticket of this User.


        :param invite_ticket: The invite_ticket of this User.  # noqa: E501
        :type: str
        """

        self._invite_ticket = invite_ticket

    @property
    def updated_at(self):
        """Gets the updated_at of this User.  # noqa: E501


        :return: The updated_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.


        :param updated_at: The updated_at of this User.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
