# coding: utf-8

"""
    EmbedOps API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@embedops.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RepoCreateProps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "uri": "str",
        "ci_provider": "str",
        "ci_o_auth_token_id": "str",
        "desc": "str",
        "default_branch": "str",
        "type": "RepoType",
    }

    attribute_map = {
        "name": "name",
        "uri": "uri",
        "ci_provider": "ciProvider",
        "ci_o_auth_token_id": "ciOAuthTokenId",
        "desc": "desc",
        "default_branch": "defaultBranch",
        "type": "type",
    }

    def __init__(
        self,
        name=None,
        uri=None,
        ci_provider=None,
        ci_o_auth_token_id=None,
        desc=None,
        default_branch=None,
        type=None,
    ):  # noqa: E501
        """RepoCreateProps - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._uri = None
        self._ci_provider = None
        self._ci_o_auth_token_id = None
        self._desc = None
        self._default_branch = None
        self._type = None
        self.discriminator = None
        self.name = name
        self.uri = uri
        if ci_provider is not None:
            self.ci_provider = ci_provider
        if ci_o_auth_token_id is not None:
            self.ci_o_auth_token_id = ci_o_auth_token_id
        if desc is not None:
            self.desc = desc
        self.default_branch = default_branch
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this RepoCreateProps.  # noqa: E501


        :return: The name of this RepoCreateProps.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepoCreateProps.


        :param name: The name of this RepoCreateProps.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def uri(self):
        """Gets the uri of this RepoCreateProps.  # noqa: E501


        :return: The uri of this RepoCreateProps.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this RepoCreateProps.


        :param uri: The uri of this RepoCreateProps.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError(
                "Invalid value for `uri`, must not be `None`"
            )  # noqa: E501

        self._uri = uri

    @property
    def ci_provider(self):
        """Gets the ci_provider of this RepoCreateProps.  # noqa: E501


        :return: The ci_provider of this RepoCreateProps.  # noqa: E501
        :rtype: str
        """
        return self._ci_provider

    @ci_provider.setter
    def ci_provider(self, ci_provider):
        """Sets the ci_provider of this RepoCreateProps.


        :param ci_provider: The ci_provider of this RepoCreateProps.  # noqa: E501
        :type: str
        """
        allowed_values = ["github", "gitlab", "bitbucket", ""]  # noqa: E501
        if ci_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `ci_provider` ({0}), must be one of {1}".format(  # noqa: E501
                    ci_provider, allowed_values
                )
            )

        self._ci_provider = ci_provider

    @property
    def ci_o_auth_token_id(self):
        """Gets the ci_o_auth_token_id of this RepoCreateProps.  # noqa: E501


        :return: The ci_o_auth_token_id of this RepoCreateProps.  # noqa: E501
        :rtype: str
        """
        return self._ci_o_auth_token_id

    @ci_o_auth_token_id.setter
    def ci_o_auth_token_id(self, ci_o_auth_token_id):
        """Sets the ci_o_auth_token_id of this RepoCreateProps.


        :param ci_o_auth_token_id: The ci_o_auth_token_id of this RepoCreateProps.  # noqa: E501
        :type: str
        """

        self._ci_o_auth_token_id = ci_o_auth_token_id

    @property
    def desc(self):
        """Gets the desc of this RepoCreateProps.  # noqa: E501


        :return: The desc of this RepoCreateProps.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this RepoCreateProps.


        :param desc: The desc of this RepoCreateProps.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def default_branch(self):
        """Gets the default_branch of this RepoCreateProps.  # noqa: E501


        :return: The default_branch of this RepoCreateProps.  # noqa: E501
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this RepoCreateProps.


        :param default_branch: The default_branch of this RepoCreateProps.  # noqa: E501
        :type: str
        """
        if default_branch is None:
            raise ValueError(
                "Invalid value for `default_branch`, must not be `None`"
            )  # noqa: E501

        self._default_branch = default_branch

    @property
    def type(self):
        """Gets the type of this RepoCreateProps.  # noqa: E501


        :return: The type of this RepoCreateProps.  # noqa: E501
        :rtype: RepoType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RepoCreateProps.


        :param type: The type of this RepoCreateProps.  # noqa: E501
        :type: RepoType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RepoCreateProps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepoCreateProps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
