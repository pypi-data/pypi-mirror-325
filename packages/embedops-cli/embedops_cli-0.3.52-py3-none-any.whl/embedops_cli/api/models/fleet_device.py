# coding: utf-8

"""
    EmbedOps API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@embedops.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FleetDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"id": "str", "device_name": "str", "is_online": "bool"}

    attribute_map = {"id": "id", "device_name": "deviceName", "is_online": "isOnline"}

    def __init__(self, id=None, device_name=None, is_online=None):  # noqa: E501
        """FleetDevice - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._device_name = None
        self._is_online = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if device_name is not None:
            self.device_name = device_name
        if is_online is not None:
            self.is_online = is_online

    @property
    def id(self):
        """Gets the id of this FleetDevice.  # noqa: E501


        :return: The id of this FleetDevice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FleetDevice.


        :param id: The id of this FleetDevice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def device_name(self):
        """Gets the device_name of this FleetDevice.  # noqa: E501


        :return: The device_name of this FleetDevice.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this FleetDevice.


        :param device_name: The device_name of this FleetDevice.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def is_online(self):
        """Gets the is_online of this FleetDevice.  # noqa: E501


        :return: The is_online of this FleetDevice.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this FleetDevice.


        :param is_online: The is_online of this FleetDevice.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(FleetDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FleetDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
