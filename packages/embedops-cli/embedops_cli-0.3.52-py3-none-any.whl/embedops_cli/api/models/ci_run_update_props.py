# coding: utf-8

"""
    EmbedOps API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@embedops.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CIRunUpdateProps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "branch": "str",
        "source_type": "str",
        "commit_id": "str",
        "commit_message": "str",
        "name": "str",
        "pipeline_id": "str",
        "pipeline_url": "str",
        "status": "str",
        "type": "CIRunType",
    }

    attribute_map = {
        "branch": "branch",
        "source_type": "sourceType",
        "commit_id": "commitId",
        "commit_message": "commitMessage",
        "name": "name",
        "pipeline_id": "pipelineId",
        "pipeline_url": "pipelineUrl",
        "status": "status",
        "type": "type",
    }

    def __init__(
        self,
        branch=None,
        source_type=None,
        commit_id=None,
        commit_message=None,
        name=None,
        pipeline_id=None,
        pipeline_url=None,
        status=None,
        type=None,
    ):  # noqa: E501
        """CIRunUpdateProps - a model defined in Swagger"""  # noqa: E501
        self._branch = None
        self._source_type = None
        self._commit_id = None
        self._commit_message = None
        self._name = None
        self._pipeline_id = None
        self._pipeline_url = None
        self._status = None
        self._type = None
        self.discriminator = None
        if branch is not None:
            self.branch = branch
        if source_type is not None:
            self.source_type = source_type
        if commit_id is not None:
            self.commit_id = commit_id
        if commit_message is not None:
            self.commit_message = commit_message
        if name is not None:
            self.name = name
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if pipeline_url is not None:
            self.pipeline_url = pipeline_url
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def branch(self):
        """Gets the branch of this CIRunUpdateProps.  # noqa: E501


        :return: The branch of this CIRunUpdateProps.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this CIRunUpdateProps.


        :param branch: The branch of this CIRunUpdateProps.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def source_type(self):
        """Gets the source_type of this CIRunUpdateProps.  # noqa: E501


        :return: The source_type of this CIRunUpdateProps.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CIRunUpdateProps.


        :param source_type: The source_type of this CIRunUpdateProps.  # noqa: E501
        :type: str
        """
        allowed_values = ["branch", "tag"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}".format(  # noqa: E501
                    source_type, allowed_values
                )
            )

        self._source_type = source_type

    @property
    def commit_id(self):
        """Gets the commit_id of this CIRunUpdateProps.  # noqa: E501


        :return: The commit_id of this CIRunUpdateProps.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this CIRunUpdateProps.


        :param commit_id: The commit_id of this CIRunUpdateProps.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    @property
    def commit_message(self):
        """Gets the commit_message of this CIRunUpdateProps.  # noqa: E501


        :return: The commit_message of this CIRunUpdateProps.  # noqa: E501
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this CIRunUpdateProps.


        :param commit_message: The commit_message of this CIRunUpdateProps.  # noqa: E501
        :type: str
        """

        self._commit_message = commit_message

    @property
    def name(self):
        """Gets the name of this CIRunUpdateProps.  # noqa: E501


        :return: The name of this CIRunUpdateProps.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CIRunUpdateProps.


        :param name: The name of this CIRunUpdateProps.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this CIRunUpdateProps.  # noqa: E501


        :return: The pipeline_id of this CIRunUpdateProps.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this CIRunUpdateProps.


        :param pipeline_id: The pipeline_id of this CIRunUpdateProps.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def pipeline_url(self):
        """Gets the pipeline_url of this CIRunUpdateProps.  # noqa: E501


        :return: The pipeline_url of this CIRunUpdateProps.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_url

    @pipeline_url.setter
    def pipeline_url(self, pipeline_url):
        """Sets the pipeline_url of this CIRunUpdateProps.


        :param pipeline_url: The pipeline_url of this CIRunUpdateProps.  # noqa: E501
        :type: str
        """

        self._pipeline_url = pipeline_url

    @property
    def status(self):
        """Gets the status of this CIRunUpdateProps.  # noqa: E501


        :return: The status of this CIRunUpdateProps.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CIRunUpdateProps.


        :param status: The status of this CIRunUpdateProps.  # noqa: E501
        :type: str
        """
        allowed_values = ["running", "success", "failure"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this CIRunUpdateProps.  # noqa: E501


        :return: The type of this CIRunUpdateProps.  # noqa: E501
        :rtype: CIRunType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CIRunUpdateProps.


        :param type: The type of this CIRunUpdateProps.  # noqa: E501
        :type: CIRunType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CIRunUpdateProps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CIRunUpdateProps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
