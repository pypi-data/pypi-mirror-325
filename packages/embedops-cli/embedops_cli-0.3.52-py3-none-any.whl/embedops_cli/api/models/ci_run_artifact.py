# coding: utf-8

"""
    EmbedOps API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@embedops.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CIRunArtifact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "type": "str",
        "ci_run_id": "str",
        "created_at": "datetime",
        "id": "str",
        "mime_type": "str",
        "name": "str",
        "updated_at": "datetime",
    }

    attribute_map = {
        "type": "type",
        "ci_run_id": "ciRunId",
        "created_at": "createdAt",
        "id": "id",
        "mime_type": "mimeType",
        "name": "name",
        "updated_at": "updatedAt",
    }

    def __init__(
        self,
        type=None,
        ci_run_id=None,
        created_at=None,
        id=None,
        mime_type=None,
        name=None,
        updated_at=None,
    ):  # noqa: E501
        """CIRunArtifact - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._ci_run_id = None
        self._created_at = None
        self._id = None
        self._mime_type = None
        self._name = None
        self._updated_at = None
        self.discriminator = None
        self.type = type
        self.ci_run_id = ci_run_id
        self.created_at = created_at
        self.id = id
        self.mime_type = mime_type
        self.name = name
        self.updated_at = updated_at

    @property
    def type(self):
        """Gets the type of this CIRunArtifact.  # noqa: E501


        :return: The type of this CIRunArtifact.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CIRunArtifact.


        :param type: The type of this CIRunArtifact.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError(
                "Invalid value for `type`, must not be `None`"
            )  # noqa: E501

        self._type = type

    @property
    def ci_run_id(self):
        """Gets the ci_run_id of this CIRunArtifact.  # noqa: E501


        :return: The ci_run_id of this CIRunArtifact.  # noqa: E501
        :rtype: str
        """
        return self._ci_run_id

    @ci_run_id.setter
    def ci_run_id(self, ci_run_id):
        """Sets the ci_run_id of this CIRunArtifact.


        :param ci_run_id: The ci_run_id of this CIRunArtifact.  # noqa: E501
        :type: str
        """
        if ci_run_id is None:
            raise ValueError(
                "Invalid value for `ci_run_id`, must not be `None`"
            )  # noqa: E501

        self._ci_run_id = ci_run_id

    @property
    def created_at(self):
        """Gets the created_at of this CIRunArtifact.  # noqa: E501


        :return: The created_at of this CIRunArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CIRunArtifact.


        :param created_at: The created_at of this CIRunArtifact.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError(
                "Invalid value for `created_at`, must not be `None`"
            )  # noqa: E501

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this CIRunArtifact.  # noqa: E501


        :return: The id of this CIRunArtifact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CIRunArtifact.


        :param id: The id of this CIRunArtifact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def mime_type(self):
        """Gets the mime_type of this CIRunArtifact.  # noqa: E501


        :return: The mime_type of this CIRunArtifact.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this CIRunArtifact.


        :param mime_type: The mime_type of this CIRunArtifact.  # noqa: E501
        :type: str
        """
        if mime_type is None:
            raise ValueError(
                "Invalid value for `mime_type`, must not be `None`"
            )  # noqa: E501

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this CIRunArtifact.  # noqa: E501


        :return: The name of this CIRunArtifact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CIRunArtifact.


        :param name: The name of this CIRunArtifact.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this CIRunArtifact.  # noqa: E501


        :return: The updated_at of this CIRunArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CIRunArtifact.


        :param updated_at: The updated_at of this CIRunArtifact.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError(
                "Invalid value for `updated_at`, must not be `None`"
            )  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CIRunArtifact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CIRunArtifact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
