# coding: utf-8

"""
    EmbedOps API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@embedops.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AwsAccessKeyAccessKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "access_key_id": "str",
        "create_date": "datetime",
        "secret_access_key": "str",
        "status": "str",
        "user_name": "str",
    }

    attribute_map = {
        "access_key_id": "AccessKeyId",
        "create_date": "CreateDate",
        "secret_access_key": "SecretAccessKey",
        "status": "Status",
        "user_name": "UserName",
    }

    def __init__(
        self,
        access_key_id=None,
        create_date=None,
        secret_access_key=None,
        status=None,
        user_name=None,
    ):  # noqa: E501
        """AwsAccessKeyAccessKey - a model defined in Swagger"""  # noqa: E501
        self._access_key_id = None
        self._create_date = None
        self._secret_access_key = None
        self._status = None
        self._user_name = None
        self.discriminator = None
        if access_key_id is not None:
            self.access_key_id = access_key_id
        if create_date is not None:
            self.create_date = create_date
        if secret_access_key is not None:
            self.secret_access_key = secret_access_key
        if status is not None:
            self.status = status
        if user_name is not None:
            self.user_name = user_name

    @property
    def access_key_id(self):
        """Gets the access_key_id of this AwsAccessKeyAccessKey.  # noqa: E501


        :return: The access_key_id of this AwsAccessKeyAccessKey.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this AwsAccessKeyAccessKey.


        :param access_key_id: The access_key_id of this AwsAccessKeyAccessKey.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def create_date(self):
        """Gets the create_date of this AwsAccessKeyAccessKey.  # noqa: E501


        :return: The create_date of this AwsAccessKeyAccessKey.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this AwsAccessKeyAccessKey.


        :param create_date: The create_date of this AwsAccessKeyAccessKey.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this AwsAccessKeyAccessKey.  # noqa: E501


        :return: The secret_access_key of this AwsAccessKeyAccessKey.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this AwsAccessKeyAccessKey.


        :param secret_access_key: The secret_access_key of this AwsAccessKeyAccessKey.  # noqa: E501
        :type: str
        """

        self._secret_access_key = secret_access_key

    @property
    def status(self):
        """Gets the status of this AwsAccessKeyAccessKey.  # noqa: E501


        :return: The status of this AwsAccessKeyAccessKey.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AwsAccessKeyAccessKey.


        :param status: The status of this AwsAccessKeyAccessKey.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def user_name(self):
        """Gets the user_name of this AwsAccessKeyAccessKey.  # noqa: E501


        :return: The user_name of this AwsAccessKeyAccessKey.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AwsAccessKeyAccessKey.


        :param user_name: The user_name of this AwsAccessKeyAccessKey.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AwsAccessKeyAccessKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsAccessKeyAccessKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
