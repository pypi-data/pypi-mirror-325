[tool.poetry]
name = "peak-finder-app"
version = "0.2.0"
license = "MIT"
description = "Peak Finder App"
authors = ["Mira Geoscience <support@mirageoscience.com>"]
maintainers = ["Dominique Fournier <dominiquef@mirageoscience.com>"]
repository = "https://github.com/MiraGeoscience/peak-finder-app"
documentation = "https://mirageoscience-peak-finder-app.readthedocs-hosted.com/"
homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"

readme = "README.rst"
packages = [
     { include = "peak_finder" },
     { include = "peak_finder-assets" },
]

include = [
    { path = "COPYING" },
    { path = "COPYING.LESSER" },
    { path = "LICENSE" },
    { path = "README.rst" },
    { path = "docs/**/THIRD_PARTY_SOFTWARE.rst" },
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Natural Language :: English",
]

[tool.poetry.dependencies]
python = "^3.10, <3.11"  # limited to 3.10 because of PySide2

dash = {version="^2.12", optional = true}  # also in geoapps-utils[dash]
dash-daq = {version="0.5.*", optional = true}
dask = {version = "2024.6.*", extras = ["distributed"]}
distributed = "2024.6.*"  # because conda-lock doesn't take dask extras into account
flask = {version="^3.0.3", optional = true}  # also in geoapps-utils[dash]
numpy = "~1.26.0"  # also in geoapps-utils, geoh5py
plotly = "~5.19.0"
pyqtwebengine = {version = "~5.15.2, <5.15.7", optional = true}  # also in geoapps-utils[dash]
pyside2 = {version = ">=5.15.2.1, <5.15.7", optional = true}  # also in geoapps-utils[dash]
scipy = "~1.14.0"
tqdm = "^4.66.1"

## Pip dependencies from Git repositories
#----------------------------------------
geoh5py = {version = ">=0.10.0-rc.1, <0.11.0a.dev", source = "pypi", allow-prereleases = true}  # also in geoapps-utils
#geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", rev = "release/0.10.0"}

geoapps-utils = {version = ">=0.4.0-rc.1, <0.5.0a.dev", source = "pypi", allow-prereleases = true}
#geoapps-utils = {git = "https://github.com/MiraGeoscience/geoapps-utils.git", rev = "release/0.4.0"}

curve-apps = {version = ">=0.2.0-rc.1, <0.3.0a.dev", source = "pypi", allow-prereleases = true}
#curve-apps = {git = "https://github.com/MiraGeoscience/curve-apps.git", rev = "release/0.2.0"}

## force some versions to resolve incompatible resolution between PyPI and Conda
#-------------------------------------------------------------------------------
# these two *-qt5 dependencies are not relevant for Conda and will be discarded,
# but conda-lock still look for them in PyPI during its dependency resolution
pyqt5-qt5 = {version="5.15.2", source = "pypi", optional=true}  # to avoid conda-lock resolving to a dependency version not available on PyPI
pyqtwebengine-qt5 = {version="5.15.2", source = "pypi", optional=true}  # to avoid conda-lock resolving to a dependency version not available on PyPI

## about pip dependencies
# to be specified to work with conda-lock
# - from PyPI: my_package = { version = "1.2.3", source = "pypi" }
# - from URL: !!! no actual lock, as tag or branch can move and installation will fetch current !!!
#   - for a tag:    my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/tags/TAG.tar.gz" }
#   - for a branch: my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/heads/BRANCH.tar.gz" }
# - to actually lock on a revision: my_package = { git = "https://github.com/ORGANISATION/REPO.git", rev = "GIT_REV" }
#   (where rev value is a tag, a branch name or a commit hash). Can also use ``branch`` or ``tag`` instead of ``rev``

[[tool.poetry.source]]
name = "public"
url = "https://mirageoscienceltd.jfrog.io/artifactory/api/pypi/public-pypi-dev/simple"
priority = "supplemental"


[[tool.poetry.source]]
name = "test"
url = "https://mirageoscienceltd.jfrog.io/artifactory/api/pypi/test-pypi/simple"
priority = "supplemental"

[tool.conda-lock.dependencies]
pyside2 = {version = "5.15.*", optional = true}  # allow Conda to resolve to a higher existing version than in PyPI

## indirect dependencies, forcing them here for installation through Conda not pip
#---------------------------------------------------------------------------------
h5py = ">=3.2.1, <4.0.0"  # from geoh5py
Pillow = ">=10.3.0, <10.4.0"  # from geoh5py
pydantic = ">=2.5.2, <3.0.0"  # from geoh5py, curve-apps, geoapps-utils
scikit-image = ">=0.24.0, <0.25.0"  # from curve-apps, also used by geo-unsup-mapper

[tool.poetry.group.dev.dependencies]
Pygments = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
pyyaml = '*'
jinja2 = '*'
packaging = '*'
readthedocs-sphinx-ext = "*"
sphinx = "^5.0"
tomli = "*" # for tests only

[tool.poetry.extras]
dash = [
    "dash",
    "dash-daq",
    "flask",
    "pyqt5-qt5",
    "pyqtwebengine",
    "pyqtwebengine-qt5",
    "pyside2",
]

[tool.conda-lock]
platforms = ['win-64', 'linux-64']
channels = ['conda-forge']

[tool.isort]
profile = "black"

[tool.black]
# defaults are just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
#    "numpy.typing.mypy_plugin"
]

[tool.pytest.ini_options]
#addopts =

[tool.coverage.run]
branch = true
source = ["peak_finder"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

fail_under = 75

[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
