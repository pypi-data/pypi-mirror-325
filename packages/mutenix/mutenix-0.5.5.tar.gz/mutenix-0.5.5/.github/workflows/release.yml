name: Release
on:
  push:
    tags:
      - '*'


jobs:
  build-package:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
    - uses: actions/checkout@v4

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"

    - name: Install dependencies
      run: |
        uv venv
        uv sync

    - name: build the package
      run: |
        uv build
    - name: Upload distributions
      uses: actions/upload-artifact@v4
      with:
        name: release-dists
        path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - build-package
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/


  build-binary:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
    - name: Install dependencies
      run: |
        uv venv
        uv sync

    - name: build release
      if: runner.os != 'Windows'
      run: |
        cp README.md src/mutenix/
        cp LICENSE src/mutenix/
        OS_NAME=$(echo ${{ matrix.os }} | sed -e 's/ubuntu-latest/x86_64-linux/' -e 's/macos-13/x86_64-darwin/' -e 's/macos-latest/aarch64-darwin/')
        uv run pyinstaller --noconfirm Mutenix.spec -- --os-suffix $OS_NAME

    - name: build release (windows)
      if: runner.os == 'Windows'
      run: |
        Remove-Item -Path src\mutenix\README.md -Force -ErrorAction Ignore
        Remove-Item -Path src\mutenix\LICENSE -Force -ErrorAction Ignore
        Copy-Item -Path README.md -Destination src\mutenix\ -Force
        Copy-Item -Path License -Destination src\mutenix\ -Force
        uv run pyinstaller --noconfirm Mutenix.spec -- --os-suffix win64

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
