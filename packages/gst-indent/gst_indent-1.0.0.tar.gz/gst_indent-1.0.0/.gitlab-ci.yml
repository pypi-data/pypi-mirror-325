include:
  - project: 'freedesktop/ci-templates'
    ref: '6a40df92957c8ce9ee741aaccc5daaaf70545b1e'
    file: '/templates/fedora.yml'
  - project: 'gstreamer/gstreamer'
    ref: 'main'
    file: '.gitlab-image-tags.yml'

variables:
  FDO_UPSTREAM_REPO: 'tpm/gst-indent'
  FDO_DISTRIBUTION_VERSION: '40'
  FDO_DISTRIBUTION_TAG: '2025-02-04.0'

  DEFAULT_MESON_ARGS: >
    --werror

workflow:
  # https://docs.gitlab.com/ee/ci/yaml/index.html#switch-between-branch-pipelines-and-merge-request-pipelines
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        GIT_FETCH_EXTRA_FLAGS: '--no-tags'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        GIT_FETCH_EXTRA_FLAGS: '--no-tags'
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH'
      variables:
        GIT_FETCH_EXTRA_FLAGS: '--no-tags'

stages:
  - prep
  - build
  - build wheel
  - build sdist

# Global CI policy: This can be used to configure global behaviour our our jobs
default:
  retry:
    max: 2
    when:
      - 'runner_system_failure'
      - 'stuck_or_timeout_failure'
      - 'scheduler_failure'
      - 'api_failure'
  interruptible: true

fedora image:
  extends:
   - '.fdo.container-build@fedora'
  stage: 'prep'
  variables:
    FDO_DISTRIBUTION_PACKAGES: >
      meson
      ninja-build
      gcc
      gperf
      python3-pip

fedora gperf:
  extends:
    - '.fdo.distribution-image@fedora'
  stage: 'build'
  variables:
    MESON_ARGS: >
      ${DEFAULT_MESON_ARGS}
      -Dgperf=enabled
  script:
    - meson builddir ${MESON_ARGS}
    - ninja -C builddir
    # - ninja -C builddir test
    # - ninja -C builddir install
  artifacts:
    expire_in: "7 days"
    when: "always"
    paths:
      - 'builddir/meson-logs/'

fedora no gperf:
  extends:
    - '.fdo.distribution-image@fedora'
  stage: 'build'
  variables:
    MESON_ARGS: >
      ${DEFAULT_MESON_ARGS}
      -Dgperf=disabled
  script:
    - meson builddir ${MESON_ARGS}
    - ninja -C builddir
    # - ninja -C builddir test
    # - ninja -C builddir install
  artifacts:
    expire_in: "7 days"
    when: "always"
    paths:
      - 'builddir/meson-logs/'

# Based on https://gitlab.freedesktop.org/gstreamer/gst-ci/-/blob/master/gitlab/ci_template.yml
.build windows:
  image: 'registry.freedesktop.org/gstreamer/gstreamer/amd64/windows:${WINDOWS_TAG}-main'
  stage: 'build'
  tags:
    - 'docker'
    - 'windows'
    - '2022'
  timeout: '30min'
  variables:
    MESON_ARGS: >
      ${DEFAULT_MESON_ARGS}
  before_script:
    # Make sure meson is up to date, so we don't need to rebuild the image with each release
    - pip3 install -U meson
  script:
    # Make sure powershell exists on errors
    # https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-6
    - $ErrorActionPreference = "Stop"

    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    - $env:MESON_ARGS = $env:MESON_ARGS.replace("`n"," ")

    # Gitlab executes PowerShell in docker, but VsDevCmd.bat is a batch script.
    # Environment variables substitutions is done by PowerShell before calling
    # cmd.exe, that's why we use $env:FOO instead of %FOO%
    - cmd.exe /C "C:\BuildTools\Common7\Tools\VsDevCmd.bat -host_arch=amd64 -arch=$env:ARCH &&
        meson build $env:MESON_ARGS &&
        ninja -C build"

vs2019 amd64:
  extends: '.build windows'
  variables:
    ARCH: 'amd64'

vs2019 x86:
  extends: '.build windows'
  variables:
    ARCH: 'x86'

macOS:
  stage: 'build'
  tags:
    - gst-macos-12.3
  artifacts:
    when: 'always'
    expire_in: "7 days"
    paths:
      - build/meson-logs/*.txt
  before_script:
    # Update pip
    - pip3 install --upgrade pip
    # Make sure meson is up to date
    - pip3 install -U meson ninja
    # Need to install certificates for Python
    - pip3 install --upgrade certifi
    # Anther way to install certificates
    - open /Applications/Python\ 3.8/Install\ Certificates.command
  script:
    - CERT_PATH=$(python3 -m certifi) && export SSL_CERT_FILE=${CERT_PATH} && export REQUESTS_CA_BUNDLE=${CERT_PATH}
    # pixman region-test fails to link on macOS
    - meson setup build
    - meson compile --verbose -C build

wheel windows:
  image: 'registry.freedesktop.org/gstreamer/gstreamer/amd64/windows:${WINDOWS_TAG}-main'
  stage: 'build wheel'
  tags:
    - 'docker'
    - 'windows'
    - '2022'
  timeout: '30min'
  before_script:
    - choco install python -y --version 3.12.4
    - choco install git.install -y
    - py -m pip install cibuildwheel==2.22.0
  script:
    - py -m cibuildwheel --output-dir wheelhouse --platform windows
  artifacts:
    paths:
      - wheelhouse/

wheel macos:
  stage: 'build wheel'
  tags:
    - gst-macos-12.3
  artifacts:
    when: 'always'
    expire_in: "7 days"
    paths:
      - build/meson-logs/*.txt
  before_script:
    - python3 -m pip install cibuildwheel==2.22.0
  script:
    - python3 -m cibuildwheel --output-dir wheelhouse
  artifacts:
    paths:
      - wheelhouse/

wheel linux:
  stage: 'build wheel'
  image: python:3.12
  # make a docker daemon available for cibuildwheel to use
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    FF_NETWORK_PER_BUILD: 1
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
  script:
    - curl -sSL https://get.docker.com/ | sh
    - python -m pip install cibuildwheel==2.22.0
    - cibuildwheel --output-dir wheelhouse
  artifacts:
    paths:
      - wheelhouse/

sdist:
  stage: 'build sdist'
  image: python:3.12
  script:
    - python -m pip install pipx
    - pipx run build --sdist
  artifacts:
    paths:
      - dist/*.tar.gz