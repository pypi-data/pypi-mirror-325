from abc import ABC, abstractmethod

from pyftg.models.frame_data import FrameData
from pyftg.models.game_data import GameData
from pyftg.models.round_result import RoundResult


class SoundGenAIInterface(ABC):
    """
    Abstract class for sound generative AI interface.
    """

    @abstractmethod
    def initialize(self, game_data: GameData) -> None:
        """
        Initialize AI.

        Args:
            game_data (GameData): Game data.
        """
        pass

    @abstractmethod
    def get_information(self, frame_data: FrameData) -> None:
        """
        Get information.

        Args:
            frame_data (FrameData): Frame data.
        """
        pass

    @abstractmethod
    def processing(self) -> None:
        """
        Processing.
        """
        pass

    @abstractmethod
    def round_end(self, round_result: RoundResult) -> None:
        """
        Round end.

        Args:
            round_result (RoundResult): Round result.
        """
        pass

    @abstractmethod
    def game_end(self) -> None:
        """
        Game end.
        """
        pass

    @abstractmethod
    def audio_sample(self) -> bytes:
        """
        Return the audio sample generated by the AI.

        Returns:
            bytes: The audio sample in wave format.
        """
        pass

    @abstractmethod
    def close(self) -> None:
        """
        Close AI.
        """
        pass
