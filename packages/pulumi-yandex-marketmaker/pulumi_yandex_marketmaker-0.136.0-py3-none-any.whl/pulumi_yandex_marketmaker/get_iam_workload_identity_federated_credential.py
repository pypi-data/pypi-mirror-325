# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIamWorkloadIdentityFederatedCredentialResult',
    'AwaitableGetIamWorkloadIdentityFederatedCredentialResult',
    'get_iam_workload_identity_federated_credential',
    'get_iam_workload_identity_federated_credential_output',
]

@pulumi.output_type
class GetIamWorkloadIdentityFederatedCredentialResult:
    """
    A collection of values returned by getIamWorkloadIdentityFederatedCredential.
    """
    def __init__(__self__, created_at=None, external_subject_id=None, federated_credential_id=None, federation_id=None, id=None, service_account_id=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if external_subject_id and not isinstance(external_subject_id, str):
            raise TypeError("Expected argument 'external_subject_id' to be a str")
        pulumi.set(__self__, "external_subject_id", external_subject_id)
        if federated_credential_id and not isinstance(federated_credential_id, str):
            raise TypeError("Expected argument 'federated_credential_id' to be a str")
        pulumi.set(__self__, "federated_credential_id", federated_credential_id)
        if federation_id and not isinstance(federation_id, str):
            raise TypeError("Expected argument 'federation_id' to be a str")
        pulumi.set(__self__, "federation_id", federation_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if service_account_id and not isinstance(service_account_id, str):
            raise TypeError("Expected argument 'service_account_id' to be a str")
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="externalSubjectId")
    def external_subject_id(self) -> str:
        return pulumi.get(self, "external_subject_id")

    @property
    @pulumi.getter(name="federatedCredentialId")
    def federated_credential_id(self) -> str:
        return pulumi.get(self, "federated_credential_id")

    @property
    @pulumi.getter(name="federationId")
    def federation_id(self) -> str:
        return pulumi.get(self, "federation_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")


class AwaitableGetIamWorkloadIdentityFederatedCredentialResult(GetIamWorkloadIdentityFederatedCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamWorkloadIdentityFederatedCredentialResult(
            created_at=self.created_at,
            external_subject_id=self.external_subject_id,
            federated_credential_id=self.federated_credential_id,
            federation_id=self.federation_id,
            id=self.id,
            service_account_id=self.service_account_id)


def get_iam_workload_identity_federated_credential(federated_credential_id: Optional[str] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamWorkloadIdentityFederatedCredentialResult:
    """
    {{ .Description }}

    ## Example Usage

    {{ tffile "examples/iam_workload_identity_federated_credential/d_iam_workload_identity_federated_credential_1.tf" }}
    """
    __args__ = dict()
    __args__['federatedCredentialId'] = federated_credential_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getIamWorkloadIdentityFederatedCredential:getIamWorkloadIdentityFederatedCredential', __args__, opts=opts, typ=GetIamWorkloadIdentityFederatedCredentialResult).value

    return AwaitableGetIamWorkloadIdentityFederatedCredentialResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        external_subject_id=pulumi.get(__ret__, 'external_subject_id'),
        federated_credential_id=pulumi.get(__ret__, 'federated_credential_id'),
        federation_id=pulumi.get(__ret__, 'federation_id'),
        id=pulumi.get(__ret__, 'id'),
        service_account_id=pulumi.get(__ret__, 'service_account_id'))
def get_iam_workload_identity_federated_credential_output(federated_credential_id: Optional[pulumi.Input[str]] = None,
                                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamWorkloadIdentityFederatedCredentialResult]:
    """
    {{ .Description }}

    ## Example Usage

    {{ tffile "examples/iam_workload_identity_federated_credential/d_iam_workload_identity_federated_credential_1.tf" }}
    """
    __args__ = dict()
    __args__['federatedCredentialId'] = federated_credential_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('yandex:index/getIamWorkloadIdentityFederatedCredential:getIamWorkloadIdentityFederatedCredential', __args__, opts=opts, typ=GetIamWorkloadIdentityFederatedCredentialResult)
    return __ret__.apply(lambda __response__: GetIamWorkloadIdentityFederatedCredentialResult(
        created_at=pulumi.get(__response__, 'created_at'),
        external_subject_id=pulumi.get(__response__, 'external_subject_id'),
        federated_credential_id=pulumi.get(__response__, 'federated_credential_id'),
        federation_id=pulumi.get(__response__, 'federation_id'),
        id=pulumi.get(__response__, 'id'),
        service_account_id=pulumi.get(__response__, 'service_account_id')))
