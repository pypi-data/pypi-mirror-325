# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetClientConfigResult',
    'AwaitableGetClientConfigResult',
    'get_client_config',
    'get_client_config_output',
]

@pulumi.output_type
class GetClientConfigResult:
    """
    A collection of values returned by getClientConfig.
    """
    def __init__(__self__, cloud_id=None, folder_id=None, iam_token=None, id=None, zone=None):
        if cloud_id and not isinstance(cloud_id, str):
            raise TypeError("Expected argument 'cloud_id' to be a str")
        pulumi.set(__self__, "cloud_id", cloud_id)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if iam_token and not isinstance(iam_token, str):
            raise TypeError("Expected argument 'iam_token' to be a str")
        pulumi.set(__self__, "iam_token", iam_token)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> str:
        """
        The ID of the cloud that the provider is connecting to.
        """
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        """
        The ID of the folder in which we operate.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="iamToken")
    def iam_token(self) -> str:
        """
        A short-lived token that can be used for authentication in a Kubernetes cluster.
        """
        return pulumi.get(self, "iam_token")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The default availability zone.
        """
        return pulumi.get(self, "zone")


class AwaitableGetClientConfigResult(GetClientConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClientConfigResult(
            cloud_id=self.cloud_id,
            folder_id=self.folder_id,
            iam_token=self.iam_token,
            id=self.id,
            zone=self.zone)


def get_client_config(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClientConfigResult:
    """
    Get attributes used by provider to configure client connection.

    ## Example Usage

    {{ tffile "examples/client_config/d_client_config_1.tf" }}
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getClientConfig:getClientConfig', __args__, opts=opts, typ=GetClientConfigResult).value

    return AwaitableGetClientConfigResult(
        cloud_id=pulumi.get(__ret__, 'cloud_id'),
        folder_id=pulumi.get(__ret__, 'folder_id'),
        iam_token=pulumi.get(__ret__, 'iam_token'),
        id=pulumi.get(__ret__, 'id'),
        zone=pulumi.get(__ret__, 'zone'))
def get_client_config_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClientConfigResult]:
    """
    Get attributes used by provider to configure client connection.

    ## Example Usage

    {{ tffile "examples/client_config/d_client_config_1.tf" }}
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('yandex:index/getClientConfig:getClientConfig', __args__, opts=opts, typ=GetClientConfigResult)
    return __ret__.apply(lambda __response__: GetClientConfigResult(
        cloud_id=pulumi.get(__response__, 'cloud_id'),
        folder_id=pulumi.get(__response__, 'folder_id'),
        iam_token=pulumi.get(__response__, 'iam_token'),
        id=pulumi.get(__response__, 'id'),
        zone=pulumi.get(__response__, 'zone')))
