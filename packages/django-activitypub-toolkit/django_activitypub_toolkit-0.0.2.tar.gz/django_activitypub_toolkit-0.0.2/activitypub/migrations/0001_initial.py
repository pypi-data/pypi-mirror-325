# Generated by Django 4.2.19 on 2025-02-07 02:09

import activitypub.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_ulid.models
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CoreType",
            fields=[
                (
                    "id",
                    django_ulid.models.ULIDField(
                        default=activitypub.models.generate_ulid, primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CryptographicKeyPair",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("private_pem", models.TextField(blank=True, null=True)),
                ("public_pem", models.TextField()),
                ("revoked", models.BooleanField(default=False)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Domain",
            fields=[
                (
                    "name",
                    models.CharField(
                        max_length=250,
                        primary_key=True,
                        serialize=False,
                        validators=[activitypub.models._domain_validator],
                    ),
                ),
                ("nodeinfo", models.JSONField(blank=True, null=True)),
                (
                    "software_family",
                    models.CharField(
                        choices=[
                            ("Mastodon", "Mastodon"),
                            ("Fedibird", "Fedibird"),
                            ("Hometown", "Hometown"),
                            ("BirdsiteLive", "Birdsitelive"),
                            ("Takahe", "Takahe"),
                            ("Pleroma", "Pleroma"),
                            ("Akkoma", "Akkoma"),
                            ("Bonfire", "Bonfire"),
                            ("Mitra", "Mitra"),
                            ("Misskey", "Misskey"),
                            ("CalcKey", "Calckey"),
                            ("Firefish", "Firefish"),
                            ("Gotosocial", "Gotosocial"),
                            ("Funkwhale", "Funkwhale"),
                            ("Pixelfed", "Pixelfed"),
                            ("Peertube", "Peertube"),
                            ("Lemmy", "Lemmy"),
                            ("Kbin", "Kbin"),
                            ("Write Freely", "Write Freely"),
                            ("Plume", "Plume"),
                            ("Bookwyrm", "Bookwyrm"),
                            ("Wordpress", "Wordpress"),
                            ("Microdotblog", "Microdotblog"),
                            ("Mobilizon", "Mobilizon"),
                            ("Gancio", "Gancio"),
                            ("Socialhome", "Socialhome"),
                            ("Diaspora", "Diaspora"),
                            ("Hubzilla", "Hubzilla"),
                            ("Friendica", "Friendica"),
                            ("GNU Social", "Gnu Social"),
                            ("Forgejo", "Forgejo"),
                            ("Activity Relay", "Activity Relay"),
                            ("Other", "Other"),
                        ],
                        default="Other",
                        max_length=50,
                    ),
                ),
                ("software", models.CharField(db_index=True, max_length=60, null=True)),
                ("version", models.CharField(blank=True, max_length=60, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("local", models.BooleanField()),
                ("blocked", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="HttpMessageSignature",
            fields=[
                (
                    "id",
                    django_ulid.models.ULIDField(
                        default=activitypub.models.generate_ulid, primary_key=True, serialize=False
                    ),
                ),
                (
                    "algorithm",
                    models.CharField(
                        choices=[("rsa-sha256", "Rsa Sha56"), ("hs2019", "Hidden")], max_length=20
                    ),
                ),
                ("signature", models.BinaryField()),
                ("message", models.TextField()),
                ("key_id", models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    django_ulid.models.ULIDField(
                        default=activitypub.models.generate_ulid, primary_key=True, serialize=False
                    ),
                ),
                ("document", models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name="MessageIntegrityProof",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proofs",
                        to="activitypub.message",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Reference",
            fields=[
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[
                            ("unknown", "unknown"),
                            ("resolved", "resolved"),
                            ("failed", "failed"),
                        ],
                        default="unknown",
                        max_length=100,
                        no_check_for_status=True,
                        verbose_name="status",
                    ),
                ),
                (
                    "status_changed",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now,
                        monitor="status",
                        verbose_name="status changed",
                    ),
                ),
                ("uri", models.CharField(max_length=500, primary_key=True, serialize=False)),
                (
                    "resolved_at",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now, monitor="status", when={"resolved"}
                    ),
                ),
                (
                    "failed_at",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now, monitor="status", when={"failed"}
                    ),
                ),
                (
                    "domain",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="references",
                        to="activitypub.domain",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BaseActivityStreamsObject",
            fields=[
                (
                    "coretype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="activitypub.coretype",
                    ),
                ),
                ("published", models.DateTimeField(blank=True, null=True)),
                ("updated", models.DateTimeField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("source", models.TextField(blank=True, null=True)),
                ("content", models.TextField(blank=True, null=True)),
                ("media_type", models.CharField(blank=True, max_length=64, null=True)),
                ("summary", models.TextField(blank=True, null=True)),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("duration", models.DurationField(blank=True, null=True)),
                (
                    "attachments",
                    models.ManyToManyField(related_name="attachments", to="activitypub.coretype"),
                ),
                (
                    "attributed_to",
                    models.ManyToManyField(
                        related_name="attributed_to", to="activitypub.coretype"
                    ),
                ),
                (
                    "audience",
                    models.ManyToManyField(related_name="audience", to="activitypub.coretype"),
                ),
                ("bcc", models.ManyToManyField(related_name="bcc", to="activitypub.coretype")),
                ("bto", models.ManyToManyField(related_name="bto", to="activitypub.coretype")),
                ("cc", models.ManyToManyField(related_name="cc", to="activitypub.coretype")),
                (
                    "context",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="items_in_context",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "generator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generators_of",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "icon",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="icons_of",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generic_images_of",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "in_reply_to",
                    models.ManyToManyField(related_name="in_reply_to", to="activitypub.coretype"),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generic_locations_of",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "preview",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generic_previews_of",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "reference",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="item",
                        to="activitypub.reference",
                    ),
                ),
                ("tags", models.ManyToManyField(related_name="tags", to="activitypub.coretype")),
                ("to", models.ManyToManyField(related_name="to", to="activitypub.coretype")),
            ],
            options={
                "abstract": False,
            },
            bases=("activitypub.coretype",),
        ),
        migrations.CreateModel(
            name="DocumentSignatureProof",
            fields=[
                (
                    "messageintegrityproof_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="activitypub.messageintegrityproof",
                    ),
                ),
            ],
            bases=("activitypub.messageintegrityproof",),
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                (
                    "core_type",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("https://www.w3.org/ns/activitystreams#Link", "Link"),
                            ("https://www.w3.org/ns/activitystreams#Mention", "Mention"),
                        ],
                        default="https://www.w3.org/ns/activitystreams#Link",
                        max_length=48,
                    ),
                ),
                ("href", models.URLField()),
                ("media_type", models.CharField(blank=True, max_length=48, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("language", models.CharField(blank=True, max_length=5, null=True)),
                ("height", models.PositiveIntegerField(null=True)),
                ("width", models.PositiveIntegerField(null=True)),
                (
                    "preview",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="link_previews",
                        to="activitypub.reference",
                    ),
                ),
                (
                    "reference",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="links",
                        to="activitypub.reference",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("activitypub.coretype",),
        ),
        migrations.CreateModel(
            name="MessageProcessResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "result",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Ok"),
                            (2, "Unauthorized"),
                            (3, "Target is not a valid box"),
                            (4, "Error when posting message to inbox"),
                            (5, "Message dropped"),
                        ],
                        db_index=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="activitypub.message",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MessageIntegrityVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "proof",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verifications",
                        to="activitypub.messageintegrityproof",
                    ),
                ),
                (
                    "signing_key",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="signed_integrity_proofs",
                        to="activitypub.cryptographickeypair",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="message",
            name="activity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="messages",
                to="activitypub.reference",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="recipient",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="messages_targeted",
                to="activitypub.reference",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="sender",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="messages_sent",
                to="activitypub.reference",
            ),
        ),
        migrations.AddField(
            model_name="cryptographickeypair",
            name="actor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="keypairs",
                to="activitypub.reference",
            ),
        ),
        migrations.AddField(
            model_name="cryptographickeypair",
            name="reference",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="activitypub.reference"
            ),
        ),
        migrations.CreateModel(
            name="Actor",
            fields=[
                (
                    "base_object",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="as_actor",
                        serialize=False,
                        to="activitypub.baseactivitystreamsobject",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("https://www.w3.org/ns/activitystreams#Person", "Person"),
                            ("https://www.w3.org/ns/activitystreams#Group", "Group"),
                            ("https://www.w3.org/ns/activitystreams#Service", "Service"),
                            ("https://www.w3.org/ns/activitystreams#Organization", "Organization"),
                            ("https://www.w3.org/ns/activitystreams#Application", "Application"),
                        ],
                        max_length=64,
                    ),
                ),
                ("preferred_username", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("activitypub.baseactivitystreamsobject",),
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "ordering_method",
                    models.CharField(
                        choices=[
                            ("Not Ordered", "None"),
                            ("Creation Time", "Create Time"),
                            ("Order Key", "Key"),
                        ],
                        default="Not Ordered",
                        max_length=16,
                    ),
                ),
                (
                    "base_object",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="as_collection",
                        serialize=False,
                        to="activitypub.baseactivitystreamsobject",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("activitypub.baseactivitystreamsobject",),
        ),
        migrations.CreateModel(
            name="Object",
            fields=[
                (
                    "base_object",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="as_object",
                        serialize=False,
                        to="activitypub.baseactivitystreamsobject",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("https://www.w3.org/ns/activitystreams#Article", "Article"),
                            ("https://www.w3.org/ns/activitystreams#Audio", "Audio"),
                            ("https://www.w3.org/ns/activitystreams#Document", "Document"),
                            ("https://www.w3.org/ns/activitystreams#Event", "Event"),
                            ("https://www.w3.org/ns/activitystreams#Image", "Image"),
                            ("https://www.w3.org/ns/activitystreams#Question", "Question"),
                            ("https://www.w3.org/ns/activitystreams#Note", "Note"),
                            ("https://www.w3.org/ns/activitystreams#Page", "Page"),
                            ("https://www.w3.org/ns/activitystreams#Place", "Place"),
                            ("https://www.w3.org/ns/activitystreams#Profile", "Profile"),
                            ("https://www.w3.org/ns/activitystreams#Relationship", "Relationship"),
                            ("https://www.w3.org/ns/activitystreams#Tombstone", "Tombstone"),
                            ("https://www.w3.org/ns/activitystreams#Video", "Video"),
                            ("https://www.w3.org/ns/activitystreams#Hashtag", "Hashtag"),
                        ],
                        max_length=128,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("activitypub.baseactivitystreamsobject",),
        ),
        migrations.CreateModel(
            name="QuestionExtraData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("closed", models.DateTimeField(blank=True, null=True)),
                (
                    "any_of",
                    models.ManyToManyField(
                        related_name="multiple_choice_alternatives", to="activitypub.coretype"
                    ),
                ),
                (
                    "one_of",
                    models.ManyToManyField(related_name="alternatives", to="activitypub.coretype"),
                ),
                (
                    "question",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_properties",
                        to="activitypub.baseactivitystreamsobject",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LinkRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("alternate", "Designates a substitute for the link's context"),
                            ("appendix", "Refers to an appendix."),
                            ("bookmark", "Refers to a bookmark or entry point."),
                            ("chapter", "Refers to a chapter in a collection of resources."),
                            ("contents", "Refers to a table of contents."),
                            ("copyright", "Copyright statement that applies to the link"),
                            ("current", "the most recent item(s) in a collection of resources"),
                            ("describedby", "information about the link's context."),
                            ("edit", "used to edit the link's context"),
                            ("edit-media", "can be used to edit media associated with the link"),
                            (
                                "enclosure",
                                "Identifies a related resource that is potentially large",
                            ),
                            ("first", "furthest preceding resource in a series of resources"),
                            ("glossary", "Refers to a glossary of terms."),
                            ("help", "Refers to a resource offering help"),
                            (
                                "hub",
                                "Refers to a hub that enables registration for notification of updates",
                            ),
                            ("index", "Refers to an index"),
                            ("last", "furthest following resource in a series"),
                            ("latest-version", "latest version of the context"),
                            ("license", "Refers to a license associated with the link's context."),
                            (
                                "next",
                                "Refers to the next resource in a ordered series of resources.",
                            ),
                            (
                                "next-archive",
                                "Refers to the immediately following archive resource.",
                            ),
                            ("payment", "indicates a resource where payment is accepted."),
                            ("prev", "Synonym for 'previous'"),
                            ("predecessor-version", "predecessor version in the version history"),
                            ("previous", "Previous resource in an ordered series of resources"),
                            (
                                "prev-archive",
                                "Refers to the immediately preceding archive resource",
                            ),
                            ("related", "Identifies a related resource"),
                            (
                                "replies",
                                "Identifies a resource that is a reply to the context of the link",
                            ),
                            ("section", "Refers to a section in a collection of resources"),
                            ("self", "Conveys an identifier for the link's context"),
                            (
                                "service",
                                "Indicates a URI that can be used to retrieve a service document",
                            ),
                            ("start", "Refers to the first resource in a collection of resources"),
                            ("stylesheet", "Refers to an external style sheet"),
                            ("subsection", "subsection in a collection of resources"),
                            ("successor-version", "successor version in the version history"),
                            ("up", "Refers to a parent document in a hierarchy of documents"),
                            ("version-history", "version history for the context"),
                            ("via", "source of the information in the link's context"),
                            ("working-copy", "Points to a working copy for this resource"),
                            (
                                "working-copy-of",
                                "versioned resource originating this working copy",
                            ),
                        ],
                        default="alternate",
                        max_length=50,
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related",
                        to="activitypub.link",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LinkedFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("file", models.FileField(upload_to=activitypub.models._file_location)),
                (
                    "link",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="activitypub.link"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HttpSignatureProof",
            fields=[
                (
                    "messageintegrityproof_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="activitypub.messageintegrityproof",
                    ),
                ),
                (
                    "http_message_signature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proofs",
                        to="activitypub.httpmessagesignature",
                    ),
                ),
            ],
            bases=("activitypub.messageintegrityproof",),
        ),
        migrations.AddField(
            model_name="baseactivitystreamsobject",
            name="url",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="links",
                to="activitypub.link",
            ),
        ),
        migrations.CreateModel(
            name="RelationshipProperties",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            (
                                "http://purl.org/vocab/relationship#acquaintanceOf",
                                "subject is familiar with object, not friendship",
                            ),
                            (
                                "http://purl.org/vocab/relationship#ambivalentOf",
                                "subject has mixed feelings or emotions for object",
                            ),
                            (
                                "http://purl.org/vocab/relationship#ancestorOf",
                                "subject is a descendant of object",
                            ),
                            (
                                "http://purl.org/vocab/relationship#antagonistOf",
                                "subject opposes or contends object",
                            ),
                            (
                                "http://purl.org/vocab/relationship#apprenticeTo",
                                "object is a counselor for subject",
                            ),
                            (
                                "http://purl.org/vocab/relationship#childOf",
                                "subject was given birth to or nurtured and raised by object",
                            ),
                            (
                                "http://purl.org/vocab/relationship#closeFriendOf",
                                "subject and object share a close mutual friendship",
                            ),
                            (
                                "http://purl.org/vocab/relationship#collaboratesWith",
                                "subject and object work towards a common goal",
                            ),
                            (
                                "http://purl.org/vocab/relationship#colleagueOf",
                                "subject and object are members of the same profession",
                            ),
                            (
                                "http://purl.org/vocab/relationship#descendantOf",
                                "A person from whom this person is descended",
                            ),
                            (
                                "http://purl.org/vocab/relationship#employedBy",
                                "A person for whom this person's services have been engaged",
                            ),
                            (
                                "http://purl.org/vocab/relationship#employerOf",
                                "A person who engages the services of this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#enemyOf",
                                "A person towards whom this person feels hatred, or opposes the interests of",
                            ),
                            (
                                "http://purl.org/vocab/relationship#engagedTo",
                                "A person to whom this person is betrothed",
                            ),
                            (
                                "http://purl.org/vocab/relationship#friendOf",
                                "A person who shares mutual friendship with this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#grandchildOf",
                                "A person who is a child of any of this person's children",
                            ),
                            (
                                "http://purl.org/vocab/relationship#grandparentOf",
                                "A person who is the parent of any of this person's parents",
                            ),
                            (
                                "http://purl.org/vocab/relationship#hasMet",
                                "A person who has met this person whether in passing or longer",
                            ),
                            (
                                "http://purl.org/vocab/relationship#influencedBy",
                                "a person who has influenced this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#knowsByReputation",
                                "subject knows object for a particular action, position or field of endeavour",
                            ),
                            (
                                "http://purl.org/vocab/relationship#knowsInPassing",
                                "A person whom this person has slight or superficial knowledge of",
                            ),
                            (
                                "http://purl.org/vocab/relationship#knowsOf",
                                "A person who has come to be known to this person through their actions or position",
                            ),
                            (
                                "http://purl.org/vocab/relationship#lifePartnerOf",
                                "A person who has made a long-term commitment to this person's",
                            ),
                            (
                                "http://purl.org/vocab/relationship#livesWith",
                                "A person who shares a residence with this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#lostContactWith",
                                "A person who was once known by this person but has subsequently become uncontactable",
                            ),
                            (
                                "http://purl.org/vocab/relationship#mentorOf",
                                "A person who serves as a trusted counselor or teacher to this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#neighborOf",
                                "A person who lives in the same locality as this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#parentOf",
                                "A person who has given birth to or nurtured and raised this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#participant",
                                "A person who has participates in the relationship",
                            ),
                            (
                                "http://purl.org/vocab/relationship#participantIn",
                                "A person who is a participant in the relationship",
                            ),
                            (
                                "http://purl.org/vocab/relationship#Relationship",
                                "subject has a particular type of connection or dealings with subject",
                            ),
                            (
                                "http://purl.org/vocab/relationship#siblingOf",
                                "A person having one or both parents in common with this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#spouseOf",
                                "A person who is married to this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#worksWith",
                                "A person who works for the same employer as this person",
                            ),
                            (
                                "http://purl.org/vocab/relationship#wouldLikeToKnow",
                                "A person whom this person would desire to know more closely",
                            ),
                        ],
                        db_index=True,
                        max_length=64,
                    ),
                ),
                (
                    "object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_of_relationships",
                        to="activitypub.reference",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subject_of_relationships",
                        to="activitypub.reference",
                    ),
                ),
                (
                    "relationship",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationship_properties",
                        to="activitypub.object",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="domain",
            name="actor",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="activitypub.actor",
            ),
        ),
        migrations.CreateModel(
            name="CollectionItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("order", models.FloatField(default=0.0)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="in_collections",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="activitypub.collection"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="collection",
            name="collection_items",
            field=models.ManyToManyField(
                related_name="collections",
                through="activitypub.CollectionItem",
                to="activitypub.coretype",
            ),
        ),
        migrations.AddField(
            model_name="baseactivitystreamsobject",
            name="replies",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="replies_of",
                to="activitypub.collection",
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="followers",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="actor_followers",
                to="activitypub.collection",
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="following",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="actor_follows",
                to="activitypub.collection",
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="inbox",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="inbox_owner_actor",
                to="activitypub.collection",
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="liked",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="actor_liked",
                to="activitypub.collection",
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="outbox",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="outbox_owner_actor",
                to="activitypub.collection",
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="shared_inbox",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="shared_inbox_actors",
                to="activitypub.collection",
            ),
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "base_object",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="as_activity",
                        serialize=False,
                        to="activitypub.baseactivitystreamsobject",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("https://www.w3.org/ns/activitystreams#Accept", "Accept"),
                            ("https://www.w3.org/ns/activitystreams#Add", "Add"),
                            ("https://www.w3.org/ns/activitystreams#Announce", "Announce"),
                            ("https://www.w3.org/ns/activitystreams#Arrive", "Arrive"),
                            ("https://www.w3.org/ns/activitystreams#Block", "Block"),
                            ("https://www.w3.org/ns/activitystreams#Create", "Create"),
                            ("https://www.w3.org/ns/activitystreams#Delete", "Delete"),
                            ("https://www.w3.org/ns/activitystreams#Dislike", "Dislike"),
                            ("https://www.w3.org/ns/activitystreams#Flag", "Flag"),
                            ("https://www.w3.org/ns/activitystreams#Follow", "Follow"),
                            ("https://www.w3.org/ns/activitystreams#Ignore", "Ignore"),
                            ("https://www.w3.org/ns/activitystreams#Invite", "Invite"),
                            ("https://www.w3.org/ns/activitystreams#Join", "Join"),
                            ("https://www.w3.org/ns/activitystreams#Leave", "Leave"),
                            ("https://www.w3.org/ns/activitystreams#Like", "Like"),
                            ("https://www.w3.org/ns/activitystreams#Listen", "Listen"),
                            ("https://www.w3.org/ns/activitystreams#Move", "Move"),
                            ("https://www.w3.org/ns/activitystreams#Offer", "Offer"),
                            ("https://www.w3.org/ns/activitystreams#Question", "Question"),
                            ("https://www.w3.org/ns/activitystreams#Reject", "Reject"),
                            ("https://www.w3.org/ns/activitystreams#Read", "Read"),
                            ("https://www.w3.org/ns/activitystreams#Remove", "Remove"),
                            (
                                "https://www.w3.org/ns/activitystreams#TentativeReject",
                                "Tentative Reject",
                            ),
                            (
                                "https://www.w3.org/ns/activitystreams#TentativeAccept",
                                "Tentative Accept",
                            ),
                            ("https://www.w3.org/ns/activitystreams#Travel", "Travel"),
                            ("https://www.w3.org/ns/activitystreams#Undo", "Undo"),
                            ("https://www.w3.org/ns/activitystreams#Update", "Update"),
                            ("https://www.w3.org/ns/activitystreams#View", "View"),
                        ],
                        db_index=True,
                        max_length=128,
                    ),
                ),
                (
                    "actor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="activities_as_actor",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "instrument",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="activities_as_instrument",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "object",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="activities_as_object",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="activities_as_result",
                        to="activitypub.coretype",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities_as_target",
                        to="activitypub.coretype",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Activities",
            },
            bases=("activitypub.baseactivitystreamsobject",),
        ),
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("username", models.CharField(db_index=True, max_length=200)),
                (
                    "domain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accounts",
                        to="activitypub.domain",
                    ),
                ),
                (
                    "actor",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="account",
                        to="activitypub.actor",
                    ),
                ),
            ],
            options={
                "unique_together": {("domain", "username")},
            },
        ),
    ]
