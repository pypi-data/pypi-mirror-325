[tool.poetry]
name = "fastapi-structlog"
version = "0.6.0"
description = "Structured logs and middleware for fastapi with sentry integration"
authors = ["Vladimir Voronov"]
readme = "README.md"
package-mode = true
packages = [{ include = "fastapi_structlog" }]
homepage = "https://github.com/redb0/fastapi-logger"


[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.8.2"
structlog = "^24.2.0"
orjson = "^3.10.6"
structlog-sentry = "^2.1.0"
rich = "^13.7.1"
pydantic-settings = "^2.3.4"
asgi-correlation-id = "^4.3.1"
sentry-sdk = "^2.9.0"
sqlmodel = ">=0.0.19,<0.1.0"


[tool.poetry.group.linter.dependencies]
ruff = "^0.5.2"


[tool.poetry.group.examples.dependencies]
fastapi = "^0.111.1"
sqlalchemy = "^2.0.31"
asyncpg = "^0.29.0"
starsessions = "^2.1.3"


[tool.poetry.group.dev.dependencies]
mypy = "^1.10.1"
commitizen = "^3.27.0"


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true
version_files = [
    "fastapi_structlog/__init__.py",
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 100
target-version = "py39"

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "D",     # pydocstyle
    "A",     # flake8-builtins
    "S",     # flake8-bandit
    "C",     # flake8-comprehensions
    "B",     # flake8-bugbear
    "Q",     # flake8-quotes
    "PL",    # pylint
    "UP",    # pyupgrade
    "C4",    # flake8-comprehensions
    "EM",    # flake8-errmsg
    "PT",    # flake8-pytest-style
    "TD",    # flake8-todos
    "FBT",   # flake8-boolean-trap
    "ANN",   # flake8-annotations
    "BLE",   # flake8-blind-except
    "COM",   # flake8-commas
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "PTH",   # flake8-use-pathlib
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "ERA",   # eradicate
    "PGH",   # pygrep-hooks
    "RUF",   # Ruff-specific rules
    "PERF",  # Perflint
    "ASYNC", # flake8-async
]
ignore = [
    "ANN102", # annotation for cls
    "ANN101", # annotation for self
    "D104",
    "D107",
]

[tool.ruff.lint.per-file-ignores]
"docs_src/*" = ["D100", "D101", "D103", "T201", "S104"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.pylint]
max-args = 5
max-positional-args = 3

[tool.pylint]
disable = "all"
bad-names = "foo,bar,baz,toto,tutu,tata"
good-names = "x,y,i,_,main,j,k,ex,Run"
enable = ["disallowed-name", "redefined-outer-name"]

[tool.ruff.lint.isort]
section-order = [
    "future",
    "standard-library",
    "fastapi",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
"fastapi" = ["fastapi", "starlette"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
plugins = ["pydantic.mypy"]
show_traceback = true
strict = true
mypy_path = "fastapi_structlog/"

# Display the codes needed for # type: ignore[code] annotations.
show_error_codes = true

# Warn of unreachable or redundant code.
warn_unreachable = true
