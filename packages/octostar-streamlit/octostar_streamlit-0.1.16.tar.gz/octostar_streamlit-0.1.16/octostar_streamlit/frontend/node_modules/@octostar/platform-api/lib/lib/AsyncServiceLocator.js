var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class AsyncServiceLocator {
    constructor(services, cache, options) {
        this.services = services;
        this.cache = cache;
        this.options = options;
    }
    static getInstance(key, options) {
        const serializedOptions = JSON.stringify(options);
        const instanceKey = `${key}-${serializedOptions}`;
        if (!this.instances[instanceKey]) {
            this.instances[instanceKey] = new AsyncServiceLocator({}, {}, options);
        }
        return this.instances[instanceKey];
    }
    registerService(name, serviceFactory) {
        return new AsyncServiceLocator(Object.assign(Object.assign({}, this.services), { [name]: serviceFactory }), Object.assign(Object.assign({}, this.cache), { [name]: undefined }), this.options);
    }
    getService(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = this.services[name];
            if (!service) {
                throw new Error(`Service ${String(name)} not found`);
            }
            if (!this.cache[name] || !this.options.cache) {
                this.cache[name] = yield service(this);
            }
            return this.cache[name];
        });
    }
}
AsyncServiceLocator.instances = {};
// class Test {
//   // constructor(name: string, age: number) {}
//
//   public test() {
//     return 'test';
//   }
// }
//
// class Test2 {
//   constructor(private testDependency: Test) {}
//
//   public getName() {
//     return 'test2';
//   }
//
//   public test() {
//     return 'test2';
//   }
// }
//
// const testLocator = AsyncServiceLocator.getInstance('default')
//   .registerService('test', async () => new Test())
//   .registerService('test3', async () => Test)
//   .registerService(
//     'test2',
//     async locator => new Test2(await locator.getService('test')),
//   );
// const testService = await testLocator.getService('test');
// const test2Service = await testLocator.getService('test2');
//
// testService.test();
// test2Service.getName();
//# sourceMappingURL=AsyncServiceLocator.js.map