var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class AIClientImpl {
    constructor(osAPIClient) {
        this.osAPIClient = osAPIClient;
    }
    getChatModels() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.models) {
                this.models = yield this.osAPIClient.fetchData({
                    endpoint: '/api/v1/chat/models',
                });
            }
            return this.models;
        });
    }
    prompt(prompt, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const model = (options === null || options === void 0 ? void 0 : options.model) || ((_a = (yield this.getChatModels())[0]) === null || _a === void 0 ? void 0 : _a.model_name);
            const chatMessage = yield this.osAPIClient.fetchData({
                endpoint: '/api/v1/chat/',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    model_name: model,
                    prompt,
                    api_key: (options === null || options === void 0 ? void 0 : options.apiKey) || '', // TODO: remove this server expects it at the moment, make it optional
                }),
            });
            return chatMessage.content;
        });
    }
}
//# sourceMappingURL=AIClientImpl.js.map