import { AIClient } from '@octostar/platform-types';
import { ChatModel } from '@octostar/platform-types';
import { Concept } from '@octostar/platform-types';
import { ContextMenuRequest } from '@octostar/platform-types';
import { Desktop } from '@octostar/platform-types';
import { Entity } from '@octostar/platform-types';
import { ExtrasApi } from '@octostar/platform-types';
import { Ontology } from '@octostar/platform-types';
import { OsAPIClient } from '@octostar/platform-types';
import { PromptOptions } from '@octostar/platform-types';
import { RemoteAppApi } from '@octostar/platform-types';
import { SavedSearchAPIInterface } from '@octostar/platform-types';
import { TagWithRelationship } from '@octostar/platform-types';
import { WorkspaceItem } from '@octostar/platform-types';

/**
 * @beta
 * Abstract class for creating a context menu.
 */
export declare abstract class AbstractContextMenu extends HTMLElement {
    trigger: string[];
    private desktop;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    private updateProperties;
    private handleRightClick;
    private onMouseEnter;
    private handleClick;
    protected abstract getContext(): Partial<ContextMenuRequest>;
    private publishMouseEvent;
    private publishRequest;
}

export declare class AIClientImpl implements AIClient {
    private osAPIClient;
    private models;
    constructor(osAPIClient: OsAPIClient);
    getChatModels(): Promise<ChatModel[]>;
    prompt(prompt: string, options?: PromptOptions): Promise<string>;
}

/**
 * @beta
 * All permissions.
 */
export declare const ALL_PERMISSIONS = "all";

export declare const ALL_PERMISSIONS_ARRAY: string[];

/**
 * @beta
 * API names.
 */
export declare const apiNames: Record<"desktop", "octostar:api-names:desktop"> & Record<"ontology", "octostar:api-names:ontology"> & Record<"context", "octostar:api-names:context"> & Record<"extras", "octostar:api-names:extras"> & Record<"remoteApp", "octostar:api-names:remoteApp"> & Record<"savedSearch", "octostar:api-names:savedSearch">;

declare type BasePostResponsePayload<D, E> = {
    data: D;
    error: E;
};

/**
 * @beta
 * Type representing the context API.
 */
export declare type ContextApi<T> = {
    getContext: () => Promise<T>;
    subscribeToChanges: (id: string | ContextListener<T>, callback?: ContextListener<T>) => Promise<void>;
    unsubscribeFromChanges: (id: string) => Promise<void>;
};

/**
 * @beta
 * Provides access to the context API.
 * For asynchronous access, use {@link getContextApi}.
 */
export declare const contextApi: () => EnsureMethodsReturnPromise<ContextApi<unknown>>;

/**
 * @beta
 * Type representing a context listener.
 */
export declare type ContextListener<T> = (context: T) => void;

declare type CreateMessageNamesResult<N, M> = M extends readonly [infer F, ...infer R] ? Record<F & string, MessageValue<N, F>> & CreateMessageNamesResult<N, R> : {};

/**
 * @beta
 * Create a set of message names with a namespace.
 */
export declare const createPrefixesConstants: <N extends string, M extends readonly [string, ...string[]]>(namespace: N, messages: M, channelId?: string) => CreateMessageNamesResult<N, M>;

/**
 * @beta
 * Desktop permission group.
 */
export declare const DESKTOP_PERMISSION_GROUP = "octostar:desktop:";

/**
 * @beta
 * Provides access to the desktop API.
 * For asynchronous access, use {@link getDesktopApi}.
 */
export declare const desktopApi: () => EnsureMethodsReturnPromise<Desktop>;

/**
 * @internal
 */
export declare type EnsureMethodsReturnPromise<T> = {
    [K in keyof T]: T[K] extends (...args: any[]) => any ? (...args: Parameters<T[K]>) => Promise<Awaited<ReturnType<T[K]>>> : T[K];
};

/**
 * @beta
 * Type representing a POST response payload with an error.
 */
export declare type ErrorPostResponsePayload = BasePostResponsePayload<null, {
    code: string;
    message: string;
}>;

export declare const extrasApi: () => EnsureMethodsReturnPromise<ExtrasApi>;

/**
 * @beta
 * Get the context API asynchronously.
 */
export declare const getContextApi: () => Promise<EnsureMethodsReturnPromise<ContextApi<unknown>>>;

/**
 * @beta
 * Get the desktop API asynchronously.
 */
export declare const getDesktopApi: () => Promise<EnsureMethodsReturnPromise<Desktop>>;

/**
 * @beta
 * Get the ontology API asynchronously.
 */
export declare const getOntologyApi: () => Promise<EnsureMethodsReturnPromise<Ontology>>;

/**
 * @beta
 * Message names for post messages.
 */
export declare const getPostMessageNames: (channelId: string) => Record<"get_api", "octostar:post-messages:get_api">;

/**
 * @beta
 * Type representing a message value.
 */
export declare type GetRemoteApiParams = {
    name: string;
};

export declare class JWTProvider implements TokenProvider {
    private token;
    private decoded;
    private tokenProvider;
    private expiresThreshold;
    constructor(tokenProvider: TokenProvider, expiresThreshold?: number);
    private fetchToken;
    private isExpiredOrExpiringSoon;
    getToken(): Promise<string>;
}

export declare const makeProxy: <T extends object>(obj: T, excludeKeys?: (keyof T)[]) => Record<string, any>;

declare type MessageValue<N, M> = `${N & string}:${M & string}`;

/**
 * @beta
 * Ontology permission group.
 */
export declare const ONTOLOGY_PERMISSION_GROUP = "octostar:ontology:";

/**
 * @beta
 * Provides access to the ontology API.
 * For asynchronous access, use {@link getOntologyApi}.
 */
export declare const ontologyApi: () => EnsureMethodsReturnPromise<Ontology>;

/**
 * @beta
 * Custom element that renders a context menu.
 */
export declare class OsContextMenu extends AbstractContextMenu {
    private innerContext;
    set context(value: Partial<ContextMenuRequest>);
    get context(): Partial<ContextMenuRequest>;
    protected getContext(): Partial<ContextMenuRequest>;
}

/**
 * @beta
 * Custom element that renders an icon.
 */
export declare class OsIcon extends HTMLElement {
    private root;
    private whatFor;
    private desktop;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(name: string, oldValue: any, newValue: any): void;
    connectedCallback(): void;
    loadFontAwesomeStyles(): void;
    set for(value: Entity | Concept | string);
    get for(): Entity | Concept | string;
    render(): Promise<void>;
}

/**
 * @beta
 * Custom element that renders a record title.
 */
export declare class OsRecordTitle extends HTMLElement {
    private root;
    record: Entity | WorkspaceItem;
    iconComponent: OsIcon;
    labelElement: any;
    tagsComponent: OsTags;
    elipsisButton: any;
    constructor();
    connectedCallback(): void;
    set recordData(value: any);
    get recordData(): any;
    static get observedAttributes(): string[];
    render(): Promise<void>;
}

/**
 * @beta
 * Spinner component.
 */
export declare class OsSpinner extends HTMLElement {
    root: ShadowRoot;
    position: string;
    image: string;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(name: string, oldValue: any, newValue: any): void;
    set imageSrc(value: string);
    get imageSrc(): string;
    render(): void;
}

/**
 * @beta
 * Custom element that renders a tag as a colored dot.
 */
export declare class OsTag extends HTMLElement {
    root: ShadowRoot;
    tag: TagWithRelationship | undefined;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(name: string, oldValue: any, newValue: any): void;
    connectedCallback(): void;
    set OsTag(value: TagWithRelationship);
    render(): Promise<void>;
}

/**
 * @beta
 * Custom element that renders a list of tags.
 */
export declare class OsTags extends HTMLElement {
    private root;
    private record;
    private desktop;
    private mode;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(name: string, oldValue: any, newValue: any): void;
    loadTags(): Promise<TagWithRelationship[]>;
    connectedCallback(): void;
    set recordData(value: Entity);
    get recordData(): Entity | undefined;
    set dotsMode(visible: string);
    get dotsMode(): string;
    render(): Promise<void>;
}

/**
 * @beta
 * Custom element that renders a context menu for tags.
 */
export declare class OsTagsContextMenu extends AbstractContextMenu {
    private entity;
    static get observedAttributes(): string[];
    connectedCallback(): void;
    attributeChangedCallback(name: any, oldValue: any, newValue: any): void;
    set record(entity: Entity);
    protected getContext(): Partial<ContextMenuRequest>;
    private render;
    private update;
}

/**
 * @beta
 * Type representing a POST request.
 */
export declare type PostRequest<T extends object> = {
    source: Window | null;
    origin: string;
    data: T;
};

/**
 * @beta
 * Type representing a POST response.
 */
export declare type PostResponse<T extends object> = {
    source: Window | null;
    origin: string;
    data: T;
};

/**
 * @beta
 * Type representing a POST response payload.
 */
export declare type PostResponsePayload<T> = ErrorPostResponsePayload | SuccessPostResponsePayload<T>;

/**
 * @beta
 * Type representing a POST response with a payload.
 */
export declare type PostResponseWithPayload<T> = PostResponse<PostResponsePayload<T>>;

/**
 * @internal
 */
export declare type RemoteApiError = Error & {
    originalError: Error;
};

export declare const remoteAppApi: () => EnsureMethodsReturnPromise<RemoteAppApi>;

/**
 * @beta
 * Retry a function until it succeeds or the maximum number of attempts is reached.
 *
 * @param fn - The function to retry.
 * @param options - The retry options.
 * @returns The result of the function.
 */
export declare const retry: <T>(fn: (...args: any) => T | Promise<T>, options?: RetryOptions) => Promise<T>;

declare type RetryOptions = {
    maxAttempts?: number;
    retryInterval?: number;
};

export declare const savedSearchApi: () => EnsureMethodsReturnPromise<SavedSearchAPIInterface>;

/**
 * @beta
 * Type representing a POST response payload with a success.
 */
export declare type SuccessPostResponsePayload<T> = BasePostResponsePayload<T, null>;

/**
 * @beta
 * Custom element that renders a list of tags as colored dots.
 * If the number of tags exceeds the maximum number of dots, a count of the remaining tags is displayed.
 */
export declare class TagDots extends HTMLElement {
    tags: TagWithRelationship[] | undefined;
    private root;
    constructor();
    set tagsData(value: TagWithRelationship[]);
    get tagsData(): TagWithRelationship[];
    render(): Promise<void>;
}

export declare interface TokenProvider {
    getToken(): Promise<string>;
}

export { }
