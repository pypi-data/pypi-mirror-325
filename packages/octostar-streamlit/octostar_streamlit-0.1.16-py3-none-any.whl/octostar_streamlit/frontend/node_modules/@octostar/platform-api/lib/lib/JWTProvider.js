var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class JWTProvider {
    constructor(tokenProvider, expiresThreshold = 300) {
        this.token = null;
        this.decoded = null;
        this.tokenProvider = tokenProvider;
        this.expiresThreshold = expiresThreshold;
    }
    fetchToken() {
        return __awaiter(this, void 0, void 0, function* () {
            this.token = yield this.tokenProvider.getToken();
            this.decoded = JSON.parse(atob(this.token.split('.')[1])); // Decode the payload
        });
    }
    isExpiredOrExpiringSoon() {
        if (!this.decoded || !this.decoded.exp) {
            return true; // Treat as expired if there's no expiration time
        }
        const currentTime = Math.floor(Date.now() / 1000);
        return this.decoded.exp < currentTime + this.expiresThreshold;
    }
    getToken() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.token || this.isExpiredOrExpiringSoon()) {
                yield this.fetchToken();
            }
            return this.token;
        });
    }
}
//# sourceMappingURL=JWTProvider.js.map