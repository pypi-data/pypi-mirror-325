var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @beta
 * Custom element that renders a list of tags as colored dots.
 * If the number of tags exceeds the maximum number of dots, a count of the remaining tags is displayed.
 */
export class TagDots extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
        this.shadowRoot.innerHTML = `
        <style>
        .tags-dots-container{
          display: flex;
          align-items: center;
        }
        .tags-dot {
            display: flex;
            align-items: center;
            height: 15px;
            width: 15px;
            border-radius: 50%;
            position: relative;
            margin-left: -5px; 
            border: 2px solid white; 
          }
        
       
        .extra-count {
          background-color: red; 
          height: 20px;
          width: 20px;
          border-radius: 50%;
          color: black;
          display: flex; 
          justify-content: center; 
          align-items: center; 
        }
        </style>
        <div class="tags-dots-container"></div>

      `;
    }
    set tagsData(value) {
        this.tags = value;
        this.render();
    }
    get tagsData() {
        return this.tags;
    }
    render() {
        return __awaiter(this, void 0, void 0, function* () {
            const container = this.shadowRoot.querySelector('.tags-dots-container');
            container.className = 'tags-dots-container';
            const MAX_DOTS = 3;
            const DEFAULT_TAG_COLOR = '#2279F2';
            const colors = this.tags
                .slice(0, MAX_DOTS)
                .map(tag => tag.os_tag.color || DEFAULT_TAG_COLOR);
            colors.forEach(color => {
                const dot = document.createElement('span');
                dot.className = 'tags-dot';
                dot.style.backgroundColor = color;
                container.appendChild(dot);
            });
            if (this.tags.length > MAX_DOTS) {
                const extraCount = document.createElement('span');
                extraCount.textContent = `${this.tags.length}`;
                extraCount.className = 'extra-count';
                container.appendChild(extraCount);
            }
        });
    }
}
if (!customElements.get('tag-dots')) {
    customElements.define('tag-dots', TagDots);
}
//# sourceMappingURL=TagsDots.js.map