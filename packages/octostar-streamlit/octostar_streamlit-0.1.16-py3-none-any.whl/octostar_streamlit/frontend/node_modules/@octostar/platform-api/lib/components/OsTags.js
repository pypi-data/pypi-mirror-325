var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { desktopApi } from '../apis';
/**
 * @beta
 * Custom element that renders a list of tags.
 */
export class OsTags extends HTMLElement {
    constructor() {
        super();
        this.mode = 'tags';
        this.root = this.attachShadow({ mode: 'open' });
    }
    static get observedAttributes() {
        return ['record', 'mode'];
    }
    attributeChangedCallback(name, oldValue, newValue) {
        if (name === 'record' && newValue !== oldValue) {
            this.record = JSON.parse(newValue);
            this.render();
        }
        if (name === 'mode' && newValue !== oldValue) {
            this.mode = newValue;
            this.render();
        }
    }
    loadTags() {
        return __awaiter(this, void 0, void 0, function* () {
            return (this.desktop || desktopApi()).getTags(this.record);
        });
    }
    connectedCallback() {
        if (this.record) {
            this.render();
        }
    }
    set recordData(value) {
        this.record = value;
        this.setAttribute('record', JSON.stringify(value));
    }
    get recordData() {
        return this.record;
    }
    set dotsMode(visible) {
        this.mode = 'dots';
        this.setAttribute('show-dots', String(visible));
    }
    get dotsMode() {
        return this.mode;
    }
    render() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.record) {
                return;
            }
            const tags = yield this.loadTags();
            this.root.innerHTML = `<style>
    :host {
      width: 100%;
      display: flex;
      gap: 5px;
      align-items: center;
    }
</style>`;
            if (this.mode === 'dots') {
                const dots = document.createElement('tag-dots');
                dots.tagsData = tags;
                this.root.appendChild(dots);
            }
            if (this.mode === 'tags') {
                const label = document.createElement('os-context-menu');
                label.setAttribute('trigger', 'hover');
                label.context = { item: this.record };
                label.textContent = this.record.entity_label;
                this.root.appendChild(label);
                tags.forEach(tag => {
                    const tagEl = document.createElement('os-tag');
                    tagEl.tag = tag;
                    this.root.appendChild(tagEl);
                });
                const tagMenu = document.createElement('os-tags-context-menu');
                tagMenu.setAttribute('trigger', 'hover');
                tagMenu.record = this.record;
                this.root.appendChild(tagMenu);
            }
        });
    }
}
if (!customElements.get('os-tags')) {
    customElements.define('os-tags', OsTags);
}
//# sourceMappingURL=OsTags.js.map