var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AsyncServiceLocator } from './lib/AsyncServiceLocator';
import { forwardCallsToFutureObject, createRemoteApiHandle } from './factory';
import { apiNames } from './constants';
const apisLocator = AsyncServiceLocator.getInstance('platform-api', {
    cache: false,
})
    .registerService('desktop', () => createRemoteApiHandle({
    name: apiNames.desktop,
}))
    .registerService('ontology', () => createRemoteApiHandle({
    name: apiNames.ontology,
}))
    .registerService('context', () => 
// TODO: clarify about the context type
createRemoteApiHandle({
    name: apiNames.context,
}))
    .registerService('extras', () => createRemoteApiHandle({
    name: apiNames.extras,
}))
    .registerService('remoteApp', () => createRemoteApiHandle({
    name: apiNames.remoteApp,
}))
    .registerService('savedSearch', () => createRemoteApiHandle({
    name: apiNames.savedSearch,
}));
/**
 * @beta
 * Provides access to the desktop API.
 * For asynchronous access, use {@link getDesktopApi}.
 */
export const desktopApi = () => forwardCallsToFutureObject(apisLocator.getService('desktop'));
export const extrasApi = () => forwardCallsToFutureObject(apisLocator.getService('extras'));
export const remoteAppApi = () => forwardCallsToFutureObject(apisLocator.getService('remoteApp'));
export const savedSearchApi = () => forwardCallsToFutureObject(apisLocator.getService('savedSearch'));
/**
 * @beta
 * Provides access to the ontology API.
 * For asynchronous access, use {@link getOntologyApi}.
 */
export const ontologyApi = () => forwardCallsToFutureObject(apisLocator.getService('ontology'));
/**
 * @beta
 * Provides access to the context API.
 * For asynchronous access, use {@link getContextApi}.
 */
export const contextApi = () => forwardCallsToFutureObject(apisLocator.getService('context'));
/**
 * @beta
 * Get the desktop API asynchronously.
 */
export const getDesktopApi = () => __awaiter(void 0, void 0, void 0, function* () { return apisLocator.getService('desktop'); });
/**
 * @beta
 * Get the ontology API asynchronously.
 */
export const getOntologyApi = () => __awaiter(void 0, void 0, void 0, function* () { return apisLocator.getService('ontology'); });
/**
 * @beta
 * Get the context API asynchronously.
 */
export const getContextApi = () => __awaiter(void 0, void 0, void 0, function* () { return apisLocator.getService('context'); });
//# sourceMappingURL=apis.js.map