var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { desktopApi } from '../apis';
let fontAwesomeStylesLoaded = false;
/**
 * @beta
 * Custom element that renders an icon.
 */
export class OsIcon extends HTMLElement {
    constructor() {
        super();
        this.root = this.attachShadow({ mode: 'open' });
        this.loadFontAwesomeStyles();
    }
    static get observedAttributes() {
        return ['for'];
    }
    attributeChangedCallback(name, oldValue, newValue) {
        if (name === 'for' && newValue !== oldValue) {
            try {
                this.whatFor = JSON.parse(newValue);
            }
            catch (e) {
                this.whatFor = newValue;
            }
            this.render();
        }
    }
    connectedCallback() {
        if (this.whatFor) {
            this.render();
        }
    }
    loadFontAwesomeStyles() {
        // Check if Font Awesome CSS is already loaded globally
        if (!fontAwesomeStylesLoaded) {
            fontAwesomeStylesLoaded = true;
            ['fontawesome', 'brands', 'solid'].forEach(style => {
                if (!document.querySelector(`link[href="/static/assets/fontawesome/css/${style}.css"]`)) {
                    const link = document.createElement('link');
                    link.href = `/static/assets/fontawesome/css/${style}.css`;
                    link.rel = 'stylesheet';
                    document.head.appendChild(link);
                }
            });
        }
    }
    set for(value) {
        this.whatFor = value;
    }
    get for() {
        return this.whatFor;
    }
    render() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.whatFor) {
                return;
            }
            const html = yield (this.desktop || desktopApi()).internalGetIconCode(this.whatFor);
            this.root.innerHTML = html;
            if (/class="fa[srb]? /.test(html)) {
                // Ensure Font Awesome styles are loaded
                this.loadFontAwesomeStyles();
            }
        });
    }
}
if (!customElements.get('os-icon')) {
    customElements.define('os-icon', OsIcon);
}
//# sourceMappingURL=OsIcon.js.map