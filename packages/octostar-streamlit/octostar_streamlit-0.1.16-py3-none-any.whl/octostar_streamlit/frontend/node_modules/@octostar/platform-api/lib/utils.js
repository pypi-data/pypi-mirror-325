var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @beta
 * Retry a function until it succeeds or the maximum number of attempts is reached.
 *
 * @param fn - The function to retry.
 * @param options - The retry options.
 * @returns The result of the function.
 */
export const retry = (fn, options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    let attempts = 0;
    const maxAttempts = (_a = options === null || options === void 0 ? void 0 : options.maxAttempts) !== null && _a !== void 0 ? _a : 3;
    const retryInterval = (_b = options === null || options === void 0 ? void 0 : options.retryInterval) !== null && _b !== void 0 ? _b : 1000;
    while (true) {
        attempts += 1;
        try {
            // eslint-disable-next-line no-await-in-loop
            return yield fn();
        }
        catch (e) {
            if (attempts < maxAttempts) {
                // eslint-disable-next-line no-await-in-loop
                yield new Promise(resolve => setTimeout(resolve, retryInterval));
            }
            throw e;
        }
    }
});
//# sourceMappingURL=utils.js.map