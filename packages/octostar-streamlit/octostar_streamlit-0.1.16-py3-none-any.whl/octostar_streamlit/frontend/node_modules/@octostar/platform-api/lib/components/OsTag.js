var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @beta
 * Custom element that renders a tag as a colored dot.
 */
export class OsTag extends HTMLElement {
    constructor() {
        super();
        this.root = this.attachShadow({ mode: 'open' });
    }
    static get observedAttributes() {
        return ['record'];
    }
    attributeChangedCallback(name, oldValue, newValue) {
        if (name === 'tag' && newValue !== oldValue) {
            this.tag = JSON.parse(newValue);
            this.render();
        }
    }
    connectedCallback() {
        if (this.tag) {
            this.render();
        }
    }
    set OsTag(value) {
        this.tag = value;
        this.setAttribute('record', JSON.stringify(value));
    }
    render() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.tag) {
                return;
            }
            this.root.innerHTML = `<style>
    .tag {
      padding: 6px;
      border-radius: 4px;
      width: max-content;
    }
    </style>
`;
            const div = document.createElement('div');
            div.className = 'tag';
            div.innerText = this.tag.os_tag.entity_label;
            const color = this.tag.os_tag.color || '#2279F2';
            div.style.background = `linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)), ${color}`;
            div.style.color = color;
            div.style.borderColor = color;
            this.root.appendChild(div);
        });
    }
}
if (!customElements.get('os-tag')) {
    customElements.define('os-tag', OsTag);
}
//# sourceMappingURL=OsTag.js.map