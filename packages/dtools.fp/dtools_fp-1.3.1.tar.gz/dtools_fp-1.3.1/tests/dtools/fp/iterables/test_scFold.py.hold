# Copyright 2023-202% Geoffrey R. Scheller
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import cast, Never
from dtools.fp.function import swap
from dtools.fp.iterables import scFoldL, scFoldR
from dtools.fp.err_handling import MB

class Test_fp_do_not_sc_folds:
    def test_fold(self) -> None:
        def add(ii: int, jj: int) -> int:
            return ii+jj

        def none_add(ii: int|None, jj: int|None) -> int|None:
            if ii is None:
                ii = 0
            if jj is None:
                jj = 0
            return ii+jj

        def funcL(acc: int, jj: int) -> int:
            return (acc - 1)*(jj + 1)

        def funcR(ii: int, acc: int) -> int:
            return (ii - 1)*(acc + 1)

        data1 = tuple(range(1, 101))
        data2 = tuple(range(2, 101))
        data3: tuple[int, ...] = ()
        data4 = 42,

        assert scFoldL(data1, add) == MB(5050)
        assert scFoldR(data1, add)[0] == MB(5050)
        assert scFoldL(data1, add, 10) == MB(5060)
        assert scFoldR(data1, add, 10)[0] == MB(5060)

        assert scFoldL(data2, add) == MB(5049)
        assert scFoldR(data2, add)[0] == MB(5049)
        assert scFoldL(data2, add, 10) == MB(5059)
        assert scFoldR(data2, add, 10)[0] == MB(5059)

        assert scFoldL(data3, add) == MB()
        assert scFoldR(data3, add)[0] == MB()
        assert scFoldL(data3, add, 10) == MB(10)
        assert scFoldR(data3, add, 10)[0] == MB(10)

        assert scFoldL(data4, add) == MB(42)
        assert scFoldR(data4, add)[0] == MB(42)
        assert scFoldL(data4, add, 10) == MB(52)
        assert scFoldR(data4, add, 10)[0] == MB(52)

        stuff1 = (1, 2, 3, 4, 5)
        stuff2 = (2, 3, 4, 5)
        stuff3: list[int|None] = []
        stuff4: tuple[int|None] = 42,
        stuff5: list[int] = []
        stuff6: tuple[int] = 42,

        assert scFoldL(stuff1, add) == MB(15)
        assert scFoldL(stuff1, add, 10) == MB(25)
        assert scFoldR(stuff1, add)[0] == MB(15)
        assert scFoldR(stuff1, add, 10)[0] == MB(25)
        assert scFoldL(stuff2, add) == MB(14)
        assert scFoldR(stuff2, add)[0] == MB(14)
        assert scFoldL(stuff3, none_add) == MB()
        assert scFoldR(stuff3, none_add)[0].get(None) is None
        assert scFoldL(stuff4, none_add).get(-2) == 42
        assert scFoldR(stuff4, none_add)[0].get(-2) == 42
        assert scFoldL(stuff5, add).get(-2) == -2
        assert scFoldR(stuff5, add)[0].get(-2) == -2
        assert scFoldL(stuff5, add) == MB()
        assert scFoldR(stuff5, add)[0] == MB()
        assert scFoldL(stuff6, add) == MB(42)
        assert scFoldR(stuff6, add)[0] == MB(42)

        assert scFoldL(stuff1, funcL) == MB(-156)
        assert scFoldR(stuff1, funcR)[0] == MB(0)
        assert scFoldL(stuff2, funcL) == MB(84)
        assert scFoldR(stuff2, funcR)[0] == MB(39)
        assert scFoldL(stuff5, funcL) == MB()
        assert scFoldR(stuff5, funcR)[0] == MB()
        assert scFoldL(stuff6, funcL) == MB(42)
        assert scFoldR(stuff6, funcR)[0] == MB(42)

    def test_sc_folds(self) -> None:
        def add(ii: int, jj: int) -> int:
            return ii+jj

        def add_or_bail(ii: int|None, jj: int|None) -> int|Never:
            if ii is None or jj is None:
                raise Exception
            return ii + jj

        def gt_8(ii: int) -> bool:
            if ii > 8:
                return True
            else:
                return False

        def gt_3(ii: int) -> bool:
            if ii > 3:
                return True
            else:
                return False

        def is_0(ii: int) -> bool:
            if ii == 0:
                return True
            else:
                return False
        data1 = (1, 2, 3, 4, 5, None, 6, 7, 8, 9, 10)
        data2 = (1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10)
        data3 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
        data4 = [1, 2, 3, 4, 5, 6]
        data5: tuple[int, ...] = ()
        data6 = 10,
        data7 = 15, 20, 25, 30

        assert scFoldL(data1, add_or_bail) == MB()
        assert scFoldL(data1, add_or_bail,
                       stop_folding=lambda d: True if d is None else False) == MB(15)
        assert scFoldL(data2, add) == MB(55)
        assert scFoldL(data2, add, start_folding=gt_3) == MB(49)
        assert scFoldL(data2, add, start_folding=gt_3, include_start=False) == MB(45)
        assert scFoldL(data2, add, stop_folding=gt_8) == MB(36)
        assert scFoldL(data2, add, stop_folding=gt_8, start_folding=gt_3) == MB(30)
        assert scFoldL(data2, add, stop_folding=is_0,) == MB(15)

