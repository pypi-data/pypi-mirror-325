from faker.providers import BaseProvider, ElementsType
from data_source_faker.models import DatabaseColumn, ColumnType


class DatabaseColumnProvider(BaseProvider):

    database_columns: ElementsType[tuple[str, str]] = [
         ('id', 'serial'),
         ('uuid', 'uuid'),
         ('key', 'varchar'),
         ('slug', 'varchar'),
         ('username', 'varchar'),
         ('password', 'varchar'),
         ('email', 'varchar'),
         ('first_name', 'varchar'),
         ('last_name', 'varchar'),
         ('full_name', 'varchar'),
         ('display_name', 'varchar'),
         ('profile_pic', 'varchar'),
         ('avatar', 'varchar'),
         ('bio', 'text'),
         ('created_at', 'timestamp'),
         ('updated_at', 'timestamp'),
         ('deleted_at', 'timestamp'),
         ('timestamp', 'timestamp'),
         ('last_modified', 'timestamp'),
         ('accessed_at', 'timestamp'),
         ('start_time', 'timestamp'),
         ('end_time', 'timestamp'),
         ('status', 'varchar'),
         ('is_active', 'boolean'),
         ('is_deleted', 'boolean'),
         ('is_verified', 'boolean'),
         ('is_enabled', 'boolean'),
         ('is_default', 'boolean'),
         ('is_archived', 'boolean'),
         ('count', 'integer'),
         ('total', 'integer'),
         ('quantity', 'integer'),
         ('value', 'float'),
         ('rank', 'integer'),
         ('score', 'float'),
         ('points', 'integer'),
         ('latitude', 'float'),
         ('longitude', 'float'),
         ('address', 'text'),
         ('city', 'varchar'),
         ('state', 'varchar'),
         ('country', 'varchar'),
         ('postal_code', 'varchar'),
         ('zip_code', 'varchar'),
         ('price', 'numeric'),
         ('cost', 'numeric'),
         ('amount', 'numeric'),
         ('currency', 'varchar'),
         ('tax', 'numeric'),
         ('discount', 'numeric'),
         ('total_cost', 'numeric'),
         ('balance', 'numeric'),
         ('salary', 'numeric'),
         ('payment_id', 'uuid'),
         ('date', 'date'),
         ('birth_date', 'date'),
         ('start_date', 'date'),
         ('end_date', 'date'),
         ('due_date', 'date'),
         ('expiration_date', 'date'),
         ('parent_id', 'uuid'),
         ('child_id', 'uuid'),
         ('user_id', 'uuid'),
         ('customer_id', 'uuid'),
         ('order_id', 'uuid'),
         ('product_id', 'uuid'),
         ('category_id', 'uuid'),
         ('vendor_id', 'uuid'),
         ('organization_id', 'uuid'),
         ('team_id', 'uuid'),
         ('title', 'varchar'),
         ('description', 'text'),
         ('content', 'text'),
         ('summary', 'text'),
         ('details', 'text'),
         ('notes', 'text'),
         ('message', 'text'),
         ('comments', 'text')
    ]

    def database_column(self) -> DatabaseColumn:
         element = self.random_element(self.database_columns)
         return DatabaseColumn(
            column_name=element[0],
            column_type=ColumnType(element[1])
        )
