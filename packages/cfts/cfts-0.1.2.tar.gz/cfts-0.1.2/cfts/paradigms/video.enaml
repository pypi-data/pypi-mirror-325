# This is an Enaml file that enables us to integrate psivideo into
# psiexperiment. Enaml is not required to use psivideo independently of
# psiexperiment.
import logging
log = logging.getLogger(__name__)

import atexit
from functools import partial
from pathlib import Path
import shutil
import tempfile
from threading import Event

from atom.api import Bool, Int, Str, Typed, Value
from enaml.application import timed_call
from enaml.core.api import d_
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import ContextGroup, Result
from psi.controller.api import ExperimentAction
from psi.core.enaml.api import ExperimentManifest, PSIManifest
from psi.data.api import Sink


class VideoSink(Sink):

    client = Value()
    base_path = Typed(Path)
    is_temp = Bool(False)
    port = d_(Int())
    filename = d_(Str('recording.avi'))
    controller = d_(Value())

    timing_filename = d_(Str('recording_timestamp.csv'))
    timing_fh = Value()
    stop = Event()

    def _default_client(self):
        from psivideo.client import SyncVideoClient
        return SyncVideoClient(port=self.port)

    def set_base_path(self, base_path, is_temp):
        if not is_temp:
            base_path = Path(base_path)
            base_path.mkdir(parents=True, exist_ok=True)
        self.base_path = base_path
        self.is_temp = is_temp

    def start_client(self):
        self.client.connect()
        atexit.register(self.client.disconnect)

    def start_recording(self):
        self.client.start(self.base_path / self.filename)
        self.timing_fh = (self.base_path / self.timing_filename).open('w')
        self.timing_fh.write(','.join(('frame', 'frame_ts', 'controller_ts')) + '\n')
        timed_call(1000, self.check_timing)

    def stop_recording(self):
        try:
            self.stop.set()
            self.client.stop()
            self.timing_fh.close()
        except Exception as e:
            log.exception(e)

    def check_timing(self):
        if self.stop.is_set():
            return
        try:
            timing = self.client.get_timing()
            controller_ts = str(self.controller.get_ts())
            frame = str(int(round(timing['frame_number'])))
            frame_ts = str(timing['timestamp'])
            self.timing_fh.write(','.join((frame, frame_ts, controller_ts)) + '\n')
            timed_call(1000, self.check_timing)
        except Exception as e:
            log.exception(e)


enamldef VideoSinkManifest(PSIManifest): manifest:

    Extension:
        id = manifest.contribution.name + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.start_client'
            handler = lambda e: manifest.contribution.start_client()
        Command:
            id = manifest.contribution.name + '.start_recording'
            handler = lambda e: manifest.contribution.start_recording()
        Command:
            id = manifest.contribution.name + '.stop_recording'
            handler = lambda e: manifest.contribution.stop_recording()


enamldef PSIVideo(ExperimentManifest): manifest:

    id = 'psivideo'
    title = 'PSIVideo'
    attr port = 33331
    #: This should just be a filename. The base path to the experiment folder
    #: will be appended to this. Any attempt to define a full path will likely
    #: generate an error or put the file somewhere strange.
    attr filename = 'recording.avi'

    Extension:
        id = manifest.id + '.sinks'
        point = 'psi.data.sinks'

        VideoSink:
            name = manifest.id
            port = manifest.port
            filename = manifest.filename
            controller = manifest.controller

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'plugins_started'
            command = manifest.id + '.start_client'
        ExperimentAction:
            event = 'experiment_prepare'
            command = manifest.id + '.start_recording'
        ExperimentAction:
            event = 'experiment_end'
            command = manifest.id + '.stop_recording'
