import logging
log = logging.getLogger(__name__)

import functools
import itertools
import os

from enaml.widgets.api import Label
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
import numpy as np

from psiaudio.util import octave_space

from psi.context.api import (ContextGroup, FriendlyCartesianProduct, Parameter,
                             SequenceSelector)
from psi.controller.api import (Callback, ContinuousInput, Downsample,
                                ExperimentAction, get_hw_ai_choices,
                                get_hw_ao_choices, IIRFilter)
from psi.controller.calibration.api import ChirpCalibrate, ClickCalibrate, ToneCalibrate
from psi.core.enaml.api import ExperimentManifest
from psi.data.sinks.api import BinaryStore
from psi.experiment.api import StatusItem

from psi.paradigms.core.io_mixins import QueuedEpochChannelOutput
from psi.paradigms.core.signal_mixins import MultiSignalViewExtension, MultiSignalViewFFTExtension


from cftscal.api import microphone_manager


################################################################################
# Utility function
################################################################################
def check_range(outputs, settings):
    '''
    Verify that expected range for channel does not exceed maximum range

    Parameters
    ----------
    outputs : dict
        Dictionary mapping output instance to output information. Output
        information should be a dictionary containing `level` and `frequency`
        keys. These keys should map to the variable names in the context.
    settings : list
        List of settings that will be used for each trial during the
        experiment.
    '''
    max_sf = {}
    bad_settings = []
    good_settings = settings[:]

    # Identify which settings are good/bad
    for setting in settings:
        channel_sf = {}
        for o, o_info in outputs.items():
            l = setting[o_info['level']]
            f = setting[o_info['frequency']]

            # Calculate scaling factor for a tone and add some headroom of 1.01.
            sf = o.calibration.get_sf(f, l) * np.sqrt(2) * 1.01

            # If multiple tones are going out of a channel, then we need to
            # assume they may sum at their peak.
            channel_sf[o.channel] = channel_sf.get(o.channel, 0) + sf

        for c, sf in channel_sf.items():
            # First, we check to see the required scaling factor exceeds the
            # max range of any output channel for this particular setting. If
            # it does, we exit the loop (and the else) is never executed. Since
            # we are going to discard this setting, it should not be included
            # in the determination of the max output for the channel.
            if sf > c.max_range[1]:
                bad_settings.append(setting)
                good_settings.remove(setting)
                break
        else:
            # Ok, now we have established that this setting is doable, we go
            # back through the channels and update the max SF for each channel!
            for c, sf in channel_sf.items():
                max_sf[c] = max(max_sf.get(c, -np.inf), sf)

    # Now, update the channel with the expected range.
    for channel, sf in max_sf.items():
        channel.expected_range = (-sf, sf)
        log.info('Set expected range for channel %r to %f. Max range is %f',
                 channel, sf, channel.max_range[1])

    return good_settings, bad_settings


################################################################################
# Simple frequency and level selectors
################################################################################
CONTEXT_ITEM_DETAIL = {
    # ABR and SAM/RAM EFR
    'target_tone_frequency': {
        'user_friendly_name': 'frequency',
        'user_friendly_name_plural': 'frequencies',
        'step_unit': 'octave',
        'unit': 'kHz',
        'order_user_managed': False,
        'transform_fn': lambda x: round(x * 1e3, 0),
        'inverse_transform_fn': lambda x: x * 1e-3,
        'round_values': True,
        'range_fn': octave_space,
    },
    'target_tone_level': {
        'user_friendly_name': 'level',
        'step_unit': 'dB',
        'unit': 'dB SPL',
        'order_user_managed': True,
    },

    # Click ABR
    'target_click_level': {
        'user_friendly_name': 'level',
        'step_unit': 'dB',
        'unit': 'dB SPL',
        'order_user_managed': True,
    },

    # SAM/RAM EFR
    'fm': {
        'user_friendly_name': 'modulation frequency',
        'user_friendly_name_plural': 'modulation frequencies',
        'step_unit': 'Hz',
        'unit': 'Hz',
        'order_user_managed': True,
    },
    'fc': {
        'user_friendly_name': 'carrier frequency',
        'user_friendly_name_plural': 'carrier frequencies',
        'step_unit': 'octave',
        'unit': 'kHz',
        'order_user_managed': False,
        'transform_fn': lambda x: round(x * 1e3),
        'inverse_transform_fn': lambda x: x * 1e-3,
        'round_values': True,
        'range_fn': octave_space,
    },

    # DPOAE
    'f2_frequency': {
        'user_friendly_name': 'F2 frequency',
        'user_friendly_name_plural': 'F2 frequencies',
        'step_unit': 'octave',
        'unit': 'kHz',
        'order_user_managed': False,
        'transform_fn': lambda x: round(x * 1e3),
        'inverse_transform_fn': lambda x: x * 1e-3,
        'round_values': True,
        'range_fn': octave_space,
    },
    'f2_level': {
        'user_friendly_name': 'level',
        'step_unit': 'dB',
        'unit': 'dB SPL',
        'order_user_managed': True,
    },

    # MEMR
    'elicitor_bandlimited_noise_level': {
        'user_friendly_name': 'level',
        'step_unit': 'dB',
        'unit': 'dB SPL',
    }
}


class CFTSSelector(FriendlyCartesianProduct):

    context_detail = CONTEXT_ITEM_DETAIL


class CFTSSequenceSelector(SequenceSelector):

    context_detail = CONTEXT_ITEM_DETAIL


enamldef TemperatureMixinManifest(ExperimentManifest): manifest:

    id = 'temperature'
    title = 'Temperature monitor'

    Extension:
        id = 'temperature_data'
        point = 'psi.data.sinks'

        BinaryStore:
            name = 'temperature_store'
            continuous_inputs = ['temperature']

    Extension:
        id = 'temperature_display'
        point = 'psi.experiment.status'

        StatusItem:
            label = 'Temperature'

            Label: temp:
                text = ''

    Extension:
        id = 'temperature_io'
        point = 'psi.controller.io'

        IIRFilter:
            source_name = 'temperature'
            f_lowpass = 0.5
            btype = 'lowpass'
            ftype = 'butter'
            N = 1

            Downsample:
                name = 'temperature_decimated'
                q = 500

                Callback:
                    function = lambda x: setattr(temp, 'text', f'{x[0, -1]:.1f}Â°C')


################################################################################
# ABR and DPOAE calibration mixins
################################################################################
enamldef InEarCalibrationMixinManifest(ExperimentManifest): manifest:

    attr experiment
    attr outputs
    attr get_values = lambda x: {si for i in x for si in i}
    attr microphone_channel = 'system_microphone'

    id = f'{experiment}_inear_calibration'
    title = 'In-ear calibration'

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'inear_calibration'
            label = 'In-ear calibration'

            Parameter:
                name = 'calibration_gain'
                label = 'Gain (dB)'
                dtype = 'float'
                default = -30

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ToneCalibrate:
            name = f'{experiment}_tone_calibration'
            label = 'Tone calibration'
            input_name << manifest.microphone_channel
            outputs << manifest.outputs
            gain << C.calibration_gain
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0
            get_values => (values):
                return manifest.get_values(values)


enamldef ABRInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'abr'
    outputs = {'target': ['target_tone_frequency']}


enamldef ABRClickInEarCalibrationMixinManifest(ExperimentManifest): manifest:

    attr experiment = 'abr_click'
    attr microphone_channel = 'system_microphone'

    id = f'{experiment}_inear_calibration'
    title = 'In-ear calibration'

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'inear_calibration'
            label = 'In-ear calibration'

            Parameter:
                name = 'calibration_gain'
                label = 'Gain (dB)'
                dtype = 'float'
                default = -30

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ClickCalibrate:
            name = f'abr_click_calibration'
            label = 'Click calibration'
            input_name << manifest.microphone_channel
            gain << C.calibration_gain
            outputs = {'target': []}
            duration << C.click_duration
            iti << (1 / C.rate) - C.click_duration


enamldef DPOAEInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'dpoae'
    outputs = {
        'primary': ['primary_tone_frequency'],
        'secondary': ['secondary_tone_frequency'],
    }


enamldef BinauralDPOAEInEarCalibrationMixinManifest(ExperimentManifest): manifest:

    id = f'binaural_inear_calibration'
    title = 'In-ear calibration'

    Extension:
        id = manifest.id + '.binaural_context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'inear_calibration'
            label = 'In-ear calibration'

            Parameter:
                name = 'calibration_gain'
                label = 'Gain (dB)'
                dtype = 'float'
                default = -30

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ToneCalibrate:
            name = f'binaural_left_tone_calibration'
            label = 'Left tone calibration'
            input_name = 'left_microphone'
            outputs = {
                'left_primary': ['primary_left_tone_frequency'],
                'left_secondary': ['secondary_left_tone_frequency'],
            }
            gain << C.calibration_gain
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0
            get_values => (values):
                return {si for i in values for si in i}

        ToneCalibrate:
            name = f'binaural_right_tone_calibration'
            label = 'Right tone calibration'
            input_name = 'right_microphone'
            outputs = {
                'right_primary': ['primary_right_tone_frequency'],
                'right_secondary': ['secondary_right_tone_frequency'],
            }
            gain << C.calibration_gain
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0
            get_values => (values):
                return {si for i in values for si in i}


enamldef SAMEFRInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    # Both the carrier and the sidebands need to be calibrated
    experiment = 'sam_efr'
    outputs = {'target': ['target_sam_tone_fc', 'fm']}
    get_values = lambda values: set(v for fc, fm in values for v in (fc-fm, fc, fc+fm))


enamldef RAMEFRInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'ram_efr'
    outputs = {'target': ['target_tone_frequency']}


enamldef MEMRInEarCalibrationMixinManifest(ExperimentManifest): manifest:

    id = 'memr_inear_calibration'
    title = 'In-ear calibration'

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'inear_calibration'
            label = 'In-ear calibration'

            Parameter:
                name = 'calibration_gain'
                label = 'Gain (dB)'
                dtype = 'float'
                default = -30

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ChirpCalibrate: probe_calibrate:
            name = 'memr_probe_calibration'
            label = 'Calibration'
            input_name = 'probe_microphone'
            outputs = {'probe': []}
            gain << C.calibration_gain

        ChirpCalibrate: elicitor_calibrate:
            name = 'memr_elicitor_calibration'
            input_name = 'elicitor_microphone'
            outputs = {'elicitor': []}
            gain << C.calibration_gain
            # We want to plot both calibrations on the same widget (for easier
            # comparision).
            show_widget = False
            viewbox_name << probe_calibrate.viewbox_name


def set_debug_calibration(event):
    '''
    Set Starship speakers to a calibration that returns scaling factors that
    will work with the
    '''
    from psiaudio.calibration import FlatCalibration
    controller = event.workbench.get_plugin('psi.controller')
    for channel in controller.get_channels('analog', 'output', 'hardware', False):
        log.info(channel)
        if channel.name.startswith('starship_'):
            pass
        elif channel.name.startswith('speaker_'):
            pass
        else:
            continue
        log.info('Channel %r old calibration %r', channel, channel.calibration)
        channel.calibration = FlatCalibration.from_db(130)
        log.info(' -> set to %r', channel.calibration)


enamldef DebugCalibration(ExperimentManifest): manifest:

    id = 'debug_calibration'
    title = 'Calibration for debugging'

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.id + '.set_debug_calibration'
            handler = set_debug_calibration

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'plugins_started'
            command = manifest.id + '.set_debug_calibration'


def initialize_cal_mic(event):
    '''
    Initialize calibration microphone from environment variables provided.

    Requires the following environment variables:

        * `CFTS_CAL_MIC` - The name of the calibration microphone connected to
        the `microphone_calibration` input defined in the IOManifest. The name
        is defined when generating the calibration using CFTSCal.
        * `CFTS_CAL_MIC_GAIN` - The gain, in dB, of the calibration microphone.
    '''
    controller = event.workbench.get_plugin('psi.controller')
    channel = controller.get_channel('hw_ai::microphone_calibration')
    cal_mic = os.environ[f'CFTS_CAL_MIC']
    cal_mic_gain = os.environ[f'CFTS_CAL_MIC_GAIN']
    channel.calibration = microphone_manager.from_string(cal_mic).load()
    channel.gain = int(cal_mic_gain)


enamldef CalibrationMicrophone(ExperimentManifest): manifest:
    '''
    Saves the calibration microphone to the recording.

    This is typically used in validating that stimuli are calibrated properly.
    Requires that an input channel called `microphone_calibration` be available
    in the IOManifest.
    '''
    id = 'calibration_microphone'
    title = manifest.id.capitalize().replace('_', ' ')

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.id + '.initialize_cal_mic'
            handler = initialize_cal_mic

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'plugins_started'
            command = manifest.id + '.initialize_cal_mic'

    Extension:
        id = manifest.id + '.io'
        point = 'psi.controller.io'

        ContinuousInput:
            name = 'calibration_microphone'
            source_name = 'hw_ai::microphone_calibration'

    Extension:
        id = manifest.id + '.sinks'
        point = 'psi.data.sinks'

        BinaryStore:
            name = manifest.id + '.cal_mic_store'
            continuous_inputs = ['calibration_microphone']


enamldef OutputMonitor(ExperimentManifest): manifest:
    '''
    Saves the output monitor to the recording.

    This is typically used in validating that the stimulus waveforms and timing
    are exact. Requires that an input channel called `output_monitor` be
    available in the IOManifest.
    '''
    id = 'output_monitor'
    title = manifest.id.capitalize().replace('_', ' ')

    Extension:
        id = manifest.id + '.output_monitor_io'
        point = 'psi.controller.io'

        ContinuousInput:
            name = 'output_monitor'
            source_name = 'hw_ai::output_monitor'

    Extension:
        id = manifest.id + '.sinks'
        point = 'psi.data.sinks'

        BinaryStore:
            name = manifest.id + '.output_monitor_store'
            continuous_inputs = ['output_monitor']


enamldef OutputMonitorView(ExperimentManifest): manifest:
    '''
    Displays the output monitor.

    This is typically used in testing and debugging. Requires that an input
    channel called `output_monitor` be available in the IOManifest.
    '''
    id = 'output_monitor_view'
    title = manifest.id.capitalize().replace('_', ' ')

    Extension:
        id = manifest.id + '.output_monitor_io'
        point = 'psi.controller.io'

        ContinuousInput:
            name = 'output_monitor_view'
            source_name = 'hw_ai::output_monitor'

    MultiSignalViewExtension:
        id = manifest.id + '_time_plot'
        title = manifest.title + ' (time)'
        sources = {
            'output_monitor_view': {'color': 'k'},
        }

    MultiSignalViewFFTExtension:
        id = manifest.id + '_fft_plot'
        title = manifest.title + ' (PSD)'
        sources = {
            'output_monitor_view': {'color': 'k'},
        }


def swap_outputs(event):
    '''
    Swap Starship outputs
    '''
    # This works because we are doing this at the `plugins_started` event. In
    # the `cftscal.paradigms.objects.Starship` manifest, the target names of
    # the MUXOutputs are not evaluated until the controller actually loads and
    # inspects the outputs (which happens during the `experiment_initialize`
    # stage).
    controller = event.workbench.get_plugin('psi.controller')
    for name, plugin in event.workbench._plugins.items():
        log.error(name)
        if hasattr(plugin.manifest, 'swap_outputs'):
            plugin.manifest.swap_outputs = True


enamldef SwapOutputs(ExperimentManifest): manifest:

    id = 'swap_outputs'
    title = 'Swap starship outputs for debugging'

    Extension:
        id = manifest.id + '.command'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.id + '.swap_outputs'
            handler = swap_outputs

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'plugins_started'
            command = manifest.id + '.swap_outputs'
