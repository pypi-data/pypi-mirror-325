import logging
log = logging.getLogger(__name__)

from enaml.stdlib.message_box import warning
from enaml.widgets.api import ProgressBar
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import Parameter, Expression, SequenceSelector
from psi.controller.api import ExperimentAction
from psi.core.enaml.api import ExperimentManifest
from psi.data.plots import ResultPlot, FFTContainer, ViewBox
from psi.experiment.api import StatusItem

from .cfts_mixins import CFTSSelector, check_range

EXPERIMENT = __name__.rsplit('.', 1)[-1]


enamldef DPGramPlotContainer(FFTContainer): pc:

    attr suffix = ''
    name = f'dpgram{suffix}_container'
    label = 'DP-Gram'
    fmt_button => (key):
        return '{} dB SPL'.format(key[0])

    ViewBox: vb:
        name = f'dpgram{suffix}_viewbox'
        y_mode = 'mouse'
        save_limits = True

        ResultPlot: grp:
            source_name = f'analyze_dpoae{suffix}'
            x_column = f'secondary{suffix}_tone_frequency'
            pen_width = 2
            label = 'F2'
            y_column = 'f2_level'
            color = 'indianred'
            tab_keys >> pc.buttons
            tab_grouping = [f'secondary{suffix}_tone_level']
            selected_tab := pc.current_button
            auto_select := pc.auto_select

        ResultPlot:
            source_name << grp.source_name
            x_column << grp.x_column
            pen_width << grp.pen_width
            label = 'F1'
            y_column = 'f1_level'
            color = 'lightsalmon'
            tab_grouping << grp.tab_grouping
            selected_tab << grp.selected_tab
            auto_select << grp.auto_select

        ResultPlot:
            source_name << grp.source_name
            x_column << grp.x_column
            pen_width << grp.pen_width
            label = 'Noise Floor'
            y_column = 'dpoae_noise_floor'
            color = 'lightsteelblue'
            tab_grouping << grp.tab_grouping
            selected_tab << grp.selected_tab
            auto_select << grp.auto_select

        ResultPlot:
            source_name << grp.source_name
            x_column << grp.x_column
            pen_width << grp.pen_width
            label = 'DPOAE'
            y_column = 'dpoae_level'
            color = 'darkred'
            tab_grouping << grp.tab_grouping
            selected_tab << grp.selected_tab
            auto_select << grp.auto_select


enamldef DPGramBaseManifest(ExperimentManifest): manifest:

    id = EXPERIMENT

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'dpoae_acquired'
            command = 'psi.context.next_setting'
            kwargs = {'selector': 'actual'}

        ExperimentAction:
            event = 'context_next_setting'
            command = 'dpoae.start'
            kwargs = {'delay': 0.25}

        ExperimentAction:
            event = 'context_complete'
            command = 'psi.controller.stop'

    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.status'
        rank = 10

        StatusItem:
            label = 'Current trial'

            ProgressBar: pb_trial:
                name = 'dpoae_trial_pb'
                text_visible = True

        StatusItem:
            label = 'Trials '

            ProgressBar: pb_trials:
                name = 'dpoae_trials_pb'
                text_visible = True


enamldef SingleDPGram(ExperimentManifest): manifest:

    id = EXPERIMENT + '_single'
    required = True

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        Expression:
            # Set tone duration to one hour. If you need more than one hour,
            # you need to check your settings! TODO: We should be able to set
            # this to np.inf to indicate open-ended duration, but this is
            # causing the program to hang. Need to track down the bug.
            parameter = 'secondary_tone_duration'
            expression = '3600'

    Extension:
        id = manifest.id + '.plots'
        point = 'psi.data.plots'

        DPGramPlotContainer: pc:
            pass


def configure_dpoaeio_gui(event):
    '''
    Loads various GUI components (mainly plots) and ensures that axes limits
    are set based on what we will see in the experiments.
    '''
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    pb_trials = ui.window.find('dpoae_trials_pb')
    pb_trial = ui.window.find('dpoae_trial_pb')

    context = event.workbench.get_plugin('psi.context')
    n_fft = context.get_value('n_fft')
    n_time = context.get_value('n_time')
    pb_trial.maximum = n_fft * n_time
    pb_trials.maximum = context.n_values()
    f2 = context.unique_values('secondary_tone_frequency')
    l1 = context.unique_values('primary_tone_level')
    l2 = context.unique_values('secondary_tone_level')
    levels = l1 | l2

    data = event.workbench.get_plugin('psi.data')
    vb = data.find_viewbox('dpgram_viewbox')
    pc = data.find_plot_container('dpgram_container')

    lb, ub = min(f2) / 1.2, max(f2) * 1.2
    pc.freq_lb = lb
    pc.freq_ub = ub
    vb.y_min = min(vb.y_min, min(levels) - 10)
    vb.y_max = max(vb.y_max, max(levels) + 10)

    # This demonstrates how to modify a plugin that may or may not have been
    # loaded by the user.
    try:
        plugin = event.workbench.get_plugin('dpoae_microphone_fft_mixin')
        plugin.manifest.fft_freq_lb = lb
        plugin.manifest.fft_freq_ub = ub
    except ValueError:
        # Plugin is not registered
        pass


def configure_dpoaeio_experiment(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    data = event.workbench.get_plugin('psi.data')
    core = event.workbench.get_plugin('enaml.workbench.core')

    # Check to see that all frequency and level combinations can be acquired.
    # If not, throw out the ones that are above the limits of the acoustic
    # system. This is done via a second selector called "actual" that contains
    # the actual desired sequence of values to test.
    settings = list(context.iter_settings('default', 1))
    primary = controller.get_output(f'primary')
    secondary = controller.get_output(f'secondary')
    outputs = {
        primary: {
            'level': f'primary_tone_level',
            'frequency': f'primary_tone_frequency',
        },
        secondary: {
            'level': f'secondary_tone_level',
            'frequency': f'secondary_tone_frequency',
        },
    }
    good_settings, bad_settings = check_range(outputs, settings)

    if not good_settings:
        m = 'All requested settings exceed the maximum capabilities of the system.'
        raise ValueError(m)

    if bad_settings:
        error_summary = {}
        for setting in bad_settings:
            f2 = setting['secondary_tone_frequency']
            l2 = setting['secondary_tone_level']
            error_summary.setdefault(f2, []).append(l2)
        lines = []
        for f2 in sorted(error_summary.keys()):
            l2_str = ', '.join(str(l) for l in sorted(error_summary[f2]))
            lines.append(f'{f2} Hz: {l2_str}')
        mesg = f'Out of {len(settings)} settings, ' \
            f'{len(bad_settings)} exceed the maximum ' \
            f'capabilities of the system:\n{", ".join(lines)}'
        log.warning(mesg)
        warning(None, 'Settings', mesg)

    log.info('Configuring sequence for actual selector')
    selector = context.get_selector('actual')
    freqs = set()
    for setting in good_settings:
        selector.add_setting(setting)
        f2 = setting['secondary_tone_frequency']
        f1 = setting['primary_tone_frequency']
        dp = 2 * f1 - f2
        freqs |= set((f1, f2, dp))

    kwargs = {'selector': 'actual', 'cycles': 1}
    core.invoke_command('psi.context.initialize', kwargs)

    # Now that we have some of our information regarding the available
    # frequencies and levels, we can go ahead and adjust the FFT plot limits.
    container = data.find_plot_container('microphone_fft_view_container')
    container.freq_lb = min(freqs) / 1.2
    container.freq_ub = max(freqs) * 1.2


enamldef DPGramSimpleManifest(DPGramBaseManifest): manifest:

    id = EXPERIMENT + '_simple'

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        # These are a series of callbacks that customize the default
        # psiexperiment behavior so it works well with DPOAE experiments.
        ExperimentAction:
            event = 'context_initialized'
            command = 'psi.controller.configure_dpoae_gui'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_dpoae_experiment'

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.configure_dpoae_gui'
            handler = configure_dpoaeio_gui
        Command:
            id = 'psi.controller.configure_dpoae_experiment'
            handler = configure_dpoaeio_experiment

    Extension:
        id = manifest.id + '.selectors'
        point = 'psi.context.selectors'

        CFTSSelector:
            # This is the selector shown in the GUI and will represent what the
            # user is hoping for.
            label = 'DPOAE stimuli'
            can_manage = ['f2_level', 'f2_frequency']
            user_managed = False

        SequenceSelector:
            # This is a shadow selector that represents the actual set of
            # frequencies and levels to be tested after verifying the maximum
            # output of the system (using calibration).
            name = 'actual'
            show_widget = False
            persist_settings = False
