import logging
log = logging.getLogger(__name__)

from enaml.widgets.api import ProgressBar
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

import numpy as np

from psiaudio import util
from psiaudio.pipeline import coroutine
from psiaudio import queue

from psi.controller.api import (
    ControllerManifest, ExperimentEvent, ExtractEpochs, ExperimentAction,
    Input, QueuedEpochOutput,
)

from psi.context.api import (BoolParameter, ContextGroup, ContextRow,
                             EnumParameter, Expression, Parameter)
from psi.token.primitives import (
    Cos2Envelope, Gate, SAMTone, SquareWaveEnvelope, Tone
)
from psi.data.sinks.api import BinaryStore, EpochCounter, TextStore
from psi.data.api import (FFTContainer, GroupedEpochFFTPlot, PlotContainer,
                          ResultPlot, ViewBox)

from .cfts_mixins import CFTSSequenceSelector


EXPERIMENT = __name__.rsplit('.', 1)[-1]


def rng_generator(seed, lb, ub):
    rng = np.random.RandomState(seed)
    while True:
        yield rng.uniform(lb, ub)


def configure_experiment(event):
    fc_name = event.parameters['fc_name']
    level_name = event.parameters['level_name']
    polarity_name = event.parameters['polarity_name']

    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    data = event.workbench.get_plugin('psi.data')

    ordering = context.get_value('ordering')
    averages = context.get_value('averages')
    alternate_polarity = context.get_value('alternate_polarity')
    if alternate_polarity and (averages % 2):
        # Round to the nearest multiple of 2
        averages = (round(averages/2) + 1) * 2

    isi = context.get_value('isi')
    isi_jitter = context.get_value('isi_jitter')
    duration = context.get_value('duration')
    delays = rng_generator(123456789, isi, isi + isi_jitter)

    output = controller.get_output('target')
    max_level = {}

    # Configure the queues
    if ordering == 'interleaved':
        output.queue = queue.InterleavedFIFOSignalQueue()
    elif ordering == 'sequential':
        if alternate_polarity:
            output.queue = queue.GroupedFIFOSignalQueue(group_size=2)
        else:
            output.queue = queue.FIFOSignalQueue()
    else:
        raise ValueError('Unrecognized ordering {}'.format(ordering))

    for setting in context.iter_settings('default', 1):
        if not alternate_polarity:
            output.add_setting(setting, averages=averages, iti_duration=delays)
        else:
            setting[polarity_name] = 1
            output.add_setting(setting, averages=averages/2, iti_duration=delays)
            setting[polarity_name] = -1
            output.add_setting(setting, averages=averages/2, iti_duration=delays)
        frequency = setting[fc_name]
        level = setting[level_name]
        max_level[frequency] = max(level, max_level.get(frequency, -np.inf))

    # Then figure out the maximum scaling factor required for that level.
    # Multiply to convert from RMS to peak to peak and add 1% headroom.
    max_sf = {}
    for frequency, level in max_level.items():
        sf = output.calibration.get_sf(frequency, level)
        max_sf[frequency] = sf
    max_sf = max(max_sf.values()) * np.sqrt(2) * 1.01 * 2
    output.channel.expected_range = (-max_sf, max_sf)

    # Set the microphone FFT to show the modulation frequency plus the upper
    # carrier frequency. This will allow us to scan for potential harmonics or
    # other artifacts in the microphone spectrum that may affect EEG.
    fm_range = context.unique_values('fm')
    freq_range = context.unique_values(fc_name)
    mic_fft = data.find_plot_container('microphone_fft_view_container')
    mic_fft.freq_lb = min(fm_range) / 1.2
    mic_fft.freq_ub = max(freq_range) * 1.2


enamldef BaseEFRManifest(ControllerManifest): manifest:

    attr selected_token
    attr fc_name
    attr level_name
    attr polarity_name

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        ExtractEpochs: extract_mic:
            source_name = 'system_microphone'
            epoch_size = getattr(C, f'target_{selected_token}_duration')
            name = 'mic_segment'

        QueuedEpochOutput: output:
            name = 'target'
            target_name = 'system_output'
            auto_decrement = True
            token << workbench.get_plugin('psi.token').get_token(selected_token)
            queue ::
                extract_eeg.subscribe_to_queue(self.queue)
                extract_mic.subscribe_to_queue(self.queue)

        ExtractEpochs: extract_eeg:
            source_name = 'eeg'
            epoch_size = getattr(C, f'target_{selected_token}_duration')
            name = 'erp'
            Input:
                name = 'analyze_efr'

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        CFTSSequenceSelector:
            label = 'EFR stimuli'

        #CFTSSelector:
        #    label = 'EFR stimuli'
        #    user_managed = True
        #    can_manage = ['fm', 'fc']

    Extension:
        id = EXPERIMENT + '.items'
        point = 'psi.context.items'

        ContextGroup:
            name = 'acquisition'
            label = 'Acquisition'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware'

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.configure_experiment'
            handler = configure_experiment

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentEvent:
            name = 'efr_acquired'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_experiment'
            weight = 11
            kwargs = {
                'fc_name': manifest.fc_name,
                'level_name': manifest.level_name,
                'polarity_name': manifest.polarity_name,
            }

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'engines_configured'
            command = 'target.start'
            kwargs = {'delay': 1}

        ExperimentAction:
            # The delay allows us to capture a little more data past the end of
            # the queue (useful for filtering, etc.).
            event = 'erp_queue_end'
            command = 'psi.controller.stop'
            delay = 1

    Extension:
        id = EXPERIMENT + '.data'
        point = 'psi.data.sinks'

        EpochCounter: counter:
            name = 'efr_counter'
            label = 'EFRs acquired'
            source_name = 'erp'
            output_name = 'target'

        TextStore:
            name = 'erp_metadata_store'
            epoch_inputs = ['analyze_efr', 'mic_segment']

        BinaryStore:
            name = 'continuous_store'
            continuous_inputs = ['system_microphone', 'eeg']

    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.status'
        rank = 10


enamldef SAMEFRManifest(BaseEFRManifest):

    selected_token = 'sam_tone'
    fc_name = 'target_sam_tone_fc'
    level_name = 'target_sam_tone_level'
    polarity_name = 'target_sam_tone_polarity'

    Extension:
        id = EXPERIMENT + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: sam_target:
            name = 'sam_tone'
            label = 'SAM tone'
            hide = ['start_time']
            SAMTone:
                hide = ['polarity']
                name = 'sam_tone'

    Extension:
        id = EXPERIMENT + '.context_SAM'
        point = 'psi.context.items'

        Parameter:
            name = 'duration'
            label = 'SAM tone duration (s)'
            default = 200e-3
            group_name = 'target'

        EnumParameter:
            name = 'ordering'
            label = 'Stimulus ordering'
            choices = {
                'sequential': '"sequential"',
                'interleaved': '"interleaved"',
            }
            scope = 'experiment'
            group_name = 'target'

        ContextRow:
            name = 'averages'
            fmt = ['Average', averages, 'trials and alternate polarity?', alt_pol]
            group_name = 'target'

            Parameter: averages:
                name = 'averages'
                default = 250

            BoolParameter: alt_pol:
                name = 'alternate_polarity'
                default = True

        ContextRow:
            name = 'isi'
            fmt = ['ISI', isi, 's with', isi_jitter, 's jitter']
            group_name = 'target'

            Parameter: isi:
                name = 'isi'
                label = 'ISI (sec)'
                default = 100e-3
                scope = 'trial'
                group_name = 'target'

            Parameter: isi_jitter:
                name = 'isi_jitter'
                label = 'ISI jitter (sec)'
                default = 20e-3
                scope = 'trial'
                group_name = 'target'

        Parameter:
            name = 'fm'
            label = 'SAM tone FM (Hz)'
            default = 110
            group_name = 'target'

        Parameter:
            name = 'fc'
            label = 'SAM tone FC (Hz)'
            default = 8e3
            group_name = 'target'

        Parameter:
            name = 'depth'
            label = 'SAM tone depth (frac.)'
            default = 1
            group_name = 'target'

        Expression:
            parameter = 'target_sam_tone_fm'
            expression = 'fm'

        Expression:
            parameter = 'target_sam_tone_depth'
            expression = 'depth'

        Expression:
            parameter = 'target_sam_tone_fc'
            expression = 'imul(fc, 1/1e-3)'

        Expression:
            parameter = 'target_sam_tone_duration'
            expression = 'duration'

        Expression:
            parameter = 'target_sam_tone_rise_time'
            expression = '5e-3'


enamldef RAMEFRManifest(BaseEFRManifest):

    selected_token = 'ram_tone'
    fc_name = 'target_tone_frequency'
    level_name = 'target_tone_level'
    polarity_name = 'target_tone_polarity'

    Extension:
        id = EXPERIMENT + '.tokens_RAM'
        point = 'psi.token.tokens'

        Gate:
            name = 'ram_tone'
            label = 'RAM tone'
            hide = ['start_time']
            SquareWaveEnvelope:
                name = 'mod'
                Tone:
                    hide = ['polarity']

    Extension:
        id = EXPERIMENT + '.context_RAM'
        point = 'psi.context.items'

        EnumParameter:
            name = 'ordering'
            label = 'Stimulus ordering'
            choices = {
                'sequential': '"sequential"',
                'interleaved': '"interleaved"',
            }
            scope = 'experiment'
            group_name = 'target'

        ContextRow:
            name = 'averages'
            fmt = ['Average', averages, 'trials and alternate polarity?', alt_pol]
            group_name = 'target'

            Parameter: averages:
                name = 'averages'
                default = 250

            BoolParameter: alt_pol:
                name = 'alternate_polarity'
                default = True

        ContextRow:
            name = 'isi'
            fmt = ['ISI', isi, 's with', isi_jitter, 's jitter']
            group_name = 'target'

            Parameter: isi:
                name = 'isi'
                label = 'ISI (sec)'
                default = 100e-3
                scope = 'trial'
                group_name = 'target'

            Parameter: isi_jitter:
                name = 'isi_jitter'
                label = 'ISI jitter (sec)'
                default = 20e-3
                scope = 'trial'
                group_name = 'target'

        Parameter:
            name = 'duration'
            label = 'RAM tone duration (s)'
            default = 30
            group_name = 'target'

        Parameter:
            name = 'fm'
            label = 'RAM tone FM (Hz)'
            default = 110
            group_name = 'target'

        Parameter:
            name = 'fc'
            label = 'RAM tone FC (Hz)'
            default = 8e3
            group_name = 'target'

        Parameter:
            name = 'duty_cycle'
            label = 'RAM tone duty cycle (frac.)'
            default = 0.25
            group_name = 'target'

        Expression:
            # Apply a 2.5% Tukey window to the square wave modulation.
            parameter = 'target_mod_alpha'
            expression = '0.025'

        Expression:
            parameter = 'target_tone_phase'
            expression = '-np.pi/2'

        Expression:
            parameter = 'target_mod_fm'
            expression = 'fm'

        Expression:
            parameter = 'target_mod_duty_cycle'
            expression = 'duty_cycle'

        Expression:
            parameter = 'target_tone_frequency'
            expression = 'fc'

        Expression:
            parameter = 'target_ram_tone_duration'
            expression = 'duration'
