import logging
log = logging.getLogger(__name__)

from functools import partial

import numpy as np

from enaml.application import deferred_call
from enaml.widgets.api import DockItem, Container
from enaml.workbench.api import Extension, PluginManifest

from psiaudio.util import db

from psi.context.api import (ContextGroup, ContextRow, Parameter,
                             BoolParameter, EnumParameter)
from psi.controller.api import ExperimentAction
from psi.controller.api import (
    ControllerManifest, Detrend, ExtractEpochs, RejectEpochs, QueuedEpochOutput
)
from psi.data.sinks.api import BinaryStore, TextStore
from psi.token.primitives import Click, Cos2Envelope, Tone


EXPERIMENT = 'abr_base'


enamldef ABRBaseManifest(ControllerManifest): manifest:
    '''
    Defines functionality shared by all applications that perform tone ABRs.

    Subclasses must add a command, `psi.controller.configure_experiment` that
    creates and configures the target queue.
    '''
    #: Name of stimulus as found in the `psi.token` plugin.
    attr token_name = 'tone_burst'

    Extension:
        id = EXPERIMENT + '.store'
        point = 'psi.data.sinks'

        BinaryStore:
            name = 'erp_eeg'
            continuous_inputs = ['eeg', 'system_microphone']

        TextStore:
            epoch_inputs = ['erp']

    Extension:
        id = EXPERIMENT + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: tone_burst:
            name = 'tone_burst'
            label = 'tone'
            hide = ['start_time']
            Tone:
                hide = ['polarity', 'phase']

        Click: click:
            name = 'click'
            label = 'click'
            hide = ['polarity']

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        QueuedEpochOutput: output:
            name = 'target'
            label = 'target'
            target_name = 'system_output'
            token = workbench.get_plugin('psi.token').get_token(token_name)
            configurable = False
            queue ::
                # Once the queue has been configured in one of the
                # subclasses, hook it up to the ExtractEpochs input so that
                # they communicate properly.
                extract.subscribe_to_queue(self.queue)
            complete ::
                controller = workbench.get_plugin('psi.controller')
                deferred_call(controller.invoke_actions, output.name + '_end')

        ExtractEpochs: extract:
            name = 'erp'
            source_name = 'eeg_filtered'
            epoch_size = 8.5e-3
            Detrend:
                name = 'erp_detrend'
                mode = C.detrend_mode
                RejectEpochs:
                    name = 'valid_erp'
                    threshold = C.lookup('reject_threshold', True)
                    mode = C.reject_mode

    Extension:
        id = EXPERIMENT + '.abr.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware'

        ContextRow:
            name = 'artifact_reject'
            group_name = 'acquisition'
            fmt = ['Epochs', detrend_mode, 'detrend. Reject if',
                   reject_mode, '>', reject_threshold]

            EnumParameter: detrend_mode:
                name = 'detrend_mode'
                label = 'Detrend mode'
                choices = {
                    'Do not': 'None',
                    'Constant': '"constant"',
                    'Linear': '"linear"',
                }
                default = 'None'
                scope = 'experiment'

            EnumParameter: reject_mode:
                name = 'reject_mode'
                label = 'Reject mode'
                compact_label = 'Rej. mode'
                choices = {
                    'absolute value': '"absolute value"',
                    'amplitude (max-min)': '"amplitude"',
                }
                default = 'absolute value'
                scope = 'experiment'

            Parameter: reject_threshold:
                name = 'reject_threshold'
                label = 'Reject threshold'
                compact_label = 'Th'
                default = 2.5
                scope = 'experiment'

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_experiment'
            weight = 11

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'engines_configured'
            command = 'target.start'
            kwargs = {'delay': 1}

        ExperimentAction:
            event = 'valid_erp_acquired'
            command = 'target.decrement_key'

        ExperimentAction:
            event = 'target_end'
            command = 'psi.controller.stop'
