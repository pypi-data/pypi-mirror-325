from numba import jit, int64, float64
from kolya import parameters
from kolya import Q2moments_SM as SM
import math

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def XrE(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of rEtilde for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((8*(-2+21*Q2-39*Q2**2+31*Q2**3-30*Q2**4+39*Q2**5-29*Q2**6+9*Q2**7
        +6*r**2-39*Q2*r**2-39*Q2**2*r**2+12*Q2**3*r**2-42*Q2**4*r**2+57*Q2**5*r**2
        -45*Q2**6*r**2-15*r**4+45*Q2*r**4+42*Q2**2*r**4+66*Q2**3*r**4+15*Q2**4*r**4
        +81*Q2**5*r**4+49*r**6-18*Q2*r**6-66*Q2**2*r**6-50*Q2**3*r**6-45*Q2**4*r**6
        -96*r**8-93*Q2*r**8-75*Q2**2*r**8-45*Q2**3*r**8+96*r**10+129*Q2*r**10
        +81*Q2**2*r**10-47*r**12-45*Q2*r**12+9*r**14+12*logu*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))/(9*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))  
    if (dQ2 == 0 and dr == 0 and i==1):
        return    ((4*(-323+1269*Q2-1704*Q2**2+868*Q2**3-30*Q2**4-222*Q2**5+301*Q2**6
        -231*Q2**7+72*Q2**8+1309*r**2-1320*Q2*r**2-1524*Q2**2*r**2+760*Q2**3*r**2
        +75*Q2**4*r**2-279*Q2**5*r**2+430*Q2**6*r**2-351*Q2**7*r**2-1944*r**4-1404*Q2*r**4
        -1473*Q2**2*r**4+267*Q2**3*r**4+417*Q2**4*r**4+156*Q2**5*r**4+621*Q2**6*r**4
        +1063*r**6+1755*Q2*r**6+12*Q2**2*r**6-443*Q2**3*r**6-495*Q2**4*r**6-387*Q2**5*r**6
        +340*r**8-195*Q2*r**8-198*Q2**2*r**8-95*Q2**3*r**8-135*Q2**4*r**8-837*r**10
        -354*Q2*r**10+96*Q2**2*r**10+243*Q2**3*r**10+556*r**12+330*Q2*r**12-9*Q2**2*r**12
        -191*r**14-81*Q2*r**14+27*r**16+300*logu*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)+300*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(45*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     ((-4*(722-2646*Q2+3366*Q2**2-1612*Q2**3+120*Q2**4-12*Q2**5+176*Q2**6
        -246*Q2**7+192*Q2**8-60*Q2**9-2653*r**2+861*Q2*r**2+5805*Q2**2*r**2
        -3283*Q2**3*r**2+75*Q2**4*r**2-57*Q2**5*r**2+209*Q2**6*r**2-345*Q2**7*r**2
        +288*Q2**8*r**2+3407*r**4+5706*Q2*r**4+5511*Q2**2*r**4-88*Q2**3*r**4-213*Q2**4*r**4
        -300*Q2**5*r**4-139*Q2**6*r**4-504*Q2**7*r**4-1663*r**6-3081*Q2*r**6-270*Q2**2*r**6
        -10*Q2**3*r**6+243*Q2**4*r**6+387*Q2**5*r**6+324*Q2**6*r**6+437*r**8-990*Q2*r**8
        +240*Q2**2*r**8+428*Q2**3*r**8+135*Q2**4*r**8+72*Q2**5*r**8-847*r**10-189*Q2*r**10
        -411*Q2**2*r**10-307*Q2**3*r**10-180*Q2**4*r**10+953*r**12+534*Q2*r**12
        +195*Q2**2*r**12+72*Q2**3*r**12-457*r**14-231*Q2*r**14-36*Q2**2*r**14+113*r**16
        +36*Q2*r**16-12*r**18-480*logu*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)
        -1560*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+240*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(45*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     ((-2*(16549-58887*Q2+72747*Q2**2-33489*Q2**3+2205*Q2**4+441*Q2**5-273*Q2**6
        +2043*Q2**7-2916*Q2**8+2300*Q2**9-720*Q2**10-42339*r**2-63924*Q2*r**2
        +245871*Q2**2*r**2-136668*Q2**3*r**2+8715*Q2**4*r**2-126*Q2**5*r**2-651*Q2**6*r**2
        +2334*Q2**7*r**2-4032*Q2**8*r**2+3420*Q2**9*r**2-41892*r**4+408012*Q2*r**4
        -30927*Q2**2*r**4+80289*Q2**3*r**4-13686*Q2**4*r**4-2724*Q2**5*r**4-3333*Q2**6*r**4
        -1719*Q2**7*r**4-5940*Q2**8*r**4+262170*r**6-216006*Q2*r**6-121353*Q2**2*r**6
        +115922*Q2**3*r**6+828*Q2**4*r**6+2820*Q2**5*r**6+4459*Q2**6*r**6+3870*Q2**7*r**6
        -364728*r**8-240870*Q2*r**8-249873*Q2**2*r**8-1167*Q2**3*r**8+2715*Q2**4*r**8
        +1407*Q2**5*r**8+630*Q2**6*r**8+230916*r**10+176022*Q2*r**10+8805*Q2**2*r**10
        +2736*Q2**3*r**10-2415*Q2**4*r**10-1890*Q2**5*r**10-72786*r**12-11676*Q2*r**12
        -7869*Q2**2*r**12-833*Q2**3*r**12+630*Q2**4*r**12+17142*r**14+9558*Q2*r**14
        +2229*Q2**2*r**14+90*Q2**3*r**14-6045*r**16-2499*Q2*r**16-270*Q2**2*r**16
        +1103*r**18+270*Q2*r**18-90*r**20-9240*logu*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)-60480*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)
        +37800*logu*r**4*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+42000*logu*r**6*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(315*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     ((-4*(11813-41319*Q2+50139*Q2**2-22593*Q2**3+1470*Q2**4+252*Q2**5+84*Q2**6
        -144*Q2**7+873*Q2**8-1265*Q2**9+1005*Q2**10-315*Q2**11-8635*r**2-132492*Q2*r**2
        +290151*Q2**2*r**2-155604*Q2**3*r**2+11550*Q2**4*r**2+1050*Q2**5*r**2-168*Q2**6*r**2
        -276*Q2**7*r**2+969*Q2**8*r**2-1730*Q2**9*r**2+1485*Q2**10*r**2-225783*r**4
        +775269*Q2*r**4-420540*Q2**2*r**4+239088*Q2**3*r**4-32652*Q2**4*r**4-4764*Q2**5*r**4
        -1236*Q2**6*r**4-1392*Q2**7*r**4-765*Q2**8*r**4-2565*Q2**9*r**4+641577*r**6
        +99648*Q2*r**6-1222884*Q2**2*r**6+777364*Q2**3*r**6-21756*Q2**4*r**6+156*Q2**5*r**6
        +1196*Q2**6*r**6+1896*Q2**7*r**6+1683*Q2**8*r**6-546078*r**8-1391670*Q2*r**8
        -1410414*Q2**2*r**8+238654*Q2**3*r**8+1230*Q2**4*r**8+1140*Q2**5*r**8+560*Q2**6*r**8
        +216*Q2**7*r**8-76734*r**10+289128*Q2*r**10-518334*Q2**2*r**10-3180*Q2**3*r**10
        -162*Q2**4*r**10-966*Q2**5*r**10-756*Q2**6*r**10+330162*r**12+409962*Q2*r**12
        +10404*Q2**2*r**12+1784*Q2**3*r**12+252*Q2**5*r**12-135342*r**14-13344*Q2*r**14
        -4980*Q2**2*r**14-340*Q2**3*r**14+11673*r**16+5757*Q2*r**16+939*Q2**2*r**16
        +27*Q2**3*r**16-3047*r**18-1020*Q2*r**18-81*Q2**2*r**18+421*r**20+81*Q2*r**20
        -27*r**22-5880*logu*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-63840*logu*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+75600*logu*r**4*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)+325920*logu*r**6*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)
        +71400*logu*r**8*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(315*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def XrG(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of rG for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     (((2*(32+Q2*(-77+Q2*(24+Q2*(-5+2*(7-3*Q2)*Q2)))-74*r**2+Q2*(
        -25+Q2*(-4+Q2*(-11+18*Q2)))*r**2+(60+11*Q2-12*Q2**3)*r**4-(32
        +Q2*(23+12*Q2))*r**6+2*(10+9*Q2)*r**8-6*r**10)-96*logu*sqrtQ2))/(9*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (((827-48*Q2**6+6*Q2**5*(18+23*r**2)-2*Q2**4*(20+37*r**2+45*r**4)
        -Q2**3*(-115+24*r**2+19*r**4+60*r**6)+Q2**2*(345-199*r**2-17*r**4
        -69*r**6+60*r**8)+Q2*(-1487-1484*r**2+1416*r**4+146*r**6-49*r**8
        +18*r**10)-660*logu*sqrtQ2+r**2*(-1957+190*r**4-365*r**6+103*r**8
        -18*r**10-960*logu*sqrtQ2+20*r**2*(61+45*logu*sqrtQ2))))/(45*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     (((-40*Q2**7+8*Q2**6*(11+14*r**2)-Q2**5*(33+55*r**2+72*r**4)-Q2**4*(
        -75+16*r**2+19*r**4+40*r**6)+2*Q2**2*(210+247*r**2-426*r**4-39*r**6
        +8*r**8)+2*Q2**3*(75-68*r**2-27*r**6+20*r**8)+Q2*(-1+r)*(1+r)*(2213
        +8706*r**2+5446*r**4+226*r**6-39*r**8+8*r**10)-(-1+r**2)*(1373+1940*r**6
        +375*r**8-63*r**10+8*r**12-840*logu*sqrtQ2-60*r**4*(57+44*logu*sqrtQ2)
        -3*r**2*(71+1600*logu*sqrtQ2))))/(45*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((27373-480*Q2**8+40*Q2**7*(26+33*r**2)-8*Q2**6*(49+76*r**2+105*r**4)
        -Q2**5*(-777+160*r**2+237*r**4+420*r**6)+2*Q2**3*(1190+1047*r**2-2790*r**4
        -347*r**6+60*r**8)+Q2**4*(1295-1441*r**2+101*r**4-615*r**6+420*r**8)
        +2*Q2**2*(3570+18617*r**2-16011*r**4-14109*r**6-527*r**8+60*r**10)
        +Q2*(-41653-262898*r**2-50525*r**4+385260*r**6+166685*r**8+5258*r**10
        -587*r**12+60*r**14)-14280*logu*sqrtQ2+r**2*(39659-72723*r**8-7259*r**10
        +767*r**12-60*r**14-141120*logu*sqrtQ2+175*r**6*(473+432*logu*sqrtQ2)
        -63*r**2*(3859+600*logu*sqrtQ2)+35*r**4*(4931+6240*logu*sqrtQ2))))/(630*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     ((-2*(-8989+105*Q2**9-15*Q2**8*(15+19*r**2)+5*Q2**7*(17+25*r**2+36*r**4)
        +2*Q2**6*(-77+15*r**2+26*r**4+42*r**6)+Q2**5*(-231+289*r**2-37*r**4
        +129*r**6-84*r**8)-2*Q2**4*(175+111*r**2-435*r**4-58*r**6+9*r**8)
        +2*Q2**3*(-350-1861*r**2+2034*r**4+1478*r**6+94*r**8-9*r**10)-2*Q2**2*(1050
        +12011*r**2+1063*r**4-21252*r**6-6620*r**8-121*r**10+9*r**12)+Q2*(13189
        +147868*r**2+180486*r**4-262670*r**6-332264*r**8-77688*r**10-1682*r**12
        +130*r**14-9*r**16)+4200*logu*sqrtQ2+r**2*(-49501+71400*logu*sqrtQ2
        +2*r**2*(61921+55440*logu*sqrtQ2)+r**4*(53732-147840*logu*sqrtQ2+r**4*(32564
        +39326*r**2+2108*r**4-157*r**6+9*r**8-32760*logu*sqrtQ2)-14*r**2*(13781
        +12300*logu*sqrtQ2)))))/(315*sqrtQ2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def XsE(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of sEtilde for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     (((2*(25+Q2*(-43+Q2*(6+(-1+Q2)*Q2*(-2+9*Q2)))-61*r**2
        -Q2*(38+Q2*(20+Q2*(10+27*Q2)))*r**2+2*(18+Q2*(17+3*Q2*(4+3*Q2)))*r**4
        +2*(10+Q2*(13+9*Q2))*r**6-(29+27*Q2)*r**8+9*r**10)-48*logu*sqrtQ2))/(9*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (((567+72*Q2**6+125*r**4+305*r**8-152*r**10+27*r**12-3*Q2**5*(29
        +69*r**2)+Q2**4*(15-74*r**2+135*r**4)+2*Q2**3*(15-62*r**2+88*r**4
        +45*r**6)+Q2**2*(210-54*r**2+148*r**4+66*r**6-90*r**8)-Q2*(927+2149*r**2
        +344*r**4-16*r**6-71*r**8+27*r**10)-360*logu*sqrtQ2-8*r**2*(109+165*logu*sqrtQ2)))/(45*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     ((-4*(-227-15*Q2**7+6*Q2**6*(3+7*r**2)-3*Q2**5*(1-5*r**2+9*r**4)
        -Q2**4*(5-24*r**2+34*r**4+15*r**6)+Q2**2*(-60-266*r**2+48*r**4-28*r**6
        +6*r**8)+Q2**3*(-25+14*r**2-20*r**4-14*r**6+15*r**8)+Q2*(347+1987*r**2
        +1235*r**4+10*r**6+35*r**8-17*r**10+3*r**12)+120*logu*sqrtQ2+r**2*(
        -226+1080*logu*sqrtQ2+r**2*(1178-825*r**2+175*r**4-98*r**6+26*r**8
        -3*r**10+600*logu*sqrtQ2))))/(45*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((8935+360*Q2**8-10*Q2**7*(43+99*r**2)+Q2**6*(70-356*r**2+630*r**4)
        +Q2**5*(105-559*r**2+771*r**4+315*r**6)+Q2**4*(455-370*r**2+332*r**4
        +330*r**6-315*r**8)+Q2**3*(700+3270*r**2-1338*r**4+482*r**6-90*r**8)
        +Q2**2*(2100+22450*r**2+8172*r**4-3144*r**6+752*r**8-90*r**10)-Q2*(13135
        +139649*r**2+201893*r**4+12963*r**6-6287*r**8+1903*r**10-421*r**12
        +45*r**14)-4200*logu*sqrtQ2+r**2*(44804+45500*r**6-13860*r**8+3346*r**10
        -556*r**12+45*r**14-68040*logu*sqrtQ2+140*r**4*(17+30*logu*sqrtQ2)
        -126*r**2*(719+900*logu*sqrtQ2))))/(315*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (((11679+315*Q2**9-15*Q2**8*(25+57*r**2)+10*Q2**7*(6-31*r**2
        +54*r**4)+Q2**6*(84-482*r**2+646*r**4+252*r**6)+Q2**5*(336-342*r**2
        +206*r**4+282*r**6-252*r**8)+2*Q2**4*(210+991*r**2-638*r**4+154*r**6
        -27*r**8)+Q2**3*(840+9682*r**2+1716*r**4-3048*r**6+524*r**8-54*r**10)
        +Q2**2*(2520+48042*r**2+76270*r**4-26028*r**6-4836*r**8+686*r**10-54*r**12)
        -Q2*(16719+285766*r**2+776150*r**4+291638*r**6-195030*r**8-18434*r**10
        +2734*r**12-370*r**14+27*r**16)-5040*logu*sqrtQ2+r**2*(123049-9604*r**8
        -28224*r**10+3952*r**12-451*r**14+27*r**16-127680*logu*sqrtQ2-2352*r**4*(137
        +60*logu*sqrtQ2)+196*r**6*(1513+600*logu*sqrtQ2)-64*r**2*(1168+6615*logu*sqrtQ2))))/(315*sqrtQ2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def XsB(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of sB for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     ((-2*(5*Q2**5-3*Q2*r**2*(-1+r**2)**2*(1+5*r**2)+(-1+r**2)**4*(1+5*r**2)
        -Q2**4*(11+15*r**2)+Q2**3*(3+11*r**2+10*r**4)+2*Q2**2*(-2+r**2-4*r**4
        +5*r**6)))/(3*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (((-24*Q2**6+Q2**5*(51+69*r**2)-Q2**4*(15+44*r**2+45*r**4)+Q2**3*(9
        -4*r**2+17*r**4-30*r**6)+Q2**2*(-21-45*r**2+7*r**4-51*r**6+30*r**8)
        +Q2*(108+461*r**2+376*r**4+34*r**6-28*r**8+9*r**10)+36*(-2+logu*sqrtQ2)
        +r**2*(19+264*logu*sqrtQ2+r**2*(107+54*r**2-154*r**4+55*r**6-9*r**8
        +180*logu*sqrtQ2))))/(9*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     (((-777-100*Q2**7+8*Q2**6*(26+35*r**2)+2*Q2**3*(5-r**2+5*r**4)*(
        -7-17*r**2+10*r**4)-Q2**5*(63+163*r**2+180*r**4)+Q2**4*(25-6*r**2
        +45*r**4-100*r**6)+2*Q2**2*(-90-783*r**2-304*r**4-103*r**6+20*r**8)
        +Q2*(1137+10139*r**2+13284*r**4+5344*r**6+439*r**8-123*r**10+20*r**12)
        +360*logu*sqrtQ2+8*r**2*(-331+645*logu*sqrtQ2)+r**4*(5505-815*r**4
        -888*r**6+183*r**8-20*r**10+6960*logu*sqrtQ2+60*r**2*(-9+44*logu*sqrtQ2))))/(45*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((-5867-400*Q2**8+20*Q2**7*(41+55*r**2)+Q2**5*(77+2*r**2+135*r**4
        -350*r**6)+2*Q2**3*(-210-1973*r**2-428*r**4-295*r**6+50*r**8)+Q2**4*(
        -245-551*r**2+335*r**4-705*r**6+350*r**8)+2*Q2**2*(-630-10723*r**2
        -13269*r**4-3543*r**6-445*r**8+50*r**10)+Q2*(8387+127864*r**2+303319*r**4
        +191494*r**6+51669*r**8+3152*r**10-495*r**12+50*r**14)-4*Q2**6*(63
        +25*r**2*(6+7*r**2))+2520*logu*sqrtQ2+r**2*(-51463-14833*r**8-4837*r**10
        +645*r**12-50*r**14+58800*logu*sqrtQ2+175*r**6*(-197+144*logu*sqrtQ2)
        +525*r**4*(127+176*logu*sqrtQ2)+105*r**2*(421+1560*logu*sqrtQ2))))/(210*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (((-525*Q2**9+15*Q2**8*(71+95*r**2)-10*Q2**7*(33+74*r**2+90*r**4)
        +Q2**6*(84+26*r**2+146*r**4-420*r**6)+Q2**4*(-420-4118*r**2-392*r**4
        -572*r**6+90*r**8)+Q2**5*(-294-660*r**2+508*r**4-876*r**6+420*r**8)
        +2*Q2**3*(-420-7799*r**2-8970*r**4-1332*r**6-466*r**8+45*r**10)+2*Q2**2*(
        -1260-34539*r**2-98693*r**4-43698*r**6-10674*r**8-601*r**10+45*r**12)
        +Q2*(17541+407086*r**2+1613294*r**4+1738538*r**6+626658*r**8+137302*r**10
        +6262*r**12-646*r**14+45*r**16)+9*(-1389+560*logu*sqrtQ2)+r**2*(-196543
        -50232*r**10-8380*r**12+781*r**14-45*r**16+173040*logu*sqrtQ2+280*r**6*(
        -241+1020*logu*sqrtQ2)+28*r**8*(-5483+2340*logu*sqrtQ2)+84*r**4*(7291
        +10800*logu*sqrtQ2)+40*r**2*(-3113+20916*logu*sqrtQ2))))/(315*sqrtQ2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def XsqB(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of sqB for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     (((-25+Q2*(49+Q2*(-30+Q2*(-20+Q2*(-1+3*Q2))))+73*r**2+Q2*(8
        -Q2*(2+Q2)*(-10+9*Q2))*r**2+2*(-42-14*Q2+3*Q2**3)*r**4+2*(26+Q2*(14
        +3*Q2))*r**6-(19+9*Q2)*r**8+3*r**10+24*logu*sqrtQ2))/(36*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (((39+24*Q2**6-3*Q2**5*(3+23*r**2)+Q2**4*(-135-58*r**2+45*r**4)
        +2*Q2**3*(-60+56*r**2+11*r**4+15*r**6)+Q2**2*(372*r**2+26*r**4+72*r**6
        -30*r**8)-Q2*(39+1823*r**2+3148*r**4+328*r**6-67*r**8+9*r**10)+r**2*(866
        +60*r**4+565*r**6-94*r**8+9*r**10-840*logu*sqrtQ2-5*r**2*(289+360*logu*sqrtQ2))))/(360*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     (((251+10*Q2**7+1925*r**8+324*r**10-31*r**12+2*r**14-4*Q2**6*(1
        +7*r**2)+Q2**5*(-51-23*r**2+18*r**4)+Q2**4*(-35+38*r**2+11*r**4+10*r**6)
        +2*Q2**3*(10+64*r**2+2*r**4+13*r**6-5*r**8)+Q2**2*(60+698*r**2+880*r**4
        +46*r**6-4*r**8)-Q2*(371+4349*r**2+9826*r**4+5396*r**6+241*r**8-25*r**10
        +2*r**12)-120*logu*sqrtQ2+4*r**2*(389-510*logu*sqrtQ2)-10*r**6*(265
        +264*logu*sqrtQ2)-3*r**4*(459+1760*logu*sqrtQ2)))/(180*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((7526+120*Q2**8-10*Q2**7*(5+33*r**2)+Q2**6*(-574-268*r**2+210*r**4)
        +Q2**5*(-336+397*r**2+138*r**4+105*r**6)+Q2**4*(280+1363*r**2+r**4
        +285*r**6-105*r**8)+Q2**3*(560+5808*r**2+5994*r**4+436*r**6-30*r**8)
        +Q2**2*(1680+29048*r**2+66690*r**4+29766*r**6+526*r**8-30*r**10)-Q2*(10886
        +175639*r**2+581926*r**4+587841*r**6+171866*r**8+4265*r**10-278*r**12
        +15*r**14)-3360*logu*sqrtQ2+r**2*(74941+82299*r**8+5159*r**10-323*r**12
        +15*r**14-78120*logu*sqrtQ2+63*r**2*(271-4800*logu*sqrtQ2)+175*r**6*(61
        -432*logu*sqrtQ2)-35*r**4*(5639+8760*logu*sqrtQ2))))/(2520*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (((12093+105*Q2**9-15*Q2**8*(3+19*r**2)+10*Q2**7*(-48-23*r**2+18*r**4)
        +2*Q2**6*(-126+157*r**2+61*r**4+42*r**6)+Q2**5*(252+1098*r**2-26*r**4
        +234*r**6-84*r**8)+Q2**4*(420+4234*r**2+3892*r**4+316*r**6-18*r**8)
        +2*Q2**3*(420+7507*r**2+16158*r**4+6684*r**6+194*r**8-9*r**10)+Q2**2*(2520
        +65694*r**2+253274*r**4+241356*r**6+55812*r**8+442*r**10-18*r**12)
        -Q2*(17133+392570*r**2+1898146*r**4+3030802*r**6+1763046*r**8+322418*r**10
        +5066*r**12-230*r**14+9*r**16)-5040*logu*sqrtQ2+r**2*(191651-164640*logu*sqrtQ2
        +r**2*(315208+175224*r**8+5792*r**10-257*r**12+9*r**14-947520*logu*sqrtQ2
        +28*r**6*(12019-4680*logu*sqrtQ2)-2016*r**2*(273+790*logu*sqrtQ2)-28*r**4*(17353
        +31200*logu*sqrtQ2)))))/(2520*sqrtQ2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx1(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X1 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     ((4*(72*Q2**9-28*Q2**8*(13+18*r**2)+(-1+r**2)**7*(7+29*r**2+72*r**4)
        +Q2**7*(775+1403*r**2+1440*r**4)-Q2*(-1+r**2)**5*(49+116*r**2+451*r**4
        +504*r**6)-Q2**6*(921+1434*r**2+1249*r**4+2016*r**6)+Q2**5*(673+735*r**2
        +349*r**4-1585*r**6+1008*r**8)+Q2**2*(-1+r**2)**3*(105+237*r**2+341*r**4
        +1517*r**6+1440*r**8)+Q2**4*(-323-140*r**2-140*r**4-1240*r**6+3035*r**8
        +1008*r**10)-Q2**3*(-151+29*r**2+1100*r**6-3025*r**8+31*r**10+2016*r**12)))/(15*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    ((-4*(-494+3310*Q2-8825*Q2**2+11695*Q2**3-8465*Q2**4+5503*Q2**5-7745*Q2**6
        +10735*Q2**7-9215*Q2**8+4365*Q2**9-864*Q2**10+2950*r**2-10700*Q2*r**2
        +9585*Q2**2*r**2+4330*Q2**3*r**2-6365*Q2**4*r**2+1860*Q2**5*r**2-7235*Q2**6*r**2
        +16030*Q2**7*r**2-16395*Q2**8*r**2+5940*Q2**9*r**2-7610*r**4+11190*Q2*r**4
        -1965*Q2**2*r**4+5845*Q2**3*r**4-3150*Q2**4*r**4-30*Q2**5*r**4-2225*Q2**6*r**4
        +14205*Q2**7*r**4-16740*Q2**8*r**4+12070*r**6-6020*Q2*r**6+13705*Q2**2*r**6
        +17680*Q2**3*r**6+12430*Q2**4*r**6+10720*Q2**5*r**6+17265*Q2**6*r**6+23760*Q2**7*r**6
        -15890*r**8+8470*Q2*r**8-10875*Q2**2*r**8-20195*Q2**3*r**8-28025*Q2**4*r**8
        -33765*Q2**5*r**8-15120*Q2**6*r**8+20818*r**10-6720*Q2*r**10-6405*Q2**2*r**10
        +4390*Q2**3*r**10+10335*Q2**4*r**10-1512*Q2**5*r**10-23450*r**12-7910*Q2*r**12
        +2545*Q2**2*r**12+5295*Q2**3*r**12+7560*Q2**4*r**12+18610*r**14+15100*Q2*r**14
        +4395*Q2**2*r**14-2160*Q2**3*r**14-9320*r**16-8340*Q2*r**16-2160*Q2**2*r**16
        +2640*r**18+1620*Q2*r**18-324*r**20+840*logu*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(5/2)))/(225*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     ((-2*(-7733+44545*Q2-103790*Q2**2+123250*Q2**3-76220*Q2**4+20296*Q2**5
        +3970*Q2**6-12470*Q2**7+17605*Q2**8-15285*Q2**9+7272*Q2**10-1440*Q2**11
        +44552*r**2-117205*Q2*r**2+26470*Q2**2*r**2+159500*Q2**3*r**2-146710*Q2**4*r**2
        +34066*Q2**5*r**2+1490*Q2**6*r**2-10720*Q2**7*r**2+25630*Q2**8*r**2-26865*Q2**9*r**2
        +9792*Q2**10*r**2-104065*r**4+28330*Q2*r**4+112320*Q2**2*r**4+116300*Q2**3*r**4
        -123620*Q2**4*r**4+990*Q2**5*r**4-1120*Q2**6*r**4-2600*Q2**7*r**4+22905*Q2**8*r**4
        -27360*Q2**9*r**4+120200*r**6+171790*Q2*r**6+84730*Q2**2*r**6+199910*Q2**3*r**6
        +11860*Q2**4*r**6+20710*Q2**5*r**6+16330*Q2**6*r**6+26730*Q2**7*r**6+38880*Q2**8*r**6
        -55210*r**8-183100*Q2*r**8-89480*Q2**2*r**8+12170*Q2**3*r**8-28540*Q2**4*r**8
        -40310*Q2**5*r**8-50310*Q2**6*r**8-25920*Q2**7*r**8-30424*r**10+51100*Q2*r**10
        -41670*Q2**2*r**10-22120*Q2**3*r**10-4190*Q2**4*r**10+10296*Q2**5*r**10+68486*r**12
        +22390*Q2*r**12+27880*Q2**2*r**12+32920*Q2**3*r**12+22140*Q2**4*r**12+12096*Q2**5*r**12
        -59560*r**14-37870*Q2*r**14-28250*Q2**2*r**14-19530*Q2**3*r**14-8640*Q2**4*r**14
        +34175*r**16+28795*Q2*r**16+14670*Q2**2*r**16+4320*Q2**3*r**16-13040*r**18
        -10215*Q2*r**18-2880*Q2**2*r**18+2907*r**20+1440*Q2*r**20-288*r**22+5880*logu*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)+13080*logu*r**2*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(5/2)))/(225*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     ((-2*(-50025+279525*Q2-632550*Q2**2+730550*Q2**3-439020*Q2**4+117400*Q2**5
        -6510*Q2**6+8970*Q2**7-24375*Q2**8+34855*Q2**9-30480*Q2**10+14540*Q2**11
        -2880*Q2**12+206781*r**2-219690*Q2*r**2-1117620*Q2**2*r**2+2541170*Q2**3*r**2
        -1890890*Q2**4*r**2+500178*Q2**5*r**2-18480*Q2**6*r**2+2190*Q2**7*r**2-19815*Q2**8*r**2
        +49840*Q2**9*r**2-53104*Q2**10*r**2+19440*Q2**11*r**2-200265*r**4-1310925*Q2*r**4
        +1384530*Q2**2*r**4+2171360*Q2**3*r**4-2211790*Q2**4*r**4+290780*Q2**5*r**4
        -1610*Q2**6*r**4-3400*Q2**7*r**4-4165*Q2**8*r**4+44765*Q2**9*r**4-54000*Q2**10*r**4
        -331315*r**6+1860140*Q2*r**6+1763330*Q2**2*r**6+2399170*Q2**3*r**6-1000520*Q2**4*r**6
        +47240*Q2**5*r**6+43250*Q2**6*r**6+32650*Q2**7*r**6+51235*Q2**8*r**6+76680*Q2**9*r**6
        +910790*r**8+269030*Q2*r**8-127890*Q2**2*r**8+1685380*Q2**3*r**8-46120*Q2**4*r**8
        -65460*Q2**5*r**8-81760*Q2**6*r**8-95810*Q2**7*r**8-52200*Q2**8*r**8-738070*r**10
        -1404480*Q2*r**10-1145550*Q2**2*r**10+77830*Q2**3*r**10+7270*Q2**4*r**10
        +13510*Q2**5*r**10+23590*Q2**6*r**10+2880*Q2**7*r**10+91238*r**12+419930*Q2*r**12
        -208810*Q2**2*r**12-77360*Q2**3*r**12+210*Q2**4*r**12+25648*Q2**5*r**12+20160*Q2**6*r**12
        +247250*r**14+204140*Q2*r**14+145350*Q2**2*r**14+60790*Q2**3*r**14-1940*Q2**4*r**14
        -12240*Q2**5*r**14-201685*r**16-151275*Q2*r**16-84000*Q2**2*r**16-23210*Q2**3*r**16
        +720*Q2**4*r**16+86585*r**18+68810*Q2*r**18+26810*Q2**2*r**18+3600*Q2**3*r**18
        -25405*r**20-17005*Q2*r**20-3600*Q2**2*r**20+4481*r**22+1800*Q2*r**22
        -360*r**24+29400*logu*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)+181440*logu*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)+88200*logu*r**4*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(5/2)))/(525*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     ((-4*(-150509+828985*Q2-1849070*Q2**2+2103870*Q2**3-1243035*Q2**4+324753*Q2**5
        -12495*Q2**6-3855*Q2**7+12030*Q2**8-31480*Q2**9+45431*Q2**10-39925*Q2**11
        +19080*Q2**12-3780*Q2**13+204184*r**2+1820515*Q2*r**2-9142650*Q2**2*r**2
        +14441040*Q2**3*r**2-9883950*Q2**4*r**2+2696997*Q2**5*r**2-124320*Q2**6*r**2
        -9885*Q2**7*r**2+2250*Q2**8*r**2-24550*Q2**9*r**2+64094*Q2**10*r**2-69105*Q2**11*r**2
        +25380*Q2**12*r**2+1705624*r**4-9861795*Q2*r**4+4239270*Q2**2*r**4+16882290*Q2**3*r**4
        -15742380*Q2**4*r**4+3061527*Q2**5*r**4-22995*Q2**6*r**4-690*Q2**7*r**4-5160*Q2**8*r**4
        -4690*Q2**9*r**4+57759*Q2**10*r**4-70200*Q2**11*r**4-6142164*r**6+6243075*Q2*r**6
        +10934580*Q2**2*r**6+17169170*Q2**3*r**6-12063970*Q2**4*r**6+700523*Q2**5*r**6
        +40780*Q2**6*r**6+54430*Q2**7*r**6+42790*Q2**8*r**6+65400*Q2**9*r**6+99576*Q2**10*r**6
        +8593875*r**8+8320350*Q2*r**8+7895040*Q2**2*r**8+16222790*Q2**3*r**8-2318890*Q2**4*r**8
        +52755*Q2**5*r**8-64745*Q2**6*r**8-103415*Q2**7*r**8-121650*Q2**8*r**8-68580*Q2**9*r**8
        -5903892*r**10-8702130*Q2*r**10-9064440*Q2**2*r**10+3876050*Q2**3*r**10
        -234150*Q2**4*r**10-69477*Q2**5*r**10+6580*Q2**6*r**10+30855*Q2**7*r**10
        +5940*Q2**8*r**10+2088312*r**12+368970*Q2*r**12-2492280*Q2**2*r**12+460750*Q2**3*r**12
        +137380*Q2**4*r**12+49777*Q2**5*r**12+33915*Q2**6*r**12+23760*Q2**7*r**12
        -839928*r**14+476550*Q2*r**14-815340*Q2**2*r**14-288410*Q2**3*r**14-59510*Q2**4*r**14
        -19563*Q2**5*r**14-15120*Q2**6*r**14+793113*r**16+770325*Q2*r**16+417150*Q2**2*r**16
        +122260*Q2**3*r**16+14925*Q2**4*r**16+3348*Q2**5*r**16-472000*r**18-355825*Q2*r**18
        -152110*Q2**2*r**18-29850*Q2**3*r**18-1620*Q2**4*r**18+153776*r**20+109145*Q2*r**20
        +33090*Q2**2*r**20+3240*Q2**3*r**20-34996*r**22-19785*Q2*r**22-3240*Q2**2*r**22
        +4929*r**24+1620*Q2*r**24-324*r**26+76440*logu*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(5/2)+889560*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)
        +1065960*logu*r**4*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)+185640*logu*r**6*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(5/2)))/(1575*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(5/2)))

    return 0.

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx2(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X2 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     (((-144+432*Q2-432*Q2**2+144*Q2**3+517*r**2+687*Q2*r**2-2523*Q2**2*r**2
        +1099*Q2**3*r**2+915*Q2**4*r**2-1491*Q2**5*r**2+1075*Q2**6*r**2-279*Q2**7*r**2
        -687*r**4-2340*Q2*r**4-3099*Q2**2*r**4-312*Q2**3*r**4+663*Q2**4*r**4-2364*Q2**5*r**4
        +1395*Q2**6*r**4+579*r**6+765*Q2*r**6+186*Q2**2*r**6+426*Q2**3*r**6-57*Q2**4*r**6
        -2511*Q2**5*r**6-1025*r**8+360*Q2*r**8+906*Q2**2*r**8+2368*Q2**3*r**8+1395*Q2**4*r**8
        +2019*r**10+1713*Q2*r**10+753*Q2**2*r**10+1395*Q2**3*r**10-2217*r**12
        -3012*Q2*r**12-2511*Q2**2*r**12+1237*r**14+1395*Q2*r**14-279*r**16+840*logu*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(90*r**2*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (((-1440+4320*Q2-4320*Q2**2+1440*Q2**3-18617*r**2+97731*Q2*r**2-144921*Q2**2*r**2
        +74827*Q2**3*r**2-10515*Q2**4*r**2+6897*Q2**5*r**2-11651*Q2**6*r**2+8481*Q2**7*r**2
        -2232*Q2**8*r**2+92866*r**4-129885*Q2*r**4-109266*Q2**2*r**4+50515*Q2**3*r**4
        -1050*Q2**4*r**4+4569*Q2**5*r**4-17750*Q2**6*r**4+10881*Q2**7*r**4-158796*r**6
        -55791*Q2*r**6-122487*Q2**2*r**6-3702*Q2**3*r**6+2478*Q2**4*r**6-1131*Q2**5*r**6
        -19251*Q2**6*r**6+131062*r**8+90225*Q2*r**8+13188*Q2**2*r**8+8698*Q2**3*r**8
        +17550*Q2**4*r**8+11997*Q2**5*r**8-62210*r**10-10995*Q2*r**10+633*Q2**2*r**10
        -725*Q2**3*r**10+4185*Q2**4*r**10+27342*r**12+9789*Q2*r**12-3666*Q2**2*r**12
        -7533*Q2**3*r**12-14516*r**14-7905*Q2*r**14+279*Q2**2*r**14+5146*r**16
        +2511*Q2*r**16-837*r**18+28920*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)+17400*logu*r**4*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(900*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     (((-360+1080*Q2-1080*Q2**2+360*Q2**3-17618*r**2+70974*Q2*r**2-94374*Q2**2*r**2
        +46063*Q2**3*r**2-3900*Q2**4*r**2-1437*Q2**5*r**2+1396*Q2**6*r**2-2391*Q2**7*r**2
        +1752*Q2**8*r**2-465*Q2**9*r**2+67796*r**4-31506*Q2*r**4-151308*Q2**2*r**4
        +83708*Q2**3*r**4-810*Q2**4*r**4-126*Q2**5*r**4+866*Q2**6*r**4-3552*Q2**7*r**4
        +2232*Q2**8*r**4-83705*r**6-155499*Q2*r**6-119577*Q2**2*r**6-7568*Q2**3*r**6
        +267*Q2**4*r**6+477*Q2**5*r**6-299*Q2**6*r**6-3906*Q2**7*r**6+20719*r**8
        +107226*Q2*r**8-2631*Q2**2*r**8-4376*Q2**3*r**8+1047*Q2**4*r**8+3294*Q2**5*r**8
        +2511*Q2**6*r**8+35453*r**10+18795*Q2*r**10+13524*Q2**2*r**10+2627*Q2**3*r**10
        +315*Q2**4*r**10+558*Q2**5*r**10-31007*r**12-14094*Q2*r**12-3582*Q2**2*r**12
        -2012*Q2**3*r**12-1395*Q2**4*r**12+11329*r**14+4251*Q2*r**14+1227*Q2**2*r**14
        +558*Q2**3*r**14-3295*r**16-1506*Q2*r**16-279*Q2**2*r**16+781*r**18+279*Q2*r**18
        -93*r**20+14880*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+37680*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-7800*logu*r**6*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))/(225*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((-10080+30240*Q2-30240*Q2**2+10080*Q2**3-1073585*r**2+4012875*Q2*r**2
        -5095215*Q2**2*r**2+2389725*Q2**3*r**2-173565*Q2**4*r**2-38745*Q2**5*r**2
        -28245*Q2**6*r**2+32895*Q2**7*r**2-56790*Q2**8*r**2+41810*Q2**9*r**2-11160*Q2**10*r**2
        +2254902*r**4+5751039*Q2*r**4-18467154*Q2**2*r**4+9894633*Q2**3*r**4-564690*Q2**4*r**4
        +6363*Q2**5*r**4-1974*Q2**6*r**4+19419*Q2**7*r**4-82908*Q2**8*r**4+53010*Q2**9*r**4
        +3049509*r**6-19842150*Q2*r**6-12193914*Q2**2*r**6+2414925*Q2**3*r**6+342435*Q2**4*r**6
        +2676*Q2**5*r**6+10320*Q2**6*r**6-8091*Q2**7*r**6-92070*Q2**8*r**6-12648564*r**8
        +201306*Q2*r**8-3057738*Q2**2*r**8-4366303*Q2**3*r**8+11952*Q2**4*r**8+25356*Q2**5*r**8
        +74326*Q2**6*r**8+59985*Q2**7*r**8+13095978*r**10+15187200*Q2*r**10+7785192*Q2**2*r**10
        -272913*Q2**3*r**10+26805*Q2**4*r**10+6573*Q2**5*r**10+9765*Q2**6*r**10-4832520*r**12
        -4548600*Q2*r**12+852042*Q2**2*r**12+46755*Q2**3*r**12-31710*Q2**4*r**12
        -29295*Q2**5*r**12-276402*r**14-923034*Q2*r**14-139494*Q2**2*r**14-11417*Q2**3*r**14
        +9765*Q2**4*r**14+520116*r**16+161190*Q2*r**16+30066*Q2**2*r**16+1395*Q2**3*r**16
        -93561*r**18-34251*Q2*r**18-4185*Q2**2*r**18+15602*r**20+4185*Q2*r**20
        -1395*r**22+701400*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)
        +4105080*logu*r**4*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+793800*logu*r**6*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-1810200*logu*r**8*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)))/(6300*r**2*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (((-10080+30240*Q2-30240*Q2**2+10080*Q2**3-1887977*r**2+6811371*Q2*r**2
        -8426691*Q2**2*r**2+3855537*Q2**3*r**2-264180*Q2**4*r**2-51408*Q2**5*r**2
        -20496*Q2**6*r**2-21924*Q2**7*r**2+28413*Q2**8*r**2-49315*Q2**9*r**2+36435*Q2**10*r**2
        -9765*Q2**11*r**2-1266437*r**4+30010944*Q2*r**4-57384675*Q2**2*r**4+29544288*Q2**3*r**4
        -2063460*Q2**4*r**4-200088*Q2**5*r**4+10416*Q2**6*r**4-1200*Q2**7*r**4+16137*Q2**8*r**4
        -71080*Q2**9*r**4+46035*Q2**10*r**4+24606405*r**6-43343307*Q2*r**6-61997430*Q2**2*r**6
        +27274506*Q2**3*r**6+215838*Q2**4*r**6+185178*Q2**5*r**6+210*Q2**6*r**6+8178*Q2**7*r**6
        -7623*Q2**8*r**6-79515*Q2**9*r**6-41564535*r**8-60749568*Q2*r**8-12200310*Q2**2*r**8
        -22809328*Q2**3*r**8+1315542*Q2**4*r**8+5856*Q2**5*r**8+21970*Q2**6*r**8
        +62400*Q2**7*r**8+52173*Q2**8*r**8+12688260*r**10+71397396*Q2*r**10+43960326*Q2**2*r**10
        -16896706*Q2**3*r**10+32682*Q2**4*r**10+23118*Q2**5*r**10+5236*Q2**6*r**10
        +6696*Q2**7*r**10+23604084*r**12+20303808*Q2*r**12+33154566*Q2**2*r**12
        -536208*Q2**3*r**12-5022*Q2**4*r**12-25368*Q2**5*r**12-23436*Q2**6*r**12
        -20503476*r**14-22922004*Q2*r**14+1591650*Q2**2*r**14+62626*Q2**3*r**14
        +7812*Q2**5*r**14+3608220*r**16-1712928*Q2*r**16-179070*Q2**2*r**16-9632*Q2**3*r**16
        +813285*r**18+200433*Q2*r**18+26385*Q2**2*r**18+837*Q2**3*r**18-99055*r**20
        -28896*Q2*r**20-2511*Q2**2*r**20+12143*r**22+2511*Q2*r**22-837*r**24
        +1056720*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+11182080*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+11854080*logu*r**6*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)-10375680*logu*r**8*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)-6031200*logu*r**10*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(6300*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))

    return 0.  

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx3(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X3 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     (((78-234*Q2+234*Q2**2-78*Q2**3-369*r**2+231*Q2*r**2+261*Q2**2*r**2
        -143*Q2**3*r**2+105*Q2**4*r**2-153*Q2**5*r**2+95*Q2**6*r**2-27*Q2**7*r**2
        +699*r**4+430*Q2*r**4+653*Q2**2*r**4+114*Q2**3*r**4+319*Q2**4*r**4-262*Q2**5*r**4
        +135*Q2**6*r**4-603*r**6-655*Q2*r**6-462*Q2**2*r**6-312*Q2**3*r**6+269*Q2**4*r**6
        -243*Q2**5*r**6+45*r**8-30*Q2*r**8-132*Q2**2*r**8-356*Q2**3*r**8+135*Q2**4*r**8
        +417*r**10+689*Q2*r**10+649*Q2**2*r**10+135*Q2**3*r**10-411*r**12-566*Q2*r**12
        -243*Q2**2*r**12+171*r**14+135*Q2*r**14-27*r**16-120*logu*r**2*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)))/(15*r**2*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (((2340-7020*Q2+7020*Q2**2-2340*Q2**3-2163*r**2-31491*Q2*r**2+63081*Q2**2*r**2
        -34047*Q2**3*r**2+3915*Q2**4*r**2+2583*Q2**5*r**2-3489*Q2**6*r**2+2259*Q2**7*r**2
        -648*Q2**8*r**2-19526*r**4+83385*Q2*r**4+20526*Q2**2*r**4+6085*Q2**3*r**4
        -150*Q2**4*r**4+6591*Q2**5*r**4-5750*Q2**6*r**4+3159*Q2**7*r**4+52656*r**6
        -29049*Q2*r**6+5007*Q2**2*r**6+822*Q2**3*r**6-5958*Q2**4*r**6+4491*Q2**5*r**6
        -5589*Q2**6*r**6-53082*r**8-32925*Q2*r**8-18768*Q2**2*r**8-1878*Q2**3*r**8
        -3750*Q2**4*r**8+3483*Q2**5*r**8+20710*r**10+16995*Q2*r**10+7287*Q2**2*r**10
        +6025*Q2**3*r**10+1215*Q2**4*r**10+2838*r**12+2871*Q2*r**12-1674*Q2**2*r**12
        -2187*Q2**3*r**12-5424*r**14-3495*Q2*r**14+81*Q2**2*r**14+1894*r**16+729*Q2*r**16
        -243*r**18-16920*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+6600*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(450*r**2*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     (((1170-3510*Q2+3510*Q2**2-1170*Q2**3+11301*r**2-62793*Q2*r**2+93843*Q2**2*r**2
        -48741*Q2**3*r**2+5175*Q2**4*r**2+909*Q2**5*r**2+1053*Q2**6*r**2-1413*Q2**7*r**2
        +936*Q2**8*r**2-270*Q2**9*r**2-80902*r**4+162207*Q2*r**4-27684*Q2**2*r**4
        +14699*Q2**3*r**4-6630*Q2**4*r**4-213*Q2**5*r**4+2498*Q2**6*r**4-2271*Q2**7*r**4
        +1296*Q2**8*r**4+181750*r**6+7143*Q2*r**6-75501*Q2**2*r**6+94726*Q2**3*r**6
        -1644*Q2**4*r**6-2079*Q2**5*r**6+1543*Q2**6*r**6-2268*Q2**7*r**6-185148*r**8
        -215247*Q2*r**8-174588*Q2**2*r**8+4152*Q2**3*r**8-984*Q2**4*r**8-1173*Q2**5*r**8
        +1458*Q2**6*r**8+80384*r**10+94935*Q2*r**10-15423*Q2**2*r**10+3131*Q2**3*r**10
        +2445*Q2**4*r**10+324*Q2**5*r**10-4676*r**12+16833*Q2*r**12-756*Q2**2*r**12
        -1841*Q2**3*r**12-810*Q2**4*r**12-2598*r**14+1353*Q2*r**14+921*Q2**2*r**14
        +324*Q2**3*r**14-1750*r**16-1083*Q2*r**16-162*Q2**2*r**16+523*r**18+162*Q2*r**18
        -54*r**20-18360*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+2040*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+40800*logu*r**6*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))/(225*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((5460-16380*Q2+16380*Q2**2-5460*Q2**3+151065*r**2-649335*Q2*r**2
        +886215*Q2**2*r**2-436945*Q2**3*r**2+35805*Q2**4*r**2+9345*Q2**5*r**2+2625*Q2**6*r**2
        +4125*Q2**7*r**2-5550*Q2**8*r**2+3730*Q2**9*r**2-1080*Q2**10*r**2-960744*r**4
        +1626387*Q2*r**4-250872*Q2**2*r**4+14889*Q2**3*r**4-48020*Q2**4*r**4-18361*Q2**5*r**4
        -1092*Q2**6*r**4+9367*Q2**7*r**4-8764*Q2**8*r**4+5130*Q2**9*r**4+1463757*r**6
        +3317910*Q2*r**6-4921992*Q2**2*r**6+3262695*Q2**3*r**6-174025*Q2**4*r**6
        -6732*Q2**5*r**6-7530*Q2**6*r**6+5447*Q2**7*r**6-8910*Q2**8*r**6+492368*r**8
        -5671302*Q2*r**8-6340584*Q2**2*r**8+2076721*Q2**3*r**8-5184*Q2**4*r**8-3372*Q2**5*r**8
        -3892*Q2**6*r**8+5805*Q2**7*r**8-2986326*r**10-1625400*Q2*r**10-4139994*Q2**2*r**10
        +51621*Q2**3*r**10+9515*Q2**4*r**10+8659*Q2**5*r**10+945*Q2**6*r**10+2455320*r**12
        +2871960*Q2*r**12-139704*Q2**2*r**12+1395*Q2**3*r**12-5180*Q2**4*r**12-2835*Q2**5*r**12
        -580006*r**14+143178*Q2*r**14-3792*Q2**2*r**14-1211*Q2**3*r**14+945*Q2**4*r**14
        -36132*r**16+6210*Q2*r**16+3228*Q2**2*r**16+135*Q2**3*r**16-6243*r**18
        -3633*Q2*r**18-405*Q2**2*r**18+1616*r**20+405*Q2*r**20-135*r**22-147000*logu*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-108360*logu*r**4*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)+1373400*logu*r**6*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)+743400*logu*r**8*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(1050*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (((16380-49140*Q2+49140*Q2**2-16380*Q2**3+879837*r**2-3457251*Q2*r**2
        +4511871*Q2**2*r**2-2157897*Q2**3*r**2+167580*Q2**4*r**2+31248*Q2**5*r**2
        +15876*Q2**6*r**2+5544*Q2**7*r**2+10647*Q2**8*r**2-14385*Q2**9*r**2+9765*Q2**10*r**2
        -2835*Q2**11*r**2-5136143*r**4+7146756*Q2*r**4+961155*Q2**2*r**4-1480488*Q2**3*r**4
        -44940*Q2**4*r**4-92232*Q2**5*r**4-39816*Q2**6*r**4-3180*Q2**7*r**4+23463*Q2**8*r**4
        -22420*Q2**9*r**4+13365*Q2**10*r**4-2378865*r**6+57690507*Q2*r**6-74121930*Q2**2*r**6
        +41340894*Q2**3*r**6-3118878*Q2**4*r**6-258258*Q2**5*r**6-17850*Q2**6*r**6
        -18558*Q2**7*r**6+13083*Q2**8*r**6-23085*Q2**9*r**6+34768215*r**8-32277792*Q2*r**8
        -130486890*Q2**2*r**8+62971368*Q2**3*r**8-1505142*Q2**4*r**8-14856*Q2**5*r**8
        -8010*Q2**6*r**8-8940*Q2**7*r**8+15147*Q2**8*r**8-44509740*r**10-88880316*Q2*r**10
        -120542046*Q2**2*r**10+18911666*Q2**3*r**10+9678*Q2**4*r**10+23322*Q2**5*r**10
        +20944*Q2**6*r**10+1944*Q2**7*r**10+7048356*r**12+29908032*Q2*r**12-39115806*Q2**2*r**12
        +245928*Q2**3*r**12-1458*Q2**4*r**12-12432*Q2**5*r**12-6804*Q2**6*r**12+16554636*r**14
        +29201004*Q2*r**14-702690*Q2**2*r**14+5094*Q2**3*r**14+2268*Q2**5*r**14
        -7025760*r**16+707028*Q2*r**16-12630*Q2**2*r**16-2828*Q2**3*r**16-204465*r**18
        +18927*Q2*r**18+7755*Q2**2*r**18+243*Q2**3*r**18-15765*r**20-8484*Q2*r**20
        -729*Q2**2*r**20+3557*r**22+729*Q2*r**22-243*r**24-670320*logu*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-1438080*logu*r**4*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)+15664320*logu*r**6*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)+25260480*logu*r**8*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)
        +6115200*logu*r**10*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(3150*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx4(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X4 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     (((-72+216*Q2-216*Q2**2+72*Q2**3+331*r**2-159*Q2*r**2-309*Q2**2*r**2
        +157*Q2**3*r**2-75*Q2**4*r**2+147*Q2**5*r**2-155*Q2**6*r**2+63*Q2**7*r**2
        -561*r**4-660*Q2*r**4-597*Q2**2*r**4-96*Q2**3*r**4-231*Q2**4*r**4+228*Q2**5*r**4
        -315*Q2**6*r**4+237*r**6+1035*Q2*r**6+798*Q2**2*r**6+678*Q2**3*r**6+249*Q2**4*r**6
        +567*Q2**5*r**6+625*r**8-282*Q2**2*r**8-176*Q2**3*r**8-315*Q2**4*r**8-1203*r**10
        -1281*Q2*r**10-921*Q2**2*r**10-315*Q2**3*r**10+969*r**12+1164*Q2*r**12
        +567*Q2**2*r**12-389*r**14-315*Q2*r**14+63*r**16+120*logu*r**2*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)))/(90*r**2*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (((-720+2160*Q2-2160*Q2**2+720*Q2**3+649*r**2+9693*Q2*r**2-19263*Q2**2*r**2
        +10381*Q2**3*r**2-1245*Q2**4*r**2-609*Q2**5*r**2+1147*Q2**6*r**2-1257*Q2**7*r**2
        +504*Q2**8*r**2+4798*r**4-20355*Q2*r**4-13998*Q2**2*r**4+1045*Q2**3*r**4
        -150*Q2**4*r**4-1593*Q2**5*r**4+1750*Q2**6*r**4-2457*Q2**7*r**4-10188*r**6
        -873*Q2*r**6-1761*Q2**2*r**6+3894*Q2**3*r**6+5034*Q2**4*r**6+2307*Q2**5*r**6
        +4347*Q2**6*r**6+4186*r**8+12375*Q2*r**8+1164*Q2**2*r**8-4106*Q2**3*r**8
        -3150*Q2**4*r**8-2709*Q2**5*r**8+6970*r**10-285*Q2*r**10-801*Q2**2*r**10
        -1475*Q2**3*r**10-945*Q2**4*r**10-9774*r**12-5133*Q2*r**12+402*Q2**2*r**12
        +1701*Q2**3*r**12+5452*r**14+2985*Q2*r**14-63*Q2**2*r**14-1562*r**16-567*Q2*r**16
        +189*r**18+5160*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-600*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(900*r**2*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     (((-180+540*Q2-540*Q2**2+180*Q2**3-1424*r**2+8532*Q2*r**2-13032*Q2**2*r**2
        +6859*Q2**3*r**2-750*Q2**4*r**2-141*Q2**5*r**2-122*Q2**6*r**2+237*Q2**7*r**2
        -264*Q2**8*r**2+105*Q2**9*r**2+10948*r**4-23568*Q2*r**4+5616*Q2**2*r**4
        -3326*Q2**3*r**4+870*Q2**4*r**4+12*Q2**5*r**4-302*Q2**6*r**4+354*Q2**7*r**4
        -504*Q2**8*r**4-26075*r**6+5193*Q2*r**6+6099*Q2**2*r**6-10124*Q2**3*r**6
        +681*Q2**4*r**6+921*Q2**5*r**6+493*Q2**6*r**6+882*Q2**7*r**6+29977*r**8
        +22728*Q2*r**8+21987*Q2**2*r**8+352*Q2**3*r**8-459*Q2**4*r**8-648*Q2**5*r**8
        -567*Q2**6*r**8-18341*r**10-13365*Q2*r**10-798*Q2**2*r**10-1169*Q2**3*r**10
        -405*Q2**4*r**10-126*Q2**5*r**10+6799*r**12+1008*Q2*r**12+1194*Q2**2*r**12
        +634*Q2**3*r**12+315*Q2**4*r**12-2573*r**14-1497*Q2*r**14-429*Q2**2*r**14
        -126*Q2**3*r**14+1075*r**16+492*Q2*r**16+63*Q2**2*r**16-227*r**18-63*Q2*r**18
        +21*r**20+2640*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-960*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-4200*logu*r**6*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))/(225*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((-720+2160*Q2-2160*Q2**2+720*Q2**3-15845*r**2+71415*Q2*r**2-99675*Q2**2*r**2
        +49905*Q2**3*r**2-4185*Q2**4*r**2-1125*Q2**5*r**2-345*Q2**6*r**2-405*Q2**7*r**2
        +810*Q2**8*r**2-910*Q2**9*r**2+360*Q2**10*r**2+131118*r**4-286629*Q2*r**4
        +165654*Q2**2*r**4-70563*Q2**3*r**4+11190*Q2**4*r**4+2367*Q2**5*r**4+114*Q2**6*r**4
        -969*Q2**7*r**4+1188*Q2**8*r**4-1710*Q2**9*r**4-261339*r**6-301890*Q2*r**6
        +743874*Q2**2*r**6-469755*Q2**3*r**6+20235*Q2**4*r**6+2424*Q2**5*r**6+2940*Q2**6*r**6
        +1701*Q2**7*r**6+2970*Q2**8*r**6+74484*r**8+833934*Q2*r**8+845238*Q2**2*r**8
        -209047*Q2**3*r**8-72*Q2**4*r**8-1536*Q2**5*r**8-2186*Q2**6*r**8-1935*Q2**7*r**8
        +289842*r**10+14100*Q2*r**10+445908*Q2**2*r**10+1443*Q2**3*r**10-2055*Q2**4*r**10
        -1203*Q2**5*r**10-315*Q2**6*r**10-319200*r**12-337140*Q2*r**12-6702*Q2**2*r**12
        -2025*Q2**3*r**12+1410*Q2**4*r**12+945*Q2**5*r**12+110382*r**14+9474*Q2*r**14
        +5694*Q2**2*r**14+487*Q2**3*r**14-315*Q2**4*r**14-12036*r**16-6750*Q2*r**16
        -1326*Q2**2*r**16-45*Q2**3*r**16+3891*r**18+1461*Q2*r**18+135*Q2**2*r**18
        -622*r**20-135*Q2*r**20+45*r**22+17400*logu*r**2*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)-11880*logu*r**4*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)
        -199800*logu*r**6*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-67800*logu*r**8*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(900*r**2*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (((-5040+15120*Q2-15120*Q2**2+5040*Q2**3-210191*r**2+855693*Q2*r**2
        -1140453*Q2**2*r**2+554871*Q2**3*r**2-44940*Q2**4*r**2-8064*Q2**5*r**2-4368*Q2**6*r**2
        -1692*Q2**7*r**2-2421*Q2**8*r**2+4955*Q2**9*r**2-5595*Q2**10*r**2+2205*Q2**11*r**2
        +2044909*r**4-4715088*Q2*r**4+3467115*Q2**2*r**4-1399776*Q2**3*r**4+151620*Q2**4*r**4
        +48216*Q2**5*r**4+12768*Q2**6*r**4+960*Q2**7*r**4-5649*Q2**8*r**4+7160*Q2**9*r**4
        -10395*Q2**10*r**4-829485*r**6-18874701*Q2*r**6+32156070*Q2**2*r**6-17502042*Q2**3*r**6
        +1172754*Q2**4*r**6+81174*Q2**5*r**6+15150*Q2**6*r**6+17214*Q2**7*r**6+10431*Q2**8*r**6
        +17955*Q2**9*r**6-10625025*r**8+18297216*Q2*r**8+47470950*Q2**2*r**8-20829904*Q2**3*r**8
        +365466*Q2**4*r**8+1248*Q2**5*r**8-9170*Q2**6*r**8-13200*Q2**7*r**8-11781*Q2**8*r**8
        +17508540*r**10+26930988*Q2*r**10+39292458*Q2**2*r**10-4456078*Q2**3*r**10
        -10554*Q2**4*r**10-11886*Q2**5*r**10-6692*Q2**6*r**10-1512*Q2**7*r**10-6556788*r**12
        -14883456*Q2*r**12+9657258*Q2**2*r**12+29136*Q2**3*r**12+1134*Q2**4*r**12
        +7896*Q2**5*r**12+5292*Q2**6*r**12-3582348*r**14-7699692*Q2*r**14-89010*Q2**2*r**14
        -16562*Q2**3*r**14-1764*Q2**5*r**14+2335860*r**16+118896*Q2*r**16+46110*Q2**2*r**16
        +2704*Q2**3*r**16-103725*r**18-52521*Q2*r**18-7545*Q2**2*r**18-189*Q2**3*r**18
        +26375*r**20+8112*Q2*r**20+567*Q2**2*r**20-3271*r**22-567*Q2*r**22+189*r**24
        +179760*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-188160*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-6773760*logu*r**6*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)-8279040*logu*r**8*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)-1293600*logu*r**10*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(6300*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx5(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X5 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     ((4*(6*Q2**7-6*Q2**6*(3+5*r**2)+3*(-1+r**2)**5*(-1+r**2+2*r**4)-Q2*(
        -1+r**2)**3*(1+r**2)*(-7-3*r**2+30*r**4)+Q2**5*(19+27*r**2+54*r**4)
        -Q2**4*(7+4*r**2-45*r**4+30*r**6)+Q2**2*(4+36*r**4-94*r**6+54*r**10)
        -6*Q2**3*r**4*(-6+5*r**2*(3+r**2))))/(3*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    ((4*(72*Q2**8-27*Q2**7*(8+13*r**2)+Q2**6*(226+315*r**2+621*r**4)-3*Q2**5*(29
        +8*r**2-162*r**4+129*r**6)+Q2**3*(313+120*r**2+147*r**4-683*r**6+180*r**8
        +243*r**10)-3*Q2**4*(5-15*r**2-94*r**4+45*r**6*(7+r**2))-3*Q2**2*(223
        +43*r**2+31*r**4+16*r**6+31*r**8-27*r**10+3*r**12-40*logu*sqrtQ2)
        +(-1+r**2)**2*(-128+353*r**2-315*r**4+20*r**6+160*r**8-117*r**10+27*r**12
        +120*logu*sqrtQ2)-3*Q2*(-168+80*logu*sqrtQ2+r**2*(305-2*r**2-295*r**4
        +180*r**6+43*r**8-90*r**10+27*r**12+80*logu*sqrtQ2))))/(45*((-1
        +Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     ((2*(-985+3555*Q2-4455*Q2**2+2105*Q2**3-195*Q2**4-15*Q2**5-145*Q2**6
        +375*Q2**7-360*Q2**8+120*Q2**9+3104*r**2+1113*Q2*r**2-10908*Q2**2*r**2
        +5951*Q2**3*r**2-120*Q2**4*r**2+51*Q2**5*r**2-28*Q2**6*r**2+513*Q2**7*r**2
        -576*Q2**8*r**2-2502*r**4-10575*Q2*r**4-9663*Q2**2*r**4+1470*Q2**3*r**4
        +420*Q2**4*r**4+417*Q2**5*r**4+765*Q2**6*r**4+1008*Q2**7*r**4-1168*r**6
        +2907*Q2*r**6-2016*Q2**2*r**6-526*Q2**3*r**6-936*Q2**4*r**6-1413*Q2**5*r**6
        -648*Q2**6*r**6+1976*r**8+3525*Q2*r**8-141*Q2**2*r**8-391*Q2**3*r**8+135*Q2**4*r**8
        -144*Q2**5*r**8+360*r**10-105*Q2*r**10+564*Q2**2*r**10+495*Q2**3*r**10
        +360*Q2**4*r**10-1354*r**12-753*Q2*r**12-333*Q2**2*r**12-144*Q2**3*r**12
        +752*r**14+405*Q2*r**14+72*Q2**2*r**14-207*r**16-72*Q2*r**16+24*r**18
        +600*logu*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+2760*logu*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(45*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     ((2*(-4947+17361*Q2-21141*Q2**2+9567*Q2**3-595*Q2**4-203*Q2**5-21*Q2**6
        -289*Q2**7+748*Q2**8-720*Q2**9+240*Q2**10-636*r**2+69111*Q2*r**2-136872*Q2**2*r**2
        +71337*Q2**3*r**2-5320*Q2**4*r**2-189*Q2**5*r**2+84*Q2**6*r**2-43*Q2**7*r**2
        +1008*Q2**8*r**2-1140*Q2**9*r**2+50070*r**4-98001*Q2*r**4-152973*Q2**2*r**4
        +63558*Q2**3*r**4+1188*Q2**4*r**4+873*Q2**5*r**4+789*Q2**6*r**4+1476*Q2**7*r**4
        +1980*Q2**8*r**4-95874*r**6-72261*Q2*r**6-126954*Q2**2*r**6+3336*Q2**3*r**6
        -962*Q2**4*r**6-1759*Q2**5*r**6-2646*Q2**6*r**6-1290*Q2**7*r**6+69342*r**8
        +75915*Q2*r**8-3789*Q2**2*r**8+543*Q2**3*r**8-275*Q2**4*r**8+252*Q2**5*r**8
        -210*Q2**6*r**8-20958*r**10+5859*Q2*r**10-3348*Q2**2*r**10-723*Q2**3*r**10
        +630*Q2**4*r**10+630*Q2**5*r**10+6636*r**12+3969*Q2*r**12+2133*Q2**2*r**12
        +252*Q2**3*r**12-210*Q2**4*r**12-5070*r**14-2619*Q2*r**14-666*Q2**2*r**14
        -30*Q2**3*r**14+1749*r**16+756*Q2*r**16+90*Q2**2*r**16-342*r**18-90*Q2*r**18
        +30*r**20+2520*logu*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+27720*logu*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+25200*logu*r**4*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))/(105*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     ((4*(-12908+44604*Q2-53424*Q2**2+23688*Q2**3-1470*Q2**4-252*Q2**5-189*Q2**6
        -21*Q2**7-378*Q2**8+980*Q2**9-945*Q2**10+315*Q2**11-63561*r**2+408495*Q2*r**2
        -643779*Q2**2*r**2+321945*Q2**3*r**2-23940*Q2**4*r**2-3654*Q2**5*r**2-210*Q2**6*r**2
        +99*Q2**7*r**2-45*Q2**8*r**2+1305*Q2**9*r**2-1485*Q2**10*r**2+283566*r**4
        -41349*Q2*r**4-1282998*Q2**2*r**4+642537*Q2**3*r**4-21798*Q2**4*r**4+1596*Q2**5*r**4
        +1176*Q2**6*r**4+1005*Q2**7*r**4+1890*Q2**8*r**4+2565*Q2**9*r**4-233775*r**6
        -977406*Q2*r**6-1148622*Q2**2*r**6+209945*Q2**3*r**6+3270*Q2**4*r**6-1014*Q2**5*r**6
        -2204*Q2**6*r**6-3321*Q2**7*r**6-1683*Q2**8*r**6-181866*r**8+214620*Q2*r**8
        -473892*Q2**2*r**8-4965*Q2**3*r**8-1080*Q2**4*r**8-384*Q2**5*r**8+315*Q2**6*r**8
        -216*Q2**7*r**8+342804*r**10+366912*Q2*r**10+24438*Q2**2*r**10+4275*Q2**3*r**10
        +162*Q2**4*r**10+756*Q2**5*r**10+756*Q2**6*r**10-158466*r**12-27930*Q2*r**12
        -13782*Q2**2*r**12-1553*Q2**3*r**12-252*Q2**5*r**12+33684*r**14+16254*Q2*r**14
        +4362*Q2**2*r**14+315*Q2**3*r**14-11850*r**16-5064*Q2*r**16-864*Q2**2*r**16
        -27*Q2**3*r**16+2741*r**18+945*Q2*r**18+81*Q2**2*r**18-396*r**20-81*Q2*r**20
        +27*r**22+5880*logu*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+113400*logu*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+264600*logu*r**4*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)+64680*logu*r**6*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))/(315*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx6(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X6 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     ((4*(-11+42*Q2-51*Q2**2+13*Q2**3+54*Q2**4-99*Q2**5+70*Q2**6-18*Q2**7
        +51*r**2-66*Q2*r**2-39*Q2**2*r**2-6*Q2**3*r**2+84*Q2**4*r**2-168*Q2**5*r**2
        +90*Q2**6*r**2-78*r**4-36*Q2*r**4-39*Q2**2*r**4-33*Q2**3*r**4+60*Q2**4*r**4
        -162*Q2**5*r**4+4*r**6+42*Q2*r**6+45*Q2**2*r**6+40*Q2**3*r**6+90*Q2**4*r**6
        +129*r**8+168*Q2*r**8+150*Q2**2*r**8+90*Q2**3*r**8-165*r**10-240*Q2*r**10
        -162*Q2**2*r**10+88*r**12+90*Q2*r**12-18*r**14+12*logu*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)))/(9*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    ((2*(-79+297*Q2-402*Q2**2+254*Q2**3-135*Q2**4+429*Q2**5-772*Q2**6
        +552*Q2**7-144*Q2**8+202*r**2+285*Q2*r**2-1182*Q2**2*r**2+520*Q2**3*r**2
        -150*Q2**4*r**2+573*Q2**5*r**2-1250*Q2**6*r**2+702*Q2**7*r**2-87*r**4-912*Q2*r**4
        -1134*Q2**2*r**4+126*Q2**3*r**4-129*Q2**4*r**4+318*Q2**5*r**4-1242*Q2**6*r**4
        +44*r**6-420*Q2*r**6-504*Q2**2*r**6+206*Q2**3*r**6+540*Q2**4*r**6+774*Q2**5*r**6
        -635*r**8+705*Q2*r**8+606*Q2**2*r**8+340*Q2**3*r**8+270*Q2**4*r**8+1194*r**10
        +453*Q2*r**10-282*Q2**2*r**10-486*Q2**3*r**10-937*r**12-570*Q2*r**12+18*Q2**2*r**12
        +352*r**14+162*Q2*r**14-54*r**16+60*logu*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)+300*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(45*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     ((-2*(-251+873*Q2-1053*Q2**2+481*Q2**3-75*Q2**4+81*Q2**5-353*Q2**6
        +633*Q2**7-456*Q2**8+120*Q2**9+617*r**2+1128*Q2*r**2-3861*Q2**2*r**2
        +2096*Q2**3*r**2-15*Q2**4*r**2+108*Q2**5*r**2-433*Q2**6*r**2+996*Q2**7*r**2
        -576*Q2**8*r**2-85*r**4-3093*Q2*r**4-4134*Q2**2*r**4+1034*Q2**3*r**4+9*Q2**4*r**4
        +69*Q2**5*r**4-208*Q2**6*r**4+1008*Q2**7*r**4-617*r**6-888*Q2*r**6-1182*Q2**2*r**6
        +268*Q2**3*r**6-51*Q2**4*r**6-432*Q2**5*r**6-648*Q2**6*r**6-349*r**8+1935*Q2*r**8
        -717*Q2**2*r**8-811*Q2**3*r**8-360*Q2**4*r**8-144*Q2**5*r**8+1751*r**10
        +552*Q2*r**10+651*Q2**2*r**10+596*Q2**3*r**10+360*Q2**4*r**10-1667*r**12
        -843*Q2*r**12-336*Q2**2*r**12-144*Q2**3*r**12+785*r**14+408*Q2*r**14+72*Q2**2*r**14
        -208*r**16-72*Q2*r**16+24*r**18+120*logu*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)+960*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+240*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(45*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((13043-45009*Q2+53829*Q2**2-23823*Q2**3+1365*Q2**4+777*Q2**5-861*Q2**6
        +4191*Q2**7-7512*Q2**8+5440*Q2**9-1440*Q2**10+34644*r**2-307839*Q2*r**2
        +520848*Q2**2*r**2-265713*Q2**3*r**2+20580*Q2**4*r**2+1071*Q2**5*r**2-1176*Q2**6*r**2
        +4857*Q2**7*r**2-11592*Q2**8*r**2+6840*Q2**9*r**2-226920*r**4+212799*Q2*r**4
        +789087*Q2**2*r**4-374292*Q2**3*r**4+6018*Q2**4*r**4-597*Q2**5*r**4-681*Q2**6*r**4
        +2106*Q2**7*r**4-11880*Q2**8*r**4+310266*r**6+480039*Q2*r**6+773106*Q2**2*r**6
        -124274*Q2**3*r**6-402*Q2**4*r**6+831*Q2**5*r**6+5054*Q2**6*r**6+7740*Q2**7*r**6
        -125538*r**8-158865*Q2*r**8+218391*Q2**2*r**8-8067*Q2**3*r**8+5745*Q2**4*r**8
        +3822*Q2**5*r**8+1260*Q2**6*r**8-3738*r**10-155421*Q2*r**10+33612*Q2**2*r**10
        +4527*Q2**3*r**10-4830*Q2**4*r**10-3780*Q2**5*r**10-28644*r**12-38031*Q2*r**12
        -13407*Q2**2*r**12-1498*Q2**3*r**12+1260*Q2**4*r**12+35670*r**14+16281*Q2*r**14
        +3954*Q2**2*r**14+180*Q2**3*r**14-10641*r**16-4494*Q2*r**16-540*Q2**2*r**16
        +2038*r**18+540*Q2*r**18-180*r**20-5880*logu*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)-98280*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)
        -151200*logu*r**4*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-42000*logu*r**6*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(315*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     ((-4*(-7009+23967*Q2-28377*Q2**2+12399*Q2**3-735*Q2**4-126*Q2**5-147*Q2**6
        +177*Q2**7-909*Q2**8+1630*Q2**9-1185*Q2**10+315*Q2**11-62519*r**2+323718*Q2*r**2
        -476415*Q2**2*r**2+234186*Q2**3*r**2-17535*Q2**4*r**2-2856*Q2**5*r**2-273*Q2**6*r**2
        +240*Q2**7*r**2-1011*Q2**8*r**2+2480*Q2**9*r**2-1485*Q2**10*r**2+182676*r**4
        +229398*Q2*r**4-1292397*Q2**2*r**4+659661*Q2**3*r**4-30609*Q2**4*r**4-705*Q2**5*r**4
        +198*Q2**6*r**4+138*Q2**7*r**4-405*Q2**8*r**4+2565*Q2**9*r**4-1422*r**6
        -835404*Q2*r**6-1465629*Q2**2*r**6+458938*Q2**3*r**6-5421*Q2**4*r**6+234*Q2**5*r**6
        -202*Q2**6*r**6-1086*Q2**7*r**6-1683*Q2**8*r**6-331365*r**8-270165*Q2*r**8
        -943884*Q2**2*r**8+101774*Q2**3*r**8-1050*Q2**4*r**8-1203*Q2**5*r**8-770*Q2**6*r**8
        -216*Q2**7*r**8+268275*r**10+380184*Q2*r**10-193176*Q2**2*r**10+6006*Q2**3*r**10
        +162*Q2**4*r**10+966*Q2**5*r**10+756*Q2**6*r**10-35133*r**12+131187*Q2*r**12
        -18813*Q2**2*r**12-1567*Q2**3*r**12-252*Q2**5*r**12-2301*r**14+21372*Q2*r**14
        +4419*Q2**2*r**14+310*Q2**3*r**14-13578*r**16-5106*Q2*r**16-849*Q2**2*r**16
        -27*Q2**3*r**16+2740*r**18+930*Q2*r**18+81*Q2**2*r**18-391*r**20-81*Q2*r**20
        +27*r**22+2940*logu*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+78960*logu*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+264600*logu*r**4*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)+169680*logu*r**6*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)+35700*logu*r**8*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(315*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx7(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X7 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     (((2*(3-3*Q2+(23+Q2*(-74+Q2*(9+Q2-4*Q2**2)))*r**2+(-62+Q2*(
        -28+Q2*(2+13*Q2)))*r**4+(42+(2-15*Q2)*Q2)*r**6+(-5+7*Q2)*r**8
        -r**10)-96*logu*r**2*sqrtQ2))/(9*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    ((2*(3-3*Q2+(109+Q2*(-214+Q2*(45+Q2*(5+Q2-3*Q2**2))))*r**2+(
        -184+Q2*(-374+Q2*(7+Q2*(2+9*Q2))))*r**4-(-24+Q2*(38+3*Q2+9*Q2**2))*r**6
        +(53+Q2*(5+3*Q2))*r**8-5*r**10-96*logu*r**2*sqrtQ2-216*logu*r**4*sqrtQ2))/(9*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     (((-30*(-1+Q2)+(2321+Q2*(-3971+Q2*(720+Q2*(220+Q2*(35+3*(3
        -8*Q2)*Q2)))))*r**2+(574+Q2*(-16687+Q2*(1958+Q2*(58+3*Q2*(6+23*Q2)))))*r**4
        -(7625+Q2*(11912+Q2*(-84+Q2*(22+65*Q2))))*r**6+2*(2025+Q2*(-281
        +Q2*(-1+10*Q2)))*r**8+(695+43*Q2)*r**10-(46+Q2)*r**12+r**14-1560*logu*r**2*sqrtQ2
        -9000*logu*r**4*sqrtQ2-6000*logu*r**6*sqrtQ2))/(45*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((-30*(-1+Q2)+(3953+Q2*(-6323+Q2*(1080+Q2*(320+Q2*(145+Q2*(27
        +4*(2-5*Q2)*Q2))))))*r**2+(12343+Q2*(-48112+Q2*(7154+Q2*(954+Q2*(49
        +8*Q2*(2+7*Q2))))))*r**4-(21501+Q2*(76903+Q2*(-5130+Q2*(-72+17*Q2*(1
        +3*Q2)))))*r**6+(-9175+Q2*(-29178+Q2*(78+Q2*(-2+15*Q2))))*r**8
        +(13495-Q2*(773+2*Q2))*r**10+(897+40*Q2)*r**12-(43+Q2)*r**14+r**16
        -2280*logu*r**2*sqrtQ2-23760*logu*r**4*sqrtQ2-41400*logu*r**6*sqrtQ2-13200*logu*r**8*sqrtQ2))/(45*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     ((2*(-105*(-1+Q2)+(21017+Q2*(-32252+Q2*(5250+Q2*(1610+Q2*(700
        +Q2*(378+Q2*(77+5*(5-12*Q2)*Q2)))))))*r**2+(144988+Q2*(-384964
        +Q2*(61706+Q2*(11376+Q2*(2206+Q2*(148+5*Q2*(10+33*Q2)))))))*r**4
        +(-30282+Q2*(-1074982+Q2*(113928+Q2*(8616+Q2*(220-3*Q2*(16+49*Q2))))))*r**6
        +2*(-169589+Q2*(-456690+Q2*(18630+Q2*(122+3*Q2*(-1+7*Q2)))))*r**8
        +2*(43610+Q2*(-105850+(131-3*Q2)*Q2))*r**10-2*(-56154+Q2*(1774
        +3*Q2))*r**12+2*(1981+67*Q2)*r**14-(143+3*Q2)*r**16+3*r**18-10920*logu*r**2*sqrtQ2
        -176400*logu*r**4*sqrtQ2-564480*logu*r**6*sqrtQ2-470400*logu*r**8*sqrtQ2
        -88200*logu*r**10*sqrtQ2))/(315*r**2*sqrtQ2))

    return 0.
    
@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx8(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X8 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((4*(3*Q2**5*r**2-Q2**4*r**2*(5+9*r**2)+(-1+r**2)**4*(-1+r**2+3*r**4)
        +Q2**3*(r**2+2*r**4+6*r**6)-Q2*(-1+r**2)**2*(-1+4*r**4+9*r**6)+Q2**2*(r**2
        -r**4+6*r**8)))/(3*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((2*(-30+72*Q2**6*r**2+165*r**6-370*r**8+385*r**10-162*r**12+27*r**14
        -9*Q2**5*r**2*(13+23*r**2)+Q2**4*r**2*(25+36*r**2+135*r**4)-2*Q2**2*r**4*(7
        -9*r**2-63*r**4+45*r**6)+Q2**3*(20*r**2-34*r**4+36*r**6+90*r**8)+Q2*(30
        +83*r**2-449*r**4-164*r**6-34*r**8+81*r**10-27*r**12)+r**2*(127+120*logu*sqrtQ2)
        -2*r**4*(71+180*logu*sqrtQ2)))/(45*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((2*(20*Q2**7*r**2-8*Q2**6*r**2*(4+7*r**2)+Q2**5*r**2*(7+8*r**2+36*r**4)
        -2*Q2**3*r**4*(3+2*r**2-16*r**4+10*r**6)+Q2**4*r**2*(5-11*r**2+12*r**4
        +20*r**6)-2*Q2**2*r**2*(20-57*r**2+43*r**4-20*r**6+4*r**8)+Q2*(10
        +197*r**2-410*r**4-74*r**6+76*r**8-59*r**10+24*r**12-4*r**14)+(-1
        +2*r**2)*(10-227*r**4+250*r**6-150*r**8+65*r**10-17*r**12+2*r**14
        +r**2*(67-120*logu*sqrtQ2))))/(15*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((2*(-70+120*Q2**8*r**2+6978*r**4+4795*r**10-5642*r**12+1197*r**14-190*r**16
        +15*r**18-10*Q2**7*r**2*(19+33*r**2)-Q2**4*r**4*(44+55*r**2-180*r**4
        +105*r**6)+Q2**5*r**2*(28-72*r**2+75*r**4+105*r**6)+Q2**6*(42*r**2+40*r**4
        +210*r**6)-2*Q2**3*r**2*(70-188*r**2+272*r**4-85*r**6+15*r**8)-2*Q2**2*r**2*(350
        -678*r**2+696*r**4+587*r**6-130*r**8+15*r**10)+Q2*(70+3548*r**2-1654*r**4
        -4069*r**6+19941*r**8+2896*r**10-702*r**12+145*r**14-15*r**16)-105*r**6*(117
        +40*logu*sqrtQ2)+140*r**8*(49+90*logu*sqrtQ2)+2*r**2*(-829+840*logu*sqrtQ2)))/(105*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((2*(-210+315*Q2**9*r**2-79380*r**12-31640*r**14+4142*r**16-459*r**18
        +27*r**20-45*Q2**8*r**2*(11+19*r**2)+10*Q2**7*r**2*(11+9*r**2+54*r**4)
        -2*Q2**5*r**4*(65+99*r**2-225*r**4+126*r**6)+2*Q2**6*r**2*(35-100*r**2
        +99*r**4+126*r**6)-2*Q2**4*r**2*(140-355*r**2+740*r**4-162*r**6+27*r**8)
        -2*Q2**3*r**2*(490-915*r**2+1740*r**4+1658*r**6-270*r**8+27*r**10)-2*Q2**2*r**2*(1890
        +415*r**2-2235*r**4+24978*r**6+2576*r**8-351*r**10+27*r**12)+Q2*(210
        +20375*r**2+35620*r**4-37088*r**6+284352*r**8+332960*r**10+21320*r**12
        -2900*r**14+378*r**16-27*r**18)+196*r**8*(-671+780*logu*sqrtQ2)+196*r**10*(1223
        +900*logu*sqrtQ2)-24*r**6*(583+1470*logu*sqrtQ2)+5*r**2*(-2269+1680*logu*sqrtQ2)
        +5*r**4*(4933+5040*logu*sqrtQ2)))/(315*r**2*sqrtQ2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx9(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X9 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return     (((3-9*Q2+9*Q2**2-3*Q2**3-16*r**2+57*Q2*r**2-87*Q2**2*r**2+86*Q2**3*r**2
        -108*Q2**4*r**2+132*Q2**5*r**2-91*Q2**6*r**2+27*Q2**7*r**2+30*r**4-81*Q2*r**4
        -99*Q2**2*r**4+33*Q2**3*r**4-177*Q2**4*r**4+201*Q2**5*r**4-135*Q2**6*r**4
        -54*r**6+87*Q2*r**6+138*Q2**2*r**6+201*Q2**3*r**6-36*Q2**4*r**6+243*Q2**5*r**6
        +158*r**8+21*Q2*r**8-105*Q2**2*r**8-46*Q2**3*r**8-135*Q2**4*r**8-300*r**10
        -345*Q2*r**10-291*Q2**2*r**10-135*Q2**3*r**10+294*r**12+405*Q2*r**12+243*Q2**2*r**12
        -142*r**14-135*Q2*r**14+27*r**16+24*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))/(9*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (((30-90*Q2+90*Q2**2-30*Q2**3-829*r**2+2817*Q2*r**2-3567*Q2**2*r**2
        +1799*Q2**3*r**2+75*Q2**4*r**2-801*Q2**5*r**2+1013*Q2**6*r**2-723*Q2**7*r**2
        +216*Q2**8*r**2+3252*r**4-3585*Q2*r**4-1812*Q2**2*r**4+825*Q2**3*r**4+270*Q2**4*r**4
        -1197*Q2**5*r**4+1500*Q2**6*r**4-1053*Q2**7*r**4-5202*r**6-1977*Q2*r**6
        -2709*Q2**2*r**6+606*Q2**3*r**6+1266*Q2**4*r**6-57*Q2**5*r**6+1863*Q2**6*r**6
        +3584*r**8+4245*Q2*r**8+1026*Q2**2*r**8-724*Q2**3*r**8-870*Q2**4*r**8-1161*Q2**5*r**8
        +60*r**10-1305*Q2*r**10-1089*Q2**2*r**10-645*Q2**3*r**10-405*Q2**4*r**10
        -1956*r**12-807*Q2*r**12+408*Q2**2*r**12+729*Q2**3*r**12+1538*r**14+945*Q2*r**14
        -27*Q2**2*r**14-558*r**16-243*Q2*r**16+81*r**18+600*logu*r**2*((-1+Q2)**2
        -2*(1+Q2)*r**2+r**4)**(3/2)+360*logu*r**4*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)))/(90*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return     (((30-90*Q2+90*Q2**2-30*Q2**3-1535*r**2+5175*Q2*r**2-6345*Q2**2*r**2
        +3025*Q2**3*r**2-225*Q2**4*r**2+135*Q2**5*r**2-635*Q2**6*r**2+825*Q2**7*r**2
        -600*Q2**8*r**2+180*Q2**9*r**2+7486*r**4-9213*Q2*r**4-972*Q2**2*r**4+1519*Q2**3*r**4
        +210*Q2**4*r**4+219*Q2**5*r**4-902*Q2**6*r**4+1197*Q2**7*r**4-864*Q2**8*r**4
        -14468*r**6-8415*Q2*r**6+5433*Q2**2*r**6-9170*Q2**3*r**6+690*Q2**4*r**6
        +903*Q2**5*r**6+25*Q2**6*r**6+1512*Q2**7*r**6+12898*r**8+21333*Q2*r**8
        +17046*Q2**2*r**8-524*Q2**3*r**8-354*Q2**4*r**8-717*Q2**5*r**8-972*Q2**6*r**8
        -4766*r**10-6075*Q2*r**10+1641*Q2**2*r**10-1319*Q2**3*r**10-645*Q2**4*r**10
        -216*Q2**5*r**10+910*r**12-2115*Q2*r**12+816*Q2**2*r**12+955*Q2**3*r**12
        +540*Q2**4*r**12-1436*r**14-1137*Q2*r**14-537*Q2**2*r**14-216*Q2**3*r**14
        +1168*r**16+645*Q2*r**16+108*Q2**2*r**16-323*r**18-108*Q2*r**18+36*r**20
        +840*logu*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+1560*logu*r**4*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-4560*logu*r**6*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))/(90*r**2*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (((210-630*Q2+630*Q2**2-210*Q2**3-14782*r**2+49176*Q2*r**2-58626*Q2**2*r**2
        +26472*Q2**3*r**2-1470*Q2**4*r**2-378*Q2**5*r**2+924*Q2**6*r**2-3684*Q2**7*r**2
        +4878*Q2**8*r**2-3590*Q2**9*r**2+1080*Q2**10*r**2+89013*r**4-127911*Q2*r**4
        +23085*Q2**2*r**4+10353*Q2**3*r**4-105*Q2**4*r**4+1617*Q2**5*r**4+1281*Q2**6*r**4
        -5055*Q2**7*r**4+6972*Q2**8*r**4-5130*Q2**9*r**4-40587*r**6-752676*Q2*r**6
        +1047009*Q2**2*r**6-611172*Q2**3*r**6+43293*Q2**4*r**6+4380*Q2**5*r**6+4989*Q2**6*r**6
        +384*Q2**7*r**6+8910*Q2**8*r**6-429522*r**8+969486*Q2*r**8+1207365*Q2**2*r**8
        -486755*Q2**3*r**8+732*Q2**4*r**8-2172*Q2**5*r**8-4249*Q2**6*r**8-5805*Q2**7*r**8
        +851718*r**10+551460*Q2*r**10+974265*Q2**2*r**10-12288*Q2**3*r**10-5070*Q2**4*r**10
        -3402*Q2**5*r**10-945*Q2**6*r**10-606228*r**12-655956*Q2*r**12+26871*Q2**2*r**12
        -2613*Q2**3*r**12+3885*Q2**4*r**12+2835*Q2**5*r**12+150612*r**14-26124*Q2*r**14
        +7635*Q2**2*r**14+1148*Q2**3*r**14-945*Q2**4*r**14-6288*r**16-9864*Q2*r**16
        -3039*Q2**2*r**16-135*Q2**3*r**16+7272*r**18+3444*Q2*r**18+405*Q2**2*r**18
        -1553*r**20-405*Q2*r**20+135*r**22+6720*logu*r**2*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)+22680*logu*r**4*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)
        -252000*logu*r**6*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)-180600*logu*r**8*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(630*r**2*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (((210-630*Q2+630*Q2**2-210*Q2**3-17317*r**2+56781*Q2*r**2-66231*Q2**2*r**2
        +29007*Q2**3*r**2-1680*Q2**4*r**2-168*Q2**5*r**2-126*Q2**6*r**2+846*Q2**7*r**2
        -3147*Q2**8*r**2+4225*Q2**9*r**2-3135*Q2**10*r**2+945*Q2**11*r**2+140967*r**4
        -253398*Q2*r**4+129627*Q2**2*r**4-20136*Q2**3*r**4-1260*Q2**4*r**4+1848*Q2**5*r**4
        +1428*Q2**6*r**4+1098*Q2**7*r**4-4209*Q2**8*r**4+5970*Q2**9*r**4-4455*Q2**10*r**4
        +613821*r**6-3916581*Q2*r**6+5421126*Q2**2*r**6-2792322*Q2**3*r**6+222858*Q2**4*r**6
        +25122*Q2**5*r**6+3954*Q2**6*r**6+4152*Q2**7*r**6+465*Q2**8*r**6+7695*Q2**9*r**6
        -2783889*r**8+1013640*Q2*r**8+10226022*Q2**2*r**8-5163272*Q2**3*r**8+148146*Q2**4*r**8
        +1164*Q2**5*r**8-1894*Q2**6*r**8-3678*Q2**7*r**8-5049*Q2**8*r**8+2788656*r**10
        +7601160*Q2*r**10+9782502*Q2**2*r**10-1776954*Q2**3*r**10-3150*Q2**4*r**10
        -4218*Q2**5*r**10-2730*Q2**6*r**10-648*Q2**7*r**10+429240*r**12-1704528*Q2*r**12
        +3684606*Q2**2*r**12-17472*Q2**3*r**12+486*Q2**4*r**12+3108*Q2**5*r**12+2268*Q2**6*r**12
        -1875048*r**14-2744952*Q2*r**14+46398*Q2**2*r**14-3490*Q2**3*r**14-756*Q2**5*r**14
        +699054*r**16-42354*Q2*r**16+9624*Q2**2*r**16+930*Q2**3*r**16-1611*r**18
        -11685*Q2*r**18-2547*Q2**2*r**18-81*Q2**3*r**18+7009*r**20+2790*Q2*r**20
        +243*Q2**2*r**20-1173*r**22-243*Q2*r**22+81*r**24+6720*logu*r**2*((-1
        +Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)+30240*logu*r**4*((-1+Q2)**2-2*(1
        +Q2)*r**2+r**4)**(3/2)-1008000*logu*r**6*((-1+Q2)**2-2*(1+Q2)*r**2
        +r**4)**(3/2)-2103360*logu*r**8*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)
        -579600*logu*r**10*((-1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))/(630*r**2*((
        -1+Q2)**2-2*(1+Q2)*r**2+r**4)**(3/2)))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xx10(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of X10 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((-9*Q2**7*r**2+Q2**6*r**2*(49+45*r**2)-3*Q2**5*r**2*(34+49*r**2+27*r**4)
        +3*Q2**4*r**2*(34+43*r**2+48*r**4+15*r**6)+Q2**3*(-3-68*r**2-15*r**4
        -9*r**6-86*r**8+45*r**10)+3*Q2**2*(3+33*r**4+8*r**6-17*r**8+43*r**10
        -27*r**12+r**2*(21-8*logu*sqrtQ2))+3*Q2*(-3+r**6-17*r**8+41*r**10
        -45*r**12+15*r**14+r**2*(-9+16*logu*sqrtQ2)+r**4*(17+16*logu*sqrtQ2))
        -(-1+r**2)**2*(-3+r**4-6*r**6+25*r**8-28*r**10+9*r**12+r**2*(2+24*logu*sqrtQ2)))/(9*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((-24*Q2**8*r**2+Q2**7*r**2*(127+117*r**2)-Q2**6*r**2*(257+360*r**2+207*r**4)
        +Q2**5*r**2*(249+293*r**2+313*r**4+129*r**6)+Q2**4*r**2*(-35-30*r**2
        +6*r**4-130*r**6+45*r**8)+Q2**3*(-10-291*r**2+215*r**4+146*r**6-124*r**8
        +145*r**10-81*r**12)-(-1+r**2)**3*(10-145*r**4+80*r**6+30*r**8-35*r**10
        +9*r**12+r**2*(51-120*logu*sqrtQ2))+Q2**2*(-1+r**2)*(-30-281*r**4
        -222*r**6+132*r**8-49*r**10+3*r**12+3*r**2*(-171+40*logu*sqrtQ2))
        +3*Q2*(-1+r**2)*(10-25*r**6+110*r**8-5*r**10-26*r**12+9*r**14+r**2*(101
        -80*logu*sqrtQ2)-2*r**4*(87+40*logu*sqrtQ2)))/(30*r**2*(Q2**2+(-1+r**2)**2
        -2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((-60*Q2**9*r**2+24*Q2**8*r**2*(13+12*r**2)-9*Q2**7*r**2*(69+95*r**2+56*r**4)
        +Q2**6*r**2*(591+664*r**2+701*r**4+324*r**6)+3*Q2**5*r**2*(-49-19*r**2
        +15*r**4-91*r**6+24*r**8)-3*Q2**4*r**2*(-15+260*r**2-44*r**4+104*r**6
        -125*r**8+60*r**10)+Q2**3*(-30-717*r**2+8227*r**4+11162*r**6+300*r**8
        +523*r**10-337*r**12+72*r**14)-3*Q2**2*(-30+7090*r**8+415*r**10+102*r**12
        -65*r**14+12*r**16+r**6*(6693-1520*logu*sqrtQ2)+r**4*(5370-1000*logu*sqrtQ2)
        +3*r**2*(-129+40*logu*sqrtQ2))-(-1+r**2)**2*(-30+2330*r**8+235*r**10
        +232*r**12-89*r**14+12*r**16+9*r**2*(-3+40*logu*sqrtQ2)-8*r**4*(-418
        +375*logu*sqrtQ2)-r**6*(6007+4560*logu*sqrtQ2))+3*Q2*(-30+4085*r**10
        +467*r**12+143*r**14-77*r**16+12*r**18+r**4*(4557-1760*logu*sqrtQ2)
        +3*r**2*(-59+80*logu*sqrtQ2)-r**8*(5717+3040*logu*sqrtQ2)-r**6*(3263
        +5040*logu*sqrtQ2)))/(90*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((-360*Q2**10*r**2+10*Q2**9*r**2*(185+171*r**2)-6*Q2**8*r**2*(607+826*r**2
        +495*r**4)+3*Q2**7*r**2*(1142+1243*r**2+1306*r**4+645*r**6)+Q2**6*r**2*(
        -966-273*r**2+339*r**4-1463*r**6+315*r**8)-3*Q2**5*r**2*(56+1085*r**2
        -232*r**4+552*r**6-672*r**8+315*r**10)+3*Q2**4*r**2*(140-6965*r**2-8749*r**4
        -212*r**6+680*r**8-455*r**10+105*r**12)+Q2**3*(-210-438*r**2+251601*r**4
        +673578*r**6+307217*r**8+3774*r**10+1347*r**12-434*r**14+45*r**16)
        -(-1+r**2)**2*(-210+116935*r**10+273*r**12+2051*r**14-479*r**16+45*r**18
        +r**4*(98599-83160*logu*sqrtQ2)+4*r**2*(713+420*logu*sqrtQ2)-35*r**8*(3917
        +3000*logu*sqrtQ2)-63*r**6*(1317+4400*logu*sqrtQ2))-3*Q2**2*(-210+210671*r**10
        +2729*r**12+1273*r**14-389*r**16+45*r**18+r**6*(424675-92400*logu*sqrtQ2)
        +r**8*(425291-35000*logu*sqrtQ2)+8*r**2*(129+70*logu*sqrtQ2)-3*r**4*(
        -57121+9240*logu*sqrtQ2))+3*Q2*(-210+152208*r**12+2324*r**14+1572*r**16
        -434*r**18+45*r**20+r**6*(52028-240240*logu*sqrtQ2)-560*r**10*(-4+125*logu*sqrtQ2)
        +2*r**2*(1041+560*logu*sqrtQ2)-7*r**4*(-18613+7760*logu*sqrtQ2)-14*r**8*(24439
        +18200*logu*sqrtQ2)))/(630*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((-105*Q2**11*r**2+5*Q2**10*r**2*(107+99*r**2)-5*Q2**9*r**2*(209+282*r**2
        +171*r**4)+Q2**8*r**2*(975+1037*r**2+1087*r**4+561*r**6)-6*Q2**4*r**4*(3150
        +10735*r**2+3403*r**4-77*r**6+9*r**8)+2*Q2**7*r**2*(-145-33*r**2+54*r**4
        -197*r**6+36*r**8)+2*Q2**5*r**4*(-1736-1993*r**2-102*r**4+281*r**6-182*r**8
        +42*r**10)-2*Q2**6*r**2*(35+392*r**2-93*r**4+223*r**6-273*r**8+126*r**10)
        +Q2**3*(-70+2825*r**2+247928*r**4+1107138*r**6+1144536*r**8+252394*r**10
        -112*r**12+674*r**14-122*r**16+9*r**18)-3*Q2**2*(-70+2755*r**2+180010*r**12
        -198*r**14+624*r**16-113*r**18+9*r**20+r**8*(958578-150080*logu*sqrtQ2)
        +r**6*(714066-143360*logu*sqrtQ2)+r**4*(172913-25760*logu*sqrtQ2)+r**10*(726626
        -25200*logu*sqrtQ2))-(-1+r**2)**2*(-70+2895*r**2+117180*r**12-1428*r**14
        +850*r**16-131*r**18+9*r**20+r**4*(103003-77280*logu*sqrtQ2)+r**10*(55636
        -75600*logu*sqrtQ2)-84*r**8*(4191+5360*logu*sqrtQ2)-60*r**6*(-1235
        +7168*logu*sqrtQ2))+3*Q2*(-70+2825*r**2+140952*r**14-578*r**16+719*r**18
        -122*r**20+9*r**22+r**6*(268943-338240*logu*sqrtQ2)+r**4*(131658-51520*logu*sqrtQ2)
        -336*r**12*(-811+150*logu*sqrtQ2)-56*r**10*(7643+6260*logu*sqrtQ2)
        -8*r**8*(48603+73360*logu*sqrtQ2)))/(210*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2)))

    return 0. 
"Here we define the 1/mb^4 and 1/mb^5 corrections to the centralized q2-moments in the RPI basis"

def moment_1_KIN_MS_HO_RPI(q2cut, par, hqeRPI, flagmb4 = 1, flagmb5 = 1):
    """ 1/mb^4 and 1/mb^5 corrections to the central moment of the q2 spectrum. Moment n. 1 """
    Q2=q2cut/par.mbkin**2
    r=par.mcMS/par.mbkin
    u=(1.+r**2-Q2-math.sqrt(r**4+(1.-Q2)**2-2*r**2*(1.+Q2)))/2/r

    mupi=hqeRPI.mupi/par.mbkin**2
    muG=hqeRPI.muG/par.mbkin**2
    rhoD=hqeRPI.rhoD/par.mbkin**3

    rEtilde=hqeRPI.rEtilde/par.mbkin**4
    rG=hqeRPI.rG/par.mbkin**4
    sEtilde=hqeRPI.sEtilde/par.mbkin**4
    sB=hqeRPI.sB/par.mbkin**4
    sqB=hqeRPI.sqB/par.mbkin**4
    X1=hqeRPI.X1/par.mbkin**5
    X2=hqeRPI.X2/par.mbkin**5
    X3=hqeRPI.X3/par.mbkin**5
    X4=hqeRPI.X4/par.mbkin**5
    X5=hqeRPI.X5/par.mbkin**5
    X6=hqeRPI.X6/par.mbkin**5
    X7=hqeRPI.X7/par.mbkin**5
    X8=hqeRPI.X8/par.mbkin**5
    X9=hqeRPI.X9/par.mbkin**5
    X10=hqeRPI.X10/par.mbkin**5

    res = 0
    
    if flagmb4 == 1:
        res += rEtilde*(XrE(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - XrE(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += rG*(XrG(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - XrG(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += sEtilde*(XsE(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - XsE(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += sB*(XsB(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - XsB(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += sqB*(XsqB(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - XsqB(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)

        res += (muG**2)*(SM.XG(0,u,r,0,0)**2 * SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**3 - SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += (mupi**2)*0
        res += mupi*muG*(SM.XG(1,u,r,0,0)/(2*SM.X(0,u,r,0,0)) - SM.XG(0,u,r,0,0)*SM.X(1,u,r,0,0)/(2*SM.X(0,u,r,0,0)**2))
    
    if flagmb5 == 1:
        res += X1*(Xx1(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx1(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += X2*(Xx2(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx2(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += X3*(Xx3(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx3(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += X4*(Xx4(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx4(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += X5*(Xx5(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx5(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += X6*(Xx6(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx6(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += X7*(Xx7(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx7(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += X8*(Xx8(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx8(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += X9*(Xx9(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx9(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += X10*(Xx10(1,Q2,r,0,0)/SM.X(0,u,r,0,0) - Xx10(0,Q2,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**2)
        res += muG*rhoD*(2*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0)*SM.X(1,u,r,0,0)/(SM.X(0,u,r,0,0))**3 - (SM.XG(0,u,r,0,0)*SM.XD(1,u,r,0,0,0)+SM.XG(1,u,r,0,0)*SM.XD(0,u,r,0,0,0))/(SM.X(0,u,r,0,0))**2)
        res += mupi*rhoD*(SM.XD(1,u,r,0,0,0)/(2*SM.X(0,u,r,0,0)) - SM.XD(0,u,r,0,0,0)*SM.X(1,u,r,0,0)/(2*(SM.X(0,u,r,0,0))**2))
    
    return res*par.mbkin**2

def moment_2_KIN_MS_HO_RPI(q2cut, par, hqeRPI, flagmb4 = 1, flagmb5 = 1):
    """ 1/mb^4 and 1/mb^5 corrections to the central moment of the q2 spectrum. Moment n. 2 """
    Q2=q2cut/par.mbkin**2
    r=par.mcMS/par.mbkin
    u=(1.+r**2-Q2-math.sqrt(r**4+(1.-Q2)**2-2*r**2*(1.+Q2)))/2/r

    mupi=hqeRPI.mupi/par.mbkin**2
    muG=hqeRPI.muG/par.mbkin**2
    rhoD=hqeRPI.rhoD/par.mbkin**3

    rEtilde=hqeRPI.rEtilde/par.mbkin**4
    rG=hqeRPI.rG/par.mbkin**4
    sEtilde=hqeRPI.sEtilde/par.mbkin**4
    sB=hqeRPI.sB/par.mbkin**4
    sqB=hqeRPI.sqB/par.mbkin**4
    X1=hqeRPI.X1/par.mbkin**5
    X2=hqeRPI.X2/par.mbkin**5
    X3=hqeRPI.X3/par.mbkin**5
    X4=hqeRPI.X4/par.mbkin**5
    X5=hqeRPI.X5/par.mbkin**5
    X6=hqeRPI.X6/par.mbkin**5
    X7=hqeRPI.X7/par.mbkin**5
    X8=hqeRPI.X8/par.mbkin**5
    X9=hqeRPI.X9/par.mbkin**5
    X10=hqeRPI.X10/par.mbkin**5

    res = 0
    
    if flagmb4 == 1:
        res += ((2*SM.X(1,u,r,0,0)**2*XrE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*XrE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*XrE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XrE(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*rEtilde
        res += ((2*SM.X(1,u,r,0,0)**2*XrG(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*XrG(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*XrG(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XrG(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*rG
        res += ((2*SM.X(1,u,r,0,0)**2*XsE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*XsE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*XsE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XsE(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*sEtilde
        res += ((2*SM.X(1,u,r,0,0)**2*XsB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*XsB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*XsB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XsB(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*sB
        res += ((2*SM.X(1,u,r,0,0)**2*XsqB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*XsqB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*XsqB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XsqB(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*sqB
        res += ((-3*SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4+(SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3
        +(4*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -SM.XG(1,u,r,0,0)**2/SM.X(0,u,r,0,0)**2-(SM.XG(0,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG**2
        res += ((SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)
        -(SM.X(1,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2+SM.XG(2,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*muG*mupi
        res += 0*mupi**2

    if flagmb5 == 1:
        res += ((2*SM.X(1,u,r,0,0)**2*Xx1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx1(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X1
        res += ((2*SM.X(1,u,r,0,0)**2*Xx2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx2(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X2
        res += ((2*SM.X(1,u,r,0,0)**2*Xx3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx3(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X3
        res += ((2*SM.X(1,u,r,0,0)**2*Xx4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx4(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X4
        res += ((2*SM.X(1,u,r,0,0)**2*Xx5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx5(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X5
        res += ((2*SM.X(1,u,r,0,0)**2*Xx6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx6(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X6
        res += ((2*SM.X(1,u,r,0,0)**2*Xx7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx7(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X7
        res += ((2*SM.X(1,u,r,0,0)**2*Xx8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx8(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X8
        res += ((2*SM.X(1,u,r,0,0)**2*Xx9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx9(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X9
        res += ((2*SM.X(1,u,r,0,0)**2*Xx10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xx10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xx10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx10(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*X10
        res += ((SM.X(1,u,r,0,0)**2*SM.XD(0,u,r,0,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,0))/(2*SM.X(0,u,r,0,0)**2)
        -(SM.X(1,u,r,0,0)*SM.XD(1,u,r,0,0,0))/SM.X(0,u,r,0,0)**2+SM.XD(2,u,r,0,0,0)/(2*SM.X(0,u,r,0,0)))*mupi*rhoD
        res += ((-6*SM.X(1,u,r,0,0)**2*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(2*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(4*SM.X(1,u,r,0,0)*SM.XD(1,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.XD(2,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**2+(4*SM.X(1,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(2*SM.XD(1,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XD(0,u,r,0,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoD        

    return res*par.mbkin**4

def moment_3_KIN_MS_HO_RPI(q2cut, par, hqeRPI, flagmb4 = 1, flagmb5 = 1):
    """ 1/mb^4 and 1/mb^5 corrections to the central moment of the q2 spectrum. Moment n. 3 """
    Q2=q2cut/par.mbkin**2
    r=par.mcMS/par.mbkin
    u=(1.+r**2-Q2-math.sqrt(r**4+(1.-Q2)**2-2*r**2*(1.+Q2)))/2/r

    mupi=hqeRPI.mupi/par.mbkin**2
    muG=hqeRPI.muG/par.mbkin**2
    rhoD=hqeRPI.rhoD/par.mbkin**3

    rEtilde=hqeRPI.rEtilde/par.mbkin**4
    rG=hqeRPI.rG/par.mbkin**4
    sEtilde=hqeRPI.sEtilde/par.mbkin**4
    sB=hqeRPI.sB/par.mbkin**4
    sqB=hqeRPI.sqB/par.mbkin**4
    X1=hqeRPI.X1/par.mbkin**5
    X2=hqeRPI.X2/par.mbkin**5
    X3=hqeRPI.X3/par.mbkin**5
    X4=hqeRPI.X4/par.mbkin**5
    X5=hqeRPI.X5/par.mbkin**5
    X6=hqeRPI.X6/par.mbkin**5
    X7=hqeRPI.X7/par.mbkin**5
    X8=hqeRPI.X8/par.mbkin**5
    X9=hqeRPI.X9/par.mbkin**5
    X10=hqeRPI.X10/par.mbkin**5

    res = 0
    
    if flagmb4 == 1:
        res += ((-6*SM.X(1,u,r,0,0)**3*XrE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XrE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*XrE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XrE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*XrE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*XrE(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +XrE(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*rEtilde
        res += ((-6*SM.X(1,u,r,0,0)**3*XrG(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XrG(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*XrG(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XrG(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*XrG(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*XrG(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +XrG(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*rG
        res += ((-6*SM.X(1,u,r,0,0)**3*XsE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XsE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*XsE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XsE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*XsE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*XsE(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +XsE(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*sEtilde
        res += ((-6*SM.X(1,u,r,0,0)**3*XsB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XsB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*XsB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XsB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*XsB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*XsB(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +XsB(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*sB
        res += ((-6*SM.X(1,u,r,0,0)**3*XsqB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XsqB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*XsqB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XsqB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*XsqB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*XsqB(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +XsqB(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*sqB
        res += ((12*SM.X(1,u,r,0,0)**3*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**5-(9*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4
        +(SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3-(18*SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(6*SM.X(1,u,r,0,0)*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3+(6*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.XG(1,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XG(0,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG**2
        res += ((-3*SM.X(1,u,r,0,0)**3*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4+(3*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)+(3*SM.X(1,u,r,0,0)**2*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*SM.XG(1,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)-(3*SM.X(1,u,r,0,0)*SM.XG(2,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)
        +SM.XG(3,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*muG*mupi
        res += 0*mupi**2

    if flagmb5 == 1:
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx1(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx1(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X1
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx2(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx2(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X2
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx3(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx3(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X3
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx4(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx4(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X4
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx5(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx5(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X5
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx6(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx6(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X6
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx7(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx7(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X7
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx8(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx8(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X8
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx9(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx9(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X9
        res += ((-6*SM.X(1,u,r,0,0)**3*Xx10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xx10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xx10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xx10(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xx10(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*X10
        res += ((-3*SM.X(1,u,r,0,0)**3*SM.XD(0,u,r,0,0,0))/SM.X(0,u,r,0,0)**4+(3*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,0))/(2*SM.X(0,u,r,0,0)**2)+(3*SM.X(1,u,r,0,0)**2*SM.XD(1,u,r,0,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,0))/(2*SM.X(0,u,r,0,0)**2)-(3*SM.X(1,u,r,0,0)*SM.XD(2,u,r,0,0,0))/(2*SM.X(0,u,r,0,0)**2)
        +SM.XD(3,u,r,0,0,0)/(2*SM.X(0,u,r,0,0)))*mupi*rhoD
        res += ((24*SM.X(1,u,r,0,0)**3*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(18*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(2*SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(18*SM.X(1,u,r,0,0)**2*SM.XD(1,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(6*SM.X(1,u,r,0,0)*SM.XD(2,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.XD(3,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**2-(18*SM.X(1,u,r,0,0)**2*SM.XD(0,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(12*SM.X(1,u,r,0,0)*SM.XD(1,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.XD(2,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.XD(1,u,r,0,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XD(0,u,r,0,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoD

    return res*par.mbkin**6

def moment_4_KIN_MS_HO_RPI(q2cut, par, hqeRPI, flagmb4 = 1, flagmb5 = 1):
    """ 1/mb^4 and 1/mb^5 corrections to the central moment of the q2 spectrum. Moment n. 4 """
    Q2=q2cut/par.mbkin**2
    r=par.mcMS/par.mbkin
    u=(1.+r**2-Q2-math.sqrt(r**4+(1.-Q2)**2-2*r**2*(1.+Q2)))/2/r

    mupi=hqeRPI.mupi/par.mbkin**2
    muG=hqeRPI.muG/par.mbkin**2
    rhoD=hqeRPI.rhoD/par.mbkin**3

    rEtilde=hqeRPI.rEtilde/par.mbkin**4
    rG=hqeRPI.rG/par.mbkin**4
    sEtilde=hqeRPI.sEtilde/par.mbkin**4
    sB=hqeRPI.sB/par.mbkin**4
    sqB=hqeRPI.sqB/par.mbkin**4
    X1=hqeRPI.X1/par.mbkin**5
    X2=hqeRPI.X2/par.mbkin**5
    X3=hqeRPI.X3/par.mbkin**5
    X4=hqeRPI.X4/par.mbkin**5
    X5=hqeRPI.X5/par.mbkin**5
    X6=hqeRPI.X6/par.mbkin**5
    X7=hqeRPI.X7/par.mbkin**5
    X8=hqeRPI.X8/par.mbkin**5
    X9=hqeRPI.X9/par.mbkin**5
    X10=hqeRPI.X10/par.mbkin**5

    res = 0
    
    if flagmb4 == 1:
        res += ((12*SM.X(1,u,r,0,0)**4*XrE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*XrE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*XrE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*XrE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*XrE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XrE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*XrE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XrE(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*XrE(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XrE(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*rEtilde
        res += ((12*SM.X(1,u,r,0,0)**4*XrG(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*XrG(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*XrG(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*XrG(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*XrG(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XrG(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*XrG(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XrG(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*XrG(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XrG(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*rG
        res += ((12*SM.X(1,u,r,0,0)**4*XsE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*XsE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*XsE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*XsE(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*XsE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XsE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*XsE(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XsE(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*XsE(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XsE(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*sEtilde
        res += ((12*SM.X(1,u,r,0,0)**4*XsB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*XsB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*XsB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*XsB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*XsB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XsB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*XsB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XsB(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*XsB(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XsB(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*sB
        res += ((12*SM.X(1,u,r,0,0)**4*XsqB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*XsqB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*XsqB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*XsqB(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*XsqB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*XsqB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*XsqB(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*XsqB(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*XsqB(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+XsqB(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*sqB
        res += ((-30*SM.X(1,u,r,0,0)**4*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**6+(36*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**5
        -(12*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4
        +(SM.X(4,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3+(48*SM.X(1,u,r,0,0)**3*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(36*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(18*SM.X(1,u,r,0,0)**2*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4+(6*SM.X(2,u,r,0,0)*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3
        -(18*SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.XG(1,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(8*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.XG(1,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XG(0,u,r,0,0)*SM.XG(4,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG**2
        res += ((6*SM.X(1,u,r,0,0)**4*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**5-(9*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(4*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)-(6*SM.X(1,u,r,0,0)**3*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(2*SM.X(3,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2+(3*SM.X(1,u,r,0,0)**2*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(2*SM.X(1,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2+SM.XG(4,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*muG*mupi
        res += 0*mupi**2

    if flagmb5 == 1:
        res += ((12*SM.X(1,u,r,0,0)**4*Xx1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx1(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx1(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx1(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X1
        res += ((12*SM.X(1,u,r,0,0)**4*Xx2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx2(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx2(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx2(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X2
        res += ((12*SM.X(1,u,r,0,0)**4*Xx3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx3(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx3(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx3(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X3
        res += ((12*SM.X(1,u,r,0,0)**4*Xx4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx4(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx4(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx4(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X4
        res += ((12*SM.X(1,u,r,0,0)**4*Xx5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx5(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx5(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx5(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X5
        res += ((12*SM.X(1,u,r,0,0)**4*Xx6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx6(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx6(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx6(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X6
        res += ((12*SM.X(1,u,r,0,0)**4*Xx7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx7(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx7(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx7(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X7
        res += ((12*SM.X(1,u,r,0,0)**4*Xx8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx8(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx8(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx8(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X8
        res += ((12*SM.X(1,u,r,0,0)**4*Xx9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx9(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx9(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx9(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X9
        res += ((12*SM.X(1,u,r,0,0)**4*Xx10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xx10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xx10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xx10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xx10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xx10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xx10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xx10(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xx10(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xx10(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*X10
        res += ((6*SM.X(1,u,r,0,0)**4*SM.XD(0,u,r,0,0,0))/SM.X(0,u,r,0,0)**5-(9*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,0))/SM.X(0,u,r,0,0)**4
        +(4*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*SM.XD(0,u,r,0,0,0))/(2*SM.X(0,u,r,0,0)**2)-(6*SM.X(1,u,r,0,0)**3*SM.XD(1,u,r,0,0,0))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,0))/SM.X(0,u,r,0,0)**3
        -(2*SM.X(3,u,r,0,0)*SM.XD(1,u,r,0,0,0))/SM.X(0,u,r,0,0)**2+(3*SM.X(1,u,r,0,0)**2*SM.XD(2,u,r,0,0,0))/SM.X(0,u,r,0,0)**3
        -(2*SM.X(1,u,r,0,0)*SM.XD(3,u,r,0,0,0))/SM.X(0,u,r,0,0)**2+SM.XD(4,u,r,0,0,0)/(2*SM.X(0,u,r,0,0)))*mupi*rhoD
        res += ((-60*SM.X(1,u,r,0,0)**4*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**6
        +(72*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(24*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(2*SM.X(4,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(48*SM.X(1,u,r,0,0)**3*SM.XD(1,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(36*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(3,u,r,0,0)*SM.XD(1,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(18*SM.X(1,u,r,0,0)**2*SM.XD(2,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.XD(3,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.XD(4,u,r,0,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**2+(48*SM.X(1,u,r,0,0)**3*SM.XD(0,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(36*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(36*SM.X(1,u,r,0,0)**2*SM.XD(1,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(12*SM.X(1,u,r,0,0)*SM.XD(2,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.XD(3,u,r,0,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2-(18*SM.X(1,u,r,0,0)**2*SM.XD(0,u,r,0,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.XD(1,u,r,0,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(8*SM.X(1,u,r,0,0)*SM.XD(0,u,r,0,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.XD(1,u,r,0,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XD(0,u,r,0,0,0)*SM.XG(4,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoD
        
    return res*par.mbkin**8