from numba import jit, int64, float64
from kolya import parameters
from kolya import Q2moments_SM as SM
import math

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xm1(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of m1 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (1+Q2**5-9*r**2+8*r**4+8*r**6-9*r**8+r**10-3*Q2**4*(1+r**2)+2*Q2**3*(1
        +r**2+r**4)+2*Q2**2*(1-2*r**2-2*r**4+r**6)+Q2*(-3+14*r**2+26*r**4
        +14*r**6-3*r**8)+24*logu*r**4*sqrtQ2)/(8*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (8*Q2**6-23*Q2**5*(1+r**2)+Q2**4*(15+14*r**2+15*r**4)+2*Q2**3*(5-8*r**2
        -8*r**4+5*r**6)-2*Q2**2*(5-17*r**2+84*r**4-17*r**6+5*r**8)+Q2*(-3
        +39*r**2+684*r**4+684*r**6+39*r**8-3*r**10)+3*(1-16*r**2-65*r**8
        -16*r**10+r**12+40*r**6*(4+3*logu*sqrtQ2)+5*r**4*(-13+24*logu*sqrtQ2)))/(80*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (1+5*Q2**7-25*r**2-351*r**4+375*r**6+375*r**8-351*r**10-25*r**12
        +r**14-14*Q2**6*(1+r**2)+Q2**5*(9+8*r**2+9*r**4)+Q2**4*(5-7*r**2
        -7*r**4+5*r**6)+Q2**3*(-5+18*r**2-54*r**4+18*r**6-5*r**8)-2*Q2**2*(r**2
        +69*r**4+69*r**6+r**8)+Q2*(-1+22*r**2+781*r**4+1756*r**6+781*r**8
        +22*r**10-r**12)+360*logu*r**4*sqrtQ2+960*logu*r**6*sqrtQ2+360*logu*r**8*sqrtQ2)/(60*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (1+8*Q2**8-36*r**2-1064*r**4-476*r**6+3150*r**8-476*r**10-1064*r**12
        -36*r**14+r**16-22*Q2**7*(1+r**2)+2*Q2**6*(7+6*r**2+7*r**4)+Q2**5*(7
        -9*r**2-9*r**4+7*r**6)+Q2**4*(-7+26*r**2-62*r**4+26*r**6-7*r**8)
        -2*Q2**3*(r**2+41*r**4+41*r**6+r**8)-2*Q2**2*(r**2+178*r**4+482*r**6
        +178*r**8+r**10)+Q2*(-1+33*r**2+2007*r**4+8041*r**6+8041*r**8+2007*r**10
        +33*r**12-r**14)+840*logu*r**4*sqrtQ2+4200*logu*r**6*sqrtQ2+4200*logu*r**8*sqrtQ2
        +840*logu*r**10*sqrtQ2)/(112*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (35*Q2**9-95*Q2**8*(1+r**2)+10*Q2**7*(6+5*r**2+6*r**4)+Q2**6*(28-34*r**2
        -34*r**4+28*r**6)-6*Q2**4*(r**2+32*r**4+32*r**6+r**8)-2*Q2**5*(14-53*r**2
        +111*r**4-53*r**6+14*r**8)-6*Q2**3*(r**2+98*r**4+264*r**6+98*r**8+r**10)
        -6*Q2**2*(r**2+375*r**4+1934*r**6+1934*r**8+375*r**10+r**12)-3*Q2*(1
        -46*r**2-4322*r**4-27254*r**6-47638*r**8-27254*r**10-4322*r**12-46*r**14
        +r**16)+3*(1-49*r**2-2500*r**14-49*r**16+r**18+28*r**12*(-217+60*logu*sqrtQ2)
        +20*r**4*(-125+84*logu*sqrtQ2)+112*r**10*(77+120*logu*sqrtQ2)+112*r**8*(77
        +225*logu*sqrtQ2)+28*r**6*(-217+480*logu*sqrtQ2)))/(560*sqrtQ2)

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xm2(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of m2 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (-165*Q2**7+11*Q2**6*(11+75*r**2)+Q2**5*(291+612*r**2-1485*r**4)+Q2**4*(
        -471+477*r**2-3219*r**4+825*r**6)+Q2**3*(889+624*r**2-3282*r**4+4336*r**6
        +825*r**8)-3*Q2**2*(559-97*r**2-1454*r**6+543*r**8+495*r**10-64*logu*sqrtQ2
        +r**4*(2194-216*logu*sqrtQ2))-(-1+r**2)**2*(533-1565*r**2-776*r**6
        -109*r**8+165*r**10-192*logu*sqrtQ2-24*r**4*(-73+27*logu*sqrtQ2))
        +3*Q2*(515-747*r**8-220*r**10+275*r**12-128*logu*sqrtQ2-24*r**6*(
        -59+18*logu*sqrtQ2)-4*r**2*(167+32*logu*sqrtQ2)-r**4*(571+432*logu*sqrtQ2)))/(72*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (-264*Q2**8+33*Q2**7*(7+39*r**2)+Q2**6*(443+838*r**2-2277*r**4)+3*Q2**5*(
        -199+177*r**2-1519*r**4+473*r**6)+Q2**4*(399+66*r**2-5178*r**4+5442*r**6
        +495*r**8)-Q2**3*(1243-4813*r**2+5586*r**4-8174*r**6+1043*r**8+891*r**10)
        +3*Q2**2*(683-1611*r**8-458*r**10+11*r**12-256*logu*sqrtQ2+36*r**6*(13
        +18*logu*sqrtQ2)+2*r**2*(-1125+512*logu*sqrtQ2)-r**4*(1067+888*logu*sqrtQ2))
        +3*Q2*(-381+181*r**10+83*r**12+99*r**14+512*logu*sqrtQ2+r**2*(2483
        -1536*logu*sqrtQ2)-r**4*(4075+272*logu*sqrtQ2)+r**6*(2869+480*logu*sqrtQ2)
        -r**8*(1259+1296*logu*sqrtQ2))-(-1+r**2)**2*(-125-451*r**8-16*r**10
        +99*r**12+768*logu*sqrtQ2-16*r**2*(-67+192*logu*sqrtQ2)-8*r**6*(-172
        +243*logu*sqrtQ2)+r**4*(-1955+2664*logu*sqrtQ2)))/(144*(Q2**2+(-1+r**2)**2
        -2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (-275*Q2**9+264*Q2**8*(1+5*r**2)+Q2**7*(438+798*r**2-2310*r**4)+Q2**6*(
        -583+465*r**2-4443*r**4+1485*r**6)+6*Q2**5*(61-18*r**2-758*r**4+846*r**6
        +55*r**8)-3*Q2**4*(-265+1315*r**2+142*r**4-1250*r**6+335*r**8+275*r**10)
        +2*Q2**3*(-3617+14775*r**2+16887*r**4-8878*r**6+3045*r**8-297*r**10
        +165*r**12)-(-1+r**2)**2*(-2629+579*r**10+41*r**12+55*r**14+2400*logu*sqrtQ2
        +r**2*(19909-8640*logu*sqrtQ2)+55*r**6*(455+192*logu*sqrtQ2)-5*r**8*(1255
        +648*logu*sqrtQ2)-15*r**4*(2447+1176*logu*sqrtQ2))-3*Q2**2*(-4629+3581*r**10
        +151*r**12+55*r**14+800*logu*sqrtQ2-7*r**4*(-2071+840*logu*sqrtQ2)
        -3*r**2*(-6617+960*logu*sqrtQ2)-r**8*(10723+1080*logu*sqrtQ2)+r**6*(21377
        +3520*logu*sqrtQ2))+3*Q2*(-3429+1700*r**12+96*r**14+55*r**16+1600*logu*sqrtQ2
        -320*r**2*(-68+13*logu*sqrtQ2)-144*r**10*(79+15*logu*sqrtQ2)-80*r**6*(301
        +59*logu*sqrtQ2)+10*r**8*(3275+488*logu*sqrtQ2)-4*r**4*(4369+4380*logu*sqrtQ2)))/(180*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (-6600*Q2**10+110*Q2**9*(61+285*r**2)-6*Q2**8*(-1677-3010*r**2+9075*r**4)
        +3*Q2**7*(-4527+3333*r**2-34075*r**4+11825*r**6)+Q2**6*(7791-4830*r**2
        -100794*r**4+113890*r**6+5775*r**8)-3*Q2**5*(-2961+20083*r**2+16658*r**4
        -31726*r**6+7315*r**8+5775*r**10)+3*Q2**4*(7525-51870*r**2-236241*r**4
        +83940*r**6-12465*r**8-4830*r**10+1925*r**12)+Q2**3*(-356007+1909845*r**2
        +11786067*r**4+4951487*r**6-1589985*r**8+256563*r**10+2485*r**12+825*r**14)
        -(-1+r**2)**2*(-158887+51128*r**12+1660*r**14+825*r**16+107520*logu*sqrtQ2
        +r**2*(1544572-403200*logu*sqrtQ2)-7560*r**4*(1+655*logu*sqrtQ2)-84*r**10*(7907
        +1350*logu*sqrtQ2)+350*r**8*(10769+1836*logu*sqrtQ2)-700*r**6*(6481
        +2346*logu*sqrtQ2))-3*Q2**2*(-248487+152248*r**12+3310*r**14+825*r**16
        +35840*logu*sqrtQ2+r**6*(6168146-547400*logu*sqrtQ2)-2*r**10*(495671
        +18900*logu*sqrtQ2)-6*r**2*(-245533+22400*logu*sqrtQ2)-8*r**4*(-863567
        +206325*logu*sqrtQ2)+r**8*(3494846+214200*logu*sqrtQ2))+3*Q2*(-194727
        +90588*r**14+2485*r**16+825*r**18+71680*logu*sqrtQ2-140*r**12*(6449
        +540*logu*sqrtQ2)-350*r**8*(1217+1904*logu*sqrtQ2)+126*r**10*(32687
        +2800*logu*sqrtQ2)-35*r**2*(-45479+5632*logu*sqrtQ2)-140*r**6*(51169
        +31400*logu*sqrtQ2)-4*r**4*(-720743+892500*logu*sqrtQ2)))/(5040*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (-5775*Q2**11+165*Q2**10*(37+165*r**2)+Q2**9*(8495+15160*r**2-47025*r**4)
        +3*Q2**8*(-3891+2697*r**2-28951*r**4+10285*r**6)+6*Q2**7*(1044-904*r**2
        -14009*r**4+15864*r**6+660*r**8)-6*Q2**4*(-6160+43120*r**2+653253*r**4
        +298249*r**6-60967*r**8+6165*r**10)-2*Q2**6*(-2478+21546*r**2+27759*r**4
        -40529*r**6+9002*r**8+6930*r**10)+6*Q2**5*(658-11340*r**2-71343*r**4
        +18672*r**6-2175*r**8-1932*r**10+770*r**12)+Q2**3*(-526737+3646704*r**2
        +53502210*r**4+79354688*r**6+16397758*r**8-3330240*r**10+338434*r**12
        +2288*r**14+495*r**16)-3*Q2**2*(-378897+208602*r**14+2783*r**16+495*r**18
        +49280*logu*sqrtQ2+r**6*(55514362-10774400*logu*sqrtQ2)+r**4*(34323418
        -6630960*logu*sqrtQ2)+r**2*(2972127-197120*logu*sqrtQ2)-2*r**12*(1100291
        +22680*logu*sqrtQ2)-50*r**8*(-935271+29288*logu*sqrtQ2)+6*r**10*(2029957
        +64960*logu*sqrtQ2))+3*Q2*(-304977+136789*r**16+2288*r**18+495*r**20
        +98560*logu*sqrtQ2+r**2*(3153904-295680*logu*sqrtQ2)-160*r**14*(11999
        +567*logu*sqrtQ2)-224*r**10*(-75908+9595*logu*sqrtQ2)+28*r**12*(462077
        +24600*logu*sqrtQ2)-28*r**8*(1396451+874200*logu*sqrtQ2)-32*r**6*(414347
        +1087835*logu*sqrtQ2)-5*r**4*(-4269905+2731232*logu*sqrtQ2))-(-1+r**2)**2*(
        -255697+89636*r**14+1793*r**16+495*r**18+147840*logu*sqrtQ2+r**2*(3113921
        -591360*logu*sqrtQ2)-28*r**12*(54607+4860*logu*sqrtQ2)-560*r**8*(4697
        +7845*logu*sqrtQ2)+112*r**10*(108731+10440*logu*sqrtQ2)-28*r**6*(822031
        +1154400*logu*sqrtQ2)-4*r**4*(-3012041+4973220*logu*sqrtQ2)))/(5040*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xm3(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of m3 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (13-27*Q2**5-49*r**2+108*r**4-148*r**6+103*r**8-27*r**10+Q2**4*(49
        +81*r**2)-2*Q2**3*(17+17*r**2+27*r**4)+Q2**2*(6+28*r**2+24*r**4-54*r**6)
        +Q2*(-43+10*r**2+46*r**4-142*r**6+81*r**8)-24*logu*sqrtQ2)/(9*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (799-216*Q2**6-744*r**2-1495*r**4+2360*r**6-1335*r**8+496*r**10-81*r**12
        +Q2**5*(381+621*r**2)-Q2**4*(245+218*r**2+405*r**4)+Q2**3*(50+232*r**2
        +32*r**4-270*r**6)+2*Q2**2*(135+161*r**2+8*r**4-219*r**6+135*r**8)
        +Q2*(-1399-3693*r**2-268*r**4+252*r**6-253*r**8+81*r**10)-600*logu*sqrtQ2
        -2040*logu*r**2*sqrtQ2)/(90*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (-2*(-418+45*Q2**7-723*r**2+1986*r**4+95*r**6-1230*r**8+363*r**10
        -82*r**12+9*r**14-6*Q2**6*(13+21*r**2)+Q2**5*(48+39*r**2+81*r**4)
        +Q2**4*(-10-49*r**2+2*r**4+45*r**6)-2*Q2**2*(60+272*r**2+125*r**4
        -46*r**6+9*r**8)-Q2**3*(35+64*r**2+22*r**4-82*r**6+45*r**8)+Q2*(658
        +4017*r**2+5033*r**4+488*r**6-162*r**8+55*r**10-9*r**12)+240*logu*sqrtQ2
        +2040*logu*r**2*sqrtQ2+2760*logu*r**4*sqrtQ2))/(45*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (18709-1080*Q2**8+107480*r**2-40824*r**4-268940*r**6+128450*r**8+65016*r**10
        -11480*r**12+1724*r**14-135*r**16+10*Q2**7*(185+297*r**2)-2*Q2**6*(553
        +418*r**2+945*r**4)+Q2**5*(231+1187*r**2-129*r**4-945*r**6)+2*Q2**3*(770
        +4041*r**2+3057*r**4-779*r**6+135*r**8)+Q2**4*(665+1502*r**2+782*r**4
        -1830*r**6+945*r**8)+2*Q2**2*(2310+24131*r**2+40914*r**4+5934*r**6
        -1184*r**8+135*r**10)+Q2*(-27949-307247*r**2-790961*r**4-575151*r**6
        -38251*r**8+6983*r**10-1319*r**12+135*r**14)-9240*logu*sqrtQ2-143640*logu*r**2*sqrtQ2
        -415800*logu*r**4*sqrtQ2-298200*logu*r**6*sqrtQ2)/(630*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (26371-945*Q2**9+296325*r**2+358208*r**4-840560*r**6-620844*r**8+680204*r**10
        +112000*r**12-13008*r**14+1385*r**16-81*r**18+15*Q2**8*(107+171*r**2)
        -10*Q2**7*(94+67*r**2+162*r**4)-2*Q2**6*(-98-523*r**2+73*r**4+378*r**6)
        +2*Q2**4*(490+2819*r**2+2714*r**4-494*r**6+81*r**8)+2*Q2**5*(252+649*r**2
        +415*r**4-759*r**6+378*r**8)+2*Q2**3*(980+11429*r**2+22098*r**4+5500*r**6
        -818*r**8+81*r**10)+2*Q2**2*(2940+54689*r**2+177371*r**4+150402*r**6
        +8278*r**8-1061*r**10+81*r**12)+Q2*(-38131-664398*r**2-2770078*r**4
        -4030526*r**6-1850530*r**8-79334*r**10+9258*r**12-1142*r**14+81*r**16)
        -11760*logu*sqrtQ2-288960*logu*r**2*sqrtQ2-1391040*logu*r**4*sqrtQ2-2130240*logu*r**6*sqrtQ2
        -890400*logu*r**8*sqrtQ2)/(630*sqrtQ2)

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xm4(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of m4 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (-67-19*Q2**5+123*r**2-8*r**4-104*r**6+75*r**8-19*r**10+Q2**4*(25
        +57*r**2)-2*Q2**3*(15+7*r**2+19*r**4)+Q2**2*(-54+44*r**2+28*r**4-38*r**6)
        +Q2*(145+94*r**2+58*r**4-114*r**6+57*r**8)+96*logu*sqrtQ2+24*logu*r**4*sqrtQ2)/(24*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (-3411-456*Q2**6+12536*r**2-16325*r**4+9360*r**6-3005*r**8+1016*r**10
        -171*r**12+3*Q2**5*(197+437*r**2)-Q2**4*(615+238*r**2+855*r**4)+Q2**3*(
        -690+1072*r**2+232*r**4-570*r**6)+2*Q2**2*(-855+1491*r**2-152*r**4
        -549*r**6+285*r**8)+Q2*(6291-2783*r**2-10348*r**4+1892*r**6-503*r**8
        +171*r**10)+2880*logu*sqrtQ2-480*logu*r**2*sqrtQ2-6120*logu*r**4*sqrtQ2
        +1080*logu*r**6*sqrtQ2)/(720*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (-1073-95*Q2**7+6039*r**2-1881*r**4-10725*r**6+8425*r**8-927*r**10
        +161*r**12-19*r**14+2*Q2**6*(61+133*r**2)-Q2**5*(117+38*r**2+171*r**4)
        +Q2**4*(-105+221*r**2+23*r**4-95*r**6)+2*Q2**2*(-180+593*r**2+1283*r**4
        -175*r**6+19*r**8)+Q2**3*(-165+546*r**2+34*r**4-202*r**6+95*r**8)
        +Q2*(1793-3060*r**2-25871*r**4-10636*r**6+899*r**8-104*r**10+19*r**12)
        +720*logu*sqrtQ2-240*logu*r**2*sqrtQ2-15000*logu*r**4*sqrtQ2-4320*logu*r**6*sqrtQ2
        +360*logu*r**8*sqrtQ2)/(180*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (-11547-760*Q2**8+90248*r**2+264404*r**4-591080*r**6+76650*r**8+181272*r**10
        -10948*r**12+1096*r**14-95*r**16+10*Q2**7*(97+209*r**2)-2*Q2**6*(441
        +122*r**2+665*r**4)+Q2**5*(-693+1751*r**2+99*r**4-665*r**6)+2*Q2**3*(
        -560+3987*r**2+7591*r**4-781*r**6+95*r**8)+Q2**4*(-875+4054*r**2+598*r**4
        -1490*r**6+665*r**8)+2*Q2**2*(-1680+7347*r**2+75010*r**4+24314*r**6
        -1766*r**8+95*r**10)+Q2*(18267-58967*r**2-977213*r**4-1240343*r**6
        -233043*r**8+12335*r**10-811*r**12+95*r**14)+6720*logu*sqrtQ2-3360*logu*r**2*sqrtQ2
        -499800*logu*r**4*sqrtQ2-667800*logu*r**6*sqrtQ2-79800*logu*r**8*sqrtQ2
        +4200*logu*r**10*sqrtQ2)/(1680*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (-38331-1995*Q2**9+392843*r**2+3391804*r**4-2557212*r**6-5492704*r**8
        +3319456*r**10+1022532*r**12-40804*r**14+2587*r**16-171*r**18+15*Q2**8*(169
        +361*r**2)-10*Q2**7*(222+53*r**2+342*r**4)-2*Q2**6*(798-2281*r**2-73*r**4
        +798*r**6)+2*Q2**4*(-840+9491*r**2+17528*r**4-1336*r**6+171*r**8)+2*Q2**5*(
        -882+5067*r**2+1031*r**4-1845*r**6+798*r**8)+Q2**3*(-3360+31862*r**2
        +240108*r**4+86544*r**6-5300*r**8+342*r**10)+2*Q2**2*(-5040+26571*r**2
        +689101*r**4+924234*r**6+121626*r**8-5683*r**10+171*r**12)+Q2*(58491
        -291290*r**2-8153638*r**4-20079538*r**6-12289602*r**8-1315058*r**10
        +49018*r**12-2074*r**14+171*r**16)+20160*logu*sqrtQ2-13440*logu*r**2*sqrtQ2
        -3774960*logu*r**4*sqrtQ2-10765440*logu*r**6*sqrtQ2-6090000*logu*r**8*sqrtQ2
        -403200*logu*r**10*sqrtQ2+15120*logu*r**12*sqrtQ2)/(5040*sqrtQ2)

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xm5(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of m5 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (-397+195*Q2**5+1141*r**2-1752*r**4+1864*r**6-1051*r**8+195*r**10
        -Q2**4*(649+585*r**2)+10*Q2**3*(31+103*r**2+39*r**4)+2*Q2**2*(-117
        +226*r**2-582*r**4+195*r**6)+Q2*(679+842*r**2-706*r**4+1834*r**6
        -585*r**8)+384*logu*sqrtQ2+648*logu*r**4*sqrtQ2)/(72*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (104*Q2**6-Q2**5*(331+299*r**2)+Q2**4*(163+470*r**2+195*r**4)+2*Q2**3*(
        -31+88*r**2-200*r**4+65*r**6)-2*Q2**2*(65-189*r**2+260*r**4-189*r**6
        +65*r**8)+3*Q2*(147+41*r**2-428*r**4+276*r**6+73*r**8-13*r**10)+3*(
        -83+211*r**8-112*r**10+13*r**12+64*logu*sqrtQ2+16*r**2*(17+4*logu*sqrtQ2)
        +8*r**6*(-4+27*logu*sqrtQ2)-r**4*(269+296*logu*sqrtQ2)))/(48*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (-611+325*Q2**7+5851*r**2+545*r**4-16665*r**6+10635*r**8+1021*r**10
        -841*r**12+65*r**14-2*Q2**6*(503+455*r**2)+Q2**5*(501+1336*r**2+585*r**4)
        +Q2**4*(-135+477*r**2-1015*r**4+325*r**6)+Q2**3*(-165+1082*r**2-1158*r**4
        +1010*r**6-325*r**8)-2*Q2**2*(120-731*r**2-1903*r**4+229*r**6+65*r**8)
        +Q2*(1091-5938*r**2-32923*r**4-20508*r**6+4417*r**8+646*r**10-65*r**12)
        +480*logu*sqrtQ2-1920*logu*r**2*sqrtQ2-17880*logu*r**4*sqrtQ2-10560*logu*r**6*sqrtQ2
        +3240*logu*r**8*sqrtQ2)/(180*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (-4177+7800*Q2**8+446500*r**2+586152*r**4-1634500*r**6-294350*r**8
        +924252*r**10-7000*r**12-17852*r**14+975*r**16-10*Q2**7*(2369+2145*r**2)
        +2*Q2**6*(5929+15034*r**2+6825*r**4)+Q2**5*(-2583+10489*r**2-21543*r**4
        +6825*r**6)+Q2**4*(-2345+24454*r**2-24386*r**4+21990*r**6-6825*r**8)
        +Q2**3*(-1120+36354*r**2+53778*r**4+3154*r**6-1950*r**8)-2*Q2**2*(1680
        -64657*r**2-259218*r**4-144258*r**6+14398*r**8+975*r**10)-Q2*(-10897
        +696049*r**2+3908167*r**4+4952217*r**6+1463417*r**8-169081*r**10-14927*r**12
        +975*r**14)+6720*logu*sqrtQ2-262080*logu*r**2*sqrtQ2-2003400*logu*r**4*sqrtQ2
        -2625000*logu*r**6*sqrtQ2-642600*logu*r**8*sqrtQ2+113400*logu*r**10*sqrtQ2)/(5040*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (3811+2275*Q2**9+352397*r**2+1110068*r**4-1199156*r**6-1739920*r**8
        +828464*r**10+663628*r**12-14668*r**14-4819*r**16+195*r**18-5*Q2**8*(1363
        +1235*r**2)+30*Q2**7*(114+279*r**2+130*r**4)+2*Q2**4*r**2*(5149+5872*r**2
        +784*r**4-195*r**6)+2*Q2**6*(-322+1439*r**2-2897*r**4+910*r**6)-2*Q2**5*(238
        -3413*r**2+3327*r**4-2997*r**6+910*r**8)+Q2**3*(28218*r**2+89972*r**4
        +45392*r**6-652*r**8-390*r**10)+2*Q2**2*r**2*(49949+313179*r**2+361654*r**4
        +95414*r**6-7301*r**8-195*r**10)-Q2*(3811+578870*r**2+4264474*r**4
        +8287710*r**6+5460830*r**8+986654*r**10-73510*r**12-4234*r**14+195*r**16)
        -215040*logu*r**2*sqrtQ2-2078160*logu*r**4*sqrtQ2-4368000*logu*r**6*sqrtQ2
        -2746800*logu*r**8*sqrtQ2-389760*logu*r**10*sqrtQ2+45360*logu*r**12*sqrtQ2)/(1680*sqrtQ2)

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xm6(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of m6 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (257+225*Q2**5-617*r**2+72*r**4+904*r**6-841*r**8+225*r**10-Q2**4*(547
        +675*r**2)+Q2**3*(322+610*r**2+450*r**4)+2*Q2**2*(33-50*r**2-210*r**4
        +225*r**6)+Q2*(-419-82*r**2+26*r**4+1198*r**6-675*r**8)-192*logu*sqrtQ2
        +216*logu*r**4*sqrtQ2)/(72*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (365+120*Q2**6-592*r**2+83*r**4-32*r**6+403*r**8-272*r**10+45*r**12
        -Q2**5*(281+345*r**2)+Q2**4*(161+274*r**2+225*r**4)+2*Q2**3*(11-24*r**2
        -56*r**4+75*r**6)-2*Q2**2*(-53-31*r**2+76*r**4-127*r**6+75*r**8)+Q2*(
        -557-1463*r**2+84*r**4+404*r**6+137*r**8-45*r**10)-192*logu*sqrtQ2
        -960*logu*r**2*sqrtQ2+216*logu*r**4*sqrtQ2+216*logu*r**6*sqrtQ2)/(48*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (2107+375*Q2**7+4293*r**2-17565*r**4+13885*r**6-3315*r**8+1203*r**10
        -683*r**12+75*r**14-6*Q2**6*(143+175*r**2)+Q2**5*(483+768*r**2+675*r**4)
        +Q2**4*(55-149*r**2-245*r**4+375*r**6)+Q2**3*(185+166*r**2-434*r**4
        +710*r**6-375*r**8)+Q2**2*(480+3466*r**2-1502*r**4+226*r**6-150*r**8)
        +Q2*(-3067-23094*r**2-11489*r**4+5476*r**6+1551*r**8+458*r**10-75*r**12)
        -960*logu*sqrtQ2-12480*logu*r**2*sqrtQ2-5640*logu*r**4*sqrtQ2+2880*logu*r**6*sqrtQ2
        +1080*logu*r**8*sqrtQ2)/(180*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (80645+9000*Q2**8+633964*r**2-1245384*r**4-42700*r**6+883750*r**8-323820*r**10
        +26936*r**12-14516*r**14+1125*r**16-10*Q2**7*(2027+2475*r**2)+2*Q2**6*(5635
        +8542*r**2+7875*r**4)+Q2**5*(1155-3629*r**2-4749*r**4+7875*r**6)+Q2**4*(3325
        +3490*r**2-10838*r**4+15810*r**6-7875*r**8)+Q2**3*(5600+48150*r**2
        -31098*r**4+6982*r**6-2250*r**8)+2*Q2**2*(8400+141115*r**2+43686*r**4
        -55722*r**6+566*r**8-1125*r**10)+Q2*(-114245-1662139*r**2-2533933*r**4
        +468717*r**6+496717*r**8+48787*r**10+11141*r**12-1125*r**14)-33600*logu*sqrtQ2
        -786240*logu*r**2*sqrtQ2-1474200*logu*r**4*sqrtQ2+424200*logu*r**6*sqrtQ2
        +189000*logu*r**8*sqrtQ2+37800*logu*r**10*sqrtQ2)/(5040*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (34433+2625*Q2**9+536719*r**2-198948*r**4-1853404*r**6+1733200*r**8
        -1008*r**10-254044*r**12+6748*r**14-3921*r**16+225*r**18-5*Q2**8*(1169
        +1425*r**2)+10*Q2**7*(322+471*r**2+450*r**4)+2*Q2**6*(154-539*r**2
        -603*r**4+1050*r**6)+Q2**5*(812+910*r**2-3306*r**4+4366*r**6-2100*r**8)
        -2*Q2**4*(-560-5327*r**2+4432*r**4-816*r**6+225*r**8)+Q2**3*(2240+43134*r**2
        +7740*r**4-26192*r**6+2172*r**8-450*r**10)-2*Q2**2*(-3360-96607*r**2
        -185289*r**4+106158*r**6+34894*r**8+759*r**10+225*r**12)+Q2*(-47873
        -1123858*r**2-3503614*r**4-944778*r**6+1788022*r**8+372790*r**10+19010*r**12
        +3246*r**14-225*r**16)-13440*logu*sqrtQ2-483840*logu*r**2*sqrtQ2-1920240*logu*r**4*sqrtQ2
        -470400*logu*r**6*sqrtQ2+1033200*logu*r**8*sqrtQ2+120960*logu*r**10*sqrtQ2
        +15120*logu*r**12*sqrtQ2)/(1680*sqrtQ2)

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xm7(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of m7 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return 0
    if (dQ2 == 0 and dr == 0 and i==1):
        return    0
    if (dQ2 == 0 and dr == 0 and i==2):
        return    0
    if (dQ2 == 0 and dr == 0 and i==3):
        return     0
    if (dQ2 == 0 and dr == 0 and i==4):
        return     0

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xm8(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of m8 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (1+Q2**5-9*r**2+8*r**4+8*r**6-9*r**8+r**10-3*Q2**4*(1+r**2)+2*Q2**3*(1
        +r**2+r**4)+2*Q2**2*(1-2*r**2-2*r**4+r**6)+Q2*(-3+14*r**2+26*r**4
        +14*r**6-3*r**8)+24*logu*r**4*sqrtQ2)/(32*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (8*Q2**6-23*Q2**5*(1+r**2)+Q2**4*(15+14*r**2+15*r**4)+2*Q2**3*(5-8*r**2
        -8*r**4+5*r**6)-2*Q2**2*(5-17*r**2+84*r**4-17*r**6+5*r**8)+Q2*(-3
        +39*r**2+684*r**4+684*r**6+39*r**8-3*r**10)+3*(1-16*r**2-65*r**8
        -16*r**10+r**12+40*r**6*(4+3*logu*sqrtQ2)+5*r**4*(-13+24*logu*sqrtQ2)))/(320*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (1+5*Q2**7-25*r**2-351*r**4+375*r**6+375*r**8-351*r**10-25*r**12
        +r**14-14*Q2**6*(1+r**2)+Q2**5*(9+8*r**2+9*r**4)+Q2**4*(5-7*r**2
        -7*r**4+5*r**6)+Q2**3*(-5+18*r**2-54*r**4+18*r**6-5*r**8)-2*Q2**2*(r**2
        +69*r**4+69*r**6+r**8)+Q2*(-1+22*r**2+781*r**4+1756*r**6+781*r**8
        +22*r**10-r**12)+360*logu*r**4*sqrtQ2+960*logu*r**6*sqrtQ2+360*logu*r**8*sqrtQ2)/(240*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (1+8*Q2**8-36*r**2-1064*r**4-476*r**6+3150*r**8-476*r**10-1064*r**12
        -36*r**14+r**16-22*Q2**7*(1+r**2)+2*Q2**6*(7+6*r**2+7*r**4)+Q2**5*(7
        -9*r**2-9*r**4+7*r**6)+Q2**4*(-7+26*r**2-62*r**4+26*r**6-7*r**8)
        -2*Q2**3*(r**2+41*r**4+41*r**6+r**8)-2*Q2**2*(r**2+178*r**4+482*r**6
        +178*r**8+r**10)+Q2*(-1+33*r**2+2007*r**4+8041*r**6+8041*r**8+2007*r**10
        +33*r**12-r**14)+840*logu*r**4*sqrtQ2+4200*logu*r**6*sqrtQ2+4200*logu*r**8*sqrtQ2
        +840*logu*r**10*sqrtQ2)/(448*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (35*Q2**9-95*Q2**8*(1+r**2)+10*Q2**7*(6+5*r**2+6*r**4)+Q2**6*(28-34*r**2
        -34*r**4+28*r**6)-6*Q2**4*(r**2+32*r**4+32*r**6+r**8)-2*Q2**5*(14-53*r**2
        +111*r**4-53*r**6+14*r**8)-6*Q2**3*(r**2+98*r**4+264*r**6+98*r**8+r**10)
        -6*Q2**2*(r**2+375*r**4+1934*r**6+1934*r**8+375*r**10+r**12)-3*Q2*(1
        -46*r**2-4322*r**4-27254*r**6-47638*r**8-27254*r**10-4322*r**12-46*r**14
        +r**16)+3*(1-49*r**2-2500*r**14-49*r**16+r**18+28*r**12*(-217+60*logu*sqrtQ2)
        +20*r**4*(-125+84*logu*sqrtQ2)+112*r**10*(77+120*logu*sqrtQ2)+112*r**8*(77
        +225*logu*sqrtQ2)+28*r**6*(-217+480*logu*sqrtQ2)))/(2240*sqrtQ2)

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xm9(i,Q2,r,dQ2,dr):
    """ 1/mb^4 level functions of m9 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (-25+3*Q2**5+73*r**2-84*r**4+52*r**6-19*r**8+3*r**10-Q2**4*(1+9*r**2)
        +Q2**3*(-20-8*r**2+6*r**4)+Q2**2*(-30+20*r**2+6*r**6)+Q2*(49+8*r**2
        -28*r**4+28*r**6-9*r**8)+24*logu*sqrtQ2)/(18*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (39+24*Q2**6+866*r**2-1445*r**4+60*r**6+565*r**8-94*r**10+9*r**12
        -3*Q2**5*(3+23*r**2)+Q2**4*(-135-58*r**2+45*r**4)+2*Q2**3*(-60+56*r**2
        +11*r**4+15*r**6)+Q2**2*(372*r**2+26*r**4+72*r**6-30*r**8)-Q2*(39
        +1823*r**2+3148*r**4+328*r**6-67*r**8+9*r**10)-840*logu*r**2*sqrtQ2
        -1800*logu*r**4*sqrtQ2)/(180*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (251+10*Q2**7+1556*r**2-1377*r**4-2650*r**6+1925*r**8+324*r**10-31*r**12
        +2*r**14-4*Q2**6*(1+7*r**2)+Q2**5*(-51-23*r**2+18*r**4)+Q2**4*(-35
        +38*r**2+11*r**4+10*r**6)+Q2**3*(20+128*r**2+4*r**4+26*r**6-10*r**8)
        +Q2**2*(60+698*r**2+880*r**4+46*r**6-4*r**8)-Q2*(371+4349*r**2+9826*r**4
        +5396*r**6+241*r**8-25*r**10+2*r**12)-120*logu*sqrtQ2-2040*logu*r**2*sqrtQ2
        -5280*logu*r**4*sqrtQ2-2640*logu*r**6*sqrtQ2)/(90*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (7526+120*Q2**8+74941*r**2+17073*r**4-197365*r**6+10675*r**8+82299*r**10
        +5159*r**12-323*r**14+15*r**16-10*Q2**7*(5+33*r**2)+Q2**6*(-574-268*r**2
        +210*r**4)+Q2**5*(-336+397*r**2+138*r**4+105*r**6)+Q2**4*(280+1363*r**2
        +r**4+285*r**6-105*r**8)+Q2**3*(560+5808*r**2+5994*r**4+436*r**6-30*r**8)
        +Q2**2*(1680+29048*r**2+66690*r**4+29766*r**6+526*r**8-30*r**10)-Q2*(10886
        +175639*r**2+581926*r**4+587841*r**6+171866*r**8+4265*r**10-278*r**12
        +15*r**14)-3360*logu*sqrtQ2-78120*logu*r**2*sqrtQ2-302400*logu*r**4*sqrtQ2
        -306600*logu*r**6*sqrtQ2-75600*logu*r**8*sqrtQ2)/(1260*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (12093+105*Q2**9+191651*r**2+315208*r**4-550368*r**6-485884*r**8+336532*r**10
        +175224*r**12+5792*r**14-257*r**16+9*r**18-15*Q2**8*(3+19*r**2)+10*Q2**7*(
        -48-23*r**2+18*r**4)+2*Q2**6*(-126+157*r**2+61*r**4+42*r**6)+Q2**5*(252
        +1098*r**2-26*r**4+234*r**6-84*r**8)+Q2**4*(420+4234*r**2+3892*r**4
        +316*r**6-18*r**8)+2*Q2**3*(420+7507*r**2+16158*r**4+6684*r**6+194*r**8
        -9*r**10)+Q2**2*(2520+65694*r**2+253274*r**4+241356*r**6+55812*r**8
        +442*r**10-18*r**12)-Q2*(17133+392570*r**2+1898146*r**4+3030802*r**6
        +1763046*r**8+322418*r**10+5066*r**12-230*r**14+9*r**16)-5040*logu*sqrtQ2
        -164640*logu*r**2*sqrtQ2-947520*logu*r**4*sqrtQ2-1592640*logu*r**6*sqrtQ2
        -873600*logu*r**8*sqrtQ2-131040*logu*r**10*sqrtQ2)/(1260*sqrtQ2)

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr1(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r1 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (7017*Q2**9-Q2**8*(35519+49119*r**2)+2*Q2**7*(37670+68459*r**2+70170*r**4)
        -2*Q2**6*(44518+69007*r**2+61207*r**4+98238*r**6)+2*Q2**5*(33179+35535*r**2
        +15912*r**4-75865*r**6+49119*r**8)+2*Q2**4*(-18409-10150*r**2-61225*r**6
        +144530*r**8+49119*r**10+240*logu*sqrtQ2+135*r**4*(-95+4*logu*sqrtQ2))
        +(-1+r**2)**4*(-1127+287*r**2+14456*r**6-18737*r**8+7017*r**10+480*logu*sqrtQ2
        +24*r**4*(-79+45*logu*sqrtQ2))-Q2*(-1+r**2)**2*(-7369+30945*r**8-106396*r**10
        +49119*r**12+1920*logu*sqrtQ2+40*r**6*(1309+108*logu*sqrtQ2)+12*r**2*(523
        +160*logu*sqrtQ2)+5*r**4*(-4987+864*logu*sqrtQ2))-2*Q2**3*(-11558-147470*r**8
        -3137*r**10+98238*r**12+960*logu*sqrtQ2+10*r**4*(-557+216*logu*sqrtQ2)
        +10*r**6*(4513+216*logu*sqrtQ2)+r**2*(-593+960*logu*sqrtQ2))+2*Q2**2*(
        -8350+9855*r**10-140209*r**12+70170*r**14+1440*logu*sqrtQ2+1080*r**8*(101
        +3*logu*sqrtQ2)+585*r**4*(-1+8*logu*sqrtQ2)+80*r**6*(-590+27*logu*sqrtQ2)
        +r**2*(7239+960*logu*sqrtQ2)))/(360*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(5/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (56136*Q2**10-15*Q2**9*(18929+25729*r**2)+5*Q2**8*(119527+213326*r**2
        +217527*r**4)-10*Q2**7*(69154+103017*r**2+92717*r**4+154374*r**6)+10*Q2**6*(49658
        +46389*r**2+11610*r**4-111011*r**6+98238*r**8)+2*Q2**5*(-178061-95020*r**2
        -29715*r**4-314315*r**6+1087880*r**8+49119*r**10)-10*Q2**4*(-54941-165675*r**8
        +66449*r**10+49119*r**12+5376*logu*sqrtQ2+r**6*(69022-1620*logu*sqrtQ2)
        +5*r**4*(-8267+396*logu*sqrtQ2)+3*r**2*(-20357+560*logu*sqrtQ2))+(
        -1+r**2)**4*(32531+130525*r**8-90056*r**10+21051*r**12-53760*logu*sqrtQ2
        +200*r**6*(-286+81*logu*sqrtQ2)-25*r**4*(-413+792*logu*sqrtQ2)-8*r**2*(5897
        +2100*logu*sqrtQ2))+10*Q2**3*(-75778-7431*r**10-32723*r**12+14034*r**14
        +21504*logu*sqrtQ2+12*r**6*(-10391+120*logu*sqrtQ2)-48*r**8*(-2191
        +135*logu*sqrtQ2)+9*r**2*(-6463+3136*logu*sqrtQ2)+3*r**4*(-19241+4880*logu*sqrtQ2))
        +10*Q2**2*(57350-27298*r**12-31073*r**14+14034*r**16-32256*logu*sqrtQ2
        +r**8*(57940-5400*logu*sqrtQ2)+9*r**10*(9233+1080*logu*sqrtQ2)-7*r**2*(5327
        +4512*logu*sqrtQ2)-r**6*(107407+8280*logu*sqrtQ2)-6*r**4*(1559+8476*logu*sqrtQ2))
        -5*Q2*(-1+r**2)**2*(43283+37229*r**10-69005*r**12+21051*r**14-43008*logu*sqrtQ2
        -45*r**6*(1215+64*logu*sqrtQ2)+5*r**8*(16753+2592*logu*sqrtQ2)-r**4*(28859
        +29280*logu*sqrtQ2)-r**2*(32789+56448*logu*sqrtQ2)))/(3600*(Q2**2+(
        -1+r**2)**2-2*Q2*(1+r**2))**(5/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (11695*Q2**11-34*Q2**10*(1739+2339*r**2)+5*Q2**9*(24791+43694*r**2+44441*r**4)
        -5*Q2**8*(28363+41213*r**2+37363*r**4+63153*r**6)+10*Q2**7*(9991+8541*r**2
        +1620*r**4-21509*r**6+21051*r**8)+10*Q2**6*(-3206-1167*r**2+931*r**4
        -12819*r**6+40513*r**8)-2*Q2**5*(83509+168449*r**2+74185*r**4+101640*r**6
        -168265*r**8+39859*r**10+49119*r**12)+10*Q2**4*(63001-1218*r**10-18392*r**12
        +7017*r**14-4824*logu*sqrtQ2+r**4*(156756-4740*logu*sqrtQ2)+r**6*(40327
        -1200*logu*sqrtQ2)+r**8*(35147+540*logu*sqrtQ2)-6*r**2*(-23603+2084*logu*sqrtQ2))
        -5*Q2**3*(204145+38472*r**12-32738*r**14+7017*r**16-38592*logu*sqrtQ2
        +6*r**10*(2153+720*logu*sqrtQ2)-6*r**8*(-23577+880*logu*sqrtQ2)-6*r**6*(
        -71311+7920*logu*sqrtQ2)-8*r**4*(-40805+17244*logu*sqrtQ2)-6*r**2*(
        -54835+23104*logu*sqrtQ2))+(-1+r**2)**4*(64389+32311*r**10-14725*r**12
        +2339*r**14-48240*logu*sqrtQ2+r**4*(6461-47400*logu*sqrtQ2)+25*r**8*(
        -709+216*logu*sqrtQ2)-25*r**6*(-829+480*logu*sqrtQ2)-5*r**2*(18755
        +25008*logu*sqrtQ2))-5*Q2*(-1+r**2)**2*(74037+16506*r**12-12386*r**14
        +2339*r**16-38592*logu*sqrtQ2-1320*r**8*(-5+4*logu*sqrtQ2)+6*r**10*(3191
        +720*logu*sqrtQ2)-38*r**2*(623+3648*logu*sqrtQ2)-6*r**6*(-5939+7920*logu*sqrtQ2)
        -2*r**4*(59101+68976*logu*sqrtQ2))+10*Q2**2*(86097+17495*r**14-12386*r**16
        +2339*r**18-28944*logu*sqrtQ2+r**2*(5174-94320*logu*sqrtQ2)+r**8*(36569
        -30000*logu*sqrtQ2)+r**10*(53671-5040*logu*sqrtQ2)+r**12*(7691+3240*logu*sqrtQ2)
        -17*r**6*(6887+5952*logu*sqrtQ2)-r**4*(79571+107400*logu*sqrtQ2)))/(900*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(5/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (280680*Q2**12-10*Q2**11*(141859+189459*r**2)+Q2**10*(2966750+5182124*r**2
        +5262750*r**4)-5*Q2**9*(674081+962213*r**2+876113*r**4+1494621*r**6)
        +5*Q2**8*(468525+377718*r**2+59598*r**4-990082*r**6+1017465*r**8)-10*Q2**7*(86952
        +23859*r**2-28545*r**4+306755*r**6-926461*r**8+28068*r**10)-10*Q2**6*(
        -65016-204813*r**2-58086*r**4+390770*r**6-780346*r**8+222719*r**10
        +196476*r**12)+2*Q2**5*(-5788395-26664834*r**2-22574790*r**4-9949145*r**6
        +1908855*r**8-299250*r**10-1263094*r**12+596445*r**14)-10*Q2**3*(7216665
        +271769*r**14-236326*r**16+35085*r**18-1155840*logu*sqrtQ2+r**4*(30012501
        -13322736*logu*sqrtQ2)+r**2*(27453882-8748096*logu*sqrtQ2)+r**6*(33405367
        -7805280*logu*sqrtQ2)+r**8*(26126893-2301600*logu*sqrtQ2)+r**10*(8543593
        -151200*logu*sqrtQ2)+r**12*(807179+75600*logu*sqrtQ2))-10*Q2**4*(-4332927
        +214256*r**12-14599*r**14+7017*r**16+288960*logu*sqrtQ2-3*r**10*(253271
        +6300*logu*sqrtQ2)+84*r**4*(-334796+17055*logu*sqrtQ2)+r**8*(-5991722
        +56700*logu*sqrtQ2)+9*r**2*(-2234731+210896*logu*sqrtQ2)+r**6*(-18841457
        +518700*logu*sqrtQ2))+(-1+r**2)**4*(4953145+927556*r**12-306496*r**14
        +35085*r**16-2889600*logu*sqrtQ2+840*r**10*(-748+225*logu*sqrtQ2)-1750*r**8*(
        -2303+324*logu*sqrtQ2)-5320*r**6*(-412+975*logu*sqrtQ2)-252*r**4*(47827
        +56850*logu*sqrtQ2)-32*r**2*(-26542+593145*logu*sqrtQ2))+10*Q2**2*(6253465
        +571095*r**16-271411*r**18+35085*r**20-1733760*logu*sqrtQ2-504*r**12*(
        -12884+525*logu*sqrtQ2)+60*r**14*(5549+1890*logu*sqrtQ2)-630*r**10*(
        -14867+5120*logu*sqrtQ2)-672*r**8*(8653+16385*logu*sqrtQ2)-63*r**4*(153091
        +284472*logu*sqrtQ2)-21*r**2*(-621117+597344*logu*sqrtQ2)-12*r**6*(1697069
        +1685922*logu*sqrtQ2))-5*Q2*(-1+r**2)**2*(5531065+583260*r**14-271411*r**16
        +35085*r**18-2311680*logu*sqrtQ2-70*r**10*(-59639+4320*logu*sqrtQ2)
        +28*r**12*(17437+5400*logu*sqrtQ2)-210*r**8*(-33933+21920*logu*sqrtQ2)
        -28*r**6*(384197+557520*logu*sqrtQ2)-21*r**2*(-402037+833152*logu*sqrtQ2)
        -4*r**4*(3838039+6661368*logu*sqrtQ2)))/(25200*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(5/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (245595*Q2**13-15*Q2**12*(82733+109933*r**2)+10*Q2**11*(259105+449567*r**2
        +456105*r**4)-2*Q2**10*(1464757+2063058*r**2+1883858*r**4+3234837*r**6)
        +5*Q2**9*(403319+311370*r**2+43092*r**4-842870*r**6+891159*r**8)-5*Q2**8*(155379
        +35145*r**2-56598*r**4+536522*r**6-1569095*r**8+77187*r**10)-20*Q2**7*(
        -13041-36402*r**2-4533*r**4+168281*r**6-330273*r**8+97366*r**10+77187*r**12)
        +20*Q2**6*(40719+423549*r**2+184149*r**4-37226*r**6+215094*r**8-18291*r**10
        -111643*r**12+49119*r**14)-Q2**5*(21257607+184334208*r**2+253408848*r**4
        +132604052*r**6+47685370*r**8-617388*r**10+2505328*r**12-1285312*r**14
        +217527*r**16)+10*Q2**2*(12121403+638344*r**18-223216*r**20+21051*r**22
        -2995776*logu*sqrtQ2+r**2*(64017760-38131968*logu*sqrtQ2)-504*r**14*(
        -42949+780*logu*sqrtQ2)+15*r**16*(16399+9072*logu*sqrtQ2)-84*r**12*(
        -294013+102720*logu*sqrtQ2)-84*r**10*(-410309+372184*logu*sqrtQ2)-168*r**4*(60701
        +471742*logu*sqrtQ2)-63*r**6*(1085089+1524832*logu*sqrtQ2)-24*r**8*(3294679
        +3224032*logu*sqrtQ2))-10*Q2**3*(360579*r**16-202165*r**18+21051*r**20
        +r**4*(139223331-58867872*logu*sqrtQ2)+r**6*(160645298-51545760*logu*sqrtQ2)
        +r**2*(99376251-26087040*logu*sqrtQ2)+r**10*(71980710-5950560*logu*sqrtQ2)
        +r**12*(26845130-231840*logu*sqrtQ2)+21*(656463-95104*logu*sqrtQ2)
        +r**14*(849426+90720*logu*sqrtQ2)-6*r**8*(-25842631+3732624*logu*sqrtQ2))
        +5*Q2**4*(16282203+226128*r**14-202165*r**16+21051*r**18-998592*logu*sqrtQ2
        +r**10*(34991230-161280*logu*sqrtQ2)+4*r**12*(272179+11340*logu*sqrtQ2)
        -28*r**6*(-8529437+299424*logu*sqrtQ2)-48*r**4*(-5117873+362271*logu*sqrtQ2)
        -6*r**8*(-17857477+469000*logu*sqrtQ2)-3*r**2*(-45076825+4014976*logu*sqrtQ2))
        +(-1+r**2)**4*(9874571+963620*r**14-244267*r**16+21051*r**18-4992960*logu*sqrtQ2
        +r**2*(29288933-60224640*logu*sqrtQ2)+r**6*(6604892-41919360*logu*sqrtQ2)
        -224*r**10*(-69421+3600*logu*sqrtQ2)+28*r**12*(-33511+8100*logu*sqrtQ2)
        -112*r**8*(17698+125625*logu*sqrtQ2)-20*r**4*(2956931+4347252*logu*sqrtQ2))
        -5*Q2*(-1+r**2)**2*(10873163+673993*r**16-223216*r**18+21051*r**20-3994368*logu*sqrtQ2
        +r**2*(49211248-52174080*logu*sqrtQ2)+r**8*(8057980-44791488*logu*sqrtQ2)
        +448*r**14*(619+405*logu*sqrtQ2)-1120*r**10*(-14719+10626*logu*sqrtQ2)
        -28*r**12*(-609217+16560*logu*sqrtQ2)-64*r**6*(1045046+1610805*logu*sqrtQ2)
        -7*r**4*(5078849+16819392*logu*sqrtQ2)))/(25200*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(5/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr2(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r2 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (68*Q2**7*r**2-20*Q2**6*r**2*(6+17*r**2)+Q2**5*r**2*(97+73*r**2+612*r**4)
        -2*Q2**4*r**2*(70+233*r**2-317*r**4+170*r**6)+Q2**3*(102+702*r**2+24*r**4
        +1098*r**6-866*r**8-340*r**10)+2*Q2**2*(-153-781*r**4-416*r**8-68*r**10
        +306*r**12+r**6*(789-90*logu*sqrtQ2)+7*r**2*(-91+30*logu*sqrtQ2))
        +2*(-1+r**2)**2*(-51-60*r**4+5*r**8-69*r**10+34*r**12+r**6*(50-90*logu*sqrtQ2)
        +7*r**2*(13+30*logu*sqrtQ2))+Q2*(306-251*r**10+689*r**12-340*r**14
        +r**2*(281-840*logu*sqrtQ2)+20*r**8*(-11+18*logu*sqrtQ2)+10*r**6*(103
        +36*logu*sqrtQ2)-5*r**4*(299+168*logu*sqrtQ2)))/(15*r**2*(Q2**2+(-1
        +r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (1632*Q2**8*r**2-18*Q2**7*r**2*(167+442*r**2)+2*Q2**6*r**2*(1063+925*r**2
        +7038*r**4)-3*Q2**5*r**2*(999+3048*r**2-4827*r**4+2924*r**6)-3*Q2**4*r**2*(3595
        -725*r**2-8999*r**4+6325*r**6+1020*r**8)+4*Q2**3*(765+24437*r**2+13715*r**4
        +2538*r**6-8737*r**8-175*r**10+1377*r**12)-12*Q2**2*(765-1791*r**10
        -543*r**12+17*r**14+r**4*(11957-1475*logu*sqrtQ2)-3*r**6*(-3383+50*logu*sqrtQ2)
        -7*r**2*(-2231+470*logu*sqrtQ2)+r**8*(-2251+675*logu*sqrtQ2))-3*Q2*(
        -3060+4388*r**12-835*r**14+612*r**16-600*r**8*(66+7*logu*sqrtQ2)-5*r**10*(403
        +1080*logu*sqrtQ2)+20*r**4*(2939+1906*logu*sqrtQ2)+7*r**2*(-5739+3760*logu*sqrtQ2)
        +r**6*(21903+13000*logu*sqrtQ2))+(-1+r**2)**2*(-3060+3135*r**10-1447*r**12
        +612*r**14+r**8*(850-8100*logu*sqrtQ2)+50*r**6*(-769+36*logu*sqrtQ2)
        +3*r**4*(20771+5900*logu*sqrtQ2)+r**2*(-23953+39480*logu*sqrtQ2)))/(450*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (1360*Q2**9*r**2-24*Q2**8*r**2*(107+272*r**2)+3*Q2**7*r**2*(573+521*r**2
        +3808*r**4)-Q2**6*r**2*(2239+6814*r**2-11641*r**4+7344*r**6)-3*Q2**5*r**2*(1539
        -733*r**2-6329*r**4+4847*r**6+544*r**8)+3*Q2**4*r**2*(-6475+2230*r**2
        +3774*r**4-3546*r**6-295*r**8+1360*r**10)+Q2**3*(3060+217733*r**2+223193*r**4
        -164138*r**6-18206*r**8-29083*r**10+5233*r**12-1632*r**14)+3*Q2**2*(
        -3060+15466*r**12-171*r**14+272*r**16+r**10*(16823-3600*logu*sqrtQ2)
        +8*r**8*(12661+250*logu*sqrtQ2)+2*r**4*(-67383+18580*logu*sqrtQ2)+r**2*(
        -145503+24760*logu*sqrtQ2)-r**6*(86509+30800*logu*sqrtQ2))+(-1+r**2)**2*(
        -3060+6808*r**12-715*r**14+272*r**16+300*r**8*(11+20*logu*sqrtQ2)
        -15*r**10*(-29+720*logu*sqrtQ2)+40*r**4*(4681+2787*logu*sqrtQ2)+r**2*(
        -77483+74280*logu*sqrtQ2)-r**6*(116797+92400*logu*sqrtQ2))-3*Q2*(
        -3060+9693*r**14-443*r**16+272*r**18-5*r**10*(-8427+640*logu*sqrtQ2)
        -r**12*(1957+7200*logu*sqrtQ2)+r**6*(150803+12720*logu*sqrtQ2)-3*r**8*(71419
        +19200*logu*sqrtQ2)+r**2*(-105303+49520*logu*sqrtQ2)+r**4*(122117+123840*logu*sqrtQ2)))/(450*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (5440*Q2**10*r**2-40*Q2**9*r**2*(261+646*r**2)+16*Q2**8*r**2*(425+392*r**2
        +2805*r**4)-Q2**7*r**2*(8275+25316*r**2-45419*r**4+29240*r**6)+Q2**6*r**2*(
        -12775+9541*r**2+69915*r**4-55209*r**6-4760*r**8)+Q2**5*r**2*(-29785
        +38528*r**2+53136*r**4-46544*r**6-2807*r**8+14280*r**10)+Q2**4*r**2*(
        -132965-105665*r**2+656900*r**4-58868*r**6+3905*r**8+16765*r**10-4760*r**12)
        +Q2**3*(14280+1739835*r**2+3295628*r**4-7865985*r**6-6979208*r**8-50783*r**10
        -162660*r**12+1253*r**14-680*r**16)-3*Q2*(-14280+3291960*r**12+71560*r**16
        -1253*r**18+680*r**20+r**6*(5305110-1141280*logu*sqrtQ2)-42*r**14*(431
        +1000*logu*sqrtQ2)-1400*r**10*(2281+1202*logu*sqrtQ2)+112*r**4*(5066
        +13085*logu*sqrtQ2)-112*r**8*(45436+35425*logu*sqrtQ2)+5*r**2*(-184167
        +72800*logu*sqrtQ2))+3*Q2**2*(-14280+103847*r**14-573*r**16+680*r**18
        +r**6*(3185597-1121400*logu*sqrtQ2)+r**8*(5040569-862400*logu*sqrtQ2)
        +r**12*(93739-21000*logu*sqrtQ2)+r**10*(4666279+21000*logu*sqrtQ2)
        +5*r**2*(-241623+36400*logu*sqrtQ2)+r**4*(-1859423+550760*logu*sqrtQ2))
        +(-1+r**2)**2*(-14280+52493*r**14-1933*r**16+680*r**18+315*r**10*(7537
        +200*logu*sqrtQ2)-35*r**12*(217+1800*logu*sqrtQ2)+65*r**2*(-11147+8400*logu*sqrtQ2)
        -189*r**6*(-9447+17800*logu*sqrtQ2)-35*r**8*(141233+73920*logu*sqrtQ2)
        +r**4*(1478707+1652280*logu*sqrtQ2)))/(2100*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (3570*Q2**11*r**2-990*Q2**10*r**2*(7+17*r**2)+5*Q2**9*r**2*(889+823*r**2
        +5814*r**4)-6*Q2**8*r**2*(854+2626*r**2-4879*r**4+3179*r**6)-3*Q2**7*r**2*(2191
        -2180*r**2-14537*r**4+11650*r**6+816*r**8)+3*Q2**4*r**2*(-48895-119665*r**2
        +843192*r**4+537568*r**6-19697*r**8+5337*r**10)+Q2**6*r**2*(-11067+25767*r**2
        +36855*r**4-30035*r**6-1568*r**8+8568*r**10)-3*Q2**5*r**2*(9072-4543*r**2
        -96432*r**4+7116*r**6+1628*r**8-3353*r**10+952*r**12)+Q2**3*(10710
        +1990149*r**2+6182556*r**4-27357183*r**6-57353266*r**8-19162147*r**10
        +20184*r**12-158513*r**14+616*r**16-306*r**18)+3*Q2**2*(-10710+103645*r**16
        -310*r**18+306*r**20+r**8*(35264925-7804720*logu*sqrtQ2)+r**10*(36004769
        -2071300*logu*sqrtQ2)+r**14*(58845-18900*logu*sqrtQ2)+7*r**2*(-202017
        +27940*logu*sqrtQ2)+r**12*(13303559+29400*logu*sqrtQ2)+5*r**4*(-711801
        +195944*logu*sqrtQ2)-5*r**6*(-3215059+657636*logu*sqrtQ2))+(-1+r**2)**2*(
        -10710+57015*r**16-922*r**18+306*r**20+r**6*(11524235-9864540*logu*sqrtQ2)
        +77*r**2*(-11737+7620*logu*sqrtQ2)-7*r**14*(3869+8100*logu*sqrtQ2)
        +r**12*(8027999+88200*logu*sqrtQ2)-21*r**10*(236701+295900*logu*sqrtQ2)
        +3*r**4*(409861+979720*logu*sqrtQ2)-7*r**8*(2132279+3344880*logu*sqrtQ2))
        -3*Q2*(-10710+74993*r**18-616*r**20+306*r**22+r**6*(17805858-4616920*logu*sqrtQ2)
        +r**12*(6689998-4083800*logu*sqrtQ2)+28*r**14*(362497+750*logu*sqrtQ2)
        -28*r**16*(1331+1350*logu*sqrtQ2)+7*r**2*(-158577+55880*logu*sqrtQ2)
        -14*r**10*(2153331+1410860*logu*sqrtQ2)+r**4*(-262726+2350600*logu*sqrtQ2)
        -2*r**8*(1576539+11092900*logu*sqrtQ2)))/(1575*r**2*(Q2**2+(-1+r**2)**2
        -2*Q2*(1+r**2))**(3/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr3(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r3 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (633*Q2**7*r**2-5*Q2**6*r**2*(521+633*r**2)+9*Q2**5*r**2*(413+652*r**2+633*r**4)
        -3*Q2**4*r**2*(835+367*r**2+427*r**4+1055*r**6)-Q2**3*(648+613*r**2
        -1464*r**4-258*r**6+1456*r**8+3165*r**10)+3*Q2**2*(648+1931*r**4-894*r**8
        -2517*r**10+1899*r**12+r**2*(1067-400*logu*sqrtQ2)+2*r**6*(-907+180*logu*sqrtQ2))
        -3*Q2*(648+3197*r**10-3628*r**12+1055*r**14+80*r**8*(2+9*logu*sqrtQ2)
        -20*r**4*(71+40*logu*sqrtQ2)+5*r**6*(61+144*logu*sqrtQ2)-r**2*(317
        +800*logu*sqrtQ2))+(-1+r**2)**2*(648+1315*r**4+3580*r**8-2593*r**10
        +633*r**12+60*r**6*(-35+18*logu*sqrtQ2)-r**2*(1483+1200*logu*sqrtQ2)))/(90*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (5064*Q2**8*r**2-3*Q2**7*r**2*(6829+8229*r**2)+Q2**6*r**2*(29077+44050*r**2
        +43677*r**4)-3*Q2**5*r**2*(6073+2521*r**2+1921*r**4+9073*r**6)-3*Q2**4*r**2*(
        -7035-2050*r**2+3002*r**4+8350*r**6+3165*r**8)+Q2**3*(-6480-123029*r**2
        -61205*r**4-11646*r**6+11554*r**8-6125*r**10+17091*r**12)+(-1+r**2)**2*(6480
        +27645*r**10-13544*r**12+1899*r**14+r**2*(20419-54240*logu*sqrtQ2)
        +200*r**8*(-134+81*logu*sqrtQ2)-25*r**6*(-1949+504*logu*sqrtQ2)-24*r**4*(2701
        +700*logu*sqrtQ2))-3*Q2*(6480+8701*r**12-11645*r**14+1899*r**16+r**2*(44979
        -36160*logu*sqrtQ2)+75*r**8*(183+32*logu*sqrtQ2)+5*r**10*(3169+2160*logu*sqrtQ2)
        -7*r**6*(717+2800*logu*sqrtQ2)-5*r**4*(14993+9472*logu*sqrtQ2))-3*Q2**2*(
        -6480+18197*r**10+1406*r**12+211*r**14+r**8*(7092-5400*logu*sqrtQ2)
        +r**6*(-58883+4200*logu*sqrtQ2)+r**4*(-63394+5600*logu*sqrtQ2)+r**2*(
        -77989+18080*logu*sqrtQ2)))/(900*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (1055*Q2**9*r**2-24*Q2**8*r**2*(176+211*r**2)-Q2**6*r**2*(3652+1432*r**2
        +837*r**4+5697*r**6)+Q2**7*(5967*r**2+8814*r**4+8862*r**6)-3*Q2**5*r**2*(
        -1023-264*r**2+463*r**4+1656*r**6+422*r**8)+3*Q2**4*r**2*(2600-660*r**2
        +407*r**4-773*r**6-985*r**8+1055*r**10)-Q2**3*(1620+81931*r**2+85666*r**4
        -38316*r**6+6768*r**8-1121*r**10-6294*r**12+1266*r**14)+3*Q2**2*(1620
        -2582*r**12-1913*r**14+211*r**16+r**2*(54096-9720*logu*sqrtQ2)+2*r**10*(
        -503+900*logu*sqrtQ2)-8*r**4*(-6819+1640*logu*sqrtQ2)-r**8*(13961
        +3200*logu*sqrtQ2)+r**6*(40503+7800*logu*sqrtQ2))-3*Q2*(1620+1609*r**14
        -2124*r**16+211*r**18+16*r**12*(289+225*logu*sqrtQ2)-5*r**10*(4239
        +560*logu*sqrtQ2)-24*r**2*(-1579+810*logu*sqrtQ2)+8*r**8*(8773+1150*logu*sqrtQ2)
        -16*r**4*(2619+2855*logu*sqrtQ2)-r**6*(50921+10640*logu*sqrtQ2))+(
        -1+r**2)**2*(1620+5744*r**12-2335*r**14+211*r**16+r**2*(26556-29160*logu*sqrtQ2)
        +r**8*(2725-9600*logu*sqrtQ2)+360*r**10*(-22+15*logu*sqrtQ2)-20*r**4*(3107
        +1968*logu*sqrtQ2)+r**6*(35539+23400*logu*sqrtQ2)))/(225*r**2*(Q2**2+(
        -1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (25320*Q2**10*r**2-10*Q2**9*r**2*(10067+12027*r**2)+6*Q2**8*r**2*(23615+34286*r**2
        +34815*r**4)-3*Q2**7*r**2*(28565+10681*r**2+5081*r**4+45365*r**6)+Q2**6*r**2*(61845
        +13398*r**2-29310*r**4-115402*r**6-22155*r**8)+3*Q2**5*r**2*(26635-20657*r**2
        -1174*r**4-12374*r**6-20657*r**8+22155*r**10)-3*Q2**4*r**2*(-114135-108710*r**2
        +342795*r**4-67532*r**6+54395*r**8-29190*r**10+7385*r**12)+Q2**3*(-45360
        -4335885*r**2-9450441*r**4+9819585*r**6+11235541*r**8-750699*r**10+283905*r**12
        +47159*r**14-3165*r**16)+3*Q2**2*(45360-116744*r**14-43994*r**16+3165*r**18
        +122*r**8*(-52679+11900*logu*sqrtQ2)+2*r**12*(82741+31500*logu*sqrtQ2)
        -5*r**2*(-597369+92960*logu*sqrtQ2)-2*r**10*(3511829+94500*logu*sqrtQ2)
        +8*r**6*(-256513+177975*logu*sqrtQ2)-6*r**4*(-943641+239120*logu*sqrtQ2))
        -3*Q2*(45360+15420*r**16-47159*r**18+3165*r**20+r**2*(2244285-929600*logu*sqrtQ2)
        -20*r**6*(518993+1092*logu*sqrtQ2)-210*r**12*(27491+1200*logu*sqrtQ2)
        +28*r**14*(7823+4500*logu*sqrtQ2)+350*r**10*(18811+7216*logu*sqrtQ2)
        +28*r**8*(270943+205400*logu*sqrtQ2)-7*r**4*(71057+542720*logu*sqrtQ2))
        +(-1+r**2)**2*(45360+128744*r**14-50324*r**16+3165*r**18+2100*r**12*(
        -107+90*logu*sqrtQ2)+1512*r**6*(-2523+2825*logu*sqrtQ2)-70*r**10*(52223
        +8100*logu*sqrtQ2)+140*r**8*(61219+31110*logu*sqrtQ2)-25*r**2*(-69365
        +55776*logu*sqrtQ2)-4*r**4*(684161+1076040*logu*sqrtQ2)))/(6300*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (22155*Q2**11*r**2-15*Q2**10*r**2*(5843+6963*r**2)+5*Q2**9*r**2*(24601+35272*r**2
        +36081*r**4)-3*Q2**8*r**2*(24617+8853*r**2+3533*r**4+39457*r**6)-6*Q2**7*r**2*(
        -8108-1480*r**2+3911*r**4+16440*r**6+2532*r**8)-6*Q2**4*r**2*(-88060
        -267820*r**2+747171*r**4+636799*r**6-40661*r**8+7551*r**10)+2*Q2**6*r**2*(21546
        -27006*r**2-5265*r**4-14785*r**6-24766*r**8+26586*r**10)-6*Q2**5*r**2*(
        -16786-4956*r**2+97361*r**4-13808*r**6+17981*r**8-11676*r**10+2954*r**12)
        +Q2**3*(-45360-7066299*r**2-27482016*r**4+35557758*r**6+114462896*r**8
        +44839082*r**10-1479504*r**12+372958*r**14+39184*r**16-1899*r**18)-3*Q2*(45360
        -23263*r**18-39184*r**20+1899*r**22+r**4*(4553936-9195200*logu*sqrtQ2)
        +r**2*(3896139-1408960*logu*sqrtQ2)+16*r**16*(25423+9450*logu*sqrtQ2)
        -28*r**14*(863417+18600*logu*sqrtQ2)+224*r**12*(-29497+42275*logu*sqrtQ2)
        +r**6*(-39616383+281120*logu*sqrtQ2)+32*r**8*(-133011+1230425*logu*sqrtQ2)
        +28*r**10*(2350503+1480280*logu*sqrtQ2))+(-1+r**2)**2*(45360+93420*r**16
        -41083*r**18+1899*r**20+r**2*(3146299-2113440*logu*sqrtQ2)-896*r**12*(20294
        +1125*logu*sqrtQ2)+28*r**14*(-6209+8100*logu*sqrtQ2)+336*r**10*(49856
        +45275*logu*sqrtQ2)-21*r**4*(51263+556160*logu*sqrtQ2)+20*r**6*(-1371221
        +605052*logu*sqrtQ2)+28*r**8*(959311+1677120*logu*sqrtQ2))+3*Q2**2*(45360
        -170150*r**16-37285*r**18+1899*r**20+r**2*(4998219-704480*logu*sqrtQ2)
        +150*r**14*(3407+504*logu*sqrtQ2)-2*r**12*(15112877+168000*logu*sqrtQ2)
        +10*r**6*(-1707151+403368*logu*sqrtQ2)-5*r**4*(-3378303+778624*logu*sqrtQ2)
        +10*r**8*(-6227055+1565312*logu*sqrtQ2)+r**10*(-71869594+5070800*logu*sqrtQ2)))/(6300*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr4(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r4 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (-441*Q2**7*r**2+5*Q2**6*r**2*(341+441*r**2)-3*Q2**5*r**2*(808+1257*r**2
        +1323*r**4)+3*Q2**4*r**2*(615+469*r**2+169*r**4+735*r**6)+Q2**3*(306
        -1229*r**2-1428*r**4-1356*r**6+1582*r**8+2205*r**10)-3*Q2**2*(306+317*r**4
        -898*r**8-1449*r**10+1323*r**12+r**2*(-291+20*logu*sqrtQ2)+4*r**6*(
        -227+45*logu*sqrtQ2))-(-1+r**2)**2*(306+1015*r**4+1870*r**8-1591*r**10
        +441*r**12+540*r**6*(-2+logu*sqrtQ2)+r**2*(-961+60*logu*sqrtQ2))+3*Q2*(306
        +1724*r**10-2281*r**12+735*r**14+5*r**4*(-5+8*logu*sqrtQ2)+40*r**8*(2
        +9*logu*sqrtQ2)+r**2*(-634+40*logu*sqrtQ2)+5*r**6*(19+72*logu*sqrtQ2)))/(45*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (-3528*Q2**8*r**2+3*Q2**7*r**2*(4483+5733*r**2)-Q2**6*r**2*(18879+28300*r**2
        +30429*r**4)+3*Q2**5*r**2*(4396+3117*r**2+442*r**4+6321*r**6)+3*Q2**4*r**2*(
        -2420-2575*r**2-621*r**4+6475*r**6+2205*r**8)+Q2**3*(3060+17133*r**2
        -2515*r**4+15342*r**6-1758*r**8+4325*r**10-11907*r**12)+3*Q2*(3060
        +3477*r**12-6740*r**14+1323*r**16+r**2*(858-7920*logu*sqrtQ2)-25*r**8*(911
        +72*logu*sqrtQ2)-8*r**6*(-1639+425*logu*sqrtQ2)+10*r**10*(1709+540*logu*sqrtQ2)
        -5*r**4*(1881+824*logu*sqrtQ2))+3*Q2**2*(-3060+11469*r**10-238*r**12
        +147*r**14-108*r**8*(52+25*logu*sqrtQ2)+9*r**6*(-499+400*logu*sqrtQ2)
        -2*r**4*(6119+950*logu*sqrtQ2)+r**2*(-9653+3960*logu*sqrtQ2))-(-1
        +r**2)**2*(3060+14240*r**10-8063*r**12+1323*r**14+150*r**8*(-41+54*logu*sqrtQ2)
        -25*r**6*(193+432*logu*sqrtQ2)-6*r**2*(1027+1980*logu*sqrtQ2)+r**4*(6577
        +5700*logu*sqrtQ2)))/(450*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (-2940*Q2**9*r**2+24*Q2**8*r**2*(463+588*r**2)-3*Q2**7*r**2*(5157+7549*r**2
        +8232*r**4)+Q2**6*r**2*(10451+7006*r**2+231*r**4+15876*r**6)+3*Q2**5*r**2*(
        -1749-1617*r**2-601*r**4+5083*r**6+1176*r**8)+3*Q2**4*r**2*(-3025+2730*r**2
        -3466*r**4+2734*r**6+2455*r**8-2940*r**10)+Q2**3*(3060+77003*r**2-19997*r**4
        +6642*r**6+67214*r**8-293*r**10-16197*r**12+3528*r**14)-(-1+r**2)**2*(3060
        +11672*r**12-5475*r**14+588*r**16+r**2*(14353-32280*logu*sqrtQ2)+r**6*(87787
        -3600*logu*sqrtQ2)-400*r**8*(163+81*logu*sqrtQ2)+40*r**4*(-1505+303*logu*sqrtQ2)
        +5*r**10*(2683+2160*logu*sqrtQ2))-3*Q2**2*(3060-5926*r**12-4299*r**14
        +588*r**16+r**2*(47373-10760*logu*sqrtQ2)+r**6*(36059-1200*logu*sqrtQ2)
        +9*r**10*(4043+400*logu*sqrtQ2)-4*r**8*(-2543+2700*logu*sqrtQ2)+r**4*(
        -2454+4040*logu*sqrtQ2))+3*Q2*(3060+2597*r**14-4887*r**16+588*r**18
        +r**8*(26947-24000*logu*sqrtQ2)+r**2*(28173-21520*logu*sqrtQ2)-7*r**4*(10201
        +1920*logu*sqrtQ2)-5*r**10*(15157+2880*logu*sqrtQ2)+r**6*(47627+5680*logu*sqrtQ2)
        +r**12*(43087+7200*logu*sqrtQ2)))/(450*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (-5040*Q2**10*r**2+20*Q2**9*r**2*(947+1197*r**2)-12*Q2**8*r**2*(2185+3146*r**2
        +3465*r**4)+3*Q2**7*r**2*(5795+3722*r**2-143*r**4+9030*r**6)+Q2**6*r**2*(
        -8235-6981*r**2-3075*r**4+25169*r**6+4410*r**8)-3*Q2**5*r**2*(2515-3214*r**2
        +3412*r**4-3708*r**6-3679*r**8+4410*r**10)+3*Q2**4*r**2*(-9895+15755*r**2
        +7110*r**4-14204*r**6+9115*r**8-5655*r**10+1470*r**12)+Q2**3*(6120
        +337335*r**2-72798*r**4-1037385*r**6+171658*r**8+349053*r**10-42570*r**12
        -7723*r**14+630*r**16)+3*Q2*(6120+1080*r**16-7723*r**18+630*r**20
        +r**2*(155535-80800*logu*sqrtQ2)-1100*r**10*(355+148*logu*sqrtQ2)-60*r**12*(5071
        +1200*logu*sqrtQ2)+130*r**6*(-1217+2304*logu*sqrtQ2)+2*r**14*(95009
        +9000*logu*sqrtQ2)+16*r**8*(56468+15025*logu*sqrtQ2)-2*r**4*(198089
        +47240*logu*sqrtQ2))-(-1+r**2)**2*(6120+18433*r**14-8353*r**16+630*r**18
        +45*r**12*(2413+600*logu*sqrtQ2)-r**4*(431233+20520*logu*sqrtQ2)-5*r**8*(
        -28829+21840*logu*sqrtQ2)-5*r**2*(-21803+24240*logu*sqrtQ2)-5*r**10*(70049
        +27000*logu*sqrtQ2)+9*r**6*(44767+52200*logu*sqrtQ2))-3*Q2**2*(6120
        -18253*r**14-7093*r**16+630*r**18+r**10*(99079-45000*logu*sqrtQ2)-171*r**4*(413
        +40*logu*sqrtQ2)-5*r**2*(-44451+8080*logu*sqrtQ2)+r**12*(205819+9000*logu*sqrtQ2)
        -r**8*(372431+36400*logu*sqrtQ2)+r**6*(-361183+156600*logu*sqrtQ2)))/(900*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (-15435*Q2**11*r**2+15*Q2**10*r**2*(3851+4851*r**2)-5*Q2**9*r**2*(15927+22654*r**2
        +25137*r**4)+3*Q2**8*r**2*(17389+10801*r**2-979*r**4+27489*r**6)+6*Q2**7*r**2*(
        -3961-3160*r**2-1578*r**4+12510*r**6+1764*r**8)+2*Q2**6*r**2*(-7707
        +12327*r**2-12450*r**4+15960*r**6+15442*r**8-18522*r**10)+6*Q2**4*r**2*(
        -28245+30485*r**2+234207*r**4+5283*r**6-33032*r**8+3402*r**10)+6*Q2**5*r**2*(
        -5362+16373*r**2+9157*r**4-10156*r**6+10997*r**8-7917*r**10+2058*r**12)
        +Q2**3*(21420+2078733*r**2+340872*r**4-21969816*r**6-18490092*r**8+1999636*r**10
        +2296608*r**12-192276*r**14-22408*r**16+1323*r**18)+3*Q2**2*(-21420
        +90700*r**16+21085*r**18-1323*r**20-20*r**14*(73271+1890*logu*sqrtQ2)
        -120*r**6*(-99290+24843*logu*sqrtQ2)+8*r**10*(1257496+49175*logu*sqrtQ2)
        +5*r**4*(46119+52528*logu*sqrtQ2)+4*r**12*(-253963+69300*logu*sqrtQ2)
        +3*r**2*(-474091+75320*logu*sqrtQ2)-20*r**8*(-777257+119112*logu*sqrtQ2))
        -(-1+r**2)**2*(21420+45970*r**16-23731*r**18+1323*r**20+r**2*(814533
        -677880*logu*sqrtQ2)+126*r**14*(6841+900*logu*sqrtQ2)-14*r**12*(174047
        +59400*logu*sqrtQ2)-14*r**10*(268687+84300*logu*sqrtQ2)+70*r**6*(-31021
        +127764*logu*sqrtQ2)+42*r**8*(233693+170160*logu*sqrtQ2)-r**4*(3166841
        +787920*logu*sqrtQ2))+3*Q2*(21420-15561*r**18-22408*r**20+1323*r**22
        +r**2*(1061913-451920*logu*sqrtQ2)+16*r**16*(78796+4725*logu*sqrtQ2)
        -84*r**14*(21113+5700*logu*sqrtQ2)-28*r**4*(90771+34900*logu*sqrtQ2)
        +112*r**10*(73484+35515*logu*sqrtQ2)-28*r**12*(324647+47900*logu*sqrtQ2)
        +28*r**8*(410227+383100*logu*sqrtQ2)+r**6*(-8618791+5437040*logu*sqrtQ2)))/(3150*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr5(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r5 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (381*Q2**7*r**2-5*Q2**6*r**2*(413+381*r**2)-3*Q2**4*r**2*(595+959*r**2+1959*r**4
        +635*r**6)+Q2**5*(3789*r**2+5916*r**4+3429*r**6)-Q2**3*(576+6001*r**2
        +2352*r**4+894*r**6-5648*r**8+1905*r**10)-3*Q2*(576+3829*r**10-3036*r**12
        +635*r**14+r**2*(1651-2240*logu*sqrtQ2)+40*r**8*(1+18*logu*sqrtQ2)
        -20*r**4*(195+112*logu*sqrtQ2)+5*r**6*(41+144*logu*sqrtQ2))+3*Q2**2*(576
        +3207*r**4+1122*r**8-3289*r**10+1143*r**12+r**2*(3959-1120*logu*sqrtQ2)
        +r**6*(-638+360*logu*sqrtQ2))+(-1+r**2)**2*(576-1085*r**4+3520*r**8
        -2101*r**10+381*r**12+120*r**6*(-10+9*logu*sqrtQ2)-7*r**2*(13+480*logu*sqrtQ2)))/(360*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (3048*Q2**8*r**2-3*Q2**7*r**2*(5353+4953*r**2)+Q2**6*r**2*(29089+43650*r**2
        +26289*r**4)-3*Q2**5*r**2*(5461+6797*r**2+12397*r**4+5461*r**6)-3*Q2**4*r**2*(
        -7695+6750*r**2+5114*r**4-6850*r**6+1905*r**8)+Q2**3*(-5760-173153*r**2
        -18585*r**4+99978*r**6+46378*r**8-21225*r**10+10287*r**12)+(-1+r**2)**2*(5760
        -140368*r**4+21865*r**10-10608*r**12+1143*r**14+r**2*(40183-70080*logu*sqrtQ2)
        +200*r**8*(-296+81*logu*sqrtQ2)+75*r**6*(1883+408*logu*sqrtQ2))-3*Q2*(5760
        +5857*r**12-9465*r**14+1143*r**16+r**2*(69303-46720*logu*sqrtQ2)+15*r**10*(
        -2449+720*logu*sqrtQ2)+25*r**8*(3881+1248*logu*sqrtQ2)-5*r**4*(29381
        +9344*logu*sqrtQ2)+r**6*(14017+20400*logu*sqrtQ2))-3*Q2**2*(-5760-23858*r**4
        +22129*r**10+1742*r**12+127*r**14+r**8*(75044-5400*logu*sqrtQ2)-r**6*(21631
        +10200*logu*sqrtQ2)+r**2*(-109873+23360*logu*sqrtQ2)))/(3600*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (635*Q2**9*r**2-24*Q2**8*r**2*(137+127*r**2)+6*Q2**7*r**2*(984+1443*r**2
        +889*r**4)-Q2**6*r**2*(3499+3899*r**2+6869*r**4+3429*r**6)-6*Q2**5*r**2*(
        -438+586*r**2+443*r**4-574*r**6+127*r**8)+3*Q2**4*r**2*(2525-4295*r**2
        -2316*r**4+1164*r**6-1745*r**8+635*r**10)+2*Q2**3*(-720-41486*r**2
        +8969*r**4+147671*r**6+43902*r**8+836*r**10+2489*r**12-381*r**14)+3*Q2**2*(1440
        -3869*r**12-1561*r**14+127*r**16+r**2*(54777-9840*logu*sqrtQ2)+3*r**10*(
        -21319+600*logu*sqrtQ2)-r**4*(17631+2240*logu*sqrtQ2)+r**8*(-175267
        +6400*logu*sqrtQ2)+r**6*(-116619+44200*logu*sqrtQ2))+(-1+r**2)**2*(1440
        +3753*r**12-1815*r**14+127*r**16-35*r**4*(3091+192*logu*sqrtQ2)+75*r**8*(467
        +256*logu*sqrtQ2)+5*r**10*(-8893+1080*logu*sqrtQ2)-9*r**2*(-3033+3280*logu*sqrtQ2)
        +3*r**6*(28941+44200*logu*sqrtQ2))-3*Q2*(1440+138*r**14-1688*r**16
        +127*r**18+r**2*(38577-19680*logu*sqrtQ2)+3280*r**10*(-13+5*logu*sqrtQ2)
        +24*r**12*(-1813+150*logu*sqrtQ2)-8*r**4*(12291+3020*logu*sqrtQ2)+8*r**8*(25761
        +12650*logu*sqrtQ2)+r**6*(-60202+83920*logu*sqrtQ2)))/(900*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (15240*Q2**10*r**2-10*Q2**9*r**2*(7799+7239*r**2)+6*Q2**8*r**2*(23195+33502*r**2
        +20955*r**4)-3*Q2**7*r**2*(28145+29357*r**2+50917*r**4+27305*r**6)+Q2**6*r**2*(47985
        -76314*r**2-59550*r**4+72086*r**6-13335*r**8)+3*Q2**5*r**2*(22015-81109*r**2
        -35278*r**4+30802*r**6-37149*r**8+13335*r**10)-3*Q2**4*r**2*(-102795
        +167930*r**2+1082135*r**4+34276*r**6+60415*r**8-23030*r**10+4445*r**12)
        +Q2**3*(-40320-3779385*r**2+1908963*r**4+50574285*r**6+44333977*r**8
        +4504257*r**10+333045*r**12+37163*r**14-1905*r**16)+(-1+r**2)**2*(40320
        +62048*r**14-39068*r**16+1905*r**18+420*r**12*(-6217+450*logu*sqrtQ2)
        +70*r**10*(-118751+13500*logu*sqrtQ2)+1512*r**6*(-2886+13525*logu*sqrtQ2)
        +140*r**8*(147133+121470*logu*sqrtQ2)-4*r**4*(1709087+161280*logu*sqrtQ2)
        -5*r**2*(-291973+248640*logu*sqrtQ2))-3*Q2*(40320-40020*r**16-37163*r**18
        +1905*r**20+r**2*(1914585-828800*logu*sqrtQ2)+1890*r**12*(-8479+400*logu*sqrtQ2)
        +28*r**14*(-97789+4500*logu*sqrtQ2)+350*r**10*(47119+34192*logu*sqrtQ2)
        -7*r**4*(855749+179840*logu*sqrtQ2)+20*r**6*(-901613+660156*logu*sqrtQ2)
        +28*r**8*(871951+891800*logu*sqrtQ2))+3*Q2**2*(40320-165968*r**14-35258*r**16
        +1905*r**18-6*r**4*(363623+35840*logu*sqrtQ2)+r**12*(-3576886+63000*logu*sqrtQ2)
        -5*r**2*(-515301+82880*logu*sqrtQ2)+r**10*(-28464826+315000*logu*sqrtQ2)
        +8*r**6*(-3557356+852075*logu*sqrtQ2)+r**8*(-37605286+5668600*logu*sqrtQ2)))/(25200*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (13335*Q2**11*r**2-15*Q2**10*r**2*(4511+4191*r**2)+5*Q2**9*r**2*(24037+34344*r**2
        +21717*r**4)-3*Q2**8*r**2*(24629+24561*r**2+42241*r**4+23749*r**6)-6*Q2**7*r**2*(
        -5996+10440*r**2+8327*r**4-9560*r**6+1524*r**8)-6*Q2**4*r**2*(-72520
        +116760*r**2+2451627*r**4+1815463*r**6+55503*r**8+8307*r**10)+2*Q2**6*r**2*(16002
        -92022*r**2-38145*r**4+38975*r**6-44982*r**8+16002*r**10)-6*Q2**5*r**2*(
        -14182+60228*r**2+256497*r**4-2736*r**6+20137*r**8-9212*r**10+1778*r**12)
        +Q2**3*(-40320-5614263*r**2+4945008*r**4+199973406*r**6+349549472*r**8
        +143317074*r**10+7426272*r**12+436126*r**14+30768*r**16-1143*r**18)
        +(-1+r**2)**2*(40320+17300*r**16-31911*r**18+1143*r**20+r**2*(2383063
        -1740480*logu*sqrtQ2)+2352*r**12*(-18769+600*logu*sqrtQ2)+28*r**14*(
        -162083+8100*logu*sqrtQ2)+2340*r**6*(-20595+31612*logu*sqrtQ2)+112*r**10*(308651
        +445275*logu*sqrtQ2)-r**4*(13268551+1451520*logu*sqrtQ2)+28*r**8*(2613037
        +5007840*logu*sqrtQ2))+3*Q2**2*(40320-230950*r**16-29625*r**18+1143*r**20
        +r**2*(3914103-580160*logu*sqrtQ2)+10*r**14*(-598951+7560*logu*sqrtQ2)
        -15*r**4*(378743+32256*logu*sqrtQ2)+130*r**6*(-964531+189672*logu*sqrtQ2)
        +r**12*(-96069458+470400*logu*sqrtQ2)+10*r**8*(-24016583+4673984*logu*sqrtQ2)
        +2*r**10*(-115211209+8311800*logu*sqrtQ2))-3*Q2*(40320-90211*r**18
        -30768*r**20+1143*r**22+r**2*(3003543-1160320*logu*sqrtQ2)+96*r**16*(
        -50419+1575*logu*sqrtQ2)+28*r**14*(-2301479+39000*logu*sqrtQ2)+672*r**12*(
        -35028+50875*logu*sqrtQ2)-16*r**4*(722623+133000*logu*sqrtQ2)+32*r**8*(875983
        +4462325*logu*sqrtQ2)+28*r**10*(5711881+4525960*logu*sqrtQ2)+r**6*(
        -86505731+48347040*logu*sqrtQ2)))/(25200*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr6(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r6 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (-2019*Q2**7*r**2+5*Q2**6*r**2*(1219+2019*r**2)-3*Q2**5*r**2*(2417+3788*r**2
        +6057*r**4)+3*Q2**4*r**2*(1245+2401*r**2-2199*r**4+3365*r**6)+Q2**3*(
        -1296+5279*r**2+1248*r**4-8814*r**6+18128*r**8+10095*r**10)-3*Q2**2*(
        -1296+633*r**4-3122*r**8-2471*r**10+6057*r**12+r**2*(3081-800*logu*sqrtQ2)
        +r**6*(6398-360*logu*sqrtQ2))-(-1+r**2)**2*(-1296-4195*r**4+3920*r**8
        -4859*r**10+2019*r**12+r**2*(4171-2400*logu*sqrtQ2)-120*r**6*(-2+9*logu*sqrtQ2))
        +3*Q2*(-1296+5051*r**10-7524*r**12+3365*r**14+r**2*(3389-1600*logu*sqrtQ2)
        -40*r**8*(-37+18*logu*sqrtQ2)-20*r**4*(21+80*logu*sqrtQ2)-5*r**6*(809
        +144*logu*sqrtQ2)))/(360*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (-5384*Q2**8*r**2+Q2**7*r**2*(16247+26247*r**2)-3*Q2**6*r**2*(6279+9550*r**2
        +15479*r**4)+Q2**5*r**2*(10139+16403*r**2-18397*r**4+28939*r**6)+Q2**4*r**2*(
        -7105+1650*r**2-24714*r**4+46450*r**6+10095*r**8)+Q2**3*(-4320+61749*r**2
        +89005*r**4-53074*r**6+38126*r**8+2525*r**10-18171*r**12)-(-1+r**2)**2*(
        -4320+12045*r**10-7264*r**12+2019*r**14+r**2*(39539-13440*logu*sqrtQ2)
        -200*r**8*(88+27*logu*sqrtQ2)-384*r**4*(191+100*logu*sqrtQ2)+25*r**6*(1957
        +552*logu*sqrtQ2))+3*Q2*(-4320+6581*r**12-5245*r**14+2019*r**16+r**2*(39699
        -8960*logu*sqrtQ2)+175*r**8*(315+32*logu*sqrtQ2)-15*r**10*(917+240*logu*sqrtQ2)
        -5*r**4*(5993+6912*logu*sqrtQ2)-r**6*(50139+16400*logu*sqrtQ2))+Q2**2*(12960
        -2129*r**10-13742*r**12+673*r**14+r**8*(42556+5400*logu*sqrtQ2)+r**2*(
        -127727+13440*logu*sqrtQ2)-r**6*(171169+13800*logu*sqrtQ2)+r**4*(-88942
        +38400*logu*sqrtQ2)))/(1200*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (-3365*Q2**9*r**2+24*Q2**8*r**2*(423+673*r**2)-6*Q2**7*r**2*(1936+2877*r**2
        +4711*r**4)+Q2**6*r**2*(6221+9301*r**2-11549*r**4+18171*r**6)+6*Q2**5*r**2*(
        -502+34*r**2-2223*r**4+4434*r**6+673*r**8)-3*Q2**4*r**2*(1275+7895*r**2
        +1836*r**4-3964*r**6-1255*r**8+3365*r**10)+2*Q2**3*(-1620+47494*r**2
        +275369*r**4+81791*r**6-45478*r**8+13736*r**10-7231*r**12+2019*r**14)
        -3*Q2**2*(-3240+10629*r**12-2079*r**14+673*r**16+r**4*(323991-79360*logu*sqrtQ2)
        +r**6*(259939-15400*logu*sqrtQ2)+r**2*(73983-6160*logu*sqrtQ2)-r**10*(61123
        +1800*logu*sqrtQ2)+r**8*(129387+11200*logu*sqrtQ2))-(-1+r**2)**2*(
        -3240+10287*r**12-3425*r**14+673*r**16+r**2*(65063-18480*logu*sqrtQ2)
        +75*r**8*(2533+448*logu*sqrtQ2)-465*r**4*(15+512*logu*sqrtQ2)-5*r**10*(9707
        +1080*logu*sqrtQ2)-3*r**6*(67941+15400*logu*sqrtQ2))+3*Q2*(-3240+8662*r**14
        -2752*r**16+673*r**18+r**2*(67983-12320*logu*sqrtQ2)+r**8*(23512-8400*logu*sqrtQ2)
        +80*r**10*(2263+235*logu*sqrtQ2)-8*r**12*(6631+450*logu*sqrtQ2)-8*r**4*(
        -15641+21380*logu*sqrtQ2)-2*r**6*(173979+94760*logu*sqrtQ2)))/(900*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (-80760*Q2**10*r**2+10*Q2**9*r**2*(24361+38361*r**2)-6*Q2**8*r**2*(46085
        +67298*r**2+111045*r**4)+3*Q2**7*r**2*(48935+69523*r**2-92317*r**4+144695*r**6)
        +Q2**6*r**2*(-62055-4914*r**2-300390*r**4+605486*r**6+70665*r**8)-3*Q2**5*r**2*(9625
        +107989*r**2+86158*r**4-99762*r**6-25851*r**8+70665*r**10)+3*Q2**4*r**2*(
        -77805-1709330*r**2-504695*r**4+204124*r**6+62585*r**8-81970*r**10
        +23555*r**12)+Q2**3*(-90720+4856895*r**2+68151363*r**4+90976005*r**6
        +8532697*r**8-6267543*r**10+573525*r**12-59437*r**14+10095*r**16)-3*Q2**2*(
        -90720+405848*r**14-49342*r**16+10095*r**18+r**4*(44098818-8520960*logu*sqrtQ2)
        +r**8*(51001246-292600*logu*sqrtQ2)+r**2*(3892575-291200*logu*sqrtQ2)
        -2*r**12*(2207617+31500*logu*sqrtQ2)+r**10*(7849186+693000*logu*sqrtQ2)
        -8*r**6*(-7997551+1545075*logu*sqrtQ2))+3*Q2*(-90720+340500*r**16-59437*r**18
        +10095*r**20+r**2*(3546495-582400*logu*sqrtQ2)+350*r**10*(79025+2288*logu*sqrtQ2)
        -28*r**14*(135311+4500*logu*sqrtQ2)+210*r**12*(61223+6000*logu*sqrtQ2)
        -49*r**4*(-551507+359680*logu*sqrtQ2)-28*r**8*(1653751+903800*logu*sqrtQ2)
        -20*r**6*(1059631+2088156*logu*sqrtQ2))-(-1+r**2)**2*(-90720+347032*r**14
        -69532*r**16+10095*r**18+r**2*(3346015-873600*logu*sqrtQ2)-420*r**12*(7897
        +450*logu*sqrtQ2)-140*r**8*(-15317+6270*logu*sqrtQ2)+70*r**10*(206171
        +29700*logu*sqrtQ2)-504*r**6*(64567+73575*logu*sqrtQ2)-4*r**4*(-3934817
        +6390720*logu*sqrtQ2)))/(25200*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (-23555*Q2**11*r**2+5*Q2**10*r**2*(14209+22209*r**2)-15*Q2**9*r**2*(5347
        +7704*r**2+12787*r**4)+Q2**8*r**2*(42251+57839*r**2-80641*r**4+125851*r**6)
        +2*Q2**7*r**2*(-8324-1560*r**2-42327*r**4+85160*r**6+8076*r**8)-6*Q2**4*r**2*(18760
        +873320*r**2+1441529*r**4+147021*r**6-68699*r**8+5169*r**10)-2*Q2**6*r**2*(1946
        +36274*r**2+44395*r**4-43125*r**6-10206*r**8+28266*r**10)+2*Q2**5*r**2*(
        -13258-386708*r**2-159377*r**4+33296*r**6+31463*r**8-32788*r**10+9422*r**12)
        +Q2**3*(-30240+2611299*r**2+67926736*r**4+189527882*r**6+124940704*r**8
        +5730758*r**10-4207456*r**12+250442*r**14-16144*r**16+2019*r**18)-3*Q2**2*(
        -30240+174850*r**16-14125*r**18+2019*r**20+r**6*(123476450-25243120*logu*sqrtQ2)
        +r**8*(135677250-15729280*logu*sqrtQ2)+r**4*(45909235-7678720*logu*sqrtQ2)
        +r**2*(2130819-150080*logu*sqrtQ2)-10*r**14*(298771+2520*logu*sqrtQ2)
        +r**10*(76619846+58800*logu*sqrtQ2)+r**12*(5777606+425600*logu*sqrtQ2))
        +3*Q2*(-30240+147137*r**18-16144*r**20+2019*r**22+r**6*(21298657-65843680*logu*sqrtQ2)
        +r**2*(1935939-300160*logu*sqrtQ2)-96*r**16*(26482+525*logu*sqrtQ2)
        +224*r**12*(223398+4325*logu*sqrtQ2)+28*r**14*(340893+28600*logu*sqrtQ2)
        -48*r**4*(-667097+326200*logu*sqrtQ2)-28*r**10*(1006227+1119320*logu*sqrtQ2)
        -32*r**8*(2632111+2560775*logu*sqrtQ2))-(-1+r**2)**2*(-30240+140100*r**16
        -18163*r**18+2019*r**20+r**4*(22825997-23036160*logu*sqrtQ2)+r**2*(1816099
        -450240*logu*sqrtQ2)+112*r**10*(211483+1575*logu*sqrtQ2)-28*r**14*(78799
        +2700*logu*sqrtQ2)+336*r**12*(32541+3800*logu*sqrtQ2)-84*r**8*(542693
        +561760*logu*sqrtQ2)-20*r**6*(578155+3786468*logu*sqrtQ2)))/(8400*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr7(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r7 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (1131*Q2**7*r**2-5*Q2**6*r**2*(779+1131*r**2)+3*Q2**5*r**2*(1433+2652*r**2
        +3393*r**4)-3*Q2**4*r**2*(725+249*r**2-1151*r**4+1885*r**6)-Q2**3*(-144
        +4231*r**2-2688*r**4+4674*r**6+15472*r**8+5655*r**10)+3*Q2**2*(-144
        +4337*r**4-578*r**8+1521*r**10+3393*r**12+r**2*(2689-1120*logu*sqrtQ2)
        +r**6*(622-360*logu*sqrtQ2))+(-1+r**2)**2*(-144+565*r**4-80*r**8-1411*r**10
        +1131*r**12+r**2*(179-3360*logu*sqrtQ2)-120*r**6*(2+9*logu*sqrtQ2))
        +3*Q2*(144-339*r**10+2356*r**12-1885*r**14+120*r**8*(5+6*logu*sqrtQ2)
        +20*r**4*(73+112*logu*sqrtQ2)+5*r**6*(-223+144*logu*sqrtQ2)+r**2*(
        -1221+2240*logu*sqrtQ2)))/(360*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (9048*Q2**8*r**2-3*Q2**7*r**2*(10303+14703*r**2)+Q2**6*r**2*(34439+59950*r**2
        +78039*r**4)-3*Q2**5*r**2*(5011+1947*r**2-8453*r**4+16211*r**6)-3*Q2**4*r**2*(
        -15145-7150*r**2+5014*r**4+32050*r**6+5655*r**8)+Q2**3*(1440-357703*r**2
        -372335*r**4-73722*r**6-65722*r**8+13825*r**10+30537*r**12)+(-1+r**2)**2*(
        -1440+12415*r**10-6608*r**12+3393*r**14+r**2*(132833-122880*logu*sqrtQ2)
        -200*r**8*(28+81*logu*sqrtQ2)-25*r**6*(-4535+1224*logu*sqrtQ2)-16*r**4*(15523
        +8700*logu*sqrtQ2))-3*Q2**2*(1440-18921*r**10-10558*r**12+377*r**14
        +12*r**8*(-4163+450*logu*sqrtQ2)+r**6*(-284281+10200*logu*sqrtQ2)+r**2*(
        -232023+40960*logu*sqrtQ2)+r**4*(-229758+46400*logu*sqrtQ2))+3*Q2*(1440
        -11207*r**12+3215*r**14-3393*r**16+25*r**8*(-5567+1248*logu*sqrtQ2)
        +5*r**10*(-1243+2160*logu*sqrtQ2)+5*r**4*(30211+34944*logu*sqrtQ2)
        +r**2*(-172353+81920*logu*sqrtQ2)+r**6*(176633+113200*logu*sqrtQ2)))/(3600*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (1885*Q2**9*r**2-24*Q2**8*r**2*(267+377*r**2)+6*Q2**7*r**2*(1194+2003*r**2
        +2639*r**4)-3*Q2**6*r**2*(1003+383*r**2-1707*r**4+3393*r**6)-6*Q2**5*r**2*(
        -1008-604*r**2+503*r**4+2956*r**6+377*r**8)+3*Q2**4*r**2*(5175+6655*r**2
        +1644*r**4-1436*r**6+605*r**8+1885*r**10)-2*Q2**3*(-180+107076*r**2
        +306531*r**4+132939*r**6+28358*r**8+8214*r**10-2949*r**12+1131*r**14)
        +3*Q2**2*(-360+9661*r**12-331*r**14+377*r**16+r**4*(371199-87840*logu*sqrtQ2)
        +r**6*(404191-28200*logu*sqrtQ2)+r**2*(150507-21040*logu*sqrtQ2)+r**8*(190643
        -6400*logu*sqrtQ2)+r**10*(36353-1800*logu*sqrtQ2))+(-1+r**2)**2*(-360
        +5823*r**12-1085*r**14+377*r**16+r**2*(98627-63120*logu*sqrtQ2)+r**10*(6285
        -5400*logu*sqrtQ2)-75*r**8*(-957+256*logu*sqrtQ2)-9*r**6*(9403+9400*logu*sqrtQ2)
        -5*r**4*(19363+52704*logu*sqrtQ2))-3*Q2*(-360+6538*r**14-708*r**16
        +377*r**18+r**4*(47572-217760*logu*sqrtQ2)+r**8*(24988-69200*logu*sqrtQ2)
        +r**2*(119307-42080*logu*sqrtQ2)-20*r**10*(-4763+820*logu*sqrtQ2)-4*r**12*(
        -3727+900*logu*sqrtQ2)-2*r**6*(153941+116040*logu*sqrtQ2)))/(900*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (45240*Q2**10*r**2-10*Q2**9*r**2*(15329+21489*r**2)+6*Q2**8*r**2*(28605+46802*r**2
        +62205*r**4)-3*Q2**7*r**2*(23655+8667*r**2-40333*r**4+81055*r**6)+Q2**6*r**2*(115815
        +76986*r**2-64770*r**4-396214*r**6-39585*r**8)+3*Q2**5*r**2*(47145+67501*r**2
        +25982*r**4-41218*r**6+12901*r**8+39585*r**10)+3*Q2**4*r**2*(245245+1519770*r**2
        +291135*r**4+45924*r**6+1335*r**8+36330*r**10-13195*r**12)-Q2**3*(-10080
        +10993695*r**2+69544587*r**4+69502005*r**6+16579313*r**8+2988393*r**10
        +537165*r**12-17213*r**14+5655*r**16)+3*Q2**2*(-10080+376192*r**14-11558*r**16
        +5655*r**18+r**4*(44230122-9119040*logu*sqrtQ2)+r**6*(56775472-8933400*logu*sqrtQ2)
        +r**8*(47013734-1849400*logu*sqrtQ2)+r**2*(8026815-985600*logu*sqrtQ2)
        +r**10*(11705594-315000*logu*sqrtQ2)+r**12*(2011574-63000*logu*sqrtQ2))
        +(-1+r**2)**2*(-10080+241808*r**14-22868*r**16+5655*r**18+r**4*(7842892
        -27357120*logu*sqrtQ2)+r**2*(5582975-2956800*logu*sqrtQ2)-10500*r**12*(
        -61+18*logu*sqrtQ2)-70*r**10*(-59119+13500*logu*sqrtQ2)-140*r**8*(
        -56383+39630*logu*sqrtQ2)-504*r**6*(52208+53175*logu*sqrtQ2))-3*Q2*(
        -10080+281940*r**16-17213*r**18+5655*r**20+r**2*(6558495-1971200*logu*sqrtQ2)
        -1890*r**12*(-3207+400*logu*sqrtQ2)-28*r**14*(-38261+4500*logu*sqrtQ2)
        -350*r**10*(-50233+12368*logu*sqrtQ2)-28*r**8*(904199+770200*logu*sqrtQ2)
        -20*r**6*(1339451+1805244*logu*sqrtQ2)-7*r**4*(-2939101+2887040*logu*sqrtQ2)))/(25200*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (39585*Q2**11*r**2-165*Q2**10*r**2*(811+1131*r**2)+5*Q2**9*r**2*(29987+48184*r**2
        +64467*r**4)-3*Q2**8*r**2*(20499+7191*r**2-34969*r**4+70499*r**6)-6*Q2**7*r**2*(
        -14676-10360*r**2+8497*r**4+55080*r**6+4524*r**8)+6*Q2**4*r**2*(184520
        +2464840*r**2+2226963*r**4+444847*r**6+32327*r**8+12843*r**10)+2*Q2**6*r**2*(34062
        +53718*r**2+31785*r**4-54935*r**6+15638*r**8+47502*r**10)-6*Q2**5*r**2*(
        -36442-300132*r**2-36873*r**4-5616*r**6+5007*r**8-14532*r**10+5278*r**12)
        -Q2**3*(-10080+17565153*r**2+202010352*r**4+389869134*r**6+203796128*r**8
        +39951586*r**10+4737888*r**12+705934*r**14-15088*r**16+3393*r**18)+(
        -1+r**2)**2*(-10080+325580*r**16-18481*r**18+3393*r**20+r**4*(50393519
        -72683520*logu*sqrtQ2)+r**2*(9456353-4428480*logu*sqrtQ2)-28*r**14*(
        -48227+8100*logu*sqrtQ2)-112*r**12*(-99431+12600*logu*sqrtQ2)-112*r**10*(
        -336851+122475*logu*sqrtQ2)-620*r**6*(102959+252756*logu*sqrtQ2)-28*r**8*(1661773
        +2600160*logu*sqrtQ2))+3*Q2**2*(-10080+491190*r**16-11695*r**18+3393*r**20
        +r**6*(265877590-52236240*logu*sqrtQ2)+r**8*(275293750-24268160*logu*sqrtQ2)
        +r**10*(139342242-4572400*logu*sqrtQ2)+r**2*(13126593-1476160*logu*sqrtQ2)
        -50*r**14*(-66259+1512*logu*sqrtQ2)-6*r**12*(-4610427+78400*logu*sqrtQ2)
        -5*r**4*(-26705181+4845568*logu*sqrtQ2))-3*Q2*(-10080+382699*r**18
        -15088*r**20+3393*r**22+r**4*(81125392-51408000*logu*sqrtQ2)+r**2*(10922433
        -2952320*logu*sqrtQ2)-32*r**16*(-62348+4725*logu*sqrtQ2)-28*r**14*(
        -578351+39000*logu*sqrtQ2)-224*r**12*(-287756+45025*logu*sqrtQ2)-28*r**10*(18929
        +2060040*logu*sqrtQ2)-32*r**8*(5198147+4781525*logu*sqrtQ2)-11*r**6*(744031
        +13902560*logu*sqrtQ2)))/(25200*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr8(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r8 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (597*Q2**7-Q2**6*(1801+2985*r**2)+3*Q2**5*(615+908*r**2+1791*r**4)-3*Q2**4*(227
        +63*r**2-1441*r**4+995*r**6)+Q2**3*(311+384*r**2+3570*r**4-8512*r**6
        -2985*r**8)+(-1+r**2)**2*(197-941*r**2+856*r**6-1597*r**8+597*r**10
        +96*logu*sqrtQ2+24*r**4*(37+9*logu*sqrtQ2))-3*Q2*(107+189*r**8-2228*r**10
        +995*r**12+64*logu*sqrtQ2+24*r**6*(97+6*logu*sqrtQ2)+9*r**4*(-131
        +16*logu*sqrtQ2)+4*r**2*(-53+16*logu*sqrtQ2))+3*Q2**2*(-49-65*r**2
        -3102*r**6-209*r**8+1791*r**10+32*logu*sqrtQ2+r**4*(802+72*logu*sqrtQ2)))/(72*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (4776*Q2**8-3*Q2**7*(4801+7761*r**2)+Q2**6*(14713+21170*r**2+41193*r**4)
        -3*Q2**5*(1797+69*r**2-10451*r**4+8557*r**6)-3*Q2**4*(225-1850*r**2
        -5422*r**4+20310*r**6+2985*r**8)+Q2**3*(19639-1585*r**2+1146*r**4-36614*r**6
        +10895*r**8+16119*r**10)+Q2**2*(-42357-19179*r**8+4278*r**10-597*r**12
        +7680*logu*sqrtQ2+12*r**6*(823+270*logu*sqrtQ2)-9*r**4*(-909+440*logu*sqrtQ2)
        -6*r**2*(-1833+560*logu*sqrtQ2))-3*Q2*(-10569+1369*r**10-6505*r**12
        +1791*r**14+5120*logu*sqrtQ2-61*r**4*(91+80*logu*sqrtQ2)-5*r**6*(4891
        +96*logu*sqrtQ2)+5*r**8*(4013+432*logu*sqrtQ2)+5*r**2*(4771+576*logu*sqrtQ2))
        +(-1+r**2)**2*(-8009+10745*r**8-8296*r**10+1791*r**12+7680*logu*sqrtQ2
        +40*r**6*(146+81*logu*sqrtQ2)-8*r**2*(-3203+420*logu*sqrtQ2)-5*r**4*(5539
        +792*logu*sqrtQ2)))/(720*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (995*Q2**9-24*Q2**8*(125+199*r**2)+6*Q2**7*(510+718*r**2+1393*r**4)
        +Q2**6*(-1115+27*r**2+6185*r**4-5373*r**6)-6*Q2**5*(10-141*r**2-517*r**4
        +1903*r**6+199*r**8)+3*Q2**4*(-515-25*r**2+1410*r**4-2542*r**6+285*r**8
        +995*r**10)-2*Q2**3*(-7940-18108*r**2+5885*r**4+5528*r**6+498*r**8
        -2140*r**10+597*r**12)+3*Q2**2*(-47*r**10-1011*r**12+199*r**14+r**6*(7913
        -800*logu*sqrtQ2)+9*r**8*(487+40*logu*sqrtQ2)+5*(-2235+304*logu*sqrtQ2)
        +3*r**2*(-7147+2000*logu*sqrtQ2)-r**4*(10181+3160*logu*sqrtQ2))-3*Q2*(
        -8895+1106*r**12-1210*r**14+199*r**16+3040*logu*sqrtQ2-40*r**8*(185
        +22*logu*sqrtQ2)+10*r**10*(637+72*logu*sqrtQ2)+10*r**4*(2795+568*logu*sqrtQ2)
        -2*r**6*(9947+3960*logu*sqrtQ2)+2*r**2*(887+7520*logu*sqrtQ2))+(-1
        +r**2)**2*(-7375+2875*r**10-1409*r**12+199*r**14+4560*logu*sqrtQ2+r**4*(2201
        -9480*logu*sqrtQ2)-75*r**6*(141+32*logu*sqrtQ2)+5*r**8*(395+216*logu*sqrtQ2)
        +r**2*(12109+18000*logu*sqrtQ2)))/(180*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (23880*Q2**10-10*Q2**9*(7199+11343*r**2)+6*Q2**8*(12227+16926*r**2+32835*r**4)
        -3*Q2**7*(8877-507*r**2-47799*r**4+42785*r**6)+Q2**6*(-819+17178*r**2
        +71166*r**4-256942*r**6-20895*r**8)+3*Q2**5*(-6629-2205*r**2+31058*r**4
        -56078*r**6+6503*r**8+20895*r**10)-3*Q2**4*(18025+146790*r**2-87569*r**4
        +12948*r**6+14715*r**8-21490*r**10+6965*r**12)+Q2**3*(863643+5920299*r**2
        +3106737*r**4-2341487*r**6-373059*r**8+30573*r**10+26999*r**12-2985*r**14)
        +(-1+r**2)**2*(-444763+83636*r**12-29984*r**14+2985*r**16+228480*logu*sqrtQ2
        +168*r**10*(416+225*logu*sqrtQ2)-350*r**8*(-671+324*logu*sqrtQ2)+756*r**4*(4339
        +1650*logu*sqrtQ2)-280*r**6*(8872+3705*logu*sqrtQ2)+32*r**2*(-22273
        +73395*logu*sqrtQ2))+3*Q2**2*(-635163+4108*r**12-24014*r**14+2985*r**16
        +76160*logu*sqrtQ2+r**8*(1512146-37800*logu*sqrtQ2)+220*r**4*(-13277
        +1890*logu*sqrtQ2)+2*r**10*(99067+6300*logu*sqrtQ2)+6*r**2*(-624977
        +130480*logu*sqrtQ2)-2*r**6*(809057+172900*logu*sqrtQ2))-3*Q2*(-520923
        +41052*r**14-26999*r**16+2985*r**18+152320*logu*sqrtQ2-126*r**10*(-4463
        +400*logu*sqrtQ2)+28*r**12*(7733+900*logu*sqrtQ2)+28*r**6*(42523+5000*logu*sqrtQ2)
        -70*r**8*(47413+10960*logu*sqrtQ2)+91*r**2*(-19649+18880*logu*sqrtQ2)
        +4*r**4*(910337+599340*logu*sqrtQ2)))/(5040*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (20895*Q2**11-15*Q2**10*(4199+6567*r**2)+5*Q2**9*(12829+17528*r**2+34029*r**4)
        -3*Q2**8*(7741-615*r**2-40839*r**4+37213*r**6)-6*Q2**7*(76-2264*r**2
        -10129*r**4+35864*r**6+2388*r**8)-6*Q2**4*(14840+230440*r**2+131403*r**4
        -122105*r**6+1103*r**8+99*r**10)+2*Q2**6*(-6342-3150*r**2+40071*r**4
        -69961*r**6+8218*r**8+25074*r**10)-6*Q2**5*(2562+34524*r**2-25439*r**4
        +6832*r**6+5601*r**8-8596*r**10+2786*r**12)+Q2**3*(1430673+18543120*r**2
        +31142670*r**4-1807264*r**6-8001518*r**8-434304*r**10+30766*r**12+22448*r**14
        -1791*r**16)-3*Q2*(-896433+46229*r**16-22448*r**18+1791*r**20+237440*logu*sqrtQ2
        -17248*r**10*(451+115*logu*sqrtQ2)+160*r**14*(1436+189*logu*sqrtQ2)
        -140*r**12*(-25193+552*logu*sqrtQ2)+400*r**2*(-19237+11592*logu*sqrtQ2)
        -28*r**8*(374059+111480*logu*sqrtQ2)+32*r**6*(606398+235865*logu*sqrtQ2)
        +5*r**4*(731329+2638496*logu*sqrtQ2))+3*Q2**2*(-1074513+6474*r**14-20657*r**16
        +1791*r**18+118720*logu*sqrtQ2+r**8*(552174-938000*logu*sqrtQ2)+r**10*(5462478
        -53760*logu*sqrtQ2)+14*r**12*(17267+1080*logu*sqrtQ2)-14*r**6*(928877
        +44480*logu*sqrtQ2)+7*r**2*(-1758039+314240*logu*sqrtQ2)+r**4*(-20783734
        +4396560*logu*sqrtQ2))+(-1+r**2)**2*(-777713+85588*r**14-24239*r**16
        +1791*r**18+356160*logu*sqrtQ2-224*r**10*(-11837+720*logu*sqrtQ2)+28*r**12*(2149
        +1620*logu*sqrtQ2)-112*r**8*(82418+25125*logu*sqrtQ2)-28*r**6*(-123613
        +66720*logu*sqrtQ2)+4*r**4*(2181853+3297420*logu*sqrtQ2)+r**2*(-4954847
        +6599040*logu*sqrtQ2)))/(5040*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr9(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r9 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((12-33*Q2**5*r**2-79*r**4-268*r**8+169*r**10-33*r**12+Q2**4*r**2*(79
        +99*r**2)-Q2**3*r**2*(25+85*r**2+66*r**4)+Q2**2*(6*r**2-38*r**4+102*r**6
        -66*r**8)+Q2*(-12-82*r**2-107*r**4+31*r**6-265*r**8+99*r**10)+r**2*(7
        -60*logu*sqrtQ2)-12*r**6*(-16+9*logu*sqrtQ2))/(9*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((120-264*Q2**6*r**2-1250*r**10+829*r**12-99*r**14-Q2**4*r**2*(205+572*r**2
        +495*r**4)+Q2**5*(609*r**2+759*r**4)-Q2**3*r**2*(5+192*r**2-443*r**4
        +330*r**6)+Q2**2*r**2*(465-427*r**2+1009*r**4-777*r**6+330*r**8)+Q2*(
        -120-2216*r**2-2177*r**4+108*r**6-2362*r**8-532*r**10+99*r**12)+r**8*(550
        -1620*logu*sqrtQ2)+5*r**6*(145+72*logu*sqrtQ2)-16*r**2*(-41+75*logu*sqrtQ2)
        -r**4*(1531+1140*logu*sqrtQ2))/(90*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((120-220*Q2**7*r**2-296*r**12+555*r**14-44*r**16+8*Q2**6*r**2*(62+77*r**2)
        -Q2**5*r**2*(171+427*r**2+396*r**4)-Q2**4*r**2*(15+122*r**2-273*r**4
        +220*r**6)+2*Q2**2*r**2*(450+169*r**2-164*r**4+161*r**6+44*r**8)+2*Q2**3*r**2*(105
        -156*r**2+288*r**4-281*r**6+110*r**8)+Q2*(-120-4811*r**2-8073*r**4
        -564*r**6+1416*r**8-3309*r**10-423*r**12+44*r**14)+r**2*(2171-2280*logu*sqrtQ2)
        +100*r**8*(37+12*logu*sqrtQ2)-120*r**4*(29+37*logu*sqrtQ2)-r**6*(931
        +240*logu*sqrtQ2)-5*r**10*(359+432*logu*sqrtQ2))/(90*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((1680-2640*Q2**8*r**2+8855*r**14+5881*r**16-330*r**18+20*Q2**7*r**2*(293
        +363*r**2)-4*Q2**6*r**2*(511+1186*r**2+1155*r**4)-Q2**5*r**2*(231+1202*r**2
        -2739*r**4+2310*r**6)+2*Q2**3*r**2*(2800-111*r**2-162*r**4-421*r**6
        +330*r**8)+Q2**4*r**2*(1855-3407*r**2+6103*r**4-6165*r**6+2310*r**8)
        +2*Q2**2*r**2*(11760+17389*r**2+171*r**4-10179*r**6+4889*r**8+330*r**10)
        +Q2*(-1680-127301*r**2-378208*r**4-185869*r**6+107886*r**8+67741*r**10
        -62648*r**12-4891*r**14+330*r**16)+r**2*(68501-53760*logu*sqrtQ2)-63*r**12*(1327
        +600*logu*sqrtQ2)+35*r**10*(3407+1080*logu*sqrtQ2)-63*r**6*(1937+1400*logu*sqrtQ2)
        +35*r**8*(1333+1680*logu*sqrtQ2)-5*r**4*(8971+41832*logu*sqrtQ2))/(1260*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((840-1155*Q2**9*r**2+11234*r**16+2375*r**18-99*r**20+15*Q2**8*r**2*(169
        +209*r**2)-10*Q2**7*r**2*(89+196*r**2+198*r**4)-2*Q2**6*r**2*(56+225*r**2
        -533*r**4+462*r**6)+2*Q2**4*r**2*(875-288*r**2+285*r**4-341*r**6+99*r**8)
        +2*Q2**5*r**2*(336-694*r**2+1267*r**4-1266*r**6+462*r**8)+2*Q2**3*r**2*(2590
        +2897*r**2+282*r**4-1666*r**6+208*r**8+99*r**10)+2*Q2**2*r**2*(9450
        +35587*r**2+8951*r**4-2124*r**6-11554*r**8+3691*r**10+99*r**12)+Q2*(
        -840-106583*r**2-543446*r**4-544572*r**6-83174*r**8+183400*r**10+79338*r**12
        -40544*r**14-2078*r**16+99*r**18)+r**4*(66617-283920*logu*sqrtQ2)+r**2*(62903
        -41160*logu*sqrtQ2)+98*r**12*(1189+360*logu*sqrtQ2)-70*r**8*(-665+528*logu*sqrtQ2)
        -14*r**14*(6353+1620*logu*sqrtQ2)+14*r**10*(3031+7500*logu*sqrtQ2)
        -2*r**6*(130217+142380*logu*sqrtQ2))/(630*r**2*sqrtQ2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr10(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r10 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((63*Q2**7*r**2-Q2**6*r**2*(43+315*r**2)+3*Q2**5*r**2*(-39-68*r**2+189*r**4)
        -3*Q2**4*r**2*(-7+81*r**2-351*r**4+105*r**6)+Q2**3*(-36+617*r**2+276*r**4
        +1122*r**6-1312*r**8-315*r**10)+3*Q2**2*(36-195*r**4-318*r**8+101*r**10
        +189*r**12+r**6*(478-72*logu*sqrtQ2)+5*r**2*(-71+16*logu*sqrtQ2))
        +3*Q2*(-36+33*r**10+132*r**12-105*r**14+r**2*(263-160*logu*sqrtQ2)
        +36*r**8*(1+4*logu*sqrtQ2)-20*r**4*(17+8*logu*sqrtQ2)+r**6*(17+144*logu*sqrtQ2))
        +(-1+r**2)**2*(36+229*r**4-104*r**8-67*r**10+63*r**12-36*r**6*(-1
        +6*logu*sqrtQ2)+r**2*(-193+240*logu*sqrtQ2)))/(18*r**2*(Q2**2+(-1+r**2)**2
        -2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((504*Q2**8*r**2-3*Q2**7*r**2*(139+819*r**2)+Q2**6*r**2*(-893-1410*r**2+4347*r**4)
        -3*Q2**5*r**2*(-117+511*r**2-2549*r**4+903*r**6)-3*Q2**4*r**2*(495-690*r**2
        -3238*r**4+2870*r**6+315*r**8)+Q2**3*(-360+18181*r**2+18765*r**4+894*r**6
        -13706*r**8+765*r**10+1701*r**12)-3*Q2**2*(-360-3133*r**10-934*r**12
        +21*r**14+r**2*(12461-1840*logu*sqrtQ2)+12*r**8*(-389+90*logu*sqrtQ2)
        +r**6*(12347+360*logu*sqrtQ2)-6*r**4*(-1751+480*logu*sqrtQ2))-3*Q2*(360
        +1171*r**12+105*r**14+189*r**16-15*r**10*(55+144*logu*sqrtQ2)-5*r**8*(2489
        +576*logu*sqrtQ2)+5*r**4*(2017+1888*logu*sqrtQ2)+r**2*(-10191+3680*logu*sqrtQ2)
        +r**6*(11551+5040*logu*sqrtQ2))+(-1+r**2)**2*(360+175*r**10-84*r**12
        +189*r**14-15*r**6*(715+72*logu*sqrtQ2)-40*r**8*(-20+81*logu*sqrtQ2)
        +4*r**4*(4499+2160*logu*sqrtQ2)+r**2*(-8711+5520*logu*sqrtQ2)))/(180*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((105*Q2**9*r**2-24*Q2**8*r**2*(4+21*r**2)+3*Q2**7*r**2*(-59-90*r**2+294*r**4)
        +Q2**6*(92*r**2-282*r**4+1507*r**6-567*r**8)-3*Q2**5*r**2*(43-142*r**2
        -575*r**4+542*r**6+42*r**8)+3*Q2**4*r**2*(-180-270*r**2+483*r**4-373*r**6
        +55*r**8+105*r**10)-Q2**3*(90-7931*r**2-21834*r**4+7556*r**6+5470*r**8
        +2409*r**10-286*r**12+126*r**14)+(-1+r**2)**2*(90+356*r**12+13*r**14
        +21*r**16+r**6*(2119-5640*logu*sqrtQ2)+136*r**2*(-31+15*logu*sqrtQ2)
        -45*r**8*(143+16*logu*sqrtQ2)-20*r**10*(-85+54*logu*sqrtQ2)+16*r**4*(397
        +675*logu*sqrtQ2))+3*Q2**2*(90+1366*r**12+55*r**14+21*r**16+r**10*(4090
        -360*logu*sqrtQ2)+180*r**4*(-69+20*logu*sqrtQ2)-5*r**8*(-787+48*logu*sqrtQ2)
        +8*r**2*(-717+85*logu*sqrtQ2)-r**6*(5801+1880*logu*sqrtQ2))-3*Q2*(90
        +729*r**14+34*r**16+21*r**18-25*r**10*(119+48*logu*sqrtQ2)-8*r**12*(
        -197+90*logu*sqrtQ2)+2*r**2*(-2403+680*logu*sqrtQ2)-4*r**8*(2859+1060*logu*sqrtQ2)
        +8*r**4*(-13+1070*logu*sqrtQ2)+r**6*(16871+3440*logu*sqrtQ2)))/(45*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))) 
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((360*Q2**10*r**2-10*Q2**9*r**2*(35+171*r**2)+6*Q2**8*r**2*(-97-146*r**2
        +495*r**4)+Q2**7*(351*r**2-891*r**4+4983*r**6-1935*r**8)+Q2**6*r**2*(
        -261+1452*r**2+5484*r**4-5248*r**6-315*r**8)+3*Q2**5*r**2*(-191-145*r**2
        +1682*r**4-1382*r**6+177*r**8+315*r**10)-3*Q2**4*r**2*(795+7140*r**2
        -14341*r**4+612*r**6-375*r**8-320*r**10+105*r**12)-Q2**3*(360-44037*r**2
        -279471*r**4+260037*r**6+519203*r**8+41781*r**10+12663*r**12+139*r**14
        +45*r**16)+3*Q2**2*(360+7762*r**14+184*r**16+45*r**18+r**6*(110470
        -34200*logu*sqrtQ2)-8*r**10*(-41593+225*logu*sqrtQ2)-4*r**12*(-8759
        +450*logu*sqrtQ2)+12*r**4*(-14059+3360*logu*sqrtQ2)+r**2*(-33357+3440*logu*sqrtQ2)
        -8*r**8*(-28273+8725*logu*sqrtQ2))+(-1+r**2)**2*(360+2894*r**14+94*r**16
        +45*r**18-54*r**12*(-363+100*logu*sqrtQ2)-40*r**10*(-2551+135*logu*sqrtQ2)
        -54*r**6*(-4539+1900*logu*sqrtQ2)+r**2*(-25477+10320*logu*sqrtQ2)-10*r**8*(33487
        +20940*logu*sqrtQ2)+2*r**4*(-4897+60480*logu*sqrtQ2))-3*Q2*(360+4788*r**16
        +139*r**18+45*r**20+r**12*(189642-7200*logu*sqrtQ2)-8*r**14*(-2587
        +450*logu*sqrtQ2)+8*r**6*(43339+1530*logu*sqrtQ2)+r**2*(-28557+6880*logu*sqrtQ2)
        -10*r**10*(33643+14320*logu*sqrtQ2)-4*r**8*(32171+52000*logu*sqrtQ2)
        +r**4*(-68711+87520*logu*sqrtQ2)))/(180*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((2205*Q2**11*r**2-15*Q2**10*r**2*(149+693*r**2)+5*Q2**9*r**2*(-689-1032*r**2
        +3591*r**4)-3*Q2**8*r**2*(-761+1715*r**2-9917*r**4+3927*r**6)-6*Q2**7*r**2*(184
        -1476*r**2-5347*r**4+5140*r**6+252*r**8)+6*Q2**4*r**2*(-3500-63420*r**2
        +158163*r**4+213455*r**6-1269*r**8+2079*r**10)+2*Q2**6*r**2*(-798+630*r**2
        +15681*r**4-12439*r**6+1554*r**8+2646*r**10)-6*Q2**5*r**2*(518+8176*r**2
        -31113*r**4+1304*r**6-105*r**8-896*r**10+294*r**12)-Q2**3*(2520-390147*r**2
        -4722480*r**4+6109038*r**6+31552336*r**8+15702474*r**10+511488*r**12
        +114926*r**14+936*r**16+189*r**18)-3*Q2*(2520+47831*r**18+936*r**20
        +189*r**22-72*r**16*(-4271+420*logu*sqrtQ2)-140*r**14*(-52553+504*logu*sqrtQ2)
        +280*r**4*(-6193+4568*logu*sqrtQ2)-336*r**12*(3107+10970*logu*sqrtQ2)
        +r**2*(-264147+56000*logu*sqrtQ2)-112*r**8*(-47957+87350*logu*sqrtQ2)
        +r**6*(7832743+184800*logu*sqrtQ2)-28*r**10*(638507+442520*logu*sqrtQ2))
        +3*Q2**2*(2520+72014*r**16+1125*r**18+189*r**20+r**8*(16764646-4372480*logu*sqrtQ2)
        +r**10*(20313562-1822800*logu*sqrtQ2)+r**6*(4008182-519120*logu*sqrtQ2)
        +r**12*(10586698-20160*logu*sqrtQ2)+r**14*(441878-15120*logu*sqrtQ2)
        +r**2*(-303627+28000*logu*sqrtQ2)+r**4*(-3005907+611520*logu*sqrtQ2))
        +(-1+r**2)**2*(2520+31964*r**16+747*r**18+189*r**20+r**14*(285628-45360*logu*sqrtQ2)
        -336*r**12*(-15697+180*logu*sqrtQ2)-84*r**6*(-84029+18540*logu*sqrtQ2)
        -112*r**10*(63082+48825*logu*sqrtQ2)+r**2*(-238667+84000*logu*sqrtQ2)
        -28*r**8*(157499+468480*logu*sqrtQ2)+r**4*(-939853+1834560*logu*sqrtQ2)))/(1260*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr11(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r11 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((-12+153*Q2**5*r**2-541*r**4+752*r**8-629*r**10+153*r**12-Q2**4*r**2*(347
        +459*r**2)+2*Q2**3*r**2*(79+169*r**2+153*r**4)+Q2**2*(90*r**2-32*r**4
        -264*r**6+306*r**8)+Q2*(12-451*r**2-110*r**4+58*r**6+902*r**8-459*r**10)
        +12*r**6*(1+18*logu*sqrtQ2)-5*r**2*(-53+48*logu*sqrtQ2))/(18*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((-40+408*Q2**6*r**2+1635*r**10-1028*r**12+153*r**14-Q2**5*r**2*(893+1173*r**2)
        +Q2**4*r**2*(405+754*r**2+765*r**4)+2*Q2**3*r**2*(85-48*r**2-158*r**4
        +255*r**6)+Q2**2*(710*r**2+234*r**4-588*r**6+914*r**8-510*r**10)+Q2*(40
        -3293*r**2-7651*r**4-396*r**6+1764*r**8+569*r**10-153*r**12)+r**2*(2213
        -1200*logu*sqrtQ2)+15*r**6*(49+24*logu*sqrtQ2)+40*r**8*(-2+27*logu*sqrtQ2)
        -12*r**4*(299+400*logu*sqrtQ2))/(60*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((-30+255*Q2**7*r**2+896*r**12-517*r**14+51*r**16-42*Q2**6*r**2*(13+17*r**2)
        +3*Q2**5*r**2*(82+140*r**2+153*r**4)+Q2**4*r**2*(90-68*r**2-127*r**4
        +255*r**6)+Q2**3*r**2*(255+122*r**2-300*r**4+508*r**6-255*r**8)+2*Q2**2*r**2*(300
        +1686*r**2-328*r**4+43*r**6-51*r**8)+Q2*(30-3534*r**2-24214*r**4
        -15115*r**6+1440*r**8+1480*r**10+364*r**12-51*r**14)-24*r**2*(-106
        +45*logu*sqrtQ2)+20*r**10*(-59+54*logu*sqrtQ2)-61*r**6*(251+120*logu*sqrtQ2)
        +5*r**8*(2003+144*logu*sqrtQ2)-4*r**4*(-883+3300*logu*sqrtQ2))/(45*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((-840+6120*Q2**8*r**2+16870*r**14-10978*r**16+765*r**18-10*Q2**7*r**2*(1291
        +1683*r**2)+2*Q2**6*r**2*(2891+4646*r**2+5355*r**4)+Q2**5*r**2*(1953-1789*r**2
        -2307*r**4+5355*r**6)+Q2**4*r**2*(4655+2516*r**2-7264*r**4+11280*r**6
        -5355*r**8)+2*Q2**3*r**2*(3500+23133*r**2-7929*r**4+2473*r**6-765*r**8)
        -2*Q2**2*r**2*(-8820-148433*r**2-67572*r**4+18408*r**6+1532*r**8+765*r**10)
        +Q2*(840-119947*r**2-1767791*r**4-2849123*r**6-362163*r**8+141347*r**10
        +50039*r**12+8683*r**14-765*r**16)+r**4*(653630-846720*logu*sqrtQ2)
        +r**2*(90547-31920*logu*sqrtQ2)+280*r**10*(2198+135*logu*sqrtQ2)-70*r**8*(1457
        +660*logu*sqrtQ2)+42*r**12*(-2491+900*logu*sqrtQ2)-126*r**6*(9197+12700*logu*sqrtQ2))/(1260*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((-280+1785*Q2**9*r**2+2780*r**16-2961*r**18+153*r**20-5*Q2**8*r**2*(745
        +969*r**2)+10*Q2**7*r**2*(166+255*r**2+306*r**4)+2*Q2**6*r**2*(266-279*r**2
        -279*r**4+714*r**6)+2*Q2**5*r**2*(574+323*r**2-1097*r**4+1555*r**6-714*r**8)
        -2*Q2**4*r**2*(-700-5083*r**2+2432*r**4-648*r**6+153*r**8)+2*Q2**3*r**2*(1120
        +22583*r**2+8246*r**4-5504*r**6+630*r**8-153*r**10)-2*Q2**2*r**2*(-2800
        -103783*r**2-201737*r**4+28670*r**6+8846*r**8+1431*r**10+153*r**12)
        +Q2*(280-43497*r**2-1195506*r**4-3791350*r**6-2056330*r**8+500742*r**10
        +101574*r**12+20458*r**14+2502*r**16-153*r**18)+r**4*(576695-517440*logu*sqrtQ2)
        +r**2*(34257-10080*logu*sqrtQ2)+420*r**14*(-181+36*logu*sqrtQ2)+4592*r**10*(256
        +75*logu*sqrtQ2)+112*r**12*(689+180*logu*sqrtQ2)-84*r**8*(19421+12320*logu*sqrtQ2)
        -20*r**6*(7799+102396*logu*sqrtQ2))/(420*r**2*sqrtQ2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr12(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r12 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((-36+159*Q2**5*r**2+101*r**4+896*r**8-659*r**10+159*r**12-Q2**4*r**2*(317
        +477*r**2)+2*Q2**3*r**2*(55+109*r**2+159*r**4)+2*Q2**2*r**2*(-21-4*r**2
        -72*r**4+159*r**6)+Q2*(36+239*r**2+130*r**4-14*r**6+902*r**8-477*r**10)
        +12*r**6*(-41+18*logu*sqrtQ2)+r**2*(31+192*logu*sqrtQ2))/(18*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((-360+1272*Q2**6*r**2+6435*r**10-3272*r**12+477*r**14-3*Q2**5*r**2*(819
        +1219*r**2)+Q2**4*r**2*(865+1426*r**2+2385*r**4)+2*Q2**3*r**2*(-65-112*r**2
        -92*r**4+795*r**6)-2*Q2**2*r**2*(735-443*r**2+736*r**4-1323*r**6+795*r**8)
        +Q2*(360+7163*r**2+3321*r**4-4444*r**6+4236*r**8+1841*r**10-477*r**12)
        +24*r**4*(237+50*logu*sqrtQ2)+40*r**8*(-109+81*logu*sqrtQ2)-5*r**6*(521
        +504*logu*sqrtQ2)+r**2*(-2003+4080*logu*sqrtQ2))/(180*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((-90+265*Q2**7*r**2+1312*r**12-550*r**14+53*r**16-2*Q2**6*r**2*(251+371*r**2)
        +Q2**5*r**2*(177+259*r**2+477*r**4)+Q2**4*r**2*(-15-66*r**2+14*r**4+265*r**6)
        +Q2**3*r**2*(-165+134*r**2-252*r**4+494*r**6-265*r**8)-2*Q2**2*r**2*(390
        -77*r**2-28*r**4-68*r**6+53*r**8)+Q2*(90+4037*r**2+4811*r**4-1117*r**6
        -2832*r**8+1153*r**10+391*r**12-53*r**14)+15*r**10*(-43+72*logu*sqrtQ2)
        -15*r**8*(49+128*logu*sqrtQ2)+20*r**4*(197+138*logu*sqrtQ2)-2*r**6*(719
        +300*logu*sqrtQ2)+r**2*(-1847+1920*logu*sqrtQ2))/(45*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((-2520+6360*Q2**8*r**2+29596*r**14-11680*r**16+795*r**18-10*Q2**7*r**2*(1189
        +1749*r**2)+2*Q2**6*r**2*(2093+2810*r**2+5565*r**4)+Q2**5*r**2*(-231-1891*r**2
        +825*r**4+5565*r**6)+Q2**4*r**2*(-2905+2498*r**2-6310*r**4+11010*r**6
        -5565*r**8)-2*Q2**3*r**2*(4900-2229*r**2+3951*r**4-2965*r**6+795*r**8)
        -2*Q2**2*r**2*(19740+22831*r**2+9378*r**4-9174*r**6+950*r**8+795*r**10)
        +Q2*(2520+212369*r**2+575203*r**4+293593*r**6+96123*r**8-159097*r**10
        +39269*r**12+9295*r**14-795*r**16)+11340*r**6*(7+10*logu*sqrtQ2)+168*r**12*(58
        +225*logu*sqrtQ2)+280*r**8*(61+285*logu*sqrtQ2)-70*r**10*(1699+1620*logu*sqrtQ2)
        +16*r**4*(7019+20475*logu*sqrtQ2)+r**2*(-115769+89040*logu*sqrtQ2))/(1260*r**2*sqrtQ2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((-2520+5565*Q2**9*r**2+22212*r**16-9445*r**18+477*r**20-15*Q2**8*r**2*(687
        +1007*r**2)+10*Q2**7*r**2*(362+455*r**2+954*r**4)+2*Q2**6*r**2*(-70-923*r**2
        +461*r**4+2226*r**6)-2*Q2**4*r**2*(3080-1835*r**2+5164*r**4-2308*r**6
        +477*r**8)-2*Q2**5*r**2*(1050-883*r**2+2933*r**4-4563*r**6+2226*r**8)
        -2*Q2**3*r**2*(8680+8245*r**2+11874*r**4+5096*r**6-2326*r**8+477*r**10)
        -2*Q2**2*r**2*(31080+116605*r**2+52939*r**4+142734*r**6-27178*r**8+3803*r**10
        +477*r**12)+Q2*(2520+351275*r**2+1787766*r**4+2029370*r**6+2383486*r**8
        +1363334*r**10-283346*r**12+49098*r**14+8014*r**16-477*r**18)-280*r**12*(3187
        +720*logu*sqrtQ2)+28*r**14*(2107+1620*logu*sqrtQ2)+168*r**10*(6901
        +4150*logu*sqrtQ2)+140*r**8*(-4057+8832*logu*sqrtQ2)+5*r**2*(-41863
        +26880*logu*sqrtQ2)+3*r**4*(-68807+313600*logu*sqrtQ2)+r**6*(646988
        +992880*logu*sqrtQ2))/(1260*r**2*sqrtQ2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr13(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r13 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((-135*Q2**7*r**2+Q2**6*r**2*(611+675*r**2)-3*Q2**5*r**2*(341+536*r**2+405*r**4)
        +3*Q2**4*r**2*(237+313*r**2+381*r**4+225*r**6)+Q2**3*(-24+155*r**2+96*r**4
        -414*r**6-712*r**8+675*r**10)-(-1+r**2)**2*(-24-403*r**4+644*r**8
        -551*r**10+135*r**12+r**2*(211-96*logu*sqrtQ2)+12*r**6*(-1+18*logu*sqrtQ2))
        -3*Q2**2*(-24-51*r**4-74*r**8-731*r**10+405*r**12+r**2*(237-32*logu*sqrtQ2)
        +r**6*(-82+72*logu*sqrtQ2))+3*Q2*(-24+719*r**10-816*r**12+225*r**14
        +r**2*(217-64*logu*sqrtQ2)-32*r**4*(9+2*logu*sqrtQ2)+8*r**8*(23+18*logu*sqrtQ2)
        +r**6*(-217+144*logu*sqrtQ2)))/(18*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((-72*Q2**8*r**2+Q2**7*r**2*(319+351*r**2)-Q2**6*r**2*(525+794*r**2+621*r**4)
        +Q2**5*r**2*(367+427*r**2+463*r**4+387*r**6)+Q2**4*r**2*(-125-18*r**2
        +42*r**4-58*r**6+135*r**8)+Q2**3*(-16+485*r**2+1701*r**4-34*r**6-546*r**8
        +317*r**10-243*r**12)-(-1+r**2)**2*(-16+249*r**10-180*r**12+27*r**14
        +r**2*(319-96*logu*sqrtQ2)+8*r**8*(13+27*logu*sqrtQ2)-12*r**4*(35
        +68*logu*sqrtQ2)+r**6*(-83+72*logu*sqrtQ2))+3*Q2*(-16-3*r**12-153*r**14
        +27*r**16+r**4*(107-608*logu*sqrtQ2)+r**2*(335-64*logu*sqrtQ2)+r**10*(473
        +144*logu*sqrtQ2)+r**8*(269+192*logu*sqrtQ2)-r**6*(1039+496*logu*sqrtQ2))
        +Q2**2*(48+1247*r**10-22*r**12+9*r**14-4*r**8*(1+54*logu*sqrtQ2)-r**6*(2393
        +72*logu*sqrtQ2)+r**2*(-1103+96*logu*sqrtQ2)+r**4*(-2774+816*logu*sqrtQ2)))/(12*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((-225*Q2**9*r**2+24*Q2**8*r**2*(41+45*r**2)-9*Q2**7*r**2*(178+263*r**2+210*r**4)
        +Q2**6*r**2*(1117+1210*r**2+1252*r**4+1215*r**6)+3*Q2**5*r**2*(-108-11*r**2
        +34*r**4-23*r**6+90*r**8)-3*Q2**4*r**2*(35+830*r**2-53*r**4+95*r**6
        -400*r**8+225*r**10)+Q2**3*(-60+2806*r**2+32935*r**4+27274*r**6-2906*r**8
        -350*r**10-1409*r**12+270*r**14)-3*Q2**2*(-60-1064*r**12-364*r**14
        +45*r**16+r**4*(20826-4360*logu*sqrtQ2)+r**6*(21382-3400*logu*sqrtQ2)
        +r**2*(2271-160*logu*sqrtQ2)+3*r**8*(5759+80*logu*sqrtQ2)+r**10*(-1753
        +360*logu*sqrtQ2))-(-1+r**2)**2*(-60+564*r**12-454*r**14+45*r**16
        +r**2*(1991-480*logu*sqrtQ2)+15*r**10*(11+72*logu*sqrtQ2)-30*r**6*(573
        +340*logu*sqrtQ2)-24*r**4*(-241+545*logu*sqrtQ2)+r**8*(9155+720*logu*sqrtQ2))
        +3*Q2*(-60-250*r**14-409*r**16+45*r**18+r**4*(11815-9040*logu*sqrtQ2)
        +r**2*(2091-320*logu*sqrtQ2)+120*r**10*(107+10*logu*sqrtQ2)+3*r**12*(403
        +240*logu*sqrtQ2)-5*r**8*(2143+1264*logu*sqrtQ2)-2*r**6*(8283+7760*logu*sqrtQ2)))/(45*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((-1080*Q2**10*r**2-6*Q2**8*r**2*(1261+1834*r**2+1485*r**4)+Q2**9*(4682*r**2
        +5130*r**4)+Q2**6*r**2*(-1449-84*r**2+492*r**4-56*r**6+945*r**8)+Q2**7*(5259*r**2
        +5433*r**4+5475*r**6+5805*r**8)-3*Q2**5*r**2*(35+2093*r**2-178*r**4
        +606*r**6-1701*r**8+945*r**10)+3*Q2**4*r**2*(-287-14980*r**2-10567*r**4
        -1084*r**6+2803*r**8-1400*r**10+315*r**12)+Q2**3*(-336+22185*r**2+562947*r**4
        +1126071*r**6+348449*r**8-26457*r**10-15195*r**12-1799*r**14+135*r**16)
        -3*Q2**2*(-336-8354*r**14-1664*r**16+135*r**18+r**6*(733114-155400*logu*sqrtQ2)
        +r**2*(18489-1120*logu*sqrtQ2)-468*r**4*(-803+140*logu*sqrtQ2)+8*r**10*(30517
        +315*logu*sqrtQ2)+4*r**12*(-5641+630*logu*sqrtQ2)-40*r**8*(-16931+875*logu*sqrtQ2))
        +3*Q2*(-336-3180*r**16-1799*r**18+135*r**20+112*r**14*(-16+45*logu*sqrtQ2)
        +210*r**12*(1007+48*logu*sqrtQ2)-5*r**2*(-3429+448*logu*sqrtQ2)-14*r**10*(
        -9529+4640*logu*sqrtQ2)-80*r**6*(437+5523*logu*sqrtQ2)-28*r**8*(20627
        +13600*logu*sqrtQ2)-7*r**4*(-36781+19040*logu*sqrtQ2))-(-1+r**2)**2*(
        -336+1274*r**14-1934*r**16+135*r**18+r**2*(16361-3360*logu*sqrtQ2)
        +56*r**10*(3206+135*logu*sqrtQ2)+42*r**12*(-133+180*logu*sqrtQ2)-70*r**8*(1843
        +1500*logu*sqrtQ2)-126*r**6*(1891+3700*logu*sqrtQ2)-2*r**4*(-88913
        +98280*logu*sqrtQ2)))/(252*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((-1575*Q2**11*r**2-5*Q2**9*r**2*(2181+3136*r**2+2565*r**4)+Q2**10*(6785*r**2
        +7425*r**4)+Q2**8*r**2*(7559+7547*r**2+7475*r**4+8415*r**6)+2*Q2**7*r**2*(
        -1016-24*r**2+357*r**4+80*r**6+540*r**8)+6*Q2**4*r**2*(-280-28000*r**2
        -75521*r**4-10933*r**6+755*r**8+495*r**10)-2*Q2**6*r**2*(14+3262*r**2
        -321*r**4+1287*r**6-3430*r**8+1890*r**10)+2*Q2**5*r**2*(-182-14840*r**2
        -9521*r**4-2464*r**6+4859*r**8-2800*r**10+630*r**12)+Q2**3*(-560+48991*r**2
        +2201488*r**4+8324034*r**6+6928816*r**8+779142*r**10-89984*r**12-32142*r**14
        -2480*r**16+135*r**18)-3*Q2**2*(-560-18422*r**16-2345*r**18+135*r**20
        +r**6*(5363930-1094800*logu*sqrtQ2)+r**8*(6392778-896000*logu*sqrtQ2)
        +r**10*(4334358-53200*logu*sqrtQ2)+r**2*(41711-2240*logu*sqrtQ2)+126*r**14*(
        -581+40*logu*sqrtQ2)+14*r**12*(42773+480*logu*sqrtQ2)-7*r**4*(-217177
        +33600*logu*sqrtQ2))+3*Q2*(-560-8787*r**18-2480*r**20+135*r**22+r**6*(1665589
        -2660000*logu*sqrtQ2)+r**2*(38911-4480*logu*sqrtQ2)+288*r**16*(-103
        +35*logu*sqrtQ2)+196*r**14*(3037+120*logu*sqrtQ2)-112*r**12*(-20827
        +830*logu*sqrtQ2)-64*r**4*(-17537+7420*logu*sqrtQ2)-140*r**10*(16069
        +13560*logu*sqrtQ2)-48*r**8*(72161+82950*logu*sqrtQ2))-(-1+r**2)**2*(
        -560-1132*r**16-2615*r**18+135*r**20+r**4*(854417-705600*logu*sqrtQ2)
        +r**2*(37231-6720*logu*sqrtQ2)-26600*r**10*(-37+6*logu*sqrtQ2)+56*r**12*(10099
        +360*logu*sqrtQ2)+28*r**14*(-1139+540*logu*sqrtQ2)-140*r**8*(18499
        +19200*logu*sqrtQ2)-4*r**6*(-46133+821100*logu*sqrtQ2)))/(420*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr14(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r14 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (6+7*r**2-63*Q2**5*r**2-49*r**4+192*r**6-358*r**8+265*r**10-63*r**12
        +Q2**4*r**2*(121+189*r**2)-Q2**3*r**2*(37+61*r**2+126*r**4)+Q2**2*(36*r**2
        +22*r**4+24*r**6-126*r**8)+Q2*(-6-82*r**2-29*r**4-59*r**6-349*r**8
        +189*r**10)-60*logu*r**2*sqrtQ2-108*logu*r**6*sqrtQ2)/(9*r**2*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (60+356*r**2-504*Q2**6*r**2-2101*r**4+2435*r**6+670*r**8-2570*r**10
        +1339*r**12-189*r**14+3*Q2**5*r**2*(313+483*r**2)-Q2**4*r**2*(295+392*r**2
        +945*r**4)+Q2**3*(145*r**2+168*r**4-127*r**6-630*r**8)+Q2**2*r**2*(315
        -577*r**2+499*r**4-987*r**6+630*r**8)+Q2*(-60-1376*r**2+1753*r**4
        +3828*r**6-2122*r**8-772*r**10+189*r**12)-840*logu*r**2*sqrtQ2+1020*logu*r**4*sqrtQ2
        +2160*logu*r**6*sqrtQ2-1620*logu*r**8*sqrtQ2)/(90*r**2*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (60+1063*r**2-420*Q2**7*r**2-6912*r**4+5229*r**6+5320*r**8-3615*r**10
        -1968*r**12+907*r**14-84*r**16+24*Q2**6*r**2*(32+49*r**2)-9*Q2**5*r**2*(27
        +31*r**2+84*r**4)+Q2**4*(85*r**2+154*r**4-167*r**6-420*r**8)+2*Q2**2*r**2*(270
        -883*r**2-820*r**4-31*r**6+84*r**8)+2*Q2**3*r**2*(55-178*r**2+146*r**4
        -371*r**6+210*r**8)+Q2*(-60-2563*r**2+5703*r**4+21052*r**6+12052*r**8
        -2493*r**10-655*r**12+84*r**14)-1320*logu*r**2*sqrtQ2+2280*logu*r**4*sqrtQ2
        +11280*logu*r**6*sqrtQ2+6480*logu*r**8*sqrtQ2-2160*logu*r**10*sqrtQ2)/(90*r**2*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (120+4673*r**2-720*Q2**8*r**2-28427*r**4-4131*r**6+47915*r**8+5905*r**10
        -24573*r**12-2773*r**14+1381*r**16-90*r**18+20*Q2**7*r**2*(65+99*r**2)
        -4*Q2**6*r**2*(103+106*r**2+315*r**4)+Q2**5*(117*r**2+286*r**4-321*r**6
        -630*r**8)+2*Q2**3*r**2*(220-1023*r**2-414*r**4-301*r**6+90*r**8)+Q2**4*r**2*(115
        -491*r**2+523*r**4-1185*r**6+630*r**8)+2*Q2**2*r**2*(900-2903*r**2-8145*r**4
        -4551*r**6+329*r**8+90*r**10)+Q2*(-120-9113*r**2+17048*r**4+142607*r**6
        +146022*r**8+53617*r**10-6320*r**12-1111*r**14+90*r**16)-4080*logu*r**2*sqrtQ2
        +3240*logu*r**4*sqrtQ2+77400*logu*r**6*sqrtQ2+73200*logu*r**8*sqrtQ2+27000*logu*r**10*sqrtQ2
        -5400*logu*r**12*sqrtQ2)/(180*r**2*sqrtQ2)
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (420+29873*r**2-2205*Q2**9*r**2-140053*r**4-387562*r**6+677558*r**8
        +28994*r**10-20398*r**12-187222*r**14-5338*r**16+3917*r**18-189*r**20
        +15*Q2**8*r**2*(263+399*r**2)-10*Q2**7*r**2*(125+118*r**2+378*r**4)-2*Q2**6*r**2*(
        -154-465*r**2+511*r**4+882*r**6)+2*Q2**4*r**2*(455-2538*r**2-75*r**4
        -893*r**6+189*r**8)+2*Q2**5*r**2*(126-634*r**2+871*r**4-1722*r**6+882*r**8)
        +2*Q2**3*r**2*(1330-5653*r**2-10818*r**4-4378*r**6-704*r**8+189*r**10)
        +2*Q2**2*r**2*(4830-7823*r**2-104179*r**4-62856*r**6-33010*r**8+2509*r**10
        +189*r**12)+Q2*(-420-52133*r**2+16414*r**4+1338336*r**6+2044342*r**8
        +1141636*r**10+351294*r**12-28148*r**14-3350*r**16+189*r**18)-21000*logu*r**2*sqrtQ2
        -31920*logu*r**4*sqrtQ2+682920*logu*r**6*sqrtQ2+1071840*logu*r**8*sqrtQ2
        +558600*logu*r**10*sqrtQ2+166320*logu*r**12*sqrtQ2-22680*logu*r**14*sqrtQ2)/(630*r**2*sqrtQ2)

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr15(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r15 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((-13*Q2**7*r**2+Q2**6*r**2*(-31+65*r**2)+Q2**5*(163*r**2+212*r**4-117*r**6)
        +Q2**4*r**2*(-119-131*r**2-523*r**4+65*r**6)+Q2**3*(16-255*r**2-192*r**4
        -290*r**6+592*r**8+65*r**10)+Q2**2*(-48+107*r**4+410*r**8-293*r**10
        -117*r**12+r**2*(475-96*logu*sqrtQ2)+18*r**6*(-19+4*logu*sqrtQ2))
        -(-1+r**2)**2*(16+115*r**4-80*r**8+11*r**10+13*r**12-8*r**6*(-2+9*logu*sqrtQ2)
        +r**2*(-91+96*logu*sqrtQ2))+Q2*(48-241*r**10+28*r**12+65*r**14+r**8*(8
        -144*logu*sqrtQ2)+r**6*(23-144*logu*sqrtQ2)+4*r**4*(103+48*logu*sqrtQ2)
        +r**2*(-343+192*logu*sqrtQ2)))/(12*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((-312*Q2**8*r**2+9*Q2**7*r**2*(-71+169*r**2)+Q2**6*(3629*r**2+4570*r**4
        -2691*r**6)+3*Q2**5*r**2*(-1041-937*r**2-3657*r**4+559*r**6)+3*Q2**4*r**2*(515
        -1670*r**2-2674*r**4+3610*r**6+195*r**8)+Q2**3*(480-15853*r**2-7685*r**4
        +13698*r**6+14978*r**8-2645*r**10-1053*r**12)+3*Q2**2*(-480-3869*r**10
        -822*r**12+13*r**14+r**2*(11293-1600*logu*sqrtQ2)+4*r**8*(-3181+270*logu*sqrtQ2)
        -2*r**4*(-709+640*logu*sqrtQ2)+r**6*(3251+2040*logu*sqrtQ2))+3*Q2*(480
        +883*r**12+485*r**14+117*r**16+r**6*(5363-1520*logu*sqrtQ2)-5*r**10*(
        -983+432*logu*sqrtQ2)+5*r**4*(2977+1152*logu*sqrtQ2)-5*r**8*(3529
        +1248*logu*sqrtQ2)+r**2*(-9483+3200*logu*sqrtQ2))-(-1+r**2)**2*(480
        -565*r**10+368*r**12+117*r**14-40*r**8*(-140+81*logu*sqrtQ2)+16*r**4*(1333
        +240*logu*sqrtQ2)-5*r**6*(3793+1224*logu*sqrtQ2)+r**2*(-8363+4800*logu*sqrtQ2)))/(360*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((-65*Q2**9*r**2+24*Q2**8*r**2*(-5+13*r**2)+Q2**7*(720*r**2+894*r**4-546*r**6)
        +Q2**6*r**2*(-655-539*r**2-2125*r**4+351*r**6)+6*Q2**5*r**2*(30-152*r**2
        -239*r**4+336*r**6+13*r**8)-3*Q2**4*r**2*(-185+55*r**2+680*r**4-464*r**6
        +185*r**8+65*r**10)+2*Q2**3*(60-3470*r**2-6781*r**4+14875*r**6+7766*r**8
        +956*r**10-5*r**12+39*r**14)-3*Q2**2*(120+1301*r**12+113*r**14+13*r**16
        +r**6*(8683-5000*logu*sqrtQ2)+r**8*(17511-1280*logu*sqrtQ2)-9*r**10*(
        -1209+40*logu*sqrtQ2)+r**2*(-5085+560*logu*sqrtQ2)+r**4*(-6657+2720*logu*sqrtQ2))
        +3*Q2*(120+622*r**14+100*r**16+13*r**18+r**12*(6740-720*logu*sqrtQ2)
        -80*r**10*(34+41*logu*sqrtQ2)-30*r**6*(-631+152*logu*sqrtQ2)+5*r**2*(
        -873+224*logu*sqrtQ2)+4*r**4*(847+1640*logu*sqrtQ2)-4*r**8*(5707+3140*logu*sqrtQ2))
        -(-1+r**2)**2*(120+175*r**12+87*r**14+13*r**16+r**6*(137-15000*logu*sqrtQ2)
        +r**10*(6005-1080*logu*sqrtQ2)+5*r**2*(-785+336*logu*sqrtQ2)-5*r**8*(2305
        +768*logu*sqrtQ2)+r**4*(8913+8160*logu*sqrtQ2)))/(90*r**2*(Q2**2+(-1
        +r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((-520*Q2**10*r**2+10*Q2**9*r**2*(-89+247*r**2)+Q2**8*(5566*r**2+6860*r**4
        -4290*r**6)+Q2**7*r**2*(-5213-4073*r**2-16225*r**4+2795*r**6)+Q2**6*r**2*(1183
        -6790*r**2-10722*r**4+15050*r**6+455*r**8)-Q2**5*r**2*(-1939+2737*r**2
        +12822*r**4-11594*r**6+4025*r**8+1365*r**10)+Q2**4*r**2*(4655+47950*r**2
        -143659*r**4-7060*r**6-5395*r**8-770*r**10+455*r**12)+Q2**3*(1120-92951*r**2
        -596435*r**4+1167651*r**6+1987191*r**8+272975*r**10+28219*r**12+805*r**14
        +65*r**16)+3*Q2*(1120+9644*r**16+805*r**18+65*r**20+r**12*(612066
        -50400*logu*sqrtQ2)-420*r**14*(-357+20*logu*sqrtQ2)+35*r**4*(-3825
        +5504*logu*sqrtQ2)-140*r**8*(3237+5960*logu*sqrtQ2)-70*r**10*(16373
        +8240*logu*sqrtQ2)+r**2*(-62711+13440*logu*sqrtQ2)-4*r**6*(-255559
        +30100*logu*sqrtQ2))-(-1+r**2)**2*(1120+4704*r**14+740*r**16+65*r**18
        -84*r**12*(-1579+150*logu*sqrtQ2)-840*r**6*(-834+535*logu*sqrtQ2)-70*r**10*(
        -3569+900*logu*sqrtQ2)-420*r**8*(2457+1910*logu*sqrtQ2)+3*r**2*(-19037
        +6720*logu*sqrtQ2)+4*r**4*(-151+67200*logu*sqrtQ2))-3*Q2**2*(1120+16944*r**14
        +870*r**16+65*r**18+r**8*(1076058-267400*logu*sqrtQ2)+r**10*(1259878
        -21000*logu*sqrtQ2)+r**12*(208394-4200*logu*sqrtQ2)+r**2*(-71671+6720*logu*sqrtQ2)
        -8*r**6*(-78516+18725*logu*sqrtQ2)+r**4*(-351146+89600*logu*sqrtQ2)))/(840*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((-1365*Q2**11*r**2+45*Q2**10*r**2*(-49+143*r**2)-5*Q2**9*r**2*(-2849-3496*r**2
        +2223*r**4)+3*Q2**8*r**2*(-4529-3421*r**2-13741*r**4+2431*r**6)+6*Q2**7*r**2*(476
        -2840*r**2-4507*r**4+6280*r**6+156*r**8)-2*Q2**6*r**2*(-1722+3822*r**2
        +15645*r**4-14755*r**6+4942*r**8+1638*r**10)-6*Q2**4*r**2*(-3080-72520*r**2
        +181167*r**4+285563*r**6+8803*r**8+2007*r**10)+6*Q2**5*r**2*(462+9772*r**2
        -37597*r**4+16*r**6-1237*r**8-308*r**10+182*r**12)+Q2**3*(3360-374283*r**2
        -5316432*r**4+6996486*r**6+39422752*r**8+22112234*r**10+1355232*r**12
        +108806*r**14+2128*r**16+117*r**18)-3*Q2**2*(3360+66510*r**16+2245*r**18
        +117*r**20+r**8*(21223310-5434240*logu*sqrtQ2)+r**10*(26209578-2634800*logu*sqrtQ2)
        +r**6*(4724270-566160*logu*sqrtQ2)+r**12*(14711658-94080*logu*sqrtQ2)
        +r**14*(1065550-15120*logu*sqrtQ2)+7*r**2*(-42429+3520*logu*sqrtQ2)
        +95*r**4*(-35781+7168*logu*sqrtQ2))+3*Q2*(3360+41351*r**18+2128*r**20
        +117*r**22-224*r**16*(-3676+135*logu*sqrtQ2)+7*r**2*(-37629+7040*logu*sqrtQ2)
        -28*r**14*(-339499+7800*logu*sqrtQ2)-224*r**12*(13916+24365*logu*sqrtQ2)
        +7*r**6*(1289633+32800*logu*sqrtQ2)+16*r**4*(-127387+88200*logu*sqrtQ2)
        -32*r**8*(-238697+375025*logu*sqrtQ2)-28*r**10*(772261+576360*logu*sqrtQ2))
        -(-1+r**2)**2*(3360+24220*r**16+2011*r**18+117*r**20+r**14*(735364
        -45360*logu*sqrtQ2)-784*r**12*(-8047+360*logu*sqrtQ2)+7*r**2*(-34589
        +10560*logu*sqrtQ2)-112*r**10*(86471+70575*logu*sqrtQ2)-20*r**6*(-414419
        +84924*logu*sqrtQ2)-28*r**8*(152537+582240*logu*sqrtQ2)+r**4*(-1164389
        +2042880*logu*sqrtQ2)))/(2520*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    
    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr16(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r16 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((-255*Q2**7*r**2+Q2**6*r**2*(923+1275*r**2)-3*Q2**5*r**2*(405+716*r**2+765*r**4)
        +3*Q2**4*r**2*(289+405*r**2+93*r**4+425*r**6)+Q2**3*(48-1621*r**2-1344*r**4
        -198*r**6+1904*r**8+1275*r**10)-3*Q2**2*(48-147*r**4-186*r**8-83*r**10
        +765*r**12-2*r**6*(101+36*logu*sqrtQ2)+r**2*(-899+160*logu*sqrtQ2))
        +3*Q2*(48+231*r**10-708*r**12+425*r**14+r**6*(431-144*logu*sqrtQ2)
        -72*r**8*(7+2*logu*sqrtQ2)+4*r**4*(191+80*logu*sqrtQ2)+r**2*(-687
        +320*logu*sqrtQ2))-(-1+r**2)**2*(48+929*r**4-16*r**8-407*r**10+255*r**12
        -24*r**6*(10+9*logu*sqrtQ2)+r**2*(-569+480*logu*sqrtQ2)))/(72*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((-408*Q2**8*r**2+3*Q2**7*r**2*(487+663*r**2)-Q2**6*r**2*(1903+3198*r**2
        +3519*r**4)+3*Q2**5*r**2*(411+547*r**2+67*r**4+731*r**6)+3*Q2**4*r**2*(63
        -510*r**2-154*r**4+866*r**6+255*r**8)+Q2**3*(96-7057*r**2-13353*r**4
        +2346*r**6+1898*r**8+423*r**10-1377*r**12)+3*Q2**2*(-96-193*r**10-526*r**12
        +17*r**14+r**4*(6834-2112*logu*sqrtQ2)+r**2*(5121-640*logu*sqrtQ2)
        +12*r**8*(-139+18*logu*sqrtQ2)+r**6*(7535+408*logu*sqrtQ2))-(-1+r**2)**2*(96
        +295*r**10-336*r**12+153*r**14-8*r**8*(20+81*logu*sqrtQ2)+16*r**4*(449
        +396*logu*sqrtQ2)-3*r**6*(1171+408*logu*sqrtQ2)+r**2*(-3719+1920*logu*sqrtQ2))
        +3*Q2*(96+175*r**12-183*r**14+153*r**16+r**10*(111-432*logu*sqrtQ2)
        -r**8*(6385+1248*logu*sqrtQ2)+r**2*(-4263+1280*logu*sqrtQ2)+r**6*(7663
        +3408*logu*sqrtQ2)+r**4*(2633+5504*logu*sqrtQ2)))/(144*r**2*(Q2**2+(
        -1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((-425*Q2**9*r**2+24*Q2**8*r**2*(63+85*r**2)-6*Q2**7*r**2*(326+531*r**2+595*r**4)
        +Q2**6*r**2*(1221+1545*r**2+91*r**4+2295*r**6)+6*Q2**5*r**2*(-12-224*r**2
        -49*r**4+408*r**6+85*r**8)+3*Q2**4*r**2*(365+2205*r**2-476*r**4+140*r**6
        +175*r**8-425*r**10)+2*Q2**3*(60-8496*r**2-53205*r**4-25129*r**6+6166*r**8
        +1770*r**10-781*r**12+255*r**14)-3*Q2**2*(120+1513*r**12-87*r**14+85*r**16
        +r**10*(8261-360*logu*sqrtQ2)-r**8*(34649+1280*logu*sqrtQ2)+r**2*(
        -12777+1360*logu*sqrtQ2)+3*r**4*(-21919+4960*logu*sqrtQ2)+r**6*(-55429
        +5240*logu*sqrtQ2))+3*Q2*(120+890*r**14-172*r**16+85*r**18+r**12*(4452
        -720*logu*sqrtQ2)+60*r**8*(151+132*logu*sqrtQ2)-20*r**10*(1879+164*logu*sqrtQ2)
        +20*r**4*(-1409+1624*logu*sqrtQ2)+r**2*(-10857+2720*logu*sqrtQ2)+r**6*(62182
        +40240*logu*sqrtQ2))-(-1+r**2)**2*(120+787*r**12-257*r**14+85*r**16
        -135*r**10*(-23+8*logu*sqrtQ2)-5*r**8*(6649+768*logu*sqrtQ2)+5*r**6*(9085
        +3144*logu*sqrtQ2)+r**2*(-9617+4080*logu*sqrtQ2)+r**4*(-6403+44640*logu*sqrtQ2)))/(180*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((-10200*Q2**10*r**2+10*Q2**9*r**2*(3613+4845*r**2)-6*Q2**8*r**2*(7753+12362*r**2
        +14025*r**4)+3*Q2**7*r**2*(9483+11535*r**2+167*r**4+18275*r**6)+Q2**6*r**2*(
        -3339-29106*r**2-6054*r**4+55454*r**6+8925*r**8)-3*Q2**5*r**2*(-3451
        -29351*r**2+8710*r**4-4954*r**6-3759*r**8+8925*r**10)+3*Q2**4*r**2*(14455
        +275310*r**2+59869*r**4-13044*r**6+4485*r**8-9730*r**10+2975*r**12)
        +Q2**3*(3360-778077*r**2-10649793*r**4-14893983*r**6-1243475*r**8+726213*r**10
        +92793*r**12-3913*r**14+1275*r**16)-3*Q2**2*(3360+61280*r**14-2638*r**16
        +1275*r**18+r**12*(515902-12600*logu*sqrtQ2)-10*r**8*(843077+700*logu*sqrtQ2)
        -10*r**10*(111563+6300*logu*sqrtQ2)+30*r**4*(-232865+43232*logu*sqrtQ2)
        +r**2*(-599997+58240*logu*sqrtQ2)+8*r**6*(-1274054+258825*logu*sqrtQ2))
        -(-1+r**2)**2*(3360+35056*r**14-5188*r**16+1275*r**18-3500*r**8*(181
        +6*logu*sqrtQ2)-756*r**12*(-357+50*logu*sqrtQ2)-70*r**10*(27853+2700*logu*sqrtQ2)
        +504*r**6*(10772+12325*logu*sqrtQ2)+r**2*(-461117+174720*logu*sqrtQ2)
        +4*r**4*(-672289+972720*logu*sqrtQ2))+3*Q2*(3360+42468*r**16-3913*r**18
        +1275*r**20-28*r**14*(-12241+900*logu*sqrtQ2)-70*r**10*(65783+2000*logu*sqrtQ2)
        -42*r**12*(42529+3600*logu*sqrtQ2)+r**2*(-515997+116480*logu*sqrtQ2)
        +28*r**8*(273101+147400*logu*sqrtQ2)+7*r**4*(-618679+387200*logu*sqrtQ2)
        +4*r**6*(801253+1683780*logu*sqrtQ2)))/(5040*r**2*(Q2**2+(-1+r**2)**2
        -2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((-8925*Q2**11*r**2+165*Q2**10*r**2*(191+255*r**2)-5*Q2**9*r**2*(8087+12696*r**2
        +14535*r**4)+3*Q2**8*r**2*(8135+9595*r**2-181*r**4+15895*r**6)+6*Q2**7*r**2*(
        -580-3960*r**2-851*r**4+7784*r**6+1020*r**8)+2*Q2**6*r**2*(2730+28770*r**2
        -10917*r**4+6875*r**6+4578*r**8-10710*r**10)-6*Q2**4*r**2*(-10360-348600*r**2
        -620985*r**4+74995*r**6+6603*r**8+2655*r**10)+6*Q2**5*r**2*(2030+57260*r**2
        +7323*r**4-2864*r**6+2931*r**8-3892*r**10+1190*r**12)+Q2**3*(3360-1161315*r**2
        -27578640*r**4-79471722*r**6-41681440*r**8+5244762*r**10+1212192*r**12
        +124630*r**14-3312*r**16+765*r**18)-3*Q2**2*(3360+82078*r**16-2547*r**18
        +765*r**20+r**12*(2866586-94080*logu*sqrtQ2)+r**14*(910366-15120*logu*sqrtQ2)
        +r**2*(-909315+82880*logu*sqrtQ2)+15*r**4*(-1251613+204288*logu*sqrtQ2)
        -2*r**10*(12971027+466200*logu*sqrtQ2)+14*r**6*(-3669463+765960*logu*sqrtQ2)
        +r**8*(-50173282+5084800*logu*sqrtQ2))-(-1+r**2)**2*(3360+49372*r**16
        -4077*r**18+765*r**20-1680*r**12*(583+168*logu*sqrtQ2)-140*r**14*(-3931
        +324*logu*sqrtQ2)-2800*r**10*(5741+999*logu*sqrtQ2)+5*r**2*(-141767
        +49728*logu*sqrtQ2)+156*r**6*(31513+206220*logu*sqrtQ2)+28*r**8*(776759
        +544800*logu*sqrtQ2)+r**4*(-9501965+9192960*logu*sqrtQ2))+3*Q2*(3360
        +60415*r**18-3312*r**20+765*r**22-864*r**16*(-768+35*logu*sqrtQ2)-3360*r**12*(7116
        +611*logu*sqrtQ2)-140*r**14*(-2359+1560*logu*sqrtQ2)+5*r**2*(-157671
        +33152*logu*sqrtQ2)+80*r**4*(-163867+78680*logu*sqrtQ2)+160*r**8*(249769
        +197603*logu*sqrtQ2)+28*r**10*(216179+296600*logu*sqrtQ2)+r**6*(-9263617
        +27575520*logu*sqrtQ2)))/(5040*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr17(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r17 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return (-101*Q2**7+5*Q2**6*(69+101*r**2)-Q2**5*(421+748*r**2+909*r**4)+Q2**4*(129
        +389*r**2-67*r**4+505*r**6)+Q2**3*(217-48*r**2-306*r**4+848*r**6+505*r**8)
        +Q2**2*(-397-253*r**2+682*r**6+163*r**8-909*r**10+96*logu*sqrtQ2+18*r**4*(
        -35+4*logu*sqrtQ2))-(-1+r**2)**2*(77-261*r**2-32*r**6-189*r**8+101*r**10
        -96*logu*sqrtQ2-8*r**4*(-38+9*logu*sqrtQ2))+Q2*(305+103*r**8-932*r**10
        +505*r**12-192*logu*sqrtQ2-24*r**6*(-25+6*logu*sqrtQ2)-4*r**2*(145
        +48*logu*sqrtQ2)-r**4*(1+144*logu*sqrtQ2)))/(24*(Q2**2+(-1+r**2)**2
        -2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==1):
        return    (-2424*Q2**8+9*Q2**7*(913+1313*r**2)-Q2**6*(9947+16790*r**2+20907*r**4)
        +3*Q2**5*(1223+2591*r**2-849*r**4+4343*r**6)+3*Q2**4*(-5-710*r**2-1778*r**4
        +6010*r**6+1515*r**8)-Q2**3*(3461+18845*r**2+16974*r**4-11986*r**6
        -1555*r**8+8181*r**10)+3*Q2**2*(3541+1387*r**8-2694*r**10+101*r**12
        -320*logu*sqrtQ2+r**2*(9466-2240*logu*sqrtQ2)+36*r**6*(187+30*logu*sqrtQ2)
        -69*r**4*(-223+40*logu*sqrtQ2))-(-1+r**2)**2*(-2851+675*r**8-2464*r**10
        +909*r**12+960*logu*sqrtQ2+192*r**2*(18+35*logu*sqrtQ2)+115*r**4*(1
        +72*logu*sqrtQ2)-40*r**6*(-4+81*logu*sqrtQ2))+3*Q2*(-3171-709*r**10
        -1555*r**12+909*r**14+640*logu*sqrtQ2+15*r**6*(309+224*logu*sqrtQ2)
        -5*r**8*(817+432*logu*sqrtQ2)+r**2*(-995+5120*logu*sqrtQ2)+r**4*(4971
        +10000*logu*sqrtQ2)))/(720*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==2):
        return    (-505*Q2**9+24*Q2**8*(71+101*r**2)-6*Q2**7*(342+559*r**2+707*r**4)+Q2**6*(797
        +1457*r**2-613*r**4+2727*r**6)+6*Q2**5*(16-72*r**2-141*r**4+568*r**6
        +101*r**8)+Q2**4*(735+3375*r**2+804*r**4+1164*r**6+525*r**8-1515*r**10)
        +2*Q2**3*(-4292-28817*r**2-27713*r**4-8046*r**6+1702*r**8-977*r**10
        +303*r**12)-(-1+r**2)**2*(-4569+579*r**10-385*r**12+101*r**14+2160*logu*sqrtQ2
        +489*r**4*(41+40*logu*sqrtQ2)-15*r**8*(409+72*logu*sqrtQ2)+35*r**6*(
        -103+192*logu*sqrtQ2)+5*r**2*(-1207+4704*logu*sqrtQ2))-3*Q2**2*(-6369
        +1113*r**10-183*r**12+101*r**14+720*logu*sqrtQ2-9*r**8*(1179+40*logu*sqrtQ2)
        +r**6*(-36961+2240*logu*sqrtQ2)+r**4*(-46197+6520*logu*sqrtQ2)+r**2*(
        -36573+7840*logu*sqrtQ2))+3*Q2*(-5289+554*r**12-284*r**14+101*r**16
        +1440*logu*sqrtQ2-4*r**10*(2129+180*logu*sqrtQ2)+20*r**8*(-571+188*logu*sqrtQ2)
        +12*r**6*(1617+1460*logu*sqrtQ2)+4*r**2*(-4251+4280*logu*sqrtQ2)+r**4*(22454
        +28720*logu*sqrtQ2)))/(180*(Q2**2+(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==3):
        return     (-4040*Q2**10+10*Q2**9*(1359+1919*r**2)-2*Q2**8*(8153+13034*r**2+16665*r**4)
        +Q2**7*(6483+10847*r**2-5281*r**4+21715*r**6)+Q2**6*(847-3374*r**2
        -6138*r**4+25746*r**6+3535*r**8)+Q2**5*(3731+18935*r**2-2022*r**4+10522*r**6
        +3703*r**8-10605*r**10)+Q2**4*(11375+187670*r**2+102509*r**4+40332*r**6
        +5965*r**8-11690*r**10+3535*r**12)+Q2**3*(-192359-2438107*r**2-4193181*r**4
        -1868449*r**6-392513*r**8+27651*r**10-2107*r**12+505*r**14)-(-1+r**2)**2*(
        -106119+9688*r**12-2612*r**14+505*r**16+47040*logu*sqrtQ2+350*r**8*(
        -767+396*logu*sqrtQ2)-28*r**10*(6277+450*logu*sqrtQ2)+140*r**6*(1423
        +4590*logu*sqrtQ2)+168*r**4*(5759+10125*logu*sqrtQ2)+12*r**2*(-51999
        +73360*logu*sqrtQ2))-3*Q2**2*(-145319+16984*r**12-1602*r**14+505*r**16
        +15680*logu*sqrtQ2-2*r**10*(134399+2100*logu*sqrtQ2)+6*r**8*(-207307
        +7700*logu*sqrtQ2)+40*r**4*(-71401+14175*logu*sqrtQ2)+2*r**2*(-804513
        +146720*logu*sqrtQ2)+r**6*(-2951422+214200*logu*sqrtQ2))+3*Q2*(-121799
        +11276*r**14-2107*r**16+505*r**18+31360*logu*sqrtQ2-84*r**12*(2627
        +100*logu*sqrtQ2)+14*r**10*(-40129+6000*logu*sqrtQ2)+70*r**8*(-3629
        +7440*logu*sqrtQ2)+21*r**2*(-47247+29440*logu*sqrtQ2)+28*r**6*(64039
        +55800*logu*sqrtQ2)+4*r**4*(86931+430220*logu*sqrtQ2)))/(1680*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2))
    if (dQ2 == 0 and dr == 0 and i==4):
        return     (-10605*Q2**11+45*Q2**10*(791+1111*r**2)-5*Q2**9*(8519+13400*r**2+17271*r**4)
        +3*Q2**8*(5719+9003*r**2-4837*r**4+18887*r**6)+6*Q2**7*(364-1448*r**2
        -2579*r**4+10840*r**6+1212*r**8)+Q2**6*(7476+41412*r**2-13482*r**4
        +27670*r**6+8932*r**8-25452*r**10)+6*Q2**4*(10360+265720*r**2+548457*r**4
        +117629*r**6+38309*r**8-2799*r**10)+6*Q2**5*(1918+43932*r**2+16779*r**4
        +6896*r**6+3571*r**8-4676*r**10+1414*r**12)+Q2**3*(-1055187-21373584*r**2
        -66289482*r**4-51994720*r**6-13428742*r**8-2397792*r**10+115702*r**12
        -5264*r**14+909*r**16)+3*Q2*(52207*r**16-5264*r**18+909*r**20-224*r**14*(6167
        +135*logu*sqrtQ2)+224*r**10*(-57158+15955*logu*sqrtQ2)+28*r**12*(-161677
        +17160*logu*sqrtQ2)+7*(-97461+23680*logu*sqrtQ2)+416*r**6*(64083+73675*logu*sqrtQ2)
        +16*r**2*(-626609+307160*logu*sqrtQ2)+28*r**8*(448083+576280*logu*sqrtQ2)
        +7*r**4*(-1404711+3189280*logu*sqrtQ2))-(-1+r**2)**2*(43260*r**14-6173*r**16
        +909*r**18-28*r**12*(40681+1620*logu*sqrtQ2)+112*r**10*(-21269+6840*logu*sqrtQ2)
        +336*r**8*(-19919+13675*logu*sqrtQ2)+7*(-85621+35520*logu*sqrtQ2)
        +28*r**6*(588791+700320*logu*sqrtQ2)+20*r**4*(75347+1318212*logu*sqrtQ2)
        +r**2*(-7217757+7123200*logu*sqrtQ2))-3*Q2**2*(-806547+72350*r**14-4355*r**16
        +909*r**18+82880*logu*sqrtQ2-6*r**12*(278731+2520*logu*sqrtQ2)+10*r**10*(
        -898439+25536*logu*sqrtQ2)+2*r**8*(-17981923+765800*logu*sqrtQ2)+r**2*(
        -14559651+2374400*logu*sqrtQ2)+r**6*(-51278082+6536320*logu*sqrtQ2)
        +r**4*(-43232162+8788080*logu*sqrtQ2)))/(5040*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2))

    return 0. 

@jit(float64(int64, float64, float64, int64, int64), cache=True, nopython=True)
def Xr18(i,Q2,r,dQ2,dr):
    """ 1/mb^5 level functions of r18 for Q2 moments and their derivatives """
    sqrtQ2=math.sqrt((Q2**2 + (r**2 - 1)**2 - 2*Q2*(1+r**2)))
    logu =math.log((1 - Q2 + r**2 + sqrtQ2)/(2*r))
    # tree level function
    if (dQ2 == 0 and dr == 0 and i==0):
        return ((291*Q2**7*r**2-Q2**6*r**2*(1007+1455*r**2)+3*Q2**5*r**2*(393+740*r**2+873*r**4)
        -3*Q2**4*r**2*(197+305*r**2-15*r**4+485*r**6)+Q2**3*(-24+841*r**2+984*r**4
        +294*r**6-2240*r**8-1455*r**10)+3*Q2**2*(24+105*r**4-330*r**8-215*r**10
        +873*r**12+r**6*(62-72*logu*sqrtQ2)+r**2*(-455+64*logu*sqrtQ2))-3*Q2*(24
        +379*r**10-924*r**12+485*r**14+r**6*(179-144*logu*sqrtQ2)-16*r**8*(10
        +9*logu*sqrtQ2)+4*r**4*(85+32*logu*sqrtQ2)+r**2*(-323+128*logu*sqrtQ2))
        +(-1+r**2)**2*(24+365*r**4+152*r**8-563*r**10+291*r**12-216*logu*r**6*sqrtQ2
        +r**2*(-269+192*logu*sqrtQ2)))/(36*r**2*(Q2**2+(-1+r**2)**2-2*Q2*(1
        +r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==1):
        return ((2328*Q2**8*r**2-3*Q2**7*r**2*(2663+3783*r**2)+Q2**6*r**2*(9359+16590*r**2
        +20079*r**4)-3*Q2**5*r**2*(1451+2067*r**2-493*r**4+4171*r**6)-3*Q2**4*r**2*(15
        -2430*r**2-986*r**4+5410*r**6+1455*r**8)+Q2**3*(-240+18737*r**2+33945*r**4
        -14442*r**6-12442*r**8-2055*r**10+7857*r**12)-3*Q2**2*(-240-1041*r**10
        -2558*r**12+97*r**14+r**2*(14417-1760*logu*sqrtQ2)-22*r**4*(-691+240*logu*sqrtQ2)
        +4*r**8*(-2669+270*logu*sqrtQ2)+r**6*(16159+2040*logu*sqrtQ2))+(-1
        +r**2)**2*(240+3335*r**10-2448*r**12+873*r**14-40*r**8*(2+81*logu*sqrtQ2)
        -15*r**6*(967+408*logu*sqrtQ2)+16*r**4*(1447+990*logu*sqrtQ2)+r**2*(
        -10567+5280*logu*sqrtQ2))-3*Q2*(240+1967*r**12-1575*r**14+873*r**16
        +r**10*(3135-2160*logu*sqrtQ2)-5*r**8*(4573+1248*logu*sqrtQ2)+5*r**4*(2165
        +2816*logu*sqrtQ2)+r**2*(-12087+3520*logu*sqrtQ2)+r**6*(19487+6480*logu*sqrtQ2)))/(360*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==2):
        return ((485*Q2**9*r**2-24*Q2**8*r**2*(69+97*r**2)+6*Q2**7*r**2*(323+552*r**2+679*r**4)
        -Q2**6*r**2*(883+1169*r**2-407*r**4+2619*r**6)-6*Q2**5*r**2*(-11-215*r**2
        -68*r**4+513*r**6+97*r**8)+3*Q2**4*r**2*(-315-1325*r**2+448*r**4-256*r**6
        -205*r**8+485*r**10)-2*Q2**3*(30-5923*r**2-35234*r**4-13207*r**6+6162*r**8
        +2119*r**10-958*r**12+291*r**14)+3*Q2**2*(60+1853*r**12-189*r**14+97*r**16
        +r**10*(8147-360*logu*sqrtQ2)+5*r**6*(-6627+472*logu*sqrtQ2)+r**2*(
        -8871+960*logu*sqrtQ2)-r**8*(17953+1280*logu*sqrtQ2)+r**4*(-43449
        +10000*logu*sqrtQ2))-3*Q2*(60+1308*r**14-286*r**16+97*r**18+r**12*(4226
        -720*logu*sqrtQ2)-10*r**10*(2595+328*logu*sqrtQ2)+3*r**2*(-2497+640*logu*sqrtQ2)
        +r**8*(2258+2160*logu*sqrtQ2)+4*r**6*(10889+6180*logu*sqrtQ2)+2*r**4*(
        -8889+10960*logu*sqrtQ2))+(-1+r**2)**2*(60+1331*r**12-383*r**14+97*r**16
        -5*r**10*(-467+216*logu*sqrtQ2)-5*r**8*(4745+768*logu*sqrtQ2)+3*r**2*(
        -2197+960*logu*sqrtQ2)+r**6*(29983+7080*logu*sqrtQ2)+r**4*(-3107+30000*logu*sqrtQ2)))/(90*r**2*(Q2**2
        +(-1+r**2)**2-2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==3):
        return ((11640*Q2**10*r**2-10*Q2**9*r**2*(3961+5529*r**2)+6*Q2**8*r**2*(7717+12866*r**2
        +16005*r**4)-3*Q2**7*r**2*(6967+8723*r**2-3709*r**4+20855*r**6)+Q2**6*r**2*(1911
        +28098*r**2+8646*r**4-69902*r**6-10185*r**8)+3*Q2**5*r**2*(-4039-19355*r**2
        +8398*r**4-7618*r**6-4347*r**8+10185*r**10)-3*Q2**4*r**2*(11795+208670*r**2
        +27001*r**4-11092*r**6+6505*r**8-11410*r**10+3395*r**12)+Q2**3*(-1680
        +622833*r**2+8052429*r**4+10622907*r**6+278423*r**8-683769*r**10-106917*r**12
        +6349*r**14-1455*r**16)+3*Q2**2*(1680+74408*r**14-4894*r**16+1455*r**18
        +r**12*(472414-12600*logu*sqrtQ2)-2*r**10*(186607+31500*logu*sqrtQ2)
        +40*r**6*(-183091+37065*logu*sqrtQ2)-2*r**8*(2942857+45500*logu*sqrtQ2)
        +r**2*(-476673+48160*logu*sqrtQ2)+6*r**4*(-879157+164080*logu*sqrtQ2))
        +(-1+r**2)**2*(1680+52696*r**14-7804*r**16+1455*r**18-84*r**12*(-2387
        +450*logu*sqrtQ2)-140*r**8*(5767+1950*logu*sqrtQ2)-70*r**10*(19069
        +2700*logu*sqrtQ2)+504*r**6*(8401+8825*logu*sqrtQ2)+r**2*(-359633+144480*logu*sqrtQ2)
        +4*r**4*(-495199+738360*logu*sqrtQ2))-3*Q2*(1680+57492*r**16-6349*r**18
        +1455*r**20-28*r**14*(-10393+900*logu*sqrtQ2)-42*r**12*(27541+3600*logu*sqrtQ2)
        -70*r**10*(53483+4400*logu*sqrtQ2)+r**2*(-406113+96320*logu*sqrtQ2)
        +28*r**8*(196373+99400*logu*sqrtQ2)+7*r**4*(-461227+295040*logu*sqrtQ2)
        +4*r**6*(672877+1233540*logu*sqrtQ2)))/(2520*r**2*(Q2**2+(-1+r**2)**2
        -2*Q2*(1+r**2))**(3/2)))
    if (dQ2 == 0 and dr == 0 and i==4):
        return ((10185*Q2**11*r**2-15*Q2**10*r**2*(2305+3201*r**2)+95*Q2**9*r**2*(425+696*r**2
        +873*r**4)-3*Q2**8*r**2*(6043+7247*r**2-3505*r**4+18139*r**6)-6*Q2**7*r**2*(
        -292-3840*r**2-1223*r**4+9824*r**6+1164*r**8)+6*Q2**4*r**2*(-9520-282240*r**2
        -481749*r**4+76519*r**6+5175*r**8+2763*r**10)+2*Q2**6*r**2*(-3906-20034*r**2
        +10809*r**4-10247*r**6-5250*r**8+12222*r**10)-6*Q2**5*r**2*(1806+46396*r**2
        +2655*r**4-2208*r**6+3775*r**8-4564*r**10+1358*r**12)+Q2**3*(-1680
        +1022919*r**2+22413456*r**4+62748786*r**6+30612832*r**8-5313666*r**10
        -1096608*r**12-142126*r**14+5280*r**16-873*r**18)+(-1+r**2)**2*(1680
        +69484*r**16-6153*r**18+873*r**20+r**14*(406532-45360*logu*sqrtQ2)
        -4032*r**12*(83+70*logu*sqrtQ2)-112*r**10*(118994+23175*logu*sqrtQ2)
        +r**2*(-605719+228480*logu*sqrtQ2)+28*r**8*(604151+395040*logu*sqrtQ2)
        +36*r**6*(124231+707700*logu*sqrtQ2)+r**4*(-7593257+7499520*logu*sqrtQ2))
        +3*Q2**2*(1680+98470*r**16-4407*r**18+873*r**20+r**12*(3124610-94080*logu*sqrtQ2)
        +r**14*(799126-15120*logu*sqrtQ2)+r**2*(-792759+76160*logu*sqrtQ2)
        +15*r**4*(-1015865+166656*logu*sqrtQ2)-2*r**10*(9524351+432600*logu*sqrtQ2)
        +r**8*(-38581642+3687040*logu*sqrtQ2)+r**6*(-40607594+8492400*logu*sqrtQ2))
        -3*Q2*(1680+78451*r**18-5280*r**20+873*r**22-144*r**16*(-3749+210*logu*sqrtQ2)
        -364*r**14*(-2099+600*logu*sqrtQ2)-672*r**12*(28252+2855*logu*sqrtQ2)
        +140*r**10*(23827+40312*logu*sqrtQ2)+64*r**4*(-164789+80500*logu*sqrtQ2)
        +r**2*(-680199+152320*logu*sqrtQ2)+32*r**8*(1005827+761215*logu*sqrtQ2)
        +r**6*(-6689821+21984480*logu*sqrtQ2)))/(2520*r**2*(Q2**2+(-1+r**2)**2
        -2*Q2*(1+r**2))**(3/2)))

    return 0. 
"Here we define the 1/mb^4 and 1/mb^5 corrections to the centralized q2-moments in the historical basis"

def moment_1_KIN_MS_HO(q2cut, par, hqe, flagmb4 = 1, flagmb5 = 1):
    """ 1/mb^4 and 1/mb^5 corrections to the central moment of the q2 spectrum. Moment n. 1 """
    Q2=q2cut/par.mbkin**2
    r=par.mcMS/par.mbkin
    u=(1.+r**2-Q2-math.sqrt(r**4+(1.-Q2)**2-2*r**2*(1.+Q2)))/2/r

    rhoD=hqe.rhoD/par.mbkin**3
    rhoLS=hqe.rhoLS/par.mbkin**3
    muG=hqe.muG/par.mbkin**2
    mupi=hqe.mupi/par.mbkin**2

    m1=hqe.m1/par.mbkin**4
    m2=hqe.m2/par.mbkin**4
    m3=hqe.m3/par.mbkin**4
    m4=hqe.m4/par.mbkin**4
    m5=hqe.m5/par.mbkin**4
    m6=hqe.m6/par.mbkin**4
    m7=hqe.m7/par.mbkin**4
    m8=hqe.m8/par.mbkin**4
    m9=hqe.m9/par.mbkin**4
    r1=hqe.r1/par.mbkin**5
    r2=hqe.r2/par.mbkin**5
    r3=hqe.r3/par.mbkin**5
    r4=hqe.r4/par.mbkin**5
    r5=hqe.r5/par.mbkin**5
    r6=hqe.r6/par.mbkin**5
    r7=hqe.r7/par.mbkin**5
    r8=hqe.r8/par.mbkin**5
    r9=hqe.r9/par.mbkin**5
    r10=hqe.r10/par.mbkin**5
    r11=hqe.r11/par.mbkin**5
    r12=hqe.r12/par.mbkin**5
    r13=hqe.r13/par.mbkin**5
    r14=hqe.r14/par.mbkin**5
    r15=hqe.r15/par.mbkin**5
    r16=hqe.r16/par.mbkin**5
    r17=hqe.r17/par.mbkin**5
    r18=hqe.r18/par.mbkin**5

    res = 0
    
    if flagmb4 == 1:
        res += (-((SM.X(1,u,r,0,0)*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xm1(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*m1
        res += (-((SM.X(1,u,r,0,0)*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xm2(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*m2
        res += (-((SM.X(1,u,r,0,0)*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xm3(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*m3
        res += (-((SM.X(1,u,r,0,0)*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xm4(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*m4
        res += (-((SM.X(1,u,r,0,0)*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xm5(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*m5
        res += (-((SM.X(1,u,r,0,0)*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xm6(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*m6
        res += (-((SM.X(1,u,r,0,0)*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xm7(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*m7
        res += (-((SM.X(1,u,r,0,0)*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xm8(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*m8
        res += (-((SM.X(1,u,r,0,0)*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xm9(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*m9
        res += 0*mupi**2
        res += ((SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3-(SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG**2
        res += (-1/2*(SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**2+SM.XG(1,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*muG*mupi

    if flagmb5 == 1:
        res += (-((SM.X(1,u,r,0,0)*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr1(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r1
        res += (-((SM.X(1,u,r,0,0)*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr2(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r2
        res += (-((SM.X(1,u,r,0,0)*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr3(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r3
        res += (-((SM.X(1,u,r,0,0)*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr4(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r4
        res += (-((SM.X(1,u,r,0,0)*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr5(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r5
        res += (-((SM.X(1,u,r,0,0)*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr6(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r6
        res += (-((SM.X(1,u,r,0,0)*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr7(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r7
        res += (-((SM.X(1,u,r,0,0)*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr8(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r8
        res += (-((SM.X(1,u,r,0,0)*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr9(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r9
        res += (-((SM.X(1,u,r,0,0)*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr10(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r10
        res += (-((SM.X(1,u,r,0,0)*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr11(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r11
        res += (-((SM.X(1,u,r,0,0)*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr12(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r12
        res += (-((SM.X(1,u,r,0,0)*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr13(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r13
        res += (-((SM.X(1,u,r,0,0)*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr14(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r14
        res += (-((SM.X(1,u,r,0,0)*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr15(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r15
        res += (-((SM.X(1,u,r,0,0)*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr16(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r16
        res += (-((SM.X(1,u,r,0,0)*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr17(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r17
        res += (-((SM.X(1,u,r,0,0)*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2)+Xr18(1,Q2,r,0,0)/SM.X(0,u,r,0,0))*r18
        res += (-1/2*(SM.X(1,u,r,0,0)*SM.XD(0,u,r,0,0,1))/SM.X(0,u,r,0,0)**2+SM.XD(1,u,r,0,0,1)/(2*SM.X(0,u,r,0,0)))*mupi*rhoD
        res += ((2*SM.X(1,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.XD(1,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XD(0,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoD
        res += ((SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)-SM.XG(1,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*mupi*rhoLS
        res += ((-2*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3+(2*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoLS

    return res*par.mbkin**2

def moment_2_KIN_MS_HO(q2cut, par, hqe, flagmb4 = 1, flagmb5 = 1):
    """ 1/mb^4 and 1/mb^5 corrections to the central moment of the q2 spectrum. Moment n. 2 """
    Q2=q2cut/par.mbkin**2
    r=par.mcMS/par.mbkin
    u=(1.+r**2-Q2-math.sqrt(r**4+(1.-Q2)**2-2*r**2*(1.+Q2)))/2/r

    rhoD=hqe.rhoD/par.mbkin**3
    rhoLS=hqe.rhoLS/par.mbkin**3
    muG=hqe.muG/par.mbkin**2
    mupi=hqe.mupi/par.mbkin**2

    m1=hqe.m1/par.mbkin**4
    m2=hqe.m2/par.mbkin**4
    m3=hqe.m3/par.mbkin**4
    m4=hqe.m4/par.mbkin**4
    m5=hqe.m5/par.mbkin**4
    m6=hqe.m6/par.mbkin**4
    m7=hqe.m7/par.mbkin**4
    m8=hqe.m8/par.mbkin**4
    m9=hqe.m9/par.mbkin**4
    r1=hqe.r1/par.mbkin**5
    r2=hqe.r2/par.mbkin**5
    r3=hqe.r3/par.mbkin**5
    r4=hqe.r4/par.mbkin**5
    r5=hqe.r5/par.mbkin**5
    r6=hqe.r6/par.mbkin**5
    r7=hqe.r7/par.mbkin**5
    r8=hqe.r8/par.mbkin**5
    r9=hqe.r9/par.mbkin**5
    r10=hqe.r10/par.mbkin**5
    r11=hqe.r11/par.mbkin**5
    r12=hqe.r12/par.mbkin**5
    r13=hqe.r13/par.mbkin**5
    r14=hqe.r14/par.mbkin**5
    r15=hqe.r15/par.mbkin**5
    r16=hqe.r16/par.mbkin**5
    r17=hqe.r17/par.mbkin**5
    r18=hqe.r18/par.mbkin**5

    res = 0
    
    if flagmb4 == 1:
        res += ((2*SM.X(1,u,r,0,0)**2*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xm1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm1(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*m1
        res += ((2*SM.X(1,u,r,0,0)**2*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xm2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm2(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*m2
        res += ((2*SM.X(1,u,r,0,0)**2*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xm3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm3(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*m3
        res += ((2*SM.X(1,u,r,0,0)**2*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xm4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm4(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*m4
        res += ((2*SM.X(1,u,r,0,0)**2*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xm5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm5(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*m5
        res += ((2*SM.X(1,u,r,0,0)**2*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xm6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm6(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*m6
        res += ((2*SM.X(1,u,r,0,0)**2*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xm7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm7(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*m7
        res += ((2*SM.X(1,u,r,0,0)**2*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xm8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm8(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*m8
        res += ((2*SM.X(1,u,r,0,0)**2*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xm9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm9(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*m9
        res += 0*mupi**2
        res += ((-3*SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4+(SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3
        +(4*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -SM.XG(1,u,r,0,0)**2/SM.X(0,u,r,0,0)**2-(SM.XG(0,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG**2
        res += ((SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)
        -(SM.X(1,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2+SM.XG(2,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*muG*mupi

    if flagmb5 == 1:
        res += ((2*SM.X(1,u,r,0,0)**2*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr1(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r1
        res += ((2*SM.X(1,u,r,0,0)**2*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr2(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r2
        res += ((2*SM.X(1,u,r,0,0)**2*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr3(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r3
        res += ((2*SM.X(1,u,r,0,0)**2*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr4(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r4
        res += ((2*SM.X(1,u,r,0,0)**2*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr5(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r5
        res += ((2*SM.X(1,u,r,0,0)**2*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr6(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r6
        res += ((2*SM.X(1,u,r,0,0)**2*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr7(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r7
        res += ((2*SM.X(1,u,r,0,0)**2*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr8(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r8
        res += ((2*SM.X(1,u,r,0,0)**2*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr9(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r9
        res += ((2*SM.X(1,u,r,0,0)**2*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr10(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r10
        res += ((2*SM.X(1,u,r,0,0)**2*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr11(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr11(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r11
        res += ((2*SM.X(1,u,r,0,0)**2*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr12(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr12(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r12
        res += ((2*SM.X(1,u,r,0,0)**2*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr13(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr13(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r13
        res += ((2*SM.X(1,u,r,0,0)**2*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr14(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr14(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r14
        res += ((2*SM.X(1,u,r,0,0)**2*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr15(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr15(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r15
        res += ((2*SM.X(1,u,r,0,0)**2*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr16(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr16(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r16
        res += ((2*SM.X(1,u,r,0,0)**2*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr17(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr17(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r17
        res += ((2*SM.X(1,u,r,0,0)**2*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        -(2*SM.X(1,u,r,0,0)*Xr18(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr18(2,Q2,r,0,0)/SM.X(0,u,r,0,0))*r18
        res += ((SM.X(1,u,r,0,0)**2*SM.XD(0,u,r,0,0,1))/SM.X(0,u,r,0,0)**3-(SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,1))/(2*SM.X(0,u,r,0,0)**2)
        -(SM.X(1,u,r,0,0)*SM.XD(1,u,r,0,0,1))/SM.X(0,u,r,0,0)**2+SM.XD(2,u,r,0,0,1)/(2*SM.X(0,u,r,0,0)))*mupi*rhoD
        res += ((-6*SM.X(1,u,r,0,0)**2*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(2*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(4*SM.X(1,u,r,0,0)*SM.XD(1,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.XD(2,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**2+(4*SM.X(1,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(2*SM.XD(1,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XD(0,u,r,0,0,1)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoD
        res += (-((SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3)+(SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)
        +(SM.X(1,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2-SM.XG(2,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*mupi*rhoLS
        res += ((6*SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4-(2*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3
        -(8*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(2*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**2+(2*SM.XG(0,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoLS
        
    return res*par.mbkin**4

def moment_3_KIN_MS_HO(q2cut, par, hqe, flagmb4 = 1, flagmb5 = 1):
    """ 1/mb^4 and 1/mb^5 corrections to the central moment of the q2 spectrum. Moment n. 3 """
    Q2=q2cut/par.mbkin**2
    r=par.mcMS/par.mbkin
    u=(1.+r**2-Q2-math.sqrt(r**4+(1.-Q2)**2-2*r**2*(1.+Q2)))/2/r

    rhoD=hqe.rhoD/par.mbkin**3
    rhoLS=hqe.rhoLS/par.mbkin**3
    muG=hqe.muG/par.mbkin**2
    mupi=hqe.mupi/par.mbkin**2

    m1=hqe.m1/par.mbkin**4
    m2=hqe.m2/par.mbkin**4
    m3=hqe.m3/par.mbkin**4
    m4=hqe.m4/par.mbkin**4
    m5=hqe.m5/par.mbkin**4
    m6=hqe.m6/par.mbkin**4
    m7=hqe.m7/par.mbkin**4
    m8=hqe.m8/par.mbkin**4
    m9=hqe.m9/par.mbkin**4
    r1=hqe.r1/par.mbkin**5
    r2=hqe.r2/par.mbkin**5
    r3=hqe.r3/par.mbkin**5
    r4=hqe.r4/par.mbkin**5
    r5=hqe.r5/par.mbkin**5
    r6=hqe.r6/par.mbkin**5
    r7=hqe.r7/par.mbkin**5
    r8=hqe.r8/par.mbkin**5
    r9=hqe.r9/par.mbkin**5
    r10=hqe.r10/par.mbkin**5
    r11=hqe.r11/par.mbkin**5
    r12=hqe.r12/par.mbkin**5
    r13=hqe.r13/par.mbkin**5
    r14=hqe.r14/par.mbkin**5
    r15=hqe.r15/par.mbkin**5
    r16=hqe.r16/par.mbkin**5
    r17=hqe.r17/par.mbkin**5
    r18=hqe.r18/par.mbkin**5

    res = 0
    
    if flagmb4 == 1:
        res += ((-6*SM.X(1,u,r,0,0)**3*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xm1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xm1(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xm1(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*m1
        res += ((-6*SM.X(1,u,r,0,0)**3*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xm2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xm2(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xm2(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*m2
        res += ((-6*SM.X(1,u,r,0,0)**3*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xm3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xm3(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xm3(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*m3
        res += ((-6*SM.X(1,u,r,0,0)**3*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xm4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xm4(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xm4(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*m4
        res += ((-6*SM.X(1,u,r,0,0)**3*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xm5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xm5(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xm5(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*m5
        res += ((-6*SM.X(1,u,r,0,0)**3*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xm6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xm6(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xm6(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*m6
        res += ((-6*SM.X(1,u,r,0,0)**3*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xm7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xm7(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xm7(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*m7
        res += ((-6*SM.X(1,u,r,0,0)**3*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xm8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xm8(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xm8(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*m8
        res += ((-6*SM.X(1,u,r,0,0)**3*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xm9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xm9(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xm9(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*m9
        res += 0*mupi**2
        res += ((12*SM.X(1,u,r,0,0)**3*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**5-(9*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4
        +(SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3-(18*SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(6*SM.X(1,u,r,0,0)*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3+(6*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.XG(1,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XG(0,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG**2
        res += ((-3*SM.X(1,u,r,0,0)**3*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4+(3*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)+(3*SM.X(1,u,r,0,0)**2*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*SM.XG(1,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)-(3*SM.X(1,u,r,0,0)*SM.XG(2,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)
        +SM.XG(3,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*muG*mupi

    if flagmb5 == 1:
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr1(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr1(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r1
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr2(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr2(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r2
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr3(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr3(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r3
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr4(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr4(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r4
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr5(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr5(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r5
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr6(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr6(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r6
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr7(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr7(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r7
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr8(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr8(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r8
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr9(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr9(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r9
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr10(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr10(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r10
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr11(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr11(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr11(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr11(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r11
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr12(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr12(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr12(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr12(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r12
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr13(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr13(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr13(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr13(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r13
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr14(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr14(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr14(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr14(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r14
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr15(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr15(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr15(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr15(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r15
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr16(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr16(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr16(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr16(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r16
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr17(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr17(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr17(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr17(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r17
        res += ((-6*SM.X(1,u,r,0,0)**3*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4+(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr18(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*Xr18(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)*Xr18(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**2
        +Xr18(3,Q2,r,0,0)/SM.X(0,u,r,0,0))*r18
        res += ((-3*SM.X(1,u,r,0,0)**3*SM.XD(0,u,r,0,0,1))/SM.X(0,u,r,0,0)**4+(3*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,1))/SM.X(0,u,r,0,0)**3
        -(SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,1))/(2*SM.X(0,u,r,0,0)**2)+(3*SM.X(1,u,r,0,0)**2*SM.XD(1,u,r,0,0,1))/SM.X(0,u,r,0,0)**3
        -(3*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,1))/(2*SM.X(0,u,r,0,0)**2)-(3*SM.X(1,u,r,0,0)*SM.XD(2,u,r,0,0,1))/(2*SM.X(0,u,r,0,0)**2)
        +SM.XD(3,u,r,0,0,1)/(2*SM.X(0,u,r,0,0)))*mupi*rhoD
        res += ((24*SM.X(1,u,r,0,0)**3*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(18*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(2*SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(18*SM.X(1,u,r,0,0)**2*SM.XD(1,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(6*SM.X(1,u,r,0,0)*SM.XD(2,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.XD(3,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**2-(18*SM.X(1,u,r,0,0)**2*SM.XD(0,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(12*SM.X(1,u,r,0,0)*SM.XD(1,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.XD(2,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(3*SM.XD(1,u,r,0,0,1)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XD(0,u,r,0,0,1)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoD
        res += ((3*SM.X(1,u,r,0,0)**3*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4-(3*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)-(3*SM.X(1,u,r,0,0)**2*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(3*SM.X(2,u,r,0,0)*SM.XG(1,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)+(3*SM.X(1,u,r,0,0)*SM.XG(2,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)
        -SM.XG(3,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*mupi*rhoLS
        res += ((-24*SM.X(1,u,r,0,0)**3*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**5+(18*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4
        -(2*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3+(36*SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        -(12*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(12*SM.X(1,u,r,0,0)*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3-(12*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(6*SM.XG(1,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**2+(2*SM.XG(0,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoLS
        
    return res*par.mbkin**6

def moment_4_KIN_MS_HO(q2cut, par, hqe, flagmb4 = 1, flagmb5 = 1):
    """ 1/mb^4 and 1/mb^5 corrections to the central moment of the q2 spectrum. Moment n. 4 """
    Q2=q2cut/par.mbkin**2
    r=par.mcMS/par.mbkin
    u=(1.+r**2-Q2-math.sqrt(r**4+(1.-Q2)**2-2*r**2*(1.+Q2)))/2/r

    rhoD=hqe.rhoD/par.mbkin**3
    rhoLS=hqe.rhoLS/par.mbkin**3
    muG=hqe.muG/par.mbkin**2
    mupi=hqe.mupi/par.mbkin**2

    m1=hqe.m1/par.mbkin**4
    m2=hqe.m2/par.mbkin**4
    m3=hqe.m3/par.mbkin**4
    m4=hqe.m4/par.mbkin**4
    m5=hqe.m5/par.mbkin**4
    m6=hqe.m6/par.mbkin**4
    m7=hqe.m7/par.mbkin**4
    m8=hqe.m8/par.mbkin**4
    m9=hqe.m9/par.mbkin**4
    r1=hqe.r1/par.mbkin**5
    r2=hqe.r2/par.mbkin**5
    r3=hqe.r3/par.mbkin**5
    r4=hqe.r4/par.mbkin**5
    r5=hqe.r5/par.mbkin**5
    r6=hqe.r6/par.mbkin**5
    r7=hqe.r7/par.mbkin**5
    r8=hqe.r8/par.mbkin**5
    r9=hqe.r9/par.mbkin**5
    r10=hqe.r10/par.mbkin**5
    r11=hqe.r11/par.mbkin**5
    r12=hqe.r12/par.mbkin**5
    r13=hqe.r13/par.mbkin**5
    r14=hqe.r14/par.mbkin**5
    r15=hqe.r15/par.mbkin**5
    r16=hqe.r16/par.mbkin**5
    r17=hqe.r17/par.mbkin**5
    r18=hqe.r18/par.mbkin**5

    res = 0
    
    if flagmb4 == 1:
        res += ((12*SM.X(1,u,r,0,0)**4*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xm1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xm1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xm1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm1(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xm1(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm1(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*m1
        res += ((12*SM.X(1,u,r,0,0)**4*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xm2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xm2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xm2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm2(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xm2(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm2(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*m2
        res += ((12*SM.X(1,u,r,0,0)**4*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xm3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xm3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xm3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm3(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xm3(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm3(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*m3
        res += ((12*SM.X(1,u,r,0,0)**4*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xm4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xm4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xm4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm4(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xm4(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm4(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*m4
        res += ((12*SM.X(1,u,r,0,0)**4*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xm5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xm5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xm5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm5(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xm5(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm5(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*m5
        res += ((12*SM.X(1,u,r,0,0)**4*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xm6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xm6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xm6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm6(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xm6(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm6(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*m6
        res += ((12*SM.X(1,u,r,0,0)**4*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xm7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xm7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xm7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm7(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xm7(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm7(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*m7
        res += ((12*SM.X(1,u,r,0,0)**4*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xm8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xm8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xm8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm8(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xm8(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm8(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*m8
        res += ((12*SM.X(1,u,r,0,0)**4*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xm9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xm9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xm9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xm9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xm9(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xm9(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xm9(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*m9
        res += 0*mupi**2
        res += ((-30*SM.X(1,u,r,0,0)**4*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**6+(36*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**5
        -(12*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4
        +(SM.X(4,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3+(48*SM.X(1,u,r,0,0)**3*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(36*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(18*SM.X(1,u,r,0,0)**2*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4+(6*SM.X(2,u,r,0,0)*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3
        -(18*SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.XG(1,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(8*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.XG(1,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XG(0,u,r,0,0)*SM.XG(4,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG**2
        res += ((6*SM.X(1,u,r,0,0)**4*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**5-(9*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(4*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)-(6*SM.X(1,u,r,0,0)**3*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(2*SM.X(3,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2+(3*SM.X(1,u,r,0,0)**2*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(2*SM.X(1,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2+SM.XG(4,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*muG*mupi

    if flagmb5 == 1:
        res += ((12*SM.X(1,u,r,0,0)**4*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr1(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr1(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr1(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr1(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr1(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r1
        res += ((12*SM.X(1,u,r,0,0)**4*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr2(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr2(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr2(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr2(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr2(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r2
        res += ((12*SM.X(1,u,r,0,0)**4*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr3(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr3(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr3(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr3(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr3(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r3
        res += ((12*SM.X(1,u,r,0,0)**4*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr4(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr4(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr4(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr4(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr4(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r4
        res += ((12*SM.X(1,u,r,0,0)**4*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr5(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr5(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr5(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr5(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr5(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r5
        res += ((12*SM.X(1,u,r,0,0)**4*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr6(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr6(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr6(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr6(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr6(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r6
        res += ((12*SM.X(1,u,r,0,0)**4*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr7(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr7(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr7(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr7(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr7(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r7
        res += ((12*SM.X(1,u,r,0,0)**4*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr8(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr8(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr8(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr8(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr8(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r8
        res += ((12*SM.X(1,u,r,0,0)**4*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr9(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr9(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr9(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr9(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr9(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r9
        res += ((12*SM.X(1,u,r,0,0)**4*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr10(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr10(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr10(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr10(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr10(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r10
        res += ((12*SM.X(1,u,r,0,0)**4*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr11(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr11(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr11(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr11(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr11(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr11(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr11(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r11
        res += ((12*SM.X(1,u,r,0,0)**4*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr12(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr12(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr12(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr12(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr12(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr12(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr12(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r12
        res += ((12*SM.X(1,u,r,0,0)**4*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr13(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr13(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr13(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr13(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr13(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr13(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr13(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r13
        res += ((12*SM.X(1,u,r,0,0)**4*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr14(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr14(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr14(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr14(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr14(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr14(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr14(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r14
        res += ((12*SM.X(1,u,r,0,0)**4*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr15(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr15(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr15(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr15(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr15(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr15(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr15(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r15
        res += ((12*SM.X(1,u,r,0,0)**4*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr16(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr16(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr16(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr16(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr16(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr16(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr16(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r16
        res += ((12*SM.X(1,u,r,0,0)**4*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr17(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr17(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr17(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr17(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr17(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr17(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr17(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r17
        res += ((12*SM.X(1,u,r,0,0)**4*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**5-(18*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*Xr18(0,Q2,r,0,0))/SM.X(0,u,r,0,0)**2-(12*SM.X(1,u,r,0,0)**3*Xr18(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*Xr18(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(3,u,r,0,0)*Xr18(1,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+(6*SM.X(1,u,r,0,0)**2*Xr18(2,Q2,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.X(1,u,r,0,0)*Xr18(3,Q2,r,0,0))/SM.X(0,u,r,0,0)**2+Xr18(4,Q2,r,0,0)/SM.X(0,u,r,0,0))*r18
        res += ((6*SM.X(1,u,r,0,0)**4*SM.XD(0,u,r,0,0,1))/SM.X(0,u,r,0,0)**5-(9*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,1))/SM.X(0,u,r,0,0)**4
        +(4*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,1))/SM.X(0,u,r,0,0)**3
        -(SM.X(4,u,r,0,0)*SM.XD(0,u,r,0,0,1))/(2*SM.X(0,u,r,0,0)**2)-(6*SM.X(1,u,r,0,0)**3*SM.XD(1,u,r,0,0,1))/SM.X(0,u,r,0,0)**4
        +(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,1))/SM.X(0,u,r,0,0)**3
        -(2*SM.X(3,u,r,0,0)*SM.XD(1,u,r,0,0,1))/SM.X(0,u,r,0,0)**2+(3*SM.X(1,u,r,0,0)**2*SM.XD(2,u,r,0,0,1))/SM.X(0,u,r,0,0)**3
        -(2*SM.X(1,u,r,0,0)*SM.XD(3,u,r,0,0,1))/SM.X(0,u,r,0,0)**2+SM.XD(4,u,r,0,0,1)/(2*SM.X(0,u,r,0,0)))*mupi*rhoD
        res += ((-60*SM.X(1,u,r,0,0)**4*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**6
        +(72*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(24*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(2*SM.X(4,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(48*SM.X(1,u,r,0,0)**3*SM.XD(1,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(36*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(3,u,r,0,0)*SM.XD(1,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(18*SM.X(1,u,r,0,0)**2*SM.XD(2,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(1,u,r,0,0)*SM.XD(3,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(SM.XD(4,u,r,0,0,1)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**2+(48*SM.X(1,u,r,0,0)**3*SM.XD(0,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**5
        -(36*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(8*SM.X(3,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(36*SM.X(1,u,r,0,0)**2*SM.XD(1,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(2,u,r,0,0)*SM.XD(1,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(12*SM.X(1,u,r,0,0)*SM.XD(2,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.XD(3,u,r,0,0,1)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2-(18*SM.X(1,u,r,0,0)**2*SM.XD(0,u,r,0,0,1)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**4
        +(12*SM.X(1,u,r,0,0)*SM.XD(1,u,r,0,0,1)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(8*SM.X(1,u,r,0,0)*SM.XD(0,u,r,0,0,1)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(4*SM.XD(1,u,r,0,0,1)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2-(SM.XD(0,u,r,0,0,1)*SM.XG(4,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoD
        res += ((-6*SM.X(1,u,r,0,0)**4*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**5+(9*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**4
        -(4*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(SM.X(4,u,r,0,0)*SM.XG(0,u,r,0,0))/(2*SM.X(0,u,r,0,0)**2)+(6*SM.X(1,u,r,0,0)**3*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        -(6*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(2*SM.X(3,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**2-(3*SM.X(1,u,r,0,0)**2*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(2*SM.X(1,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2-SM.XG(4,u,r,0,0)/(2*SM.X(0,u,r,0,0)))*mupi*rhoLS
        res += ((60*SM.X(1,u,r,0,0)**4*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**6-(72*SM.X(1,u,r,0,0)**2*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**5
        +(24*SM.X(1,u,r,0,0)*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4
        -(2*SM.X(4,u,r,0,0)*SM.XG(0,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3-(96*SM.X(1,u,r,0,0)**3*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**5
        +(72*SM.X(1,u,r,0,0)*SM.X(2,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**4
        -(16*SM.X(3,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(1,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(36*SM.X(1,u,r,0,0)**2*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**4-(12*SM.X(2,u,r,0,0)*SM.XG(1,u,r,0,0)**2)/SM.X(0,u,r,0,0)**3
        +(36*SM.X(1,u,r,0,0)**2*SM.XG(0,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**4
        -(24*SM.X(1,u,r,0,0)*SM.XG(1,u,r,0,0)*SM.XG(2,u,r,0,0))/SM.X(0,u,r,0,0)**3
        -(16*SM.X(1,u,r,0,0)*SM.XG(0,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**3
        +(8*SM.XG(1,u,r,0,0)*SM.XG(3,u,r,0,0))/SM.X(0,u,r,0,0)**2+(2*SM.XG(0,u,r,0,0)*SM.XG(4,u,r,0,0))/SM.X(0,u,r,0,0)**2)*muG*rhoLS
        
    return res*par.mbkin**8