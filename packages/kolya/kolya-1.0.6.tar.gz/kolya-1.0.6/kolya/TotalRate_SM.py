from scipy.special import spence
from kolya import parameters
from kolya import schemechange_KINMS as kin
import math

def Li2(x):
    return spence(1-x)

def X(r, dr):
    """ Tree level functions (partonic) for total rate and derivatives """
    logr = math.log(r)
    # tree level function
    if (dr == 0):
        return     (1-8*r**2-24*logr*r**4+8*r**6-r**8)
    if (dr == 1):
        return     (-16*r-24*r**3-96*logr*r**3+48*r**5-8*r**7)
    if (dr == 2):
        return     (-16-168*r**2-288*logr*r**2+240*r**4-56*r**6)
    if (dr == 3):
        return     (-624*r-576*logr*r+960*r**3-336*r**5)
    return 0. 

def XG(r, dr):
    """ Tree level functions (muG) for total rate and derivatives """
    logr = math.log(r)
    # tree level function
    if (dr == 0):
        return     (-12*logr*r**4-((-1+r)*(1+r)*(-3+5*r**2-19*r**4+5*r**6))/2)
    if (dr == 1):
        return     (-48*logr*r**3-4*(-1+r)*r*(1+r)*(2-13*r**2+5*r**4))
    if (dr == 2):
        return     (-144*logr*r**2-4*(-1+r)*(1+r)*(2-55*r**2+35*r**4))
    if (dr == 3):
        return     (-288*logr*r-120*(-1+r)*r*(1+r)*(-5+7*r**2))
    return 0. 

def XD(r, dr, isPERP):
    """ Tree level functions (rhoD) for total rate and derivatives """
    logr = math.log(r)
    # tree level function
    if (dr == 0):
        return     ((-2*(-1+r)*(1+r)*(1+r**2)*(17-16*r**2+5*r**4))/3+logr*(16+12*isPERP*r**4)
            +(isPERP*(-1+r)*(1+r)*(-3+5*r**2-19*r**4+5*r**6))/2)
    if (dr == 1):
        return     (48*isPERP*logr*r**3-(16*(-1+r)**3*(1+r)**3*(3+5*r**2))/(3*r)+4*isPERP*(
            -1+r)*r*(1+r)*(2-13*r**2+5*r**4))
    if (dr == 2):
        return     (144*isPERP*logr*r**2+4*isPERP*(-1+r)*(1+r)*(2-55*r**2+35*r**4)-(16*(
            -1+r)**2*(1+r)**2*(3+10*r**2+35*r**4))/(3*r**2))
    if (dr == 3):
        return     (288*isPERP*logr*r+120*isPERP*(-1+r)*r*(1+r)*(-5+7*r**2)-(32*(-1
            +r)*(1+r)*(1+r**2-5*r**4+35*r**6))/r**3)
    return 0. 

def X1(r, dr):
    """ NLO functions (partonic) for total rate and derivatives """
    logr = math.log(r)
    if (dr == 0):
        return     (25/6-(478*r**2)/9+(478*r**6)/9-(25*r**8)/6+math.pi**2*(-2/3+(64*r**3)/3
            -(32*r**4)/3+(64*r**5)/3-(2*r**8)/3)+(8+(256*r**3)/3+128*r**4+(256*r**5)/3
            +8*r**8)*Li2(-r)+(8-(256*r**3)/3+128*r**4-(256*r**5)/3+8*r**8)*Li2(r)
            +(-96*r**4-(8*r**8)/3)*math.log(r)**2+math.log(1-r)*(-34/9+(128*r**2)/9-(128*r**6)/9
            +(34*r**8)/9+(16/3-(256*r**3)/3+160*r**4-(256*r**5)/3+(16*r**8)/3)*math.log(r))
            +(-34/9+(128*r**2)/9-(128*r**6)/9+(34*r**8)/9)*math.log(1+r)+math.log(r)*((
            -80*r**2)/3-120*r**4+(16*r**6)/9-(68*r**8)/9+(16/3+(256*r**3)/3+160*r**4
            +(256*r**5)/3+(16*r**8)/3)*math.log(1+r)))
    if (dr == 1):
        return     (34/(9*(1-r))-(1196*r)/9-(128*r**2)/(9*(1-r))-120*r**3+(2884*r**5)/9
            +(128*r**6)/(9*(1-r))-(368*r**7)/9-(34*r**8)/(9*(1-r))+math.pi**2*(64*r**2
            -(128*r**3)/3+(320*r**4)/3-(16*r**7)/3)+(-34/9+(128*r**2)/9-(128*r**6)/9
            +(34*r**8)/9)/(1+r)+(256*r**2+512*r**3+(1280*r**4)/3+64*r**7)*Li2(
            -r)+(-256*r**2+512*r**3-(1280*r**4)/3+64*r**7)*Li2(r)+(-384*r**3-(64*r**7)/3)*math.log(r)**2
            +math.log(1-r)*((256*r)/9-(256*r**5)/3+(272*r**7)/9+(16/3-(256*r**3)/3
            +160*r**4-(256*r**5)/3+(16*r**8)/3)/r-(8-(256*r**3)/3+128*r**4-(256*r**5)/3
            +8*r**8)/r+(-256*r**2+640*r**3-(1280*r**4)/3+(128*r**7)/3)*math.log(r))+((256*r)/9
            -(256*r**5)/3+(272*r**7)/9+(16/3+(256*r**3)/3+160*r**4+(256*r**5)/3
            +(16*r**8)/3)/r-(8+(256*r**3)/3+128*r**4+(256*r**5)/3+8*r**8)/r)*math.log(1
            +r)+math.log(r)*((-160*r)/3-480*r**3+(32*r**5)/3-(544*r**7)/9+(2*(-96*r**4
            -(8*r**8)/3))/r-(16/3-(256*r**3)/3+160*r**4-(256*r**5)/3+(16*r**8)/3)/(1
            -r)+(16/3+(256*r**3)/3+160*r**4+(256*r**5)/3+(16*r**8)/3)/(1+r)
            +(256*r**2+640*r**3+(1280*r**4)/3+(128*r**7)/3)*math.log(1+r)))
    if (dr == 2):
        return     (-1676/9+34/(9*(1-r)**2)-(512*r)/(9*(1-r))-840*r**2-(128*r**2)/(9*(1
            -r)**2)+(14516*r**4)/9+(512*r**5)/(3*(1-r))-(1040*r**6)/3+(128*r**6)/(9*(1
            -r)**2)-(544*r**7)/(9*(1-r))-(34*r**8)/(9*(1-r)**2)+math.pi**2*(128*r-128*r**2
            +(1280*r**3)/3-(112*r**6)/3)+(2*((256*r)/9-(256*r**5)/3+(272*r**7)/9))/(1
            +r)+(2*(-96*r**4-(8*r**8)/3))/r**2-(-34/9+(128*r**2)/9-(128*r**6)/9
            +(34*r**8)/9)/(1+r)**2-(2*(16/3-(256*r**3)/3+160*r**4-(256*r**5)/3
            +(16*r**8)/3))/((1-r)*r)+(2*(16/3+(256*r**3)/3+160*r**4+(256*r**5)/3
            +(16*r**8)/3))/(r*(1+r))+(8-(256*r**3)/3+128*r**4-(256*r**5)/3+8*r**8)/((1
            -r)*r)-(8+(256*r**3)/3+128*r**4+(256*r**5)/3+8*r**8)/(r*(1+r))
            +(512*r+1536*r**2+(5120*r**3)/3+448*r**6)*Li2(-r)+(-512*r+1536*r**2
            -(5120*r**3)/3+448*r**6)*Li2(r)+(-1152*r**2-(448*r**6)/3)*math.log(r)**2+math.log(1
            -r)*(256/9-(1280*r**4)/3+(1904*r**6)/9+(2*(-256*r**2+640*r**3-(1280*r**4)/3
            +(128*r**7)/3))/r-(2*(-256*r**2+512*r**3-(1280*r**4)/3+64*r**7))/r-(16/3
            -(256*r**3)/3+160*r**4-(256*r**5)/3+(16*r**8)/3)/r**2+(8-(256*r**3)/3
            +128*r**4-(256*r**5)/3+8*r**8)/r**2+(-512*r+1920*r**2-(5120*r**3)/3
            +(896*r**6)/3)*math.log(r))+(256/9-(1280*r**4)/3+(1904*r**6)/9+(2*(256*r**2
            +640*r**3+(1280*r**4)/3+(128*r**7)/3))/r-(2*(256*r**2+512*r**3+(1280*r**4)/3
            +64*r**7))/r-(16/3+(256*r**3)/3+160*r**4+(256*r**5)/3+(16*r**8)/3)/r**2
            +(8+(256*r**3)/3+128*r**4+(256*r**5)/3+8*r**8)/r**2)*math.log(1+r)+math.log(r)*(
            -160/3-1440*r**2+(160*r**4)/3-(3808*r**6)/9+(4*(-384*r**3-(64*r**7)/3))/r
            -(2*(-256*r**2+640*r**3-(1280*r**4)/3+(128*r**7)/3))/(1-r)+(2*(256*r**2
            +640*r**3+(1280*r**4)/3+(128*r**7)/3))/(1+r)-(2*(-96*r**4-(8*r**8)/3))/r**2
            -(16/3-(256*r**3)/3+160*r**4-(256*r**5)/3+(16*r**8)/3)/(1-r)**2-(16/3
            +(256*r**3)/3+160*r**4+(256*r**5)/3+(16*r**8)/3)/(1+r)**2+(512*r+1920*r**2
            +(5120*r**3)/3+(896*r**6)/3)*math.log(1+r)))
    return 0. 

def X2(r, dr):
    """ NNLO functions (partonic) for total rate and derivatives """
    delta= 1-r
    l2d = math.log(2*(1-r))
    if (dr == 0):
        return     (-31.304544559794717*delta**5+22.423483506358757*delta**6+delta**7*(-126.15456386310827
            +97.95543869372251*l2d-14.628571428571428*l2d**2)+delta**46*(-0.5468071513921333
            +0.5099813373675683*l2d+0.3314917829905141*l2d**2)+delta**45*(-0.5560423981170817
            +0.5207567943458243*l2d+0.3353866049134796*l2d**2)+delta**44*(-0.5656221037319299
            +0.5319962618202501*l2d+0.33937820916059513*l2d**2)+delta**43*(-0.5755656944809211
            +0.543730077804693*l2d+0.34346948980995756*l2d**2)+delta**42*(-0.5858940102349082
            +0.5559912521278733*l2d+0.3476633259096342*l2d**2)+delta**41*(-0.5966294223216257
            +0.5688157632094126*l2d+0.35196254918159636*l2d**2)+delta**40*(-0.6077959606146239
            +0.5822428946696759*l2d+0.35636990274735403*l2d**2)+delta**39*(-0.6194194500867753
            +0.5963156180231775*l2d+0.36088798857537063*l2d**2)+delta**38*(-0.6315276566015438
            +0.6110810288137252*l2d+0.36551920073180827*l2d**2)+delta**37*(-0.6441504413300698
            +0.6265908448693229*l2d+0.3702656407178875*l2d**2)+delta**36*(-0.6573199225067877
            +0.642901976924701*l2d+0.3751290101424867*l2d**2)+delta**35*(-0.6710706420911624
            +0.6600771837213165*l2d+0.38011047463173675*l2d**2)+delta**34*(-0.6854397335392193
            +0.6781858258913235*l2d+0.3852104911163036*l2d**2)+delta**33*(-0.7004670844768431
            +0.6973047354995994*l2d+0.39042858832428445*l2d**2)+delta**10*(-2.8459604092188178
            +2.497865353377326*l2d+0.39380756417793455*l2d**2)+delta**32*(-0.7161954847901135
            +0.717519221072292*l2d+0.3957630872570475*l2d**2)+delta**31*(-0.7326707456271307
            +0.7389242312504076*l2d+0.4012107443846313*l2d**2)+delta**30*(-0.7499417671959044
            +0.7616257037433456*l2d+0.4067662949240013*l2d**2)+delta**29*(-0.7680605217298317
            +0.7857421296973706*l2d+0.4124218663930932*l2d**2)+delta**28*(-0.7870819000663646
            +0.8114063662446025*l2d+0.4181662230380994*l2d**2)+delta**27*(-0.8070633421027162
            +0.8387677304669342*l2d+0.4239837888672849*l2d**2)+delta**26*(-0.8280641261234
            +0.8679944035963186*l2d+0.4298533797718298*l2d**2)+delta**25*(-0.8501441177624249
            +0.8992761598450709*l2d+0.4357465521150865*l2d**2)+delta**11*(-1.3791969604027359
            +1.8345189306209948*l2d+0.4367911923467479*l2d**2)+delta**24*(-0.8733616548840182
            +0.9328274001831656*l2d+0.441625444388589*l2d**2)+delta**23*(-0.897770031086466
            +0.9688903997774685*l2d+0.4474399478663152*l2d**2)+delta**22*(-0.9234116656043205
            +1.007738536039982*l2d+0.45312398921315394*l2d**2)+delta**12*(-1.206445998288065
            +1.6452579663464346*l2d+0.4582830064311546*l2d**2)+delta**21*(-0.9503083753565704
            +1.0496789945264111*l2d+0.45859064034365343*l2d**2)+delta**20*(-0.978444941379166
            +1.0950539570286453*l2d+0.4637256862059064*l2d**2)+delta**19*(-1.0077409238777335
            +1.1442384314850584*l2d+0.46837917502880566*l2d**2)+delta**13*(-1.1759332884572475
            +1.5433130244443731*l2d+0.4692148455111418*l2d**2)+delta**18*(-1.0380016750766337
            +1.1976316392979025*l2d+0.4723543264035016*l2d**2)+delta**14*(-1.1545247244956145
            +1.461158634517186*l2d+0.4748666970889193*l2d**2)+delta**17*(-1.0688329918364128
            +1.2556379123964163*l2d+0.47539287423507776*l2d**2)+delta**16*(-1.099497081375394
            +1.3186368166750313*l2d+0.47715499863648014*l2d**2)+delta**15*(-1.1287039890552406
            +1.3869728485888255*l2d+0.47718843570695424*l2d**2)+delta**9*(-5.4489754559763846
            +1.7048038010129316*l2d+0.7876151283558691*l2d**2)+delta**8*(90.05868625209735
            -51.14491511405702*l2d+7.314285714285714*l2d**2))
    if (dr == 1):
        return     (156.52272279897358*delta**4-134.54090103815253*delta**5+delta**7*(-669.3245749027218
            +394.53074948388473*l2d-58.51428571428571*l2d**2)+delta**45*(24.643147626670565
            -24.122125084889174*l2d-15.248622017563648*l2d**2)+delta**44*(24.50115112092285
            -24.104828955389053*l2d-15.092397221106584*l2d**2)+delta**43*(24.35537630238467
            -24.08659193841219*l2d-14.932641203066186*l2d**2)+delta**42*(24.205594784874915
            -24.06733232522171*l2d-14.769188061828174*l2d**2)+delta**41*(24.051557177738268
            -24.046959241189946*l2d-14.60185968820464*l2d**2)+delta**40*(23.892990551977242
            -24.02537138994911*l2d-14.43046451644545*l2d**2)+delta**39*(23.72959552991528
            -24.002455592281745*l2d-14.254796109894162*l2d**2)+delta**38*(23.561042935361055
            -23.97808508005466*l2d-14.074631554439454*l2d**2)+delta**37*(23.38696992204494
            -23.952117496385174*l2d-13.889729627808714*l2d**2)+delta**36*(23.20697548434326
            -23.924392541600724*l2d-13.699828706561835*l2d**2)+delta**35*(23.020615233319667
            -23.89472918957421*l2d-13.504644365129522*l2d**2)+delta**34*(22.827395289469376
            -23.862922379509552*l2d-13.303866612110784*l2d**2)+delta**33*(22.626765114442133
            -23.828739062537608*l2d-13.097156697954324*l2d**2)+delta**32*(22.418109052236225
            -23.79191344813535*l2d-12.884143414701386*l2d**2)+delta**31*(22.200736292211346
            -23.752141248827442*l2d-12.66441879222552*l2d**2)+delta**30*(21.97386888319064
            -23.709072657531898*l2d-12.43753307592357*l2d**2)+delta**29*(21.736627312133795
            -23.66230370214837*l2d-12.20298884772004*l2d**2)+delta**28*(21.488013000467745
            -23.61136549400993*l2d-11.960234125399703*l2d**2)+delta**27*(21.226886835613605
            -23.55571070092507*l2d-11.708654245066784*l2d**2)+delta**26*(20.951942506306406
            -23.494696300341793*l2d-11.447562299416692*l2d**2)+delta**25*(20.661672875612073
            -23.427561253047944*l2d-11.176187874067576*l2d**2)+delta**24*(20.35432678421555
            -23.353397100356947*l2d-10.893663802877162*l2d**2)+delta**23*(20.027852317033272
            -23.271108493173152*l2d-10.599010665326135*l2d**2)+delta**22*(19.67982031521126
            -23.179359090614405*l2d-10.29111880092525*l2d**2)+delta**21*(19.307318107255067
            -23.07649577130591*l2d-9.968727762689387*l2d**2)+delta**20*(18.906796887961555
            -22.96044016574194*l2d-9.630403447216722*l2d**2)+delta**19*(18.473844870554665
            -22.828530512984717*l2d-9.274513724118128*l2d**2)+delta**18*(18.00283912219188
            -22.677288548273722*l2d-8.899204325547307*l2d**2)+delta**17*(17.486398512081493
            -22.502078160169248*l2d-8.50237787526303*l2d**2)+delta**16*(16.9145229488226
            -22.296630259209234*l2d-8.081678861996322*l2d**2)+delta**15*(16.27331648533127
            -22.052499064073462*l2d-7.634479978183682*l2d**2)+delta**14*(15.543586987239774
            -21.758969600246292*l2d-7.157826535604314*l2d**2)+delta**8*(47.33597530277454
            -16.918464465828123*l2d-7.088536155202822*l2d**2)+delta**13*(14.702187508421416
            -21.40595427741844*l2d-6.64813375924487*l2d**2)+delta**12*(13.743819725499849
            -21.001499008799133*l2d-6.0997929916448435*l2d**2)+delta**11*(12.83209401311035
            -20.659661609019523*l2d-5.499396077173855*l2d**2)+delta**10*(13.336647633809113
            -21.05329062152444*l2d-4.804703115814227*l2d**2)+delta**9*(25.96173873881085
            -25.766268662129132*l2d-3.9380756417793457*l2d**2)+delta**6*(785.1265083480355
            -656.4309279989147*l2d+102.4*l2d**2))
    return 0. 

def X3(r, dr):
    """ N3LO functions (partonic) for total rate and derivatives """
    delta= 1-r
    l2d = math.log(2*(1-r))
    if (dr == 0):
        return     (-189.46719242252396*delta**5+133.2667011545735*delta**6+delta**8*(1505.9845674871624
            -992.1378068600917*l2d+250.31719737833598*l2d**2-21.942857142857143*l2d**3)
            +delta**9*(-60.98389591200498-14.344319046708382*l2d+34.170797437678814*l2d**2
            -5.37283950617284*l2d**3)+delta**10*(-26.45004958814627+27.349598659737936*l2d
            +12.858029197642725*l2d**2-2.68641975308642*l2d**3)+delta**11*(-13.162211874760033
            +20.785362768345564*l2d+12.698344747323125*l2d**2-2.301137971919865*l2d**3)
            +delta**12*(-12.728237202012679+18.962074365736513*l2d+12.859920266132507*l2d**2
            -2.1084970813365875*l2d**3)+delta**7*(-2132.031333174604+1804.4323832925745*l2d
            -481.12963285191*l2d**2+43.885714285714286*l2d**3))
    return 0. 

def XG1(r, dr):
    """ NLO functions (muG) for total rate and derivatives """
    logr = math.log(r)
    if (dr == 0):
        return     (-127/108+(9997*r**2)/648+(4793*r**4)/648-(5999*r**6)/216+(49*r**8)/8
            +math.pi**2*(19/54-(28*r)/9+(5*r**2)/3-(140*r**3)/27+(4*r**4)/3-(275*r**6)/54
            +(5*r**8)/3)+(-38/9-(112*r)/9-20*r**2-(560*r**3)/27-16*r**4+(550*r**6)/9
            -20*r**8)*Li2(-r)+(-38/9+(112*r)/9-20*r**2+(560*r**3)/27-16*r**4
            +(550*r**6)/9-20*r**8)*Li2(r)+((14*r**2)/3+(278*r**4)/9-(538*r**6)/27
            +(20*r**8)/3)*math.log(r)**2+math.log(1-r)*(-79/324+61/(108*r**2)+(50*r**2)/9
            -(976*r**4)/27+(11905*r**6)/324-(233*r**8)/36+(-70/27+(112*r)/9-10*r**2
            +(560*r**3)/27-(430*r**4)/9+(1094*r**6)/27-(40*r**8)/3)*math.log(r))+(-79/324
            +61/(108*r**2)+(50*r**2)/9-(976*r**4)/27+(11905*r**6)/324-(233*r**8)/36)*math.log(1
            +r)+math.log(r)*((179*r**2)/27+(1678*r**4)/27-(9493*r**6)/162+(233*r**8)/18
            +(-70/27-(112*r)/9-10*r**2-(560*r**3)/27-(430*r**4)/9+(1094*r**6)/27
            -(40*r**8)/3)*math.log(1+r)))
    if (dr == 1):
        return     (79/(324*(1-r))-61/(108*(1-r)*r**2)+(12145*r)/324-(50*r**2)/(9*(1
            -r))+(14861*r**3)/162+(976*r**4)/(27*(1-r))-(72977*r**5)/324-(11905*r**6)/(324*(1
            -r))+(1115*r**7)/18+(233*r**8)/(36*(1-r))+math.pi**2*(-28/9+(10*r)/3
            -(140*r**2)/9+(16*r**3)/3-(275*r**5)/9+(40*r**7)/3)+(-79/324+61/(108*r**2)
            +(50*r**2)/9-(976*r**4)/27+(11905*r**6)/324-(233*r**8)/36)/(1+r)+(
            -112/9-40*r-(560*r**2)/9-64*r**3+(1100*r**5)/3-160*r**7)*Li2(-r)+(112/9
            -40*r+(560*r**2)/9-64*r**3+(1100*r**5)/3-160*r**7)*Li2(r)+((28*r)/3
            +(1112*r**3)/9-(1076*r**5)/9+(160*r**7)/3)*math.log(r)**2+math.log(1-r)*(-61/(54*r**3)
            +(100*r)/9-(3904*r**3)/27+(11905*r**5)/54-(466*r**7)/9-(-38/9+(112*r)/9
            -20*r**2+(560*r**3)/27-16*r**4+(550*r**6)/9-20*r**8)/r+(-70/27+(112*r)/9
            -10*r**2+(560*r**3)/27-(430*r**4)/9+(1094*r**6)/27-(40*r**8)/3)/r+(112/9
            -20*r+(560*r**2)/9-(1720*r**3)/9+(2188*r**5)/9-(320*r**7)/3)*math.log(r))
            +(-61/(54*r**3)+(100*r)/9-(3904*r**3)/27+(11905*r**5)/54-(466*r**7)/9
            -(-38/9-(112*r)/9-20*r**2-(560*r**3)/27-16*r**4+(550*r**6)/9-20*r**8)/r
            +(-70/27-(112*r)/9-10*r**2-(560*r**3)/27-(430*r**4)/9+(1094*r**6)/27
            -(40*r**8)/3)/r)*math.log(1+r)+math.log(r)*((358*r)/27+(6712*r**3)/27-(9493*r**5)/27
            +(932*r**7)/9+(-70/27-(112*r)/9-10*r**2-(560*r**3)/27-(430*r**4)/9
            +(1094*r**6)/27-(40*r**8)/3)/(1+r)-(-70/27+(112*r)/9-10*r**2+(560*r**3)/27
            -(430*r**4)/9+(1094*r**6)/27-(40*r**8)/3)/(1-r)+(2*((14*r**2)/3+(278*r**4)/9
            -(538*r**6)/27+(20*r**8)/3))/r+(-112/9-20*r-(560*r**2)/9-(1720*r**3)/9
            +(2188*r**5)/9-(320*r**7)/3)*math.log(1+r)))
    if (dr == 2):
        return     (16441/324+79/(324*(1-r)**2)+61/(27*(1-r)*r**3)-61/(108*(1-r)**2*r**2)
            -(200*r)/(9*(1-r))+(28285*r**2)/54-(50*r**2)/(9*(1-r)**2)+(7808*r**3)/(27*(1
            -r))-(478801*r**4)/324+(976*r**4)/(27*(1-r)**2)-(11905*r**5)/(27*(1
            -r))+(3223*r**6)/6-(11905*r**6)/(324*(1-r)**2)+(932*r**7)/(9*(1-r))
            +(233*r**8)/(36*(1-r)**2)+math.pi**2*(10/3-(280*r)/9+16*r**2-(1375*r**4)/9
            +(280*r**6)/3)+(2*(-61/(54*r**3)+(100*r)/9-(3904*r**3)/27+(11905*r**5)/54
            -(466*r**7)/9))/(1+r)-(-38/9-(112*r)/9-20*r**2-(560*r**3)/27-16*r**4
            +(550*r**6)/9-20*r**8)/(r*(1+r))+(-38/9+(112*r)/9-20*r**2+(560*r**3)/27
            -16*r**4+(550*r**6)/9-20*r**8)/((1-r)*r)+(2*(-70/27-(112*r)/9-10*r**2
            -(560*r**3)/27-(430*r**4)/9+(1094*r**6)/27-(40*r**8)/3))/(r*(1+r))
            -(2*(-70/27+(112*r)/9-10*r**2+(560*r**3)/27-(430*r**4)/9+(1094*r**6)/27
            -(40*r**8)/3))/((1-r)*r)-(-79/324+61/(108*r**2)+(50*r**2)/9-(976*r**4)/27
            +(11905*r**6)/324-(233*r**8)/36)/(1+r)**2+(2*((14*r**2)/3+(278*r**4)/9
            -(538*r**6)/27+(20*r**8)/3))/r**2+(-40-(1120*r)/9-192*r**2+(5500*r**4)/3
            -1120*r**6)*Li2(-r)+(-40+(1120*r)/9-192*r**2+(5500*r**4)/3-1120*r**6)*Li2(r)
            +(28/3+(1112*r**2)/3-(5380*r**4)/9+(1120*r**6)/3)*math.log(r)**2+math.log(1-r)*(100/9
            +61/(18*r**4)-(3904*r**2)/9+(59525*r**4)/54-(3262*r**6)/9-(2*(112/9
            -40*r+(560*r**2)/9-64*r**3+(1100*r**5)/3-160*r**7))/r+(2*(112/9-20*r
            +(560*r**2)/9-(1720*r**3)/9+(2188*r**5)/9-(320*r**7)/3))/r+(-38/9+(112*r)/9
            -20*r**2+(560*r**3)/27-16*r**4+(550*r**6)/9-20*r**8)/r**2-(-70/27+(112*r)/9
            -10*r**2+(560*r**3)/27-(430*r**4)/9+(1094*r**6)/27-(40*r**8)/3)/r**2
            +(-20+(1120*r)/9-(1720*r**2)/3+(10940*r**4)/9-(2240*r**6)/3)*math.log(r))
            +(100/9+61/(18*r**4)-(3904*r**2)/9+(59525*r**4)/54-(3262*r**6)/9-(2*(
            -112/9-40*r-(560*r**2)/9-64*r**3+(1100*r**5)/3-160*r**7))/r+(2*(
            -112/9-20*r-(560*r**2)/9-(1720*r**3)/9+(2188*r**5)/9-(320*r**7)/3))/r
            +(-38/9-(112*r)/9-20*r**2-(560*r**3)/27-16*r**4+(550*r**6)/9-20*r**8)/r**2
            -(-70/27-(112*r)/9-10*r**2-(560*r**3)/27-(430*r**4)/9+(1094*r**6)/27
            -(40*r**8)/3)/r**2)*math.log(1+r)+math.log(r)*(358/27+(6712*r**2)/9-(47465*r**4)/27
            +(6524*r**6)/9+(2*(-112/9-20*r-(560*r**2)/9-(1720*r**3)/9+(2188*r**5)/9
            -(320*r**7)/3))/(1+r)-(2*(112/9-20*r+(560*r**2)/9-(1720*r**3)/9
            +(2188*r**5)/9-(320*r**7)/3))/(1-r)+(4*((28*r)/3+(1112*r**3)/9-(1076*r**5)/9
            +(160*r**7)/3))/r-(-70/27-(112*r)/9-10*r**2-(560*r**3)/27-(430*r**4)/9
            +(1094*r**6)/27-(40*r**8)/3)/(1+r)**2-(-70/27+(112*r)/9-10*r**2+(560*r**3)/27
            -(430*r**4)/9+(1094*r**6)/27-(40*r**8)/3)/(1-r)**2-(2*((14*r**2)/3+(278*r**4)/9
            -(538*r**6)/27+(20*r**8)/3))/r**2+(-20-(1120*r)/9-(1720*r**2)/3+(10940*r**4)/9
            -(2240*r**6)/3)*math.log(1+r)))
    return 0. 

def XD1(r, dr):
    """ NLO functions (rhoD) for total rate and derivatives """
    logr = math.log(r)
    if (dr == 0):
        return     (-6325/216+371/(108*r**2)+(21461*r**2)/216-(16367*r**4)/648-(32209*r**6)/648
            +(157*r**8)/108+math.pi**2*(13/27-(101*r)/54-(94*r**2)/27-(481*r**3)/27
            +(607*r**4)/54-(51*r**5)/2+(191*r**6)/54-(5*r**8)/9)+(-52/9-(202*r)/27
            +(376*r**2)/9-(1924*r**3)/27-(1214*r**4)/9-102*r**5-(382*r**6)/9+(20*r**8)/3)*Li2(
            -r)+(-52/9+(202*r)/27+(376*r**2)/9+(1924*r**3)/27-(1214*r**4)/9+102*r**5
            -(382*r**6)/9+(20*r**8)/3)*Li2(r)+(-26-(142*r**2)/9+(2414*r**4)/27
            +(370*r**6)/27-(20*r**8)/9)*math.log(r)**2+math.log(1-r)*(709/81+371/(108*r**4)
            -4271/(324*r**2)-(637*r**2)/27+(11795*r**4)/324-(4789*r**6)/324+(80*r**8)/27
            +(-506/27+(202*r)/27+(202*r**2)/9+(1924*r**3)/27-(4342*r**4)/27+102*r**5
            -(758*r**6)/27+(40*r**8)/9)*math.log(r))+(709/81+371/(108*r**4)-4271/(324*r**2)
            -(637*r**2)/27+(11795*r**4)/324-(4789*r**6)/324+(80*r**8)/27)*math.log(1+r)
            +math.log(r)*(-1199/27+(1183*r**2)/27+(16093*r**4)/162+(9217*r**6)/162-(160*r**8)/27
            +(-506/27-(202*r)/27+(202*r**2)/9-(1924*r**3)/27-(4342*r**4)/27-102*r**5
            -(758*r**6)/27+(40*r**8)/9)*math.log(1+r)))
    if (dr == 1):
        return     (-709/(81*(1-r))-371/(108*(1-r)*r**4)-371/(54*r**3)+4271/(324*(1
            -r)*r**2)-1199/(27*r)+(8731*r)/36+(637*r**2)/(27*(1-r))-(137*r**3)/81
            -(11795*r**4)/(324*(1-r))-(78193*r**5)/324+(4789*r**6)/(324*(1-r))
            +(154*r**7)/27-(80*r**8)/(27*(1-r))+math.pi**2*(-101/54-(188*r)/27-(481*r**2)/9
            +(1214*r**3)/27-(255*r**4)/2+(191*r**5)/9-(40*r**7)/9)+(709/81+371/(108*r**4)
            -4271/(324*r**2)-(637*r**2)/27+(11795*r**4)/324-(4789*r**6)/324+(80*r**8)/27)/(1
            +r)+(-202/27+(752*r)/9-(1924*r**2)/9-(4856*r**3)/9-510*r**4-(764*r**5)/3
            +(160*r**7)/3)*Li2(-r)+(202/27+(752*r)/9+(1924*r**2)/9-(4856*r**3)/9
            +510*r**4-(764*r**5)/3+(160*r**7)/3)*Li2(r)+((-284*r)/9+(9656*r**3)/27
            +(740*r**5)/9-(160*r**7)/9)*math.log(r)**2+math.log(1-r)*(-371/(27*r**5)+4271/(162*r**3)
            -(1274*r)/27+(11795*r**3)/81-(4789*r**5)/54+(640*r**7)/27+(-506/27
            +(202*r)/27+(202*r**2)/9+(1924*r**3)/27-(4342*r**4)/27+102*r**5-(758*r**6)/27
            +(40*r**8)/9)/r-(-52/9+(202*r)/27+(376*r**2)/9+(1924*r**3)/27-(1214*r**4)/9
            +102*r**5-(382*r**6)/9+(20*r**8)/3)/r+(202/27+(404*r)/9+(1924*r**2)/9
            -(17368*r**3)/27+510*r**4-(1516*r**5)/9+(320*r**7)/9)*math.log(r))+(-371/(27*r**5)
            +4271/(162*r**3)-(1274*r)/27+(11795*r**3)/81-(4789*r**5)/54+(640*r**7)/27
            +(-506/27-(202*r)/27+(202*r**2)/9-(1924*r**3)/27-(4342*r**4)/27-102*r**5
            -(758*r**6)/27+(40*r**8)/9)/r-(-52/9-(202*r)/27+(376*r**2)/9-(1924*r**3)/27
            -(1214*r**4)/9-102*r**5-(382*r**6)/9+(20*r**8)/3)/r)*math.log(1+r)+math.log(r)*((2366*r)/27
            +(32186*r**3)/81+(9217*r**5)/27-(1280*r**7)/27+(2*(-26-(142*r**2)/9
            +(2414*r**4)/27+(370*r**6)/27-(20*r**8)/9))/r+(-506/27-(202*r)/27
            +(202*r**2)/9-(1924*r**3)/27-(4342*r**4)/27-102*r**5-(758*r**6)/27+(40*r**8)/9)/(1
            +r)-(-506/27+(202*r)/27+(202*r**2)/9+(1924*r**3)/27-(4342*r**4)/27
            +102*r**5-(758*r**6)/27+(40*r**8)/9)/(1-r)+(-202/27+(404*r)/9-(1924*r**2)/9
            -(17368*r**3)/27-510*r**4-(1516*r**5)/9+(320*r**7)/9)*math.log(1+r)))
    if (dr == 2):
        return     (35657/108-709/(81*(1-r)**2)+742/(27*(1-r)*r**5)+371/(18*r**4)-371/(108*(1
            -r)**2*r**4)-4271/(81*(1-r)*r**3)+1199/(27*r**2)+4271/(324*(1-r)**2*r**2)
            +(2548*r)/(27*(1-r))+(31775*r**2)/81+(637*r**2)/(27*(1-r)**2)-(23590*r**3)/(81*(1
            -r))-(280361*r**4)/324-(11795*r**4)/(324*(1-r)**2)+(4789*r**5)/(27*(1
            -r))-(202*r**6)/27+(4789*r**6)/(324*(1-r)**2)-(1280*r**7)/(27*(1-r))
            -(80*r**8)/(27*(1-r)**2)+math.pi**2*(-188/27-(962*r)/9+(1214*r**2)/9-510*r**3
            +(955*r**4)/9-(280*r**6)/9)+(2*(-371/(27*r**5)+4271/(162*r**3)-(1274*r)/27
            +(11795*r**3)/81-(4789*r**5)/54+(640*r**7)/27))/(1+r)+(2*(-26-(142*r**2)/9
            +(2414*r**4)/27+(370*r**6)/27-(20*r**8)/9))/r**2-(709/81+371/(108*r**4)
            -4271/(324*r**2)-(637*r**2)/27+(11795*r**4)/324-(4789*r**6)/324+(80*r**8)/27)/(1
            +r)**2+(2*(-506/27-(202*r)/27+(202*r**2)/9-(1924*r**3)/27-(4342*r**4)/27
            -102*r**5-(758*r**6)/27+(40*r**8)/9))/(r*(1+r))-(2*(-506/27+(202*r)/27
            +(202*r**2)/9+(1924*r**3)/27-(4342*r**4)/27+102*r**5-(758*r**6)/27+(40*r**8)/9))/((1
            -r)*r)-(-52/9-(202*r)/27+(376*r**2)/9-(1924*r**3)/27-(1214*r**4)/9
            -102*r**5-(382*r**6)/9+(20*r**8)/3)/(r*(1+r))+(-52/9+(202*r)/27
            +(376*r**2)/9+(1924*r**3)/27-(1214*r**4)/9+102*r**5-(382*r**6)/9+(20*r**8)/3)/((1
            -r)*r)+(752/9-(3848*r)/9-(4856*r**2)/3-2040*r**3-(3820*r**4)/3+(1120*r**6)/3)*Li2(
            -r)+(752/9+(3848*r)/9-(4856*r**2)/3+2040*r**3-(3820*r**4)/3+(1120*r**6)/3)*Li2(r)
            +(-284/9+(9656*r**2)/9+(3700*r**4)/9-(1120*r**6)/9)*math.log(r)**2+math.log(1
            -r)*(-1274/27+1855/(27*r**6)-4271/(54*r**4)+(11795*r**2)/27-(23945*r**4)/54
            +(4480*r**6)/27+(2*(202/27+(404*r)/9+(1924*r**2)/9-(17368*r**3)/27
            +510*r**4-(1516*r**5)/9+(320*r**7)/9))/r-(2*(202/27+(752*r)/9+(1924*r**2)/9
            -(4856*r**3)/9+510*r**4-(764*r**5)/3+(160*r**7)/3))/r-(-506/27+(202*r)/27
            +(202*r**2)/9+(1924*r**3)/27-(4342*r**4)/27+102*r**5-(758*r**6)/27+(40*r**8)/9)/r**2
            +(-52/9+(202*r)/27+(376*r**2)/9+(1924*r**3)/27-(1214*r**4)/9+102*r**5
            -(382*r**6)/9+(20*r**8)/3)/r**2+(404/9+(3848*r)/9-(17368*r**2)/9+2040*r**3
            -(7580*r**4)/9+(2240*r**6)/9)*math.log(r))+(-1274/27+1855/(27*r**6)-4271/(54*r**4)
            +(11795*r**2)/27-(23945*r**4)/54+(4480*r**6)/27+(2*(-202/27+(404*r)/9
            -(1924*r**2)/9-(17368*r**3)/27-510*r**4-(1516*r**5)/9+(320*r**7)/9))/r
            -(2*(-202/27+(752*r)/9-(1924*r**2)/9-(4856*r**3)/9-510*r**4-(764*r**5)/3
            +(160*r**7)/3))/r-(-506/27-(202*r)/27+(202*r**2)/9-(1924*r**3)/27
            -(4342*r**4)/27-102*r**5-(758*r**6)/27+(40*r**8)/9)/r**2+(-52/9-(202*r)/27
            +(376*r**2)/9-(1924*r**3)/27-(1214*r**4)/9-102*r**5-(382*r**6)/9+(20*r**8)/3)/r**2)*math.log(1
            +r)+math.log(r)*(2366/27+(32186*r**2)/27+(46085*r**4)/27-(8960*r**6)/27
            +(4*((-284*r)/9+(9656*r**3)/27+(740*r**5)/9-(160*r**7)/9))/r+(2*(-202/27
            +(404*r)/9-(1924*r**2)/9-(17368*r**3)/27-510*r**4-(1516*r**5)/9+(320*r**7)/9))/(1
            +r)-(2*(202/27+(404*r)/9+(1924*r**2)/9-(17368*r**3)/27+510*r**4
            -(1516*r**5)/9+(320*r**7)/9))/(1-r)-(2*(-26-(142*r**2)/9+(2414*r**4)/27
            +(370*r**6)/27-(20*r**8)/9))/r**2-(-506/27-(202*r)/27+(202*r**2)/9
            -(1924*r**3)/27-(4342*r**4)/27-102*r**5-(758*r**6)/27+(40*r**8)/9)/(1
            +r)**2-(-506/27+(202*r)/27+(202*r**2)/9+(1924*r**3)/27-(4342*r**4)/27
            +102*r**5-(758*r**6)/27+(40*r**8)/9)/(1-r)**2+(404/9-(3848*r)/9-(17368*r**2)/9
            -2040*r**3-(7580*r**4)/9+(2240*r**6)/9)*math.log(1+r)))
    return 0. 

def X_Gamma_KIN_MS(par, hqe, wc, **kwargs):
    r=par.mcMS/par.mbkin
    mus=par.scale_alphas/par.mbkin
    mu0=par.scale_mcMS/par.mbkin
    muWC=par.scale_mbkin/par.mbkin
    api=par.alphas/math.pi

    rhoD=hqe.rhoD/par.mbkin**3
    rhoLS=hqe.rhoLS/par.mbkin**3
    muG=hqe.muG/par.mbkin**2
    mupi=hqe.mupi/par.mbkin**2

    flagPERP=kwargs.get('flag_basisPERP', 1)
    flagDEBUG=kwargs.get('flag_DEBUG', 0)
    FLAGcf=0.5*(4./3. + 3.*(1.+ math.log(par.scale_muG/par.mbkin)))
    FLAGcD=-8./3.*4./3.*math.log(par.scale_rhoD/par.mbkin)+3.*(1./2.-2./3.*math.log(par.scale_rhoD/par.mbkin))
    FLAGcs=0.5*(4./3. + 3.*(1.+math.log(par.scale_muG/par.mbkin)))

    deltambkin1 = kin.deltambkin(1,par)
    deltambkin2 = kin.deltambkin(2,par)
    deltambkin3 = kin.deltambkin(3,par)
    deltamcMS1 = kin.deltamcMS(1,par)
    deltamcMS2 = kin.deltamcMS(2,par)
    deltamcMS3 = kin.deltamcMS(3,par)
    Rhodpert1 = kin.RhoDPert(1,par)/par.mbkin**3
    Rhodpert2 = kin.RhoDPert(2,par)/par.mbkin**3
    Rhodpert3 = kin.RhoDPert(3,par)/par.mbkin**3
    Mupipert1 = kin.MuPiPert(1,par)/par.mbkin**2
    Mupipert2 = kin.MuPiPert(2,par)/par.mbkin**2
    Mupipert3 = kin.MuPiPert(3,par)/par.mbkin**2
    res = 0
    res +=(X(r,0)-(mupi*X(r,0))/2+rhoD*XD(r,0,flagPERP)+muG*XG(r,0)-flagPERP*rhoLS*XG(r,0))

    if( flagDEBUG == 1):
        print("X_Gamma LO = ",res)

    resNLO = 0
    resNLO +=(5*deltambkin1*X(r,0)+(Mupipert1*X(r,0))/2-deltambkin1*r*X(r,1)+deltamcMS1*r*X(r,1)
        +X1(r,0)-Rhodpert1*XD(r,0,flagPERP))

    if( flagDEBUG == 1):
        print("X_Gamma NLO partonic = api*",resNLO)
    res += api*resNLO

    if(kwargs.get('flag_includeNNLO', 1) == 1):
        resNNLO = 0
        resNNLO +=(10*deltambkin1**2*X(r,0)+5*deltambkin2*X(r,0)+(3*deltambkin1*Mupipert1*X(r,0))/2
            +(Mupipert2*X(r,0))/2-(Mupipert1*math.log(mus**2/r**2)*X(r,0))/12-4*deltambkin1**2*r*X(r,1)
            -deltambkin2*r*X(r,1)+4*deltambkin1*deltamcMS1*r*X(r,1)+deltamcMS2*r*X(r,1)
            -(deltambkin1*Mupipert1*r*X(r,1))/2+(deltamcMS1*Mupipert1*r*X(r,1))/2
            +(deltambkin1**2*r**2*X(r,2))/2-deltambkin1*deltamcMS1*r**2*X(r,2)+(deltamcMS1**2*r**2*X(r,2))/2
            +5*deltambkin1*X1(r,0)+(25*math.log(mus**2)*X1(r,0))/12-deltambkin1*r*X1(r,1)
            +deltamcMS1*r*X1(r,1)+X2(r,0)-2*deltambkin1*Rhodpert1*XD(r,0,flagPERP)
            -Rhodpert2*XD(r,0,flagPERP)+(Rhodpert1*math.log(mus**2/r**2)*XD(r,0,flagPERP))/6
            +deltambkin1*r*Rhodpert1*XD(r,1,flagPERP)-deltamcMS1*r*Rhodpert1*XD(r,1,flagPERP))
        if( flagDEBUG == 1):
            print("X_Gamma NNLO partonic = api^2*",resNNLO)
        res += api**2*resNNLO

    if(kwargs.get('flag_includeN3LO', 1) == 1):
        resN3LO = 0
        resN3LO +=(10*deltambkin1**3*X(r,0)+20*deltambkin1*deltambkin2*X(r,0)+5*deltambkin3*X(r,0)
            -(7*Mupipert1*X(r,0))/48+(3*deltambkin1**2*Mupipert1*X(r,0))/2+(3*deltambkin2*Mupipert1*X(r,0))/2
            +(deltamcMS1*Mupipert1*X(r,0))/6+(3*deltambkin1*Mupipert2*X(r,0))/2
            +(Mupipert3*X(r,0))/2-(19*Mupipert1*math.log(mus**2/r**2)*X(r,0))/48-(deltambkin1*Mupipert1*math.log(mus**2/r**2)*X(r,0))/4
            -(Mupipert2*math.log(mus**2/r**2)*X(r,0))/6+(Mupipert1*math.log(mus**2/r**2)**2*X(r,0))/72
            -6*deltambkin1**3*r*X(r,1)-8*deltambkin1*deltambkin2*r*X(r,1)-deltambkin3*r*X(r,1)
            +6*deltambkin1**2*deltamcMS1*r*X(r,1)+4*deltambkin2*deltamcMS1*r*X(r,1)
            +4*deltambkin1*deltamcMS2*r*X(r,1)+deltamcMS3*r*X(r,1)-deltambkin1**2*Mupipert1*r*X(r,1)
            -(deltambkin2*Mupipert1*r*X(r,1))/2+deltambkin1*deltamcMS1*Mupipert1*r*X(r,1)
            +(deltamcMS2*Mupipert1*r*X(r,1))/2-(deltambkin1*Mupipert2*r*X(r,1))/2
            +(deltamcMS1*Mupipert2*r*X(r,1))/2+(deltambkin1*Mupipert1*r*math.log(mus**2/r**2)*X(r,1))/12
            -(deltamcMS1*Mupipert1*r*math.log(mus**2/r**2)*X(r,1))/12+(3*deltambkin1**3*r**2*X(r,2))/2
            +deltambkin1*deltambkin2*r**2*X(r,2)-3*deltambkin1**2*deltamcMS1*r**2*X(r,2)
            -deltambkin2*deltamcMS1*r**2*X(r,2)+(3*deltambkin1*deltamcMS1**2*r**2*X(r,2))/2
            -deltambkin1*deltamcMS2*r**2*X(r,2)+deltamcMS1*deltamcMS2*r**2*X(r,2)
            +(deltambkin1**2*Mupipert1*r**2*X(r,2))/4-(deltambkin1*deltamcMS1*Mupipert1*r**2*X(r,2))/2
            +(deltamcMS1**2*Mupipert1*r**2*X(r,2))/4-(deltambkin1**3*r**3*X(r,3))/6
            +(deltambkin1**2*deltamcMS1*r**3*X(r,3))/2-(deltambkin1*deltamcMS1**2*r**3*X(r,3))/2
            +(deltamcMS1**3*r**3*X(r,3))/6+(7*X1(r,0))/24-(25*deltambkin1*X1(r,0))/6
            +10*deltambkin1**2*X1(r,0)+5*deltambkin2*X1(r,0)+(77*math.log(mus**2)*X1(r,0))/24
            +(125*deltambkin1*math.log(mus**2)*X1(r,0))/12+(625*math.log(mus**2)**2*X1(r,0))/144
            -4*deltambkin1**2*r*X1(r,1)-deltambkin2*r*X1(r,1)+4*deltambkin1*deltamcMS1*r*X1(r,1)
            +deltamcMS2*r*X1(r,1)-(25*deltambkin1*r*math.log(mus**2)*X1(r,1))/12+(25*deltamcMS1*r*math.log(mus**2)*X1(r,1))/12
            +(deltambkin1**2*r**2*X1(r,2))/2-deltambkin1*deltamcMS1*r**2*X1(r,2)+(deltamcMS1**2*r**2*X1(r,2))/2
            +5*deltambkin1*X2(r,0)+(Mupipert1*X2(r,0))/2+(25*math.log(mus**2)*X2(r,0))/6
            -deltambkin1*r*X2(r,1)+deltamcMS1*r*X2(r,1)+X3(r,0)+(7*Rhodpert1*XD(r,0,flagPERP))/24
            -deltambkin1**2*Rhodpert1*XD(r,0,flagPERP)-2*deltambkin2*Rhodpert1*XD(r,0,flagPERP)
            -(deltamcMS1*Rhodpert1*XD(r,0,flagPERP))/3-2*deltambkin1*Rhodpert2*XD(r,0,flagPERP)
            -Rhodpert3*XD(r,0,flagPERP)+(19*Rhodpert1*math.log(mus**2/r**2)*XD(r,0,flagPERP))/24
            +(deltambkin1*Rhodpert1*math.log(mus**2/r**2)*XD(r,0,flagPERP))/3+(Rhodpert2*math.log(mus**2/r**2)*XD(r,0,flagPERP))/3
            -(Rhodpert1*math.log(mus**2/r**2)**2*XD(r,0,flagPERP))/36+deltambkin1**2*r*Rhodpert1*XD(r,1,flagPERP)
            +deltambkin2*r*Rhodpert1*XD(r,1,flagPERP)-deltambkin1*deltamcMS1*r*Rhodpert1*XD(r,1,flagPERP)
            -deltamcMS2*r*Rhodpert1*XD(r,1,flagPERP)+deltambkin1*r*Rhodpert2*XD(r,1,flagPERP)
            -deltamcMS1*r*Rhodpert2*XD(r,1,flagPERP)-(deltambkin1*r*Rhodpert1*math.log(mus**2/r**2)*XD(r,1,flagPERP))/6
            +(deltamcMS1*r*Rhodpert1*math.log(mus**2/r**2)*XD(r,1,flagPERP))/6-(deltambkin1**2*r**2*Rhodpert1*XD(r,2,flagPERP))/2
            +deltambkin1*deltamcMS1*r**2*Rhodpert1*XD(r,2,flagPERP)-(deltamcMS1**2*r**2*Rhodpert1*XD(r,2,flagPERP))/2)
        if( flagDEBUG == 1):
            print("X_Gamma N3LO partonic = api^3*",resN3LO)
        res += api**3*resN3LO

    if(kwargs.get('flag_includeNLOpw', 1) == 1):
        resNLO = 0
        resNLO +=((-3*deltambkin1*mupi*X(r,0))/2+(deltambkin1*mupi*r*X(r,1))/2-(deltamcMS1*mupi*r*X(r,1))/2
            -(mupi*X1(r,0))/2+2*deltambkin1*rhoD*XD(r,0,flagPERP)+FLAGcD*rhoD*XD(r,0,flagPERP)
            -deltambkin1*r*rhoD*XD(r,1,flagPERP)+deltamcMS1*r*rhoD*XD(r,1,flagPERP)
            +rhoD*XD1(r,0)+3*deltambkin1*muG*XG(r,0)+FLAGcf*muG*XG(r,0)-2*deltambkin1*flagPERP*rhoLS*XG(r,0)
            -FLAGcs*flagPERP*rhoLS*XG(r,0)-deltambkin1*muG*r*XG(r,1)+deltamcMS1*muG*r*XG(r,1)
            +deltambkin1*flagPERP*r*rhoLS*XG(r,1)-deltamcMS1*flagPERP*r*rhoLS*XG(r,1)
            +muG*XG1(r,0)-flagPERP*rhoLS*XG1(r,0))
        if( flagDEBUG == 1):
            print("X_Gamma NLO pw = api*",resNLO)
        res += api*resNLO

        resNNLO = 0
        resNNLO +=((Mupipert1*X1(r,0))/2-FLAGcD*Rhodpert1*XD(r,0,flagPERP)-Rhodpert1*XD1(r,0))
        if( flagDEBUG == 1):
            print("X_Gamma NNLO effects from NLO pw = api^2*",resNNLO)
        res += api**2*resNNLO

        resN3LO = 0
        resN3LO +=((3*deltambkin1*Mupipert1*X1(r,0))/2+(Mupipert2*X1(r,0))/2+(25*Mupipert1*math.log(mus**2)*X1(r,0))/24
            -(Mupipert1*math.log(mus**2/r**2)*X1(r,0))/12-(deltambkin1*Mupipert1*r*X1(r,1))/2
            +(deltamcMS1*Mupipert1*r*X1(r,1))/2-2*deltambkin1*FLAGcD*Rhodpert1*XD(r,0,flagPERP)
            -FLAGcD*Rhodpert2*XD(r,0,flagPERP)-(25*FLAGcD*Rhodpert1*math.log(mus**2)*XD(r,0,flagPERP))/12
            +(FLAGcD*Rhodpert1*math.log(mus**2/r**2)*XD(r,0,flagPERP))/6+deltambkin1*FLAGcD*r*Rhodpert1*XD(r,1,flagPERP)
            -deltamcMS1*FLAGcD*r*Rhodpert1*XD(r,1,flagPERP)-2*deltambkin1*Rhodpert1*XD1(r,0)
            -FLAGcD*Rhodpert1*XD1(r,0)-Rhodpert2*XD1(r,0)-(25*Rhodpert1*math.log(mus**2)*XD1(r,0))/12
            +(Rhodpert1*math.log(mus**2/r**2)*XD1(r,0))/6+deltambkin1*r*Rhodpert1*XD1(r,1)
            -deltamcMS1*r*Rhodpert1*XD1(r,1))
        if( flagDEBUG == 1):
            print("X_Gamma N3LO effects from NLO pw = api^3*",resN3LO)
        res += api**3*resN3LO

    return res


