# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_scene_graph_python
else:
    import _tesseract_scene_graph_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_scene_graph_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_SwigPyIterator

    def value(self):
        return _tesseract_scene_graph_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tesseract_scene_graph_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tesseract_scene_graph_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tesseract_scene_graph_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tesseract_scene_graph_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tesseract_scene_graph_python.SwigPyIterator_copy(self)

    def next(self):
        return _tesseract_scene_graph_python.SwigPyIterator_next(self)

    def __next__(self):
        return _tesseract_scene_graph_python.SwigPyIterator___next__(self)

    def previous(self):
        return _tesseract_scene_graph_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tesseract_scene_graph_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tesseract_scene_graph_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tesseract_scene_graph_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tesseract_scene_graph_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tesseract_scene_graph_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tesseract_scene_graph_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tesseract_scene_graph_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.SwigPyIterator_swigregister(SwigPyIterator)
import tesseract_robotics.tesseract_geometry.tesseract_geometry_python
import tesseract_robotics.tesseract_common.tesseract_common_python
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointDynamics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_JointDynamics

    def __init__(self, *args):
        _tesseract_scene_graph_python.JointDynamics_swiginit(self, _tesseract_scene_graph_python.new_JointDynamics(*args))
    damping = property(_tesseract_scene_graph_python.JointDynamics_damping_get, _tesseract_scene_graph_python.JointDynamics_damping_set)
    friction = property(_tesseract_scene_graph_python.JointDynamics_friction_get, _tesseract_scene_graph_python.JointDynamics_friction_set)

    def clear(self):
        return _tesseract_scene_graph_python.JointDynamics_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.JointDynamics___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.JointDynamics___ne__(self, rhs)

# Register JointDynamics in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.JointDynamics_swigregister(JointDynamics)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointLimits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_JointLimits

    def __init__(self, *args):
        _tesseract_scene_graph_python.JointLimits_swiginit(self, _tesseract_scene_graph_python.new_JointLimits(*args))
    lower = property(_tesseract_scene_graph_python.JointLimits_lower_get, _tesseract_scene_graph_python.JointLimits_lower_set)
    upper = property(_tesseract_scene_graph_python.JointLimits_upper_get, _tesseract_scene_graph_python.JointLimits_upper_set)
    effort = property(_tesseract_scene_graph_python.JointLimits_effort_get, _tesseract_scene_graph_python.JointLimits_effort_set)
    velocity = property(_tesseract_scene_graph_python.JointLimits_velocity_get, _tesseract_scene_graph_python.JointLimits_velocity_set)
    acceleration = property(_tesseract_scene_graph_python.JointLimits_acceleration_get, _tesseract_scene_graph_python.JointLimits_acceleration_set)
    jerk = property(_tesseract_scene_graph_python.JointLimits_jerk_get, _tesseract_scene_graph_python.JointLimits_jerk_set)

    def clear(self):
        return _tesseract_scene_graph_python.JointLimits_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.JointLimits___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.JointLimits___ne__(self, rhs)

# Register JointLimits in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.JointLimits_swigregister(JointLimits)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointSafety(object):
    r""" Parameters for Joint Safety Controllers"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_JointSafety

    def __init__(self, *args):
        _tesseract_scene_graph_python.JointSafety_swiginit(self, _tesseract_scene_graph_python.new_JointSafety(*args))
    soft_upper_limit = property(_tesseract_scene_graph_python.JointSafety_soft_upper_limit_get, _tesseract_scene_graph_python.JointSafety_soft_upper_limit_set, doc=r"""
    IMPORTANT:  The safety controller support is very much PR2 specific, not intended for generic usage.

    Basic safety controller operation is as follows

    current safety controllers will take effect on joints outside the position range below:

    position range: [JointSafety::soft_lower_limit  + JointLimits::velocity / JointSafety::k_position,
                     JointSafety::soft_uppper_limit - JointLimits::velocity / JointSafety::k_position]

    if (joint_position is outside of the position range above)
        velocity_limit_min = -JointLimits::velocity + JointSafety::k_position * (joint_position -
        JointSafety::soft_lower_limit) velocity_limit_max =  JointLimits::velocity + JointSafety::k_position *
        (joint_position - JointSafety::soft_upper_limit)
    else
        velocity_limit_min = -JointLimits::velocity
        velocity_limit_max =  JointLimits::velocity

    velocity range: [velocity_limit_min + JointLimits::effort / JointSafety::k_velocity,
                     velocity_limit_max - JointLimits::effort / JointSafety::k_velocity]

    if (joint_velocity is outside of the velocity range above)
        effort_limit_min = -JointLimits::effort + JointSafety::k_velocity * (joint_velocity - velocity_limit_min)
        effort_limit_max =  JointLimits::effort + JointSafety::k_velocity * (joint_velocity - velocity_limit_max)
    else
        effort_limit_min = -JointLimits::effort
        effort_limit_max =  JointLimits::effort

    Final effort command sent to the joint is saturated by [effort_limit_min,effort_limit_max]

    Please see wiki for more details: http://www.ros.org/wiki/pr2_controller_manager/safety_limits
    """)
    soft_lower_limit = property(_tesseract_scene_graph_python.JointSafety_soft_lower_limit_get, _tesseract_scene_graph_python.JointSafety_soft_lower_limit_set)
    k_position = property(_tesseract_scene_graph_python.JointSafety_k_position_get, _tesseract_scene_graph_python.JointSafety_k_position_set)
    k_velocity = property(_tesseract_scene_graph_python.JointSafety_k_velocity_get, _tesseract_scene_graph_python.JointSafety_k_velocity_set)

    def clear(self):
        return _tesseract_scene_graph_python.JointSafety_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.JointSafety___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.JointSafety___ne__(self, rhs)

# Register JointSafety in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.JointSafety_swigregister(JointSafety)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointCalibration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_JointCalibration

    def __init__(self, *args):
        _tesseract_scene_graph_python.JointCalibration_swiginit(self, _tesseract_scene_graph_python.new_JointCalibration(*args))
    reference_position = property(_tesseract_scene_graph_python.JointCalibration_reference_position_get, _tesseract_scene_graph_python.JointCalibration_reference_position_set)
    rising = property(_tesseract_scene_graph_python.JointCalibration_rising_get, _tesseract_scene_graph_python.JointCalibration_rising_set)
    falling = property(_tesseract_scene_graph_python.JointCalibration_falling_get, _tesseract_scene_graph_python.JointCalibration_falling_set)

    def clear(self):
        return _tesseract_scene_graph_python.JointCalibration_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.JointCalibration___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.JointCalibration___ne__(self, rhs)

# Register JointCalibration in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.JointCalibration_swigregister(JointCalibration)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointMimic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_JointMimic

    def __init__(self, *args):
        _tesseract_scene_graph_python.JointMimic_swiginit(self, _tesseract_scene_graph_python.new_JointMimic(*args))
    offset = property(_tesseract_scene_graph_python.JointMimic_offset_get, _tesseract_scene_graph_python.JointMimic_offset_set)
    multiplier = property(_tesseract_scene_graph_python.JointMimic_multiplier_get, _tesseract_scene_graph_python.JointMimic_multiplier_set)
    joint_name = property(_tesseract_scene_graph_python.JointMimic_joint_name_get, _tesseract_scene_graph_python.JointMimic_joint_name_set)

    def clear(self):
        return _tesseract_scene_graph_python.JointMimic_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.JointMimic___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.JointMimic___ne__(self, rhs)

# Register JointMimic in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.JointMimic_swigregister(JointMimic)
JointType_UNKNOWN = _tesseract_scene_graph_python.JointType_UNKNOWN
JointType_REVOLUTE = _tesseract_scene_graph_python.JointType_REVOLUTE
JointType_CONTINUOUS = _tesseract_scene_graph_python.JointType_CONTINUOUS
JointType_PRISMATIC = _tesseract_scene_graph_python.JointType_PRISMATIC
JointType_FLOATING = _tesseract_scene_graph_python.JointType_FLOATING
JointType_PLANAR = _tesseract_scene_graph_python.JointType_PLANAR
JointType_FIXED = _tesseract_scene_graph_python.JointType_FIXED
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Joint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_Joint

    def __init__(self, *args):
        _tesseract_scene_graph_python.Joint_swiginit(self, _tesseract_scene_graph_python.new_Joint(*args))

    def getName(self):
        return _tesseract_scene_graph_python.Joint_getName(self)
    type = property(_tesseract_scene_graph_python.Joint_type_get, _tesseract_scene_graph_python.Joint_type_set, doc=r""" The type of joint""")
    axis = property(_tesseract_scene_graph_python.Joint_axis_get, _tesseract_scene_graph_python.Joint_axis_set, doc=r"""
    type_       meaning of axis_
    ------------------------------------------------------
               UNKNOWN     unknown type
               REVOLUTE    rotation axis
               PRISMATIC   translation axis
               FLOATING    N/A
               PLANAR      plane normal axis
               FIXED       N/A
    """)
    child_link_name = property(_tesseract_scene_graph_python.Joint_child_link_name_get, _tesseract_scene_graph_python.Joint_child_link_name_set, doc=r"""
    child Link element
      child link frame is the same as the Joint frame
    """)
    parent_link_name = property(_tesseract_scene_graph_python.Joint_parent_link_name_get, _tesseract_scene_graph_python.Joint_parent_link_name_set, doc=r"""
    parent Link element
      origin specifies the transform from Parent Link to Joint Frame
    """)
    parent_to_joint_origin_transform = property(_tesseract_scene_graph_python.Joint_parent_to_joint_origin_transform_get, _tesseract_scene_graph_python.Joint_parent_to_joint_origin_transform_set, doc=r""" transform from Parent Link frame to Joint frame""")
    dynamics = property(_tesseract_scene_graph_python.Joint_dynamics_get, _tesseract_scene_graph_python.Joint_dynamics_set, doc=r""" Joint Dynamics""")
    limits = property(_tesseract_scene_graph_python.Joint_limits_get, _tesseract_scene_graph_python.Joint_limits_set, doc=r""" Joint Limits""")
    safety = property(_tesseract_scene_graph_python.Joint_safety_get, _tesseract_scene_graph_python.Joint_safety_set, doc=r""" Unsupported Hidden Feature""")
    calibration = property(_tesseract_scene_graph_python.Joint_calibration_get, _tesseract_scene_graph_python.Joint_calibration_set, doc=r""" Unsupported Hidden Feature""")
    mimic = property(_tesseract_scene_graph_python.Joint_mimic_get, _tesseract_scene_graph_python.Joint_mimic_set, doc=r""" Option to Mimic another Joint""")

    def clear(self):
        return _tesseract_scene_graph_python.Joint_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.Joint___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.Joint___ne__(self, rhs)

    def clone(self, *args):
        return _tesseract_scene_graph_python.Joint_clone(self, *args)

# Register Joint in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.Joint_swigregister(Joint)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class tesseract_scene_graph_VisualVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector___nonzero__(self)

    def __bool__(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector___bool__(self)

    def __len__(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector___setitem__(self, *args)

    def pop(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_pop(self)

    def append(self, x):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_append(self, x)

    def empty(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_empty(self)

    def size(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_size(self)

    def swap(self, v):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_swap(self, v)

    def begin(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_begin(self)

    def end(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_end(self)

    def rbegin(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_rbegin(self)

    def rend(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_rend(self)

    def clear(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_clear(self)

    def get_allocator(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_get_allocator(self)

    def pop_back(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_pop_back(self)

    def erase(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_swiginit(self, _tesseract_scene_graph_python.new_tesseract_scene_graph_VisualVector(*args))

    def push_back(self, x):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_push_back(self, x)

    def front(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_front(self)

    def back(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_back(self)

    def assign(self, n, x):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_resize(self, *args)

    def insert(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_insert(self, *args)

    def reserve(self, n):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_reserve(self, n)

    def capacity(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_capacity(self)
    __swig_destroy__ = _tesseract_scene_graph_python.delete_tesseract_scene_graph_VisualVector

# Register tesseract_scene_graph_VisualVector in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.tesseract_scene_graph_VisualVector_swigregister(tesseract_scene_graph_VisualVector)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class tesseract_scene_graph_CollisionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector___nonzero__(self)

    def __bool__(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector___bool__(self)

    def __len__(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector___setitem__(self, *args)

    def pop(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_pop(self)

    def append(self, x):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_append(self, x)

    def empty(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_empty(self)

    def size(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_size(self)

    def swap(self, v):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_swap(self, v)

    def begin(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_begin(self)

    def end(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_end(self)

    def rbegin(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_rbegin(self)

    def rend(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_rend(self)

    def clear(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_clear(self)

    def get_allocator(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_get_allocator(self)

    def pop_back(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_pop_back(self)

    def erase(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_swiginit(self, _tesseract_scene_graph_python.new_tesseract_scene_graph_CollisionVector(*args))

    def push_back(self, x):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_push_back(self, x)

    def front(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_front(self)

    def back(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_back(self)

    def assign(self, n, x):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_resize(self, *args)

    def insert(self, *args):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_insert(self, *args)

    def reserve(self, n):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_reserve(self, n)

    def capacity(self):
        return _tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_capacity(self)
    __swig_destroy__ = _tesseract_scene_graph_python.delete_tesseract_scene_graph_CollisionVector

# Register tesseract_scene_graph_CollisionVector in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.tesseract_scene_graph_CollisionVector_swigregister(tesseract_scene_graph_CollisionVector)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Material(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_Material

    def __init__(self, *args):
        _tesseract_scene_graph_python.Material_swiginit(self, _tesseract_scene_graph_python.new_Material(*args))

    def getName(self):
        return _tesseract_scene_graph_python.Material_getName(self)

    @staticmethod
    def getDefaultMaterial():
        return _tesseract_scene_graph_python.Material_getDefaultMaterial()
    texture_filename = property(_tesseract_scene_graph_python.Material_texture_filename_get, _tesseract_scene_graph_python.Material_texture_filename_set)
    color = property(_tesseract_scene_graph_python.Material_color_get, _tesseract_scene_graph_python.Material_color_set)

    def clear(self):
        return _tesseract_scene_graph_python.Material_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.Material___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.Material___ne__(self, rhs)

# Register Material in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.Material_swigregister(Material)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Inertial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_Inertial

    def __init__(self, *args):
        _tesseract_scene_graph_python.Inertial_swiginit(self, _tesseract_scene_graph_python.new_Inertial(*args))
    origin = property(_tesseract_scene_graph_python.Inertial_origin_get, _tesseract_scene_graph_python.Inertial_origin_set)
    mass = property(_tesseract_scene_graph_python.Inertial_mass_get, _tesseract_scene_graph_python.Inertial_mass_set)
    ixx = property(_tesseract_scene_graph_python.Inertial_ixx_get, _tesseract_scene_graph_python.Inertial_ixx_set)
    ixy = property(_tesseract_scene_graph_python.Inertial_ixy_get, _tesseract_scene_graph_python.Inertial_ixy_set)
    ixz = property(_tesseract_scene_graph_python.Inertial_ixz_get, _tesseract_scene_graph_python.Inertial_ixz_set)
    iyy = property(_tesseract_scene_graph_python.Inertial_iyy_get, _tesseract_scene_graph_python.Inertial_iyy_set)
    iyz = property(_tesseract_scene_graph_python.Inertial_iyz_get, _tesseract_scene_graph_python.Inertial_iyz_set)
    izz = property(_tesseract_scene_graph_python.Inertial_izz_get, _tesseract_scene_graph_python.Inertial_izz_set)

    def clear(self):
        return _tesseract_scene_graph_python.Inertial_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.Inertial___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.Inertial___ne__(self, rhs)

# Register Inertial in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.Inertial_swigregister(Inertial)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Visual(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_Visual

    def __init__(self, *args):
        _tesseract_scene_graph_python.Visual_swiginit(self, _tesseract_scene_graph_python.new_Visual(*args))
    origin = property(_tesseract_scene_graph_python.Visual_origin_get, _tesseract_scene_graph_python.Visual_origin_set)
    geometry = property(_tesseract_scene_graph_python.Visual_geometry_get, _tesseract_scene_graph_python.Visual_geometry_set)
    material = property(_tesseract_scene_graph_python.Visual_material_get, _tesseract_scene_graph_python.Visual_material_set)
    name = property(_tesseract_scene_graph_python.Visual_name_get, _tesseract_scene_graph_python.Visual_name_set)

    def clear(self):
        return _tesseract_scene_graph_python.Visual_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.Visual___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.Visual___ne__(self, rhs)

# Register Visual in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.Visual_swigregister(Visual)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Collision(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_Collision

    def __init__(self, *args):
        _tesseract_scene_graph_python.Collision_swiginit(self, _tesseract_scene_graph_python.new_Collision(*args))
    origin = property(_tesseract_scene_graph_python.Collision_origin_get, _tesseract_scene_graph_python.Collision_origin_set)
    geometry = property(_tesseract_scene_graph_python.Collision_geometry_get, _tesseract_scene_graph_python.Collision_geometry_set)
    name = property(_tesseract_scene_graph_python.Collision_name_get, _tesseract_scene_graph_python.Collision_name_set)

    def clear(self):
        return _tesseract_scene_graph_python.Collision_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.Collision___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.Collision___ne__(self, rhs)

# Register Collision in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.Collision_swigregister(Collision)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Link(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_Link

    def __init__(self, *args):
        _tesseract_scene_graph_python.Link_swiginit(self, _tesseract_scene_graph_python.new_Link(*args))

    def getName(self):
        return _tesseract_scene_graph_python.Link_getName(self)
    inertial = property(_tesseract_scene_graph_python.Link_inertial_get, _tesseract_scene_graph_python.Link_inertial_set, doc=r""" inertial element""")
    visual = property(_tesseract_scene_graph_python.Link_visual_get, _tesseract_scene_graph_python.Link_visual_set, doc=r""" Visual Elements""")
    collision = property(_tesseract_scene_graph_python.Link_collision_get, _tesseract_scene_graph_python.Link_collision_set, doc=r""" Collision Elements""")

    def clear(self):
        return _tesseract_scene_graph_python.Link_clear(self)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.Link___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.Link___ne__(self, rhs)

    def clone(self, *args):
        return _tesseract_scene_graph_python.Link_clone(self, *args)

# Register Link in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.Link_swigregister(Link)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SceneGraphUPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_scene_graph_python.SceneGraphUPtr_swiginit(self, _tesseract_scene_graph_python.new_SceneGraphUPtr(*args))

    def __deref__(self):
        return _tesseract_scene_graph_python.SceneGraphUPtr___deref__(self)

    def release(self):
        return _tesseract_scene_graph_python.SceneGraphUPtr_release(self)

    def reset(self, *args):
        return _tesseract_scene_graph_python.SceneGraphUPtr_reset(self, *args)

    def swap(self, __u):
        return _tesseract_scene_graph_python.SceneGraphUPtr_swap(self, __u)

    def get(self):
        return _tesseract_scene_graph_python.SceneGraphUPtr_get(self)

    def __nonzero__(self):
        return _tesseract_scene_graph_python.SceneGraphUPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _tesseract_scene_graph_python.delete_SceneGraphUPtr

    def clone(self):
        r"""
        Clone the scene graph
        :rtype: :py:class:`UPtr`
        :return: The cloned scene graph
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_clone(self)

    def clear(self):
        r""" Clear the scene graph"""
        return _tesseract_scene_graph_python.SceneGraphUPtr_clear(self)

    def setName(self, name):
        r"""
        Sets the graph name
        :type name: string
        :param name: The name of the graph
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_setName(self, name)

    def getName(self):
        r"""
        Sets the graph name
        :param name: The name of the graph
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getName(self)

    def setRoot(self, name):
        r"""
        Sets the root link name (aka. World Coordinate Frame)
        :type name: string
        :param name: The name of the link
        :rtype: boolean
        :return: Return False if a link does not exists, otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_setRoot(self, name)

    def getRoot(self):
        r"""
        Gets the root link name (aka. World Coordinate Frame)
        :rtype: string
        :return: The root link name
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getRoot(self)

    def addLink(self, *args):
        r"""
        *Overload 1:*

        Adds a link to the graph

        The first link added to the graph is set as the root by default. Use setRoot to change the root link of the graph.

        :type link: :py:class:`Link`
        :param link: The link to be added to the graph
        :type replace_allowed: boolean, optional
        :param replace_allowed: If true and the link exist it will be replaced
        :rtype: boolean
        :return: Return False if a link with the same name already exists and replace is not allowed, otherwise true

        |

        *Overload 2:*

        Adds a link/joint to the graph

        The first link added to the graph is set as the root by default. Use setRoot to change the root link of the graph.

        :type link: :py:class:`Link`
        :param link: The link to be added to the graph
        :type joint: :py:class:`Joint`
        :param joint: The associated joint to be added to the graph
        :rtype: boolean
        :return: Return False if a link with the same name allready exists, otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_addLink(self, *args)

    def getLink(self, name):
        r"""
        Get a link in the graph
        :type name: string
        :param name: The name of the link
        :rtype: :py:class:`Link`
        :return: Return nullptr if link name does not exists, otherwise a pointer to the link
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getLink(self, name)

    def getLinks(self):
        r"""
        Get a vector links in the scene graph
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Link const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Link const > > >
        :return: A vector of links
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getLinks(self)

    def getLeafLinks(self):
        r"""
        Get a vector leaf links in the scene graph
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Link const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Link const > > >
        :return: A vector of links
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getLeafLinks(self)

    def removeLink(self, name, recursive=False):
        r"""
        Removes a link from the graph

        Note: this will remove all inbound and outbound edges

        :type name: string
        :param name: Name of the link to be removed
        :type recursive: boolean, optional
        :param recursive: If true all children are removed if it only has a single joint
        :rtype: boolean
        :return: Return False if a link does not exists, otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_removeLink(self, name, recursive)

    def moveLink(self, joint):
        r"""
        Move link defined by provided joint
        This deletes all inbound joints on the parent link defined by the joint
        :type joint: :py:class:`Joint`
        :param joint: The joint defining the link move
        :rtype: boolean
        :return: Returns true if successful, otherwise false.
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_moveLink(self, joint)

    def setLinkVisibility(self, name, visibility):
        r"""
        Set a links visibility
        :type visibility: boolean
        :param visibility: True if should be visible, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_setLinkVisibility(self, name, visibility)

    def getLinkVisibility(self, name):
        r"""
        Get a given links visibility setting
        :rtype: boolean
        :return: True if should be visible, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getLinkVisibility(self, name)

    def setLinkCollisionEnabled(self, name, enabled):
        r"""
        Set whether a link should be considered during collision checking
        :type enabled: boolean
        :param enabled: True if should be considered during collision checking, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_setLinkCollisionEnabled(self, name, enabled)

    def getLinkCollisionEnabled(self, name):
        r"""
        Get whether a link should be considered during collision checking
        :rtype: boolean
        :return: True if should be considered during collision checking, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getLinkCollisionEnabled(self, name)

    def addJoint(self, joint):
        r"""
        Adds joint to the graph
        :type joint: :py:class:`Joint`
        :param joint: The joint to be added
        :rtype: boolean
        :return: Return False if parent or child link does not exists and if joint name already exists in the graph,
            otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_addJoint(self, joint)

    def getJoint(self, name):
        r"""
        Get a joint in the graph
        :type name: string
        :param name: The name of the joint
        :rtype: :py:class:`Joint`
        :return: Return nullptr if joint name does not exists, otherwise a pointer to the joint
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getJoint(self, name)

    def removeJoint(self, name, recursive=False):
        r"""
        Removes a joint from the graph
        :type name: string
        :param name: Name of the joint to be removed
        :type recursive: boolean, optional
        :param recursive: If true all children are removed if this this is the only joint of the child link
        :rtype: boolean
        :return: Return False if a joint does not exists, otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_removeJoint(self, name, recursive)

    def moveJoint(self, name, parent_link):
        r"""
        Move joint to new parent link
        :type name: string
        :param name: Name of the joint to move
        :type parent_link: string
        :param parent_link: Name of parent link to move to
        :rtype: boolean
        :return: Returns true if successful, otherwise false.
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_moveJoint(self, name, parent_link)

    def getJoints(self):
        r"""
        Get a vector of joints in the scene graph
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Joint const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint const > > >
        :return: A vector of joints
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getJoints(self)

    def getActiveJoints(self):
        r"""
        Get a vector of active joints in the scene graph
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Joint const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint const > > >
        :return: A vector of active joints
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getActiveJoints(self)

    def changeJointOrigin(self, name, new_origin):
        r"""
         Changes the "origin" transform of the joint and recomputes the associated edge
        :type name: string
        :param name: Name of the joint to be changed
        :type new_origin: :py:class:`Isometry3d`
        :param new_origin: The new transform associated with the joint
        :rtype: boolean
        :return: True if successful.
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_changeJointOrigin(self, name, new_origin)

    def changeJointLimits(self, name, limits):
        r"""
        Changes the limits of a joint. The JointLimits::Ptr remains the same, but the values passed in are assigned
        :type name: string
        :param name: Name of the joint to be changed
        :type limits: :py:class:`JointLimits`
        :param limits: The new limits associated with the joint
        :rtype: boolean
        :return: True if successful.
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_changeJointLimits(self, name, limits)

    def changeJointPositionLimits(self, name, lower, upper):
        r"""
        Changes the position limits associated with a joint
        :param joint_name: Name of the joint to be updated
        :param limits: New position limits to be set as the joint limits
            if successful.
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_changeJointPositionLimits(self, name, lower, upper)

    def changeJointVelocityLimits(self, name, limit):
        r"""
        Changes the velocity limits associated with a joint
        :param joint_name: Name of the joint to be updated
        :param limits: New velocity limits to be set as the joint limits
        :rtype: boolean
        :return: 
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_changeJointVelocityLimits(self, name, limit)

    def changeJointAccelerationLimits(self, name, limit):
        r"""
        Changes the acceleration limits associated with a joint
        :param joint_name: Name of the joint to be updated
        :param limits: New acceleration limits to be set as the joint limits
        :rtype: boolean
        :return: 
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_changeJointAccelerationLimits(self, name, limit)

    def changeJointJerkLimits(self, name, limit):
        r"""
        Changes the jerk limits associated with a joint
        :param joint_name: Name of the joint to be updated
        :param limits: New jerk limits to be set as the joint limits
        :rtype: boolean
        :return: 
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_changeJointJerkLimits(self, name, limit)

    def getJointLimits(self, name):
        r"""
        Gets the limits of the joint specified by name
        :type name: string
        :param name: Name of the joint which limits will be retrieved
        :rtype: :py:class:`JointLimits`
        :return: Limits of the joint. Returns nullptr is joint is not found.
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getJointLimits(self, name)

    def setAllowedCollisionMatrix(self, acm):
        r"""
        Set the allowed collision matrix
        :type acm: :py:class:`AllowedCollisionMatrix`
        :param acm: The allowed collision matrix to assign
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_setAllowedCollisionMatrix(self, acm)

    def addAllowedCollision(self, link_name1, link_name2, reason):
        r"""
        Disable collision between two collision objects
        :type link_name1: string
        :param link_name1: Collision object name
        :type link_name2: string
        :param link_name2: Collision object name
        :type reason: string
        :param reason: The reason for disabling collision
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_addAllowedCollision(self, link_name1, link_name2, reason)

    def removeAllowedCollision(self, *args):
        r"""
        *Overload 1:*

        Remove disabled collision pair from allowed collision matrix
        :type link_name1: string
        :param link_name1: Collision object name
        :type link_name2: string
        :param link_name2: Collision object name

        |

        *Overload 2:*

        Remove disabled collision for any pair with link_name from allowed collision matrix
        :type link_name: string
        :param link_name: Collision object name
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_removeAllowedCollision(self, *args)

    def clearAllowedCollisions(self):
        r""" Remove all allowed collisions"""
        return _tesseract_scene_graph_python.SceneGraphUPtr_clearAllowedCollisions(self)

    def isCollisionAllowed(self, link_name1, link_name2):
        r"""
        Check if two links are allowed to be in collision
        :type link_name1: string
        :param link_name1: link name
        :type link_name2: string
        :param link_name2: link name
        :rtype: boolean
        :return: True if the two links are allowed to be in collision, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_isCollisionAllowed(self, link_name1, link_name2)

    def getAllowedCollisionMatrix(self, *args):
        r"""
        *Overload 1:*

        Get the allowed collision matrix
        :rtype: :py:class:`AllowedCollisionMatrix`
        :return: AllowedCollisionMatrixConstPtr

        |

        *Overload 2:*

        Get the allowed collision matrix
        :rtype: :py:class:`AllowedCollisionMatrix`
        :return: AllowedCollisionMatrixPtr
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getAllowedCollisionMatrix(self, *args)

    def getSourceLink(self, joint_name):
        r"""
        Get the source link (parent link) for a joint
        :type joint_name: string
        :param joint_name: The name of the joint
        :rtype: :py:class:`Link`
        :return: The source link
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getSourceLink(self, joint_name)

    def getTargetLink(self, joint_name):
        r"""
        Get the target link (child link) for a joint
        :type joint_name: string
        :param joint_name: The name of the joint
        :rtype: :py:class:`Link`
        :return: The target link
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getTargetLink(self, joint_name)

    def getInboundJoints(self, link_name):
        r"""
        Get inbound joints for a link

        The inbound joints are all joints that have the
        link identified as the child link

        :type link_name: string
        :param link_name: The name of the link
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Joint const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint const > > >
        :return: Vector of joints
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getInboundJoints(self, link_name)

    def getOutboundJoints(self, link_name):
        r"""
        Get outbound joints for a link

        The outbound joints are all joins that have the
        link identified as the parent link

        :type link_name: string
        :param link_name: The name of the link
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Joint const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint const > > >
        :return: Vector of joints
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getOutboundJoints(self, link_name)

    def isAcyclic(self):
        r"""
        Determine if the graph contains cycles
        :rtype: boolean
        :return: True if graph is acyclic (no cycles) otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_isAcyclic(self)

    def isTree(self):
        r"""
        Determine if the graph is a tree
        :rtype: boolean
        :return: True if graph is tree otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_isTree(self)

    def isEmpty(self):
        r"""
        Check if the graph is empty
        :rtype: boolean
        :return: True if empty, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_isEmpty(self)

    def getAdjacentLinkNames(self, name):
        r"""
        Get a vector of adjacent link names provided a link name
        :type name: string
        :param name: Name of link
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of adjacent link names
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getAdjacentLinkNames(self, name)

    def getInvAdjacentLinkNames(self, name):
        r"""
        Geta a vectpr pf inverse adjacent link names provided a link name
        :type name: string
        :param name:
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: 
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getInvAdjacentLinkNames(self, name)

    def getLinkChildrenNames(self, name):
        r"""
        Get all children for a given link name
        :type name: string
        :param name: Name of Link
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of child link names
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getLinkChildrenNames(self, name)

    def getJointChildrenNames(self, *args):
        r"""
        *Overload 1:*

        Get all children link names for a given joint name
        :type name: string
        :param name: Name of joint
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of child link names

        |

        *Overload 2:*

        Get all children link names for the given joint names
        TODO: Need to create custom visitor so already process joint_names do not get processed again.
        :type names: std::vector< std::string,std::allocator< std::string > >
        :param names: Name of joints
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of child link names
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getJointChildrenNames(self, *args)

    def getAdjacencyMap(self, link_names):
        r"""
        Create mapping between links in the scene to the provided links if they are directly affected if the link
        moves
        :type link_names: std::vector< std::string,std::allocator< std::string > >
        :param link_names: The links to map other links to
        :rtype: std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >
        :return: A map of affected links to on of the provided link names.
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getAdjacencyMap(self, link_names)

    def saveDOT(self, path):
        r"""
        Saves Graph as Graph Description Language (DOT)
        :type path: string
        :param path: The file path
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_saveDOT(self, path)

    def getShortestPath(self, root, tip):
        r"""
        Get the shortest path between two links
        :type root: string
        :param root: The base link
        :type tip: string
        :param tip: The tip link
        :rtype: :py:class:`ShortestPath`
        :return: The shortest path between the two links
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_getShortestPath(self, root, tip)

    def insertSceneGraph(self, *args):
        r"""
        *Overload 1:*

        Merge a graph into the current graph
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :type prefix: string, optional
        :param prefix: string Will prepend to every link and joint of the merged graph
        :rtype: boolean
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a sub-graph into the current environment, considering that the root of the merged graph is attached to the
            root of the environment by a fixed joint and no displacement. Every joint and link of the sub-graph will be copied
            into the environment graph. The prefix argument is meant to allow adding multiple copies of the same sub-graph with
            different names

        |

        *Overload 2:*

        Merge a graph into the current environment
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :type joint: :py:class:`Joint`
        :param joint: The joint that connects current environment with the inserted graph
        :type prefix: string, optional
        :param prefix: string Will prepend to every link and joint of the merged graph
        :rtype: boolean
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a sub-graph into the current environment. Every joint and link of the sub-graph will be copied into the
            environment graph. The prefix argument is meant to allow adding multiple copies of the same sub-graph with
            different names

        |

        *Overload 3:*

        Merge a graph into the current environment
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :type joint: :py:class:`Joint`
        :param joint: The joint that connects current environment with the inserted graph
        :param prefix: string Will prepend to every link and joint of the merged graph
        :rtype: boolean
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a sub-graph into the current environment. Every joint and link of the sub-graph will be copied into the
            environment graph. The prefix argument is meant to allow adding multiple copies of the same sub-graph with
            different names
        """
        return _tesseract_scene_graph_python.SceneGraphUPtr_insertSceneGraph(self, *args)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.SceneGraphUPtr___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.SceneGraphUPtr___ne__(self, rhs)

# Register SceneGraphUPtr in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.SceneGraphUPtr_swigregister(SceneGraphUPtr)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class LinkVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_scene_graph_python.LinkVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_scene_graph_python.LinkVector___nonzero__(self)

    def __bool__(self):
        return _tesseract_scene_graph_python.LinkVector___bool__(self)

    def __len__(self):
        return _tesseract_scene_graph_python.LinkVector___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_scene_graph_python.LinkVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_scene_graph_python.LinkVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_scene_graph_python.LinkVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_scene_graph_python.LinkVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_scene_graph_python.LinkVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_scene_graph_python.LinkVector___setitem__(self, *args)

    def pop(self):
        return _tesseract_scene_graph_python.LinkVector_pop(self)

    def append(self, x):
        return _tesseract_scene_graph_python.LinkVector_append(self, x)

    def empty(self):
        return _tesseract_scene_graph_python.LinkVector_empty(self)

    def size(self):
        return _tesseract_scene_graph_python.LinkVector_size(self)

    def swap(self, v):
        return _tesseract_scene_graph_python.LinkVector_swap(self, v)

    def begin(self):
        return _tesseract_scene_graph_python.LinkVector_begin(self)

    def end(self):
        return _tesseract_scene_graph_python.LinkVector_end(self)

    def rbegin(self):
        return _tesseract_scene_graph_python.LinkVector_rbegin(self)

    def rend(self):
        return _tesseract_scene_graph_python.LinkVector_rend(self)

    def clear(self):
        return _tesseract_scene_graph_python.LinkVector_clear(self)

    def get_allocator(self):
        return _tesseract_scene_graph_python.LinkVector_get_allocator(self)

    def pop_back(self):
        return _tesseract_scene_graph_python.LinkVector_pop_back(self)

    def erase(self, *args):
        return _tesseract_scene_graph_python.LinkVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_scene_graph_python.LinkVector_swiginit(self, _tesseract_scene_graph_python.new_LinkVector(*args))

    def push_back(self, x):
        return _tesseract_scene_graph_python.LinkVector_push_back(self, x)

    def front(self):
        return _tesseract_scene_graph_python.LinkVector_front(self)

    def back(self):
        return _tesseract_scene_graph_python.LinkVector_back(self)

    def assign(self, n, x):
        return _tesseract_scene_graph_python.LinkVector_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_scene_graph_python.LinkVector_resize(self, *args)

    def insert(self, *args):
        return _tesseract_scene_graph_python.LinkVector_insert(self, *args)

    def reserve(self, n):
        return _tesseract_scene_graph_python.LinkVector_reserve(self, n)

    def capacity(self):
        return _tesseract_scene_graph_python.LinkVector_capacity(self)
    __swig_destroy__ = _tesseract_scene_graph_python.delete_LinkVector

# Register LinkVector in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.LinkVector_swigregister(LinkVector)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_scene_graph_python.JointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_scene_graph_python.JointVector___nonzero__(self)

    def __bool__(self):
        return _tesseract_scene_graph_python.JointVector___bool__(self)

    def __len__(self):
        return _tesseract_scene_graph_python.JointVector___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_scene_graph_python.JointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_scene_graph_python.JointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_scene_graph_python.JointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_scene_graph_python.JointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_scene_graph_python.JointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_scene_graph_python.JointVector___setitem__(self, *args)

    def pop(self):
        return _tesseract_scene_graph_python.JointVector_pop(self)

    def append(self, x):
        return _tesseract_scene_graph_python.JointVector_append(self, x)

    def empty(self):
        return _tesseract_scene_graph_python.JointVector_empty(self)

    def size(self):
        return _tesseract_scene_graph_python.JointVector_size(self)

    def swap(self, v):
        return _tesseract_scene_graph_python.JointVector_swap(self, v)

    def begin(self):
        return _tesseract_scene_graph_python.JointVector_begin(self)

    def end(self):
        return _tesseract_scene_graph_python.JointVector_end(self)

    def rbegin(self):
        return _tesseract_scene_graph_python.JointVector_rbegin(self)

    def rend(self):
        return _tesseract_scene_graph_python.JointVector_rend(self)

    def clear(self):
        return _tesseract_scene_graph_python.JointVector_clear(self)

    def get_allocator(self):
        return _tesseract_scene_graph_python.JointVector_get_allocator(self)

    def pop_back(self):
        return _tesseract_scene_graph_python.JointVector_pop_back(self)

    def erase(self, *args):
        return _tesseract_scene_graph_python.JointVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_scene_graph_python.JointVector_swiginit(self, _tesseract_scene_graph_python.new_JointVector(*args))

    def push_back(self, x):
        return _tesseract_scene_graph_python.JointVector_push_back(self, x)

    def front(self):
        return _tesseract_scene_graph_python.JointVector_front(self)

    def back(self):
        return _tesseract_scene_graph_python.JointVector_back(self)

    def assign(self, n, x):
        return _tesseract_scene_graph_python.JointVector_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_scene_graph_python.JointVector_resize(self, *args)

    def insert(self, *args):
        return _tesseract_scene_graph_python.JointVector_insert(self, *args)

    def reserve(self, n):
        return _tesseract_scene_graph_python.JointVector_reserve(self, n)

    def capacity(self):
        return _tesseract_scene_graph_python.JointVector_capacity(self)
    __swig_destroy__ = _tesseract_scene_graph_python.delete_JointVector

# Register JointVector in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.JointVector_swigregister(JointVector)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class LinkConstVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_scene_graph_python.LinkConstVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_scene_graph_python.LinkConstVector___nonzero__(self)

    def __bool__(self):
        return _tesseract_scene_graph_python.LinkConstVector___bool__(self)

    def __len__(self):
        return _tesseract_scene_graph_python.LinkConstVector___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_scene_graph_python.LinkConstVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_scene_graph_python.LinkConstVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_scene_graph_python.LinkConstVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_scene_graph_python.LinkConstVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_scene_graph_python.LinkConstVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_scene_graph_python.LinkConstVector___setitem__(self, *args)

    def pop(self):
        return _tesseract_scene_graph_python.LinkConstVector_pop(self)

    def append(self, x):
        return _tesseract_scene_graph_python.LinkConstVector_append(self, x)

    def empty(self):
        return _tesseract_scene_graph_python.LinkConstVector_empty(self)

    def size(self):
        return _tesseract_scene_graph_python.LinkConstVector_size(self)

    def swap(self, v):
        return _tesseract_scene_graph_python.LinkConstVector_swap(self, v)

    def begin(self):
        return _tesseract_scene_graph_python.LinkConstVector_begin(self)

    def end(self):
        return _tesseract_scene_graph_python.LinkConstVector_end(self)

    def rbegin(self):
        return _tesseract_scene_graph_python.LinkConstVector_rbegin(self)

    def rend(self):
        return _tesseract_scene_graph_python.LinkConstVector_rend(self)

    def clear(self):
        return _tesseract_scene_graph_python.LinkConstVector_clear(self)

    def get_allocator(self):
        return _tesseract_scene_graph_python.LinkConstVector_get_allocator(self)

    def pop_back(self):
        return _tesseract_scene_graph_python.LinkConstVector_pop_back(self)

    def erase(self, *args):
        return _tesseract_scene_graph_python.LinkConstVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_scene_graph_python.LinkConstVector_swiginit(self, _tesseract_scene_graph_python.new_LinkConstVector(*args))

    def push_back(self, x):
        return _tesseract_scene_graph_python.LinkConstVector_push_back(self, x)

    def front(self):
        return _tesseract_scene_graph_python.LinkConstVector_front(self)

    def back(self):
        return _tesseract_scene_graph_python.LinkConstVector_back(self)

    def assign(self, n, x):
        return _tesseract_scene_graph_python.LinkConstVector_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_scene_graph_python.LinkConstVector_resize(self, *args)

    def insert(self, *args):
        return _tesseract_scene_graph_python.LinkConstVector_insert(self, *args)

    def reserve(self, n):
        return _tesseract_scene_graph_python.LinkConstVector_reserve(self, n)

    def capacity(self):
        return _tesseract_scene_graph_python.LinkConstVector_capacity(self)
    __swig_destroy__ = _tesseract_scene_graph_python.delete_LinkConstVector

# Register LinkConstVector in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.LinkConstVector_swigregister(LinkConstVector)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointConstVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_scene_graph_python.JointConstVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_scene_graph_python.JointConstVector___nonzero__(self)

    def __bool__(self):
        return _tesseract_scene_graph_python.JointConstVector___bool__(self)

    def __len__(self):
        return _tesseract_scene_graph_python.JointConstVector___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_scene_graph_python.JointConstVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_scene_graph_python.JointConstVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_scene_graph_python.JointConstVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_scene_graph_python.JointConstVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_scene_graph_python.JointConstVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_scene_graph_python.JointConstVector___setitem__(self, *args)

    def pop(self):
        return _tesseract_scene_graph_python.JointConstVector_pop(self)

    def append(self, x):
        return _tesseract_scene_graph_python.JointConstVector_append(self, x)

    def empty(self):
        return _tesseract_scene_graph_python.JointConstVector_empty(self)

    def size(self):
        return _tesseract_scene_graph_python.JointConstVector_size(self)

    def swap(self, v):
        return _tesseract_scene_graph_python.JointConstVector_swap(self, v)

    def begin(self):
        return _tesseract_scene_graph_python.JointConstVector_begin(self)

    def end(self):
        return _tesseract_scene_graph_python.JointConstVector_end(self)

    def rbegin(self):
        return _tesseract_scene_graph_python.JointConstVector_rbegin(self)

    def rend(self):
        return _tesseract_scene_graph_python.JointConstVector_rend(self)

    def clear(self):
        return _tesseract_scene_graph_python.JointConstVector_clear(self)

    def get_allocator(self):
        return _tesseract_scene_graph_python.JointConstVector_get_allocator(self)

    def pop_back(self):
        return _tesseract_scene_graph_python.JointConstVector_pop_back(self)

    def erase(self, *args):
        return _tesseract_scene_graph_python.JointConstVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_scene_graph_python.JointConstVector_swiginit(self, _tesseract_scene_graph_python.new_JointConstVector(*args))

    def push_back(self, x):
        return _tesseract_scene_graph_python.JointConstVector_push_back(self, x)

    def front(self):
        return _tesseract_scene_graph_python.JointConstVector_front(self)

    def back(self):
        return _tesseract_scene_graph_python.JointConstVector_back(self)

    def assign(self, n, x):
        return _tesseract_scene_graph_python.JointConstVector_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_scene_graph_python.JointConstVector_resize(self, *args)

    def insert(self, *args):
        return _tesseract_scene_graph_python.JointConstVector_insert(self, *args)

    def reserve(self, n):
        return _tesseract_scene_graph_python.JointConstVector_reserve(self, n)

    def capacity(self):
        return _tesseract_scene_graph_python.JointConstVector_capacity(self)
    __swig_destroy__ = _tesseract_scene_graph_python.delete_JointConstVector

# Register JointConstVector in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.JointConstVector_swigregister(JointConstVector)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ShortestPath(object):
    r""" Holds the shortest path information."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    links = property(_tesseract_scene_graph_python.ShortestPath_links_get, _tesseract_scene_graph_python.ShortestPath_links_set, doc=r""" a list of links along the shortest path""")
    joints = property(_tesseract_scene_graph_python.ShortestPath_joints_get, _tesseract_scene_graph_python.ShortestPath_joints_set, doc=r""" A list of joints along the shortest path""")
    active_joints = property(_tesseract_scene_graph_python.ShortestPath_active_joints_get, _tesseract_scene_graph_python.ShortestPath_active_joints_set, doc=r""" A list of active joints along the shortest path""")

    def __init__(self):
        _tesseract_scene_graph_python.ShortestPath_swiginit(self, _tesseract_scene_graph_python.new_ShortestPath())
    __swig_destroy__ = _tesseract_scene_graph_python.delete_ShortestPath

# Register ShortestPath in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.ShortestPath_swigregister(ShortestPath)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SceneGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_scene_graph_python.delete_SceneGraph

    def __init__(self, *args):
        _tesseract_scene_graph_python.SceneGraph_swiginit(self, _tesseract_scene_graph_python.new_SceneGraph(*args))

    def clone(self):
        r"""
        Clone the scene graph
        :rtype: :py:class:`UPtr`
        :return: The cloned scene graph
        """
        return _tesseract_scene_graph_python.SceneGraph_clone(self)

    def clear(self):
        r""" Clear the scene graph"""
        return _tesseract_scene_graph_python.SceneGraph_clear(self)

    def setName(self, name):
        r"""
        Sets the graph name
        :type name: string
        :param name: The name of the graph
        """
        return _tesseract_scene_graph_python.SceneGraph_setName(self, name)

    def getName(self):
        r"""
        Sets the graph name
        :param name: The name of the graph
        """
        return _tesseract_scene_graph_python.SceneGraph_getName(self)

    def setRoot(self, name):
        r"""
        Sets the root link name (aka. World Coordinate Frame)
        :type name: string
        :param name: The name of the link
        :rtype: boolean
        :return: Return False if a link does not exists, otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraph_setRoot(self, name)

    def getRoot(self):
        r"""
        Gets the root link name (aka. World Coordinate Frame)
        :rtype: string
        :return: The root link name
        """
        return _tesseract_scene_graph_python.SceneGraph_getRoot(self)

    def addLink(self, *args):
        r"""
        *Overload 1:*

        Adds a link to the graph

        The first link added to the graph is set as the root by default. Use setRoot to change the root link of the graph.

        :type link: :py:class:`Link`
        :param link: The link to be added to the graph
        :type replace_allowed: boolean, optional
        :param replace_allowed: If true and the link exist it will be replaced
        :rtype: boolean
        :return: Return False if a link with the same name already exists and replace is not allowed, otherwise true

        |

        *Overload 2:*

        Adds a link/joint to the graph

        The first link added to the graph is set as the root by default. Use setRoot to change the root link of the graph.

        :type link: :py:class:`Link`
        :param link: The link to be added to the graph
        :type joint: :py:class:`Joint`
        :param joint: The associated joint to be added to the graph
        :rtype: boolean
        :return: Return False if a link with the same name allready exists, otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraph_addLink(self, *args)

    def getLink(self, name):
        r"""
        Get a link in the graph
        :type name: string
        :param name: The name of the link
        :rtype: :py:class:`Link`
        :return: Return nullptr if link name does not exists, otherwise a pointer to the link
        """
        return _tesseract_scene_graph_python.SceneGraph_getLink(self, name)

    def getLinks(self):
        r"""
        Get a vector links in the scene graph
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Link const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Link const > > >
        :return: A vector of links
        """
        return _tesseract_scene_graph_python.SceneGraph_getLinks(self)

    def getLeafLinks(self):
        r"""
        Get a vector leaf links in the scene graph
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Link const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Link const > > >
        :return: A vector of links
        """
        return _tesseract_scene_graph_python.SceneGraph_getLeafLinks(self)

    def removeLink(self, name, recursive=False):
        r"""
        Removes a link from the graph

        Note: this will remove all inbound and outbound edges

        :type name: string
        :param name: Name of the link to be removed
        :type recursive: boolean, optional
        :param recursive: If true all children are removed if it only has a single joint
        :rtype: boolean
        :return: Return False if a link does not exists, otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraph_removeLink(self, name, recursive)

    def moveLink(self, joint):
        r"""
        Move link defined by provided joint
        This deletes all inbound joints on the parent link defined by the joint
        :type joint: :py:class:`Joint`
        :param joint: The joint defining the link move
        :rtype: boolean
        :return: Returns true if successful, otherwise false.
        """
        return _tesseract_scene_graph_python.SceneGraph_moveLink(self, joint)

    def setLinkVisibility(self, name, visibility):
        r"""
        Set a links visibility
        :type visibility: boolean
        :param visibility: True if should be visible, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraph_setLinkVisibility(self, name, visibility)

    def getLinkVisibility(self, name):
        r"""
        Get a given links visibility setting
        :rtype: boolean
        :return: True if should be visible, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraph_getLinkVisibility(self, name)

    def setLinkCollisionEnabled(self, name, enabled):
        r"""
        Set whether a link should be considered during collision checking
        :type enabled: boolean
        :param enabled: True if should be considered during collision checking, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraph_setLinkCollisionEnabled(self, name, enabled)

    def getLinkCollisionEnabled(self, name):
        r"""
        Get whether a link should be considered during collision checking
        :rtype: boolean
        :return: True if should be considered during collision checking, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraph_getLinkCollisionEnabled(self, name)

    def addJoint(self, joint):
        r"""
        Adds joint to the graph
        :type joint: :py:class:`Joint`
        :param joint: The joint to be added
        :rtype: boolean
        :return: Return False if parent or child link does not exists and if joint name already exists in the graph,
            otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraph_addJoint(self, joint)

    def getJoint(self, name):
        r"""
        Get a joint in the graph
        :type name: string
        :param name: The name of the joint
        :rtype: :py:class:`Joint`
        :return: Return nullptr if joint name does not exists, otherwise a pointer to the joint
        """
        return _tesseract_scene_graph_python.SceneGraph_getJoint(self, name)

    def removeJoint(self, name, recursive=False):
        r"""
        Removes a joint from the graph
        :type name: string
        :param name: Name of the joint to be removed
        :type recursive: boolean, optional
        :param recursive: If true all children are removed if this this is the only joint of the child link
        :rtype: boolean
        :return: Return False if a joint does not exists, otherwise true
        """
        return _tesseract_scene_graph_python.SceneGraph_removeJoint(self, name, recursive)

    def moveJoint(self, name, parent_link):
        r"""
        Move joint to new parent link
        :type name: string
        :param name: Name of the joint to move
        :type parent_link: string
        :param parent_link: Name of parent link to move to
        :rtype: boolean
        :return: Returns true if successful, otherwise false.
        """
        return _tesseract_scene_graph_python.SceneGraph_moveJoint(self, name, parent_link)

    def getJoints(self):
        r"""
        Get a vector of joints in the scene graph
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Joint const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint const > > >
        :return: A vector of joints
        """
        return _tesseract_scene_graph_python.SceneGraph_getJoints(self)

    def getActiveJoints(self):
        r"""
        Get a vector of active joints in the scene graph
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Joint const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint const > > >
        :return: A vector of active joints
        """
        return _tesseract_scene_graph_python.SceneGraph_getActiveJoints(self)

    def changeJointOrigin(self, name, new_origin):
        r"""
         Changes the "origin" transform of the joint and recomputes the associated edge
        :type name: string
        :param name: Name of the joint to be changed
        :type new_origin: :py:class:`Isometry3d`
        :param new_origin: The new transform associated with the joint
        :rtype: boolean
        :return: True if successful.
        """
        return _tesseract_scene_graph_python.SceneGraph_changeJointOrigin(self, name, new_origin)

    def changeJointLimits(self, name, limits):
        r"""
        Changes the limits of a joint. The JointLimits::Ptr remains the same, but the values passed in are assigned
        :type name: string
        :param name: Name of the joint to be changed
        :type limits: :py:class:`JointLimits`
        :param limits: The new limits associated with the joint
        :rtype: boolean
        :return: True if successful.
        """
        return _tesseract_scene_graph_python.SceneGraph_changeJointLimits(self, name, limits)

    def changeJointPositionLimits(self, name, lower, upper):
        r"""
        Changes the position limits associated with a joint
        :param joint_name: Name of the joint to be updated
        :param limits: New position limits to be set as the joint limits
            if successful.
        """
        return _tesseract_scene_graph_python.SceneGraph_changeJointPositionLimits(self, name, lower, upper)

    def changeJointVelocityLimits(self, name, limit):
        r"""
        Changes the velocity limits associated with a joint
        :param joint_name: Name of the joint to be updated
        :param limits: New velocity limits to be set as the joint limits
        :rtype: boolean
        :return: 
        """
        return _tesseract_scene_graph_python.SceneGraph_changeJointVelocityLimits(self, name, limit)

    def changeJointAccelerationLimits(self, name, limit):
        r"""
        Changes the acceleration limits associated with a joint
        :param joint_name: Name of the joint to be updated
        :param limits: New acceleration limits to be set as the joint limits
        :rtype: boolean
        :return: 
        """
        return _tesseract_scene_graph_python.SceneGraph_changeJointAccelerationLimits(self, name, limit)

    def changeJointJerkLimits(self, name, limit):
        r"""
        Changes the jerk limits associated with a joint
        :param joint_name: Name of the joint to be updated
        :param limits: New jerk limits to be set as the joint limits
        :rtype: boolean
        :return: 
        """
        return _tesseract_scene_graph_python.SceneGraph_changeJointJerkLimits(self, name, limit)

    def getJointLimits(self, name):
        r"""
        Gets the limits of the joint specified by name
        :type name: string
        :param name: Name of the joint which limits will be retrieved
        :rtype: :py:class:`JointLimits`
        :return: Limits of the joint. Returns nullptr is joint is not found.
        """
        return _tesseract_scene_graph_python.SceneGraph_getJointLimits(self, name)

    def setAllowedCollisionMatrix(self, acm):
        r"""
        Set the allowed collision matrix
        :type acm: :py:class:`AllowedCollisionMatrix`
        :param acm: The allowed collision matrix to assign
        """
        return _tesseract_scene_graph_python.SceneGraph_setAllowedCollisionMatrix(self, acm)

    def addAllowedCollision(self, link_name1, link_name2, reason):
        r"""
        Disable collision between two collision objects
        :type link_name1: string
        :param link_name1: Collision object name
        :type link_name2: string
        :param link_name2: Collision object name
        :type reason: string
        :param reason: The reason for disabling collision
        """
        return _tesseract_scene_graph_python.SceneGraph_addAllowedCollision(self, link_name1, link_name2, reason)

    def removeAllowedCollision(self, *args):
        r"""
        *Overload 1:*

        Remove disabled collision pair from allowed collision matrix
        :type link_name1: string
        :param link_name1: Collision object name
        :type link_name2: string
        :param link_name2: Collision object name

        |

        *Overload 2:*

        Remove disabled collision for any pair with link_name from allowed collision matrix
        :type link_name: string
        :param link_name: Collision object name
        """
        return _tesseract_scene_graph_python.SceneGraph_removeAllowedCollision(self, *args)

    def clearAllowedCollisions(self):
        r""" Remove all allowed collisions"""
        return _tesseract_scene_graph_python.SceneGraph_clearAllowedCollisions(self)

    def isCollisionAllowed(self, link_name1, link_name2):
        r"""
        Check if two links are allowed to be in collision
        :type link_name1: string
        :param link_name1: link name
        :type link_name2: string
        :param link_name2: link name
        :rtype: boolean
        :return: True if the two links are allowed to be in collision, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraph_isCollisionAllowed(self, link_name1, link_name2)

    def getAllowedCollisionMatrix(self, *args):
        r"""
        *Overload 1:*

        Get the allowed collision matrix
        :rtype: :py:class:`AllowedCollisionMatrix`
        :return: AllowedCollisionMatrixConstPtr

        |

        *Overload 2:*

        Get the allowed collision matrix
        :rtype: :py:class:`AllowedCollisionMatrix`
        :return: AllowedCollisionMatrixPtr
        """
        return _tesseract_scene_graph_python.SceneGraph_getAllowedCollisionMatrix(self, *args)

    def getSourceLink(self, joint_name):
        r"""
        Get the source link (parent link) for a joint
        :type joint_name: string
        :param joint_name: The name of the joint
        :rtype: :py:class:`Link`
        :return: The source link
        """
        return _tesseract_scene_graph_python.SceneGraph_getSourceLink(self, joint_name)

    def getTargetLink(self, joint_name):
        r"""
        Get the target link (child link) for a joint
        :type joint_name: string
        :param joint_name: The name of the joint
        :rtype: :py:class:`Link`
        :return: The target link
        """
        return _tesseract_scene_graph_python.SceneGraph_getTargetLink(self, joint_name)

    def getInboundJoints(self, link_name):
        r"""
        Get inbound joints for a link

        The inbound joints are all joints that have the
        link identified as the child link

        :type link_name: string
        :param link_name: The name of the link
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Joint const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint const > > >
        :return: Vector of joints
        """
        return _tesseract_scene_graph_python.SceneGraph_getInboundJoints(self, link_name)

    def getOutboundJoints(self, link_name):
        r"""
        Get outbound joints for a link

        The outbound joints are all joins that have the
        link identified as the parent link

        :type link_name: string
        :param link_name: The name of the link
        :rtype: std::vector< std::shared_ptr< tesseract_scene_graph::Joint const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint const > > >
        :return: Vector of joints
        """
        return _tesseract_scene_graph_python.SceneGraph_getOutboundJoints(self, link_name)

    def isAcyclic(self):
        r"""
        Determine if the graph contains cycles
        :rtype: boolean
        :return: True if graph is acyclic (no cycles) otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraph_isAcyclic(self)

    def isTree(self):
        r"""
        Determine if the graph is a tree
        :rtype: boolean
        :return: True if graph is tree otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraph_isTree(self)

    def isEmpty(self):
        r"""
        Check if the graph is empty
        :rtype: boolean
        :return: True if empty, otherwise false
        """
        return _tesseract_scene_graph_python.SceneGraph_isEmpty(self)

    def getAdjacentLinkNames(self, name):
        r"""
        Get a vector of adjacent link names provided a link name
        :type name: string
        :param name: Name of link
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of adjacent link names
        """
        return _tesseract_scene_graph_python.SceneGraph_getAdjacentLinkNames(self, name)

    def getInvAdjacentLinkNames(self, name):
        r"""
        Geta a vectpr pf inverse adjacent link names provided a link name
        :type name: string
        :param name:
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: 
        """
        return _tesseract_scene_graph_python.SceneGraph_getInvAdjacentLinkNames(self, name)

    def getLinkChildrenNames(self, name):
        r"""
        Get all children for a given link name
        :type name: string
        :param name: Name of Link
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of child link names
        """
        return _tesseract_scene_graph_python.SceneGraph_getLinkChildrenNames(self, name)

    def getAdjacencyMap(self, link_names):
        r"""
        Create mapping between links in the scene to the provided links if they are directly affected if the link
        moves
        :type link_names: std::vector< std::string,std::allocator< std::string > >
        :param link_names: The links to map other links to
        :rtype: std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >
        :return: A map of affected links to on of the provided link names.
        """
        return _tesseract_scene_graph_python.SceneGraph_getAdjacencyMap(self, link_names)

    def getJointChildrenNames(self, *args):
        r"""
        *Overload 1:*

        Get all children link names for a given joint name
        :type name: string
        :param name: Name of joint
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of child link names

        |

        *Overload 2:*

        Get all children link names for the given joint names
        TODO: Need to create custom visitor so already process joint_names do not get processed again.
        :type names: std::vector< std::string,std::allocator< std::string > >
        :param names: Name of joints
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of child link names
        """
        return _tesseract_scene_graph_python.SceneGraph_getJointChildrenNames(self, *args)

    def saveDOT(self, path):
        r"""
        Saves Graph as Graph Description Language (DOT)
        :type path: string
        :param path: The file path
        """
        return _tesseract_scene_graph_python.SceneGraph_saveDOT(self, path)

    def getShortestPath(self, root, tip):
        r"""
        Get the shortest path between two links
        :type root: string
        :param root: The base link
        :type tip: string
        :param tip: The tip link
        :rtype: :py:class:`ShortestPath`
        :return: The shortest path between the two links
        """
        return _tesseract_scene_graph_python.SceneGraph_getShortestPath(self, root, tip)

    def insertSceneGraph(self, *args):
        r"""
        *Overload 1:*

        Merge a graph into the current graph
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :type prefix: string, optional
        :param prefix: string Will prepend to every link and joint of the merged graph
        :rtype: boolean
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a sub-graph into the current environment, considering that the root of the merged graph is attached to the
            root of the environment by a fixed joint and no displacement. Every joint and link of the sub-graph will be copied
            into the environment graph. The prefix argument is meant to allow adding multiple copies of the same sub-graph with
            different names

        |

        *Overload 2:*

        Merge a graph into the current environment
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :type joint: :py:class:`Joint`
        :param joint: The joint that connects current environment with the inserted graph
        :type prefix: string, optional
        :param prefix: string Will prepend to every link and joint of the merged graph
        :rtype: boolean
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a sub-graph into the current environment. Every joint and link of the sub-graph will be copied into the
            environment graph. The prefix argument is meant to allow adding multiple copies of the same sub-graph with
            different names

        |

        *Overload 3:*

        Merge a graph into the current environment
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :type joint: :py:class:`Joint`
        :param joint: The joint that connects current environment with the inserted graph
        :param prefix: string Will prepend to every link and joint of the merged graph
        :rtype: boolean
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a sub-graph into the current environment. Every joint and link of the sub-graph will be copied into the
            environment graph. The prefix argument is meant to allow adding multiple copies of the same sub-graph with
            different names
        """
        return _tesseract_scene_graph_python.SceneGraph_insertSceneGraph(self, *args)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.SceneGraph___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.SceneGraph___ne__(self, rhs)

# Register SceneGraph in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.SceneGraph_swigregister(SceneGraph)

def __lshift__(*args):
    return _tesseract_scene_graph_python.__lshift__(*args)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SceneState(object):
    r"""
    This holds a state of the scene

    It provides a way to look up the location of a link/joint in world coordinates system by link/joint name. It is
    possible to get the joint transform using the child link transform of the joint, but they are both provided for
    convenience. Also the joint values used to calculated the link/joint transforms is provided.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    joints = property(_tesseract_scene_graph_python.SceneState_joints_get, _tesseract_scene_graph_python.SceneState_joints_set, doc=r"""  The joint values used for calculating the joint and link transforms""")
    floating_joints = property(_tesseract_scene_graph_python.SceneState_floating_joints_get, _tesseract_scene_graph_python.SceneState_floating_joints_set, doc=r""" The floating joint values used for calculating the joint and link transforms""")
    link_transforms = property(_tesseract_scene_graph_python.SceneState_link_transforms_get, _tesseract_scene_graph_python.SceneState_link_transforms_set, doc=r""" The link transforms in world coordinate system""")
    joint_transforms = property(_tesseract_scene_graph_python.SceneState_joint_transforms_get, _tesseract_scene_graph_python.SceneState_joint_transforms_set, doc=r""" The joint transforms in world coordinate system""")

    def getJointValues(self, joint_names):
        return _tesseract_scene_graph_python.SceneState_getJointValues(self, joint_names)

    def getFloatingJointValues(self, joint_names):
        return _tesseract_scene_graph_python.SceneState_getFloatingJointValues(self, joint_names)

    def __eq__(self, rhs):
        return _tesseract_scene_graph_python.SceneState___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_scene_graph_python.SceneState___ne__(self, rhs)

    def __init__(self):
        _tesseract_scene_graph_python.SceneState_swiginit(self, _tesseract_scene_graph_python.new_SceneState())
    __swig_destroy__ = _tesseract_scene_graph_python.delete_SceneState

# Register SceneState in _tesseract_scene_graph_python:
_tesseract_scene_graph_python.SceneState_swigregister(SceneState)

