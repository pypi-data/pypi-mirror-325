# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_motion_planners_trajopt_python
else:
    import _tesseract_motion_planners_trajopt_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_motion_planners_trajopt_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_SwigPyIterator

    def value(self):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator_copy(self)

    def next(self):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator_next(self)

    def __next__(self):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator___next__(self)

    def previous(self):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tesseract_motion_planners_trajopt_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.SwigPyIterator_swigregister(SwigPyIterator)
import tesseract_robotics.tesseract_motion_planners.tesseract_motion_planners_python
import tesseract_robotics.tesseract_environment.tesseract_environment_python
import tesseract_robotics.tesseract_kinematics.tesseract_kinematics_python
import tesseract_robotics.tesseract_common.tesseract_common_python
import tesseract_robotics.tesseract_scene_graph.tesseract_scene_graph_python
import tesseract_robotics.tesseract_geometry.tesseract_geometry_python
import tesseract_robotics.tesseract_srdf.tesseract_srdf_python
import tesseract_robotics.tesseract_state_solver.tesseract_state_solver_python
import tesseract_robotics.tesseract_collision.tesseract_collision_python
import tesseract_robotics.tesseract_command_language.tesseract_command_language_python
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SafetyMarginDataPtr_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector___nonzero__(self)

    def __bool__(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector___bool__(self)

    def __len__(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector___setitem__(self, *args)

    def pop(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_pop(self)

    def append(self, x):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_append(self, x)

    def empty(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_empty(self)

    def size(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_size(self)

    def swap(self, v):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_swap(self, v)

    def begin(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_begin(self)

    def end(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_end(self)

    def rbegin(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_rbegin(self)

    def rend(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_rend(self)

    def clear(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_clear(self)

    def get_allocator(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_get_allocator(self)

    def pop_back(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_pop_back(self)

    def erase(self, *args):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_swiginit(self, _tesseract_motion_planners_trajopt_python.new_SafetyMarginDataPtr_vector(*args))

    def push_back(self, x):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_push_back(self, x)

    def front(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_front(self)

    def back(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_back(self)

    def assign(self, n, x):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_resize(self, *args)

    def insert(self, *args):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_insert(self, *args)

    def reserve(self, n):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_reserve(self, n)

    def capacity(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_capacity(self)
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_SafetyMarginDataPtr_vector

# Register SafetyMarginDataPtr_vector in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.SafetyMarginDataPtr_vector_swigregister(SafetyMarginDataPtr_vector)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TermInfoPtr_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector___nonzero__(self)

    def __bool__(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector___bool__(self)

    def __len__(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector___setitem__(self, *args)

    def pop(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_pop(self)

    def append(self, x):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_append(self, x)

    def empty(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_empty(self)

    def size(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_size(self)

    def swap(self, v):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_swap(self, v)

    def begin(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_begin(self)

    def end(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_end(self)

    def rbegin(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_rbegin(self)

    def rend(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_rend(self)

    def clear(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_clear(self)

    def get_allocator(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_get_allocator(self)

    def pop_back(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_pop_back(self)

    def erase(self, *args):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TermInfoPtr_vector(*args))

    def push_back(self, x):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_push_back(self, x)

    def front(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_front(self)

    def back(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_back(self)

    def assign(self, n, x):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_resize(self, *args)

    def insert(self, *args):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_insert(self, *args)

    def reserve(self, n):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_reserve(self, n)

    def capacity(self):
        return _tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_capacity(self)
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TermInfoPtr_vector

# Register TermInfoPtr_vector in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TermInfoPtr_vector_swigregister(TermInfoPtr_vector)
class ModelType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GUROBI = _tesseract_motion_planners_trajopt_python.ModelType_GUROBI
    OSQP = _tesseract_motion_planners_trajopt_python.ModelType_OSQP
    QPOASES = _tesseract_motion_planners_trajopt_python.ModelType_QPOASES
    BPMPD = _tesseract_motion_planners_trajopt_python.ModelType_BPMPD
    AUTO_SOLVER = _tesseract_motion_planners_trajopt_python.ModelType_AUTO_SOLVER

    def __init__(self, *args):
        _tesseract_motion_planners_trajopt_python.ModelType_swiginit(self, _tesseract_motion_planners_trajopt_python.new_ModelType(*args))

    def __int__(self):
        return _tesseract_motion_planners_trajopt_python.ModelType___int__(self)

    def __eq__(self, *args):
        return _tesseract_motion_planners_trajopt_python.ModelType___eq__(self, *args)

    def __ne__(self, a):
        return _tesseract_motion_planners_trajopt_python.ModelType___ne__(self, a)

    def fromJson(self, v):
        return _tesseract_motion_planners_trajopt_python.ModelType_fromJson(self, v)
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_ModelType

# Register ModelType in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.ModelType_swigregister(ModelType)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class BasicTrustRegionSQPParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    improve_ratio_threshold = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_improve_ratio_threshold_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_improve_ratio_threshold_set)
    min_trust_box_size = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_min_trust_box_size_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_min_trust_box_size_set)
    min_approx_improve = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_min_approx_improve_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_min_approx_improve_set)
    min_approx_improve_frac = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_min_approx_improve_frac_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_min_approx_improve_frac_set)
    max_iter = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_max_iter_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_max_iter_set)
    trust_shrink_ratio = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_trust_shrink_ratio_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_trust_shrink_ratio_set)
    trust_expand_ratio = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_trust_expand_ratio_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_trust_expand_ratio_set)
    cnt_tolerance = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_cnt_tolerance_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_cnt_tolerance_set)
    max_merit_coeff_increases = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_max_merit_coeff_increases_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_max_merit_coeff_increases_set)
    merit_coeff_increase_ratio = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_merit_coeff_increase_ratio_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_merit_coeff_increase_ratio_set)
    max_time = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_max_time_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_max_time_set)
    initial_merit_error_coeff = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_initial_merit_error_coeff_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_initial_merit_error_coeff_set)
    inflate_constraints_individually = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_inflate_constraints_individually_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_inflate_constraints_individually_set)
    trust_box_size = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_trust_box_size_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_trust_box_size_set)
    log_results = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_log_results_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_log_results_set)
    log_dir = property(_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_log_dir_get, _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_log_dir_set)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_swiginit(self, _tesseract_motion_planners_trajopt_python.new_BasicTrustRegionSQPParameters())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_BasicTrustRegionSQPParameters

# Register BasicTrustRegionSQPParameters in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.BasicTrustRegionSQPParameters_swigregister(BasicTrustRegionSQPParameters)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SafetyMarginData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, default_safety_margin, default_safety_margin_coeff):
        _tesseract_motion_planners_trajopt_python.SafetyMarginData_swiginit(self, _tesseract_motion_planners_trajopt_python.new_SafetyMarginData(default_safety_margin, default_safety_margin_coeff))

    def setPairSafetyMarginData(self, obj1, obj2, safety_margin, safety_margin_coeff):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginData_setPairSafetyMarginData(self, obj1, obj2, safety_margin, safety_margin_coeff)

    def getPairSafetyMarginData(self, obj1, obj2):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginData_getPairSafetyMarginData(self, obj1, obj2)

    def getMaxSafetyMargin(self):
        return _tesseract_motion_planners_trajopt_python.SafetyMarginData_getMaxSafetyMargin(self)
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_SafetyMarginData

# Register SafetyMarginData in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.SafetyMarginData_swigregister(SafetyMarginData)

def createSafetyMarginDataVector(num_elements, default_safety_margin, default_safety_margin_coeff):
    return _tesseract_motion_planners_trajopt_python.createSafetyMarginDataVector(num_elements, default_safety_margin, default_safety_margin_coeff)
TermType_TT_INVALID = _tesseract_motion_planners_trajopt_python.TermType_TT_INVALID
TermType_TT_COST = _tesseract_motion_planners_trajopt_python.TermType_TT_COST
TermType_TT_CNT = _tesseract_motion_planners_trajopt_python.TermType_TT_CNT
TermType_TT_USE_TIME = _tesseract_motion_planners_trajopt_python.TermType_TT_USE_TIME
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TrajOptProb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_motion_planners_trajopt_python.TrajOptProb_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TrajOptProb(*args))
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptProb

    def GetNumSteps(self):
        return _tesseract_motion_planners_trajopt_python.TrajOptProb_GetNumSteps(self)

    def GetNumDOF(self):
        return _tesseract_motion_planners_trajopt_python.TrajOptProb_GetNumDOF(self)

    def GetKin(self):
        return _tesseract_motion_planners_trajopt_python.TrajOptProb_GetKin(self)

    def GetEnv(self):
        return _tesseract_motion_planners_trajopt_python.TrajOptProb_GetEnv(self)

    def SetInitTraj(self, x):
        return _tesseract_motion_planners_trajopt_python.TrajOptProb_SetInitTraj(self, x)

    def GetInitTraj(self):
        return _tesseract_motion_planners_trajopt_python.TrajOptProb_GetInitTraj(self)

    def GetHasTime(self):
        return _tesseract_motion_planners_trajopt_python.TrajOptProb_GetHasTime(self)

    def SetHasTime(self, tmp):
        return _tesseract_motion_planners_trajopt_python.TrajOptProb_SetHasTime(self, tmp)

# Register TrajOptProb in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptProb_swigregister(TrajOptProb)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TrajOptResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    cost_names = property(_tesseract_motion_planners_trajopt_python.TrajOptResult_cost_names_get, _tesseract_motion_planners_trajopt_python.TrajOptResult_cost_names_set)
    cnt_names = property(_tesseract_motion_planners_trajopt_python.TrajOptResult_cnt_names_get, _tesseract_motion_planners_trajopt_python.TrajOptResult_cnt_names_set)
    cost_vals = property(_tesseract_motion_planners_trajopt_python.TrajOptResult_cost_vals_get, _tesseract_motion_planners_trajopt_python.TrajOptResult_cost_vals_set)
    cnt_viols = property(_tesseract_motion_planners_trajopt_python.TrajOptResult_cnt_viols_get, _tesseract_motion_planners_trajopt_python.TrajOptResult_cnt_viols_set)
    traj = property(_tesseract_motion_planners_trajopt_python.TrajOptResult_traj_get, _tesseract_motion_planners_trajopt_python.TrajOptResult_traj_set)
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptResult

# Register TrajOptResult in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptResult_swigregister(TrajOptResult)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class BasicInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    n_steps = property(_tesseract_motion_planners_trajopt_python.BasicInfo_n_steps_get, _tesseract_motion_planners_trajopt_python.BasicInfo_n_steps_set)
    manip = property(_tesseract_motion_planners_trajopt_python.BasicInfo_manip_get, _tesseract_motion_planners_trajopt_python.BasicInfo_manip_set)
    fixed_timesteps = property(_tesseract_motion_planners_trajopt_python.BasicInfo_fixed_timesteps_get, _tesseract_motion_planners_trajopt_python.BasicInfo_fixed_timesteps_set)
    fixed_dofs = property(_tesseract_motion_planners_trajopt_python.BasicInfo_fixed_dofs_get, _tesseract_motion_planners_trajopt_python.BasicInfo_fixed_dofs_set)
    convex_solver = property(_tesseract_motion_planners_trajopt_python.BasicInfo_convex_solver_get, _tesseract_motion_planners_trajopt_python.BasicInfo_convex_solver_set)
    use_time = property(_tesseract_motion_planners_trajopt_python.BasicInfo_use_time_get, _tesseract_motion_planners_trajopt_python.BasicInfo_use_time_set)
    dt_upper_lim = property(_tesseract_motion_planners_trajopt_python.BasicInfo_dt_upper_lim_get, _tesseract_motion_planners_trajopt_python.BasicInfo_dt_upper_lim_set)
    dt_lower_lim = property(_tesseract_motion_planners_trajopt_python.BasicInfo_dt_lower_lim_get, _tesseract_motion_planners_trajopt_python.BasicInfo_dt_lower_lim_set)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.BasicInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_BasicInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_BasicInfo

# Register BasicInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.BasicInfo_swigregister(BasicInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class InitInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    STATIONARY = _tesseract_motion_planners_trajopt_python.InitInfo_STATIONARY
    JOINT_INTERPOLATED = _tesseract_motion_planners_trajopt_python.InitInfo_JOINT_INTERPOLATED
    GIVEN_TRAJ = _tesseract_motion_planners_trajopt_python.InitInfo_GIVEN_TRAJ
    type = property(_tesseract_motion_planners_trajopt_python.InitInfo_type_get, _tesseract_motion_planners_trajopt_python.InitInfo_type_set)
    data = property(_tesseract_motion_planners_trajopt_python.InitInfo_data_get, _tesseract_motion_planners_trajopt_python.InitInfo_data_set)
    dt = property(_tesseract_motion_planners_trajopt_python.InitInfo_dt_get, _tesseract_motion_planners_trajopt_python.InitInfo_dt_set)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.InitInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_InitInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_InitInfo

# Register InitInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.InitInfo_swigregister(InitInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TermInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    name = property(_tesseract_motion_planners_trajopt_python.TermInfo_name_get, _tesseract_motion_planners_trajopt_python.TermInfo_name_set)
    term_type = property(_tesseract_motion_planners_trajopt_python.TermInfo_term_type_get, _tesseract_motion_planners_trajopt_python.TermInfo_term_type_set)

    def getSupportedTypes(self):
        return _tesseract_motion_planners_trajopt_python.TermInfo_getSupportedTypes(self)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.TermInfo_fromJson(self, pci, v)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.TermInfo_hatch(self, prob)

    @staticmethod
    def fromName(type):
        return _tesseract_motion_planners_trajopt_python.TermInfo_fromName(type)
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TermInfo

# Register TermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TermInfo_swigregister(TermInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ProblemConstructionInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    basic_info = property(_tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_basic_info_get, _tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_basic_info_set)
    opt_info = property(_tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_opt_info_get, _tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_opt_info_set)
    cost_infos = property(_tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_cost_infos_get, _tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_cost_infos_set)
    cnt_infos = property(_tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_cnt_infos_get, _tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_cnt_infos_set)
    init_info = property(_tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_init_info_get, _tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_init_info_set)
    env = property(_tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_env_get, _tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_env_set)
    kin = property(_tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_kin_get, _tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_kin_set)

    def __init__(self, env):
        _tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_ProblemConstructionInfo(env))

    def fromJson(self, v):
        return _tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_fromJson(self, v)
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_ProblemConstructionInfo

# Register ProblemConstructionInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.ProblemConstructionInfo_swigregister(ProblemConstructionInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class DynamicCartPoseTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    timestep = property(_tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_timestep_get, _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_timestep_set)
    pos_coeffs = property(_tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_pos_coeffs_get, _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_pos_coeffs_set)
    rot_coeffs = property(_tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_rot_coeffs_get, _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_rot_coeffs_set)
    source_frame = property(_tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_source_frame_get, _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_source_frame_set)
    target_frame = property(_tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_target_frame_get, _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_target_frame_set)
    source_frame_offset = property(_tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_source_frame_offset_get, _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_source_frame_offset_set)
    target_frame_offset = property(_tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_target_frame_offset_get, _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_target_frame_offset_set)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_fromJson(self, pci, v)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_DynamicCartPoseTermInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_DynamicCartPoseTermInfo

# Register DynamicCartPoseTermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.DynamicCartPoseTermInfo_swigregister(DynamicCartPoseTermInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CartPoseTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    timestep = property(_tesseract_motion_planners_trajopt_python.CartPoseTermInfo_timestep_get, _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_timestep_set)
    pos_coeffs = property(_tesseract_motion_planners_trajopt_python.CartPoseTermInfo_pos_coeffs_get, _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_pos_coeffs_set)
    rot_coeffs = property(_tesseract_motion_planners_trajopt_python.CartPoseTermInfo_rot_coeffs_get, _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_rot_coeffs_set)
    source_frame = property(_tesseract_motion_planners_trajopt_python.CartPoseTermInfo_source_frame_get, _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_source_frame_set)
    target_frame = property(_tesseract_motion_planners_trajopt_python.CartPoseTermInfo_target_frame_get, _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_target_frame_set)
    source_frame_offset = property(_tesseract_motion_planners_trajopt_python.CartPoseTermInfo_source_frame_offset_get, _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_source_frame_offset_set)
    target_frame_offset = property(_tesseract_motion_planners_trajopt_python.CartPoseTermInfo_target_frame_offset_get, _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_target_frame_offset_set)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_fromJson(self, pci, v)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.CartPoseTermInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_CartPoseTermInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_CartPoseTermInfo

# Register CartPoseTermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.CartPoseTermInfo_swigregister(CartPoseTermInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CartVelTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    first_step = property(_tesseract_motion_planners_trajopt_python.CartVelTermInfo_first_step_get, _tesseract_motion_planners_trajopt_python.CartVelTermInfo_first_step_set)
    last_step = property(_tesseract_motion_planners_trajopt_python.CartVelTermInfo_last_step_get, _tesseract_motion_planners_trajopt_python.CartVelTermInfo_last_step_set)
    link = property(_tesseract_motion_planners_trajopt_python.CartVelTermInfo_link_get, _tesseract_motion_planners_trajopt_python.CartVelTermInfo_link_set)
    max_displacement = property(_tesseract_motion_planners_trajopt_python.CartVelTermInfo_max_displacement_get, _tesseract_motion_planners_trajopt_python.CartVelTermInfo_max_displacement_set)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.CartVelTermInfo_fromJson(self, pci, v)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.CartVelTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.CartVelTermInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_CartVelTermInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_CartVelTermInfo

# Register CartVelTermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.CartVelTermInfo_swigregister(CartVelTermInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointPosTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    coeffs = property(_tesseract_motion_planners_trajopt_python.JointPosTermInfo_coeffs_get, _tesseract_motion_planners_trajopt_python.JointPosTermInfo_coeffs_set)
    targets = property(_tesseract_motion_planners_trajopt_python.JointPosTermInfo_targets_get, _tesseract_motion_planners_trajopt_python.JointPosTermInfo_targets_set)
    upper_tols = property(_tesseract_motion_planners_trajopt_python.JointPosTermInfo_upper_tols_get, _tesseract_motion_planners_trajopt_python.JointPosTermInfo_upper_tols_set)
    lower_tols = property(_tesseract_motion_planners_trajopt_python.JointPosTermInfo_lower_tols_get, _tesseract_motion_planners_trajopt_python.JointPosTermInfo_lower_tols_set)
    first_step = property(_tesseract_motion_planners_trajopt_python.JointPosTermInfo_first_step_get, _tesseract_motion_planners_trajopt_python.JointPosTermInfo_first_step_set)
    last_step = property(_tesseract_motion_planners_trajopt_python.JointPosTermInfo_last_step_get, _tesseract_motion_planners_trajopt_python.JointPosTermInfo_last_step_set)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.JointPosTermInfo_fromJson(self, pci, v)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.JointPosTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.JointPosTermInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_JointPosTermInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_JointPosTermInfo

# Register JointPosTermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.JointPosTermInfo_swigregister(JointPosTermInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointVelTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    coeffs = property(_tesseract_motion_planners_trajopt_python.JointVelTermInfo_coeffs_get, _tesseract_motion_planners_trajopt_python.JointVelTermInfo_coeffs_set)
    targets = property(_tesseract_motion_planners_trajopt_python.JointVelTermInfo_targets_get, _tesseract_motion_planners_trajopt_python.JointVelTermInfo_targets_set)
    upper_tols = property(_tesseract_motion_planners_trajopt_python.JointVelTermInfo_upper_tols_get, _tesseract_motion_planners_trajopt_python.JointVelTermInfo_upper_tols_set)
    lower_tols = property(_tesseract_motion_planners_trajopt_python.JointVelTermInfo_lower_tols_get, _tesseract_motion_planners_trajopt_python.JointVelTermInfo_lower_tols_set)
    first_step = property(_tesseract_motion_planners_trajopt_python.JointVelTermInfo_first_step_get, _tesseract_motion_planners_trajopt_python.JointVelTermInfo_first_step_set)
    last_step = property(_tesseract_motion_planners_trajopt_python.JointVelTermInfo_last_step_get, _tesseract_motion_planners_trajopt_python.JointVelTermInfo_last_step_set)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.JointVelTermInfo_fromJson(self, pci, v)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.JointVelTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.JointVelTermInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_JointVelTermInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_JointVelTermInfo

# Register JointVelTermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.JointVelTermInfo_swigregister(JointVelTermInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointAccTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    coeffs = property(_tesseract_motion_planners_trajopt_python.JointAccTermInfo_coeffs_get, _tesseract_motion_planners_trajopt_python.JointAccTermInfo_coeffs_set)
    targets = property(_tesseract_motion_planners_trajopt_python.JointAccTermInfo_targets_get, _tesseract_motion_planners_trajopt_python.JointAccTermInfo_targets_set)
    upper_tols = property(_tesseract_motion_planners_trajopt_python.JointAccTermInfo_upper_tols_get, _tesseract_motion_planners_trajopt_python.JointAccTermInfo_upper_tols_set)
    lower_tols = property(_tesseract_motion_planners_trajopt_python.JointAccTermInfo_lower_tols_get, _tesseract_motion_planners_trajopt_python.JointAccTermInfo_lower_tols_set)
    first_step = property(_tesseract_motion_planners_trajopt_python.JointAccTermInfo_first_step_get, _tesseract_motion_planners_trajopt_python.JointAccTermInfo_first_step_set)
    last_step = property(_tesseract_motion_planners_trajopt_python.JointAccTermInfo_last_step_get, _tesseract_motion_planners_trajopt_python.JointAccTermInfo_last_step_set)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.JointAccTermInfo_fromJson(self, pci, v)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.JointAccTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.JointAccTermInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_JointAccTermInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_JointAccTermInfo

# Register JointAccTermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.JointAccTermInfo_swigregister(JointAccTermInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointJerkTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    coeffs = property(_tesseract_motion_planners_trajopt_python.JointJerkTermInfo_coeffs_get, _tesseract_motion_planners_trajopt_python.JointJerkTermInfo_coeffs_set)
    targets = property(_tesseract_motion_planners_trajopt_python.JointJerkTermInfo_targets_get, _tesseract_motion_planners_trajopt_python.JointJerkTermInfo_targets_set)
    upper_tols = property(_tesseract_motion_planners_trajopt_python.JointJerkTermInfo_upper_tols_get, _tesseract_motion_planners_trajopt_python.JointJerkTermInfo_upper_tols_set)
    lower_tols = property(_tesseract_motion_planners_trajopt_python.JointJerkTermInfo_lower_tols_get, _tesseract_motion_planners_trajopt_python.JointJerkTermInfo_lower_tols_set)
    first_step = property(_tesseract_motion_planners_trajopt_python.JointJerkTermInfo_first_step_get, _tesseract_motion_planners_trajopt_python.JointJerkTermInfo_first_step_set)
    last_step = property(_tesseract_motion_planners_trajopt_python.JointJerkTermInfo_last_step_get, _tesseract_motion_planners_trajopt_python.JointJerkTermInfo_last_step_set)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.JointJerkTermInfo_fromJson(self, pci, v)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.JointJerkTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.JointJerkTermInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_JointJerkTermInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_JointJerkTermInfo

# Register JointJerkTermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.JointJerkTermInfo_swigregister(JointJerkTermInfo)
CollisionEvaluatorType_SINGLE_TIMESTEP = _tesseract_motion_planners_trajopt_python.CollisionEvaluatorType_SINGLE_TIMESTEP
CollisionEvaluatorType_DISCRETE_CONTINUOUS = _tesseract_motion_planners_trajopt_python.CollisionEvaluatorType_DISCRETE_CONTINUOUS
CollisionEvaluatorType_CAST_CONTINUOUS = _tesseract_motion_planners_trajopt_python.CollisionEvaluatorType_CAST_CONTINUOUS
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CollisionTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    first_step = property(_tesseract_motion_planners_trajopt_python.CollisionTermInfo_first_step_get, _tesseract_motion_planners_trajopt_python.CollisionTermInfo_first_step_set)
    last_step = property(_tesseract_motion_planners_trajopt_python.CollisionTermInfo_last_step_get, _tesseract_motion_planners_trajopt_python.CollisionTermInfo_last_step_set)
    evaluator_type = property(_tesseract_motion_planners_trajopt_python.CollisionTermInfo_evaluator_type_get, _tesseract_motion_planners_trajopt_python.CollisionTermInfo_evaluator_type_set)
    fixed_steps = property(_tesseract_motion_planners_trajopt_python.CollisionTermInfo_fixed_steps_get, _tesseract_motion_planners_trajopt_python.CollisionTermInfo_fixed_steps_set)
    longest_valid_segment_length = property(_tesseract_motion_planners_trajopt_python.CollisionTermInfo_longest_valid_segment_length_get, _tesseract_motion_planners_trajopt_python.CollisionTermInfo_longest_valid_segment_length_set)
    info = property(_tesseract_motion_planners_trajopt_python.CollisionTermInfo_info_get, _tesseract_motion_planners_trajopt_python.CollisionTermInfo_info_set)
    contact_test_type = property(_tesseract_motion_planners_trajopt_python.CollisionTermInfo_contact_test_type_get, _tesseract_motion_planners_trajopt_python.CollisionTermInfo_contact_test_type_set)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.CollisionTermInfo_fromJson(self, pci, v)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.CollisionTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.CollisionTermInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_CollisionTermInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_CollisionTermInfo

# Register CollisionTermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.CollisionTermInfo_swigregister(CollisionTermInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TotalTimeTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    coeff = property(_tesseract_motion_planners_trajopt_python.TotalTimeTermInfo_coeff_get, _tesseract_motion_planners_trajopt_python.TotalTimeTermInfo_coeff_set)
    limit = property(_tesseract_motion_planners_trajopt_python.TotalTimeTermInfo_limit_get, _tesseract_motion_planners_trajopt_python.TotalTimeTermInfo_limit_set)

    def hatch(self, prob):
        return _tesseract_motion_planners_trajopt_python.TotalTimeTermInfo_hatch(self, prob)

    def fromJson(self, pci, v):
        return _tesseract_motion_planners_trajopt_python.TotalTimeTermInfo_fromJson(self, pci, v)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.TotalTimeTermInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TotalTimeTermInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TotalTimeTermInfo

# Register TotalTimeTermInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TotalTimeTermInfo_swigregister(TotalTimeTermInfo)

def ConstructProblem(*args):
    return _tesseract_motion_planners_trajopt_python.ConstructProblem(*args)

def OptimizeProblem(arg1, plotter=0):
    return _tesseract_motion_planners_trajopt_python.OptimizeProblem(arg1, plotter)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CollisionCostConfig(object):
    r"""Config settings for collision cost terms."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.CollisionCostConfig_swiginit(self, _tesseract_motion_planners_trajopt_python.new_CollisionCostConfig())
    enabled = property(_tesseract_motion_planners_trajopt_python.CollisionCostConfig_enabled_get, _tesseract_motion_planners_trajopt_python.CollisionCostConfig_enabled_set, doc=r""" If true, a collision cost term will be added to the problem. Default: true""")
    use_weighted_sum = property(_tesseract_motion_planners_trajopt_python.CollisionCostConfig_use_weighted_sum_get, _tesseract_motion_planners_trajopt_python.CollisionCostConfig_use_weighted_sum_set, doc=r"""
    Use the weighted sum for each link pair. This reduces the number equations added to the problem
    If set to true, it is recommended to start with the coeff set to one
    """)
    type = property(_tesseract_motion_planners_trajopt_python.CollisionCostConfig_type_get, _tesseract_motion_planners_trajopt_python.CollisionCostConfig_type_set, doc=r""" The evaluator type that will be used for collision checking.""")
    safety_margin = property(_tesseract_motion_planners_trajopt_python.CollisionCostConfig_safety_margin_get, _tesseract_motion_planners_trajopt_python.CollisionCostConfig_safety_margin_set, doc=r""" Max distance in which collision costs will be evaluated.""")
    safety_margin_buffer = property(_tesseract_motion_planners_trajopt_python.CollisionCostConfig_safety_margin_buffer_get, _tesseract_motion_planners_trajopt_python.CollisionCostConfig_safety_margin_buffer_set, doc=r"""
    Distance beyond buffer_margin in which collision optimization will be evaluated.
         This is set to 0 by default (effectively disabled) for collision costs.
    """)
    coeff = property(_tesseract_motion_planners_trajopt_python.CollisionCostConfig_coeff_get, _tesseract_motion_planners_trajopt_python.CollisionCostConfig_coeff_set, doc=r""" The collision coeff/weight""")
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_CollisionCostConfig

# Register CollisionCostConfig in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.CollisionCostConfig_swigregister(CollisionCostConfig)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CollisionConstraintConfig(object):
    r"""Config settings for collision constraint terms."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_swiginit(self, _tesseract_motion_planners_trajopt_python.new_CollisionConstraintConfig())
    enabled = property(_tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_enabled_get, _tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_enabled_set, doc=r""" If true, a collision cost term will be added to the problem. Default: true""")
    use_weighted_sum = property(_tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_use_weighted_sum_get, _tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_use_weighted_sum_set, doc=r"""
    Use the weighted sum for each link pair. This reduces the number equations added to the problem
    If set to true, it is recommended to start with the coeff set to one.
    """)
    type = property(_tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_type_get, _tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_type_set, doc=r""" The evaluator type that will be used for collision checking.""")
    safety_margin = property(_tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_safety_margin_get, _tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_safety_margin_set, doc=r""" Max distance in which collision constraints will be evaluated.""")
    safety_margin_buffer = property(_tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_safety_margin_buffer_get, _tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_safety_margin_buffer_set, doc=r""" Distance beyond safety_margin in which collision optimization will be evaluated.""")
    coeff = property(_tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_coeff_get, _tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_coeff_set, doc=r""" The collision coeff/weight""")
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_CollisionConstraintConfig

# Register CollisionConstraintConfig in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.CollisionConstraintConfig_swigregister(CollisionConstraintConfig)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TrajOptCartesianWaypointConfig(object):
    r"""Config settings for cartesian waypoints"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TrajOptCartesianWaypointConfig())
    enabled = property(_tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_enabled_get, _tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_enabled_set, doc=r""" If true, a cost/constraint term will be added to the problem. Default: true""")
    use_tolerance_override = property(_tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_use_tolerance_override_get, _tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_use_tolerance_override_set, doc=r"""
     If true, will override existing waypoint tolerance with described tolerance here. Default: false
    This is useful if you want to have a smaller tolerance for the cost than the constraint.
    """)
    lower_tolerance = property(_tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_lower_tolerance_get, _tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_lower_tolerance_set, doc=r"""
     Distance below waypoint that is allowed. Should be size = 6. First 3 elements are dx, dy, dz. The last 3
    elements are angle axis error allowed (Eigen::AngleAxisd.axis() * Eigen::AngleAxisd.angle())
    """)
    upper_tolerance = property(_tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_upper_tolerance_get, _tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_upper_tolerance_set, doc=r"""
     Distance above waypoint that is allowed. Should be size = 6. First 3 elements are dx, dy, dz. The last 3
    elements are angle axis error allowed (Eigen::AngleAxisd.axis() * Eigen::AngleAxisd.angle())
    """)
    coeff = property(_tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_coeff_get, _tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_coeff_set, doc=r""" coefficients corresponsing to dx, dy, dz, rx, ry, rz""")
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptCartesianWaypointConfig

# Register TrajOptCartesianWaypointConfig in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptCartesianWaypointConfig_swigregister(TrajOptCartesianWaypointConfig)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TrajOptJointWaypointConfig(object):
    r"""Config settings for joint waypoints."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TrajOptJointWaypointConfig())
    enabled = property(_tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_enabled_get, _tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_enabled_set, doc=r""" If true, a cost/constraint term will be added to the problem. Default: true""")
    use_tolerance_override = property(_tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_use_tolerance_override_get, _tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_use_tolerance_override_set, doc=r"""
     If true, will override existing waypoint tolerance with described tolerance here. Default: false
    This is useful if you want to have a smaller tolerance for the cost than the constraint.
    """)
    lower_tolerance = property(_tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_lower_tolerance_get, _tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_lower_tolerance_set, doc=r""" Distance below waypoint that is allowed. Should be size of joints in a joint state""")
    upper_tolerance = property(_tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_upper_tolerance_get, _tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_upper_tolerance_set, doc=r""" Distance above waypoint that is allowed. Should be size of joints in a joint state""")
    coeff = property(_tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_coeff_get, _tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_coeff_set, doc=r""" coefficients corresponsing to joint values""")
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptJointWaypointConfig

# Register TrajOptJointWaypointConfig in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptJointWaypointConfig_swigregister(TrajOptJointWaypointConfig)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TrajOptTermInfos(object):
    r""" Structure to store TrajOpt cost and constrant term infos"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    costs = property(_tesseract_motion_planners_trajopt_python.TrajOptTermInfos_costs_get, _tesseract_motion_planners_trajopt_python.TrajOptTermInfos_costs_set)
    constraints = property(_tesseract_motion_planners_trajopt_python.TrajOptTermInfos_constraints_get, _tesseract_motion_planners_trajopt_python.TrajOptTermInfos_constraints_set)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.TrajOptTermInfos_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TrajOptTermInfos())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptTermInfos

# Register TrajOptTermInfos in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptTermInfos_swigregister(TrajOptTermInfos)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TrajOptWaypointInfo(object):
    r""" Structure to store TrajOpt waypoint cost and constrant term infos"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    term_infos = property(_tesseract_motion_planners_trajopt_python.TrajOptWaypointInfo_term_infos_get, _tesseract_motion_planners_trajopt_python.TrajOptWaypointInfo_term_infos_set)
    seed = property(_tesseract_motion_planners_trajopt_python.TrajOptWaypointInfo_seed_get, _tesseract_motion_planners_trajopt_python.TrajOptWaypointInfo_seed_set)
    fixed = property(_tesseract_motion_planners_trajopt_python.TrajOptWaypointInfo_fixed_get, _tesseract_motion_planners_trajopt_python.TrajOptWaypointInfo_fixed_set)

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.TrajOptWaypointInfo_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TrajOptWaypointInfo())
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptWaypointInfo

# Register TrajOptWaypointInfo in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptWaypointInfo_swigregister(TrajOptWaypointInfo)
class TrajOptPlanProfile(tesseract_robotics.tesseract_command_language.tesseract_command_language_python.Profile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create(self, move_instruction, composite_manip_info, env, active_links, index):
        return _tesseract_motion_planners_trajopt_python.TrajOptPlanProfile_create(self, move_instruction, composite_manip_info, env, active_links, index)

    @staticmethod
    def getStaticKey():
        r"""
        A utility function for getting profile ID
        :rtype: int
        :return: The profile ID used when storing in profile dictionary
        """
        return _tesseract_motion_planners_trajopt_python.TrajOptPlanProfile_getStaticKey()
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptPlanProfile

# Register TrajOptPlanProfile in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptPlanProfile_swigregister(TrajOptPlanProfile)
class TrajOptCompositeProfile(tesseract_robotics.tesseract_command_language.tesseract_command_language_python.Profile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create(self, composite_manip_info, env, fixed_indices, start_index, end_index):
        return _tesseract_motion_planners_trajopt_python.TrajOptCompositeProfile_create(self, composite_manip_info, env, fixed_indices, start_index, end_index)

    @staticmethod
    def getStaticKey():
        r"""
        A utility function for getting profile ID
        :rtype: int
        :return: The profile ID used when storing in profile dictionary
        """
        return _tesseract_motion_planners_trajopt_python.TrajOptCompositeProfile_getStaticKey()
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptCompositeProfile

# Register TrajOptCompositeProfile in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptCompositeProfile_swigregister(TrajOptCompositeProfile)
class TrajOptSolverProfile(tesseract_robotics.tesseract_command_language.tesseract_command_language_python.Profile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    opt_params = property(_tesseract_motion_planners_trajopt_python.TrajOptSolverProfile_opt_params_get, _tesseract_motion_planners_trajopt_python.TrajOptSolverProfile_opt_params_set, doc=r""" Optimization paramters""")

    def getSolverType(self):
        r""" Get the convex solver to use"""
        return _tesseract_motion_planners_trajopt_python.TrajOptSolverProfile_getSolverType(self)

    @staticmethod
    def getStaticKey():
        r"""
        A utility function for getting profile ID
        :rtype: int
        :return: The profile ID used when storing in profile dictionary
        """
        return _tesseract_motion_planners_trajopt_python.TrajOptSolverProfile_getStaticKey()
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptSolverProfile

# Register TrajOptSolverProfile in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptSolverProfile_swigregister(TrajOptSolverProfile)
class TrajOptDefaultPlanProfile(TrajOptPlanProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TrajOptDefaultPlanProfile())
    cartesian_cost_config = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_cartesian_cost_config_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_cartesian_cost_config_set)
    cartesian_constraint_config = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_cartesian_constraint_config_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_cartesian_constraint_config_set)
    joint_cost_config = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_joint_cost_config_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_joint_cost_config_set)
    joint_constraint_config = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_joint_constraint_config_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_joint_constraint_config_set)

    def create(self, move_instruction, composite_manip_info, env, active_links, index):
        return _tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_create(self, move_instruction, composite_manip_info, env, active_links, index)
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptDefaultPlanProfile

# Register TrajOptDefaultPlanProfile in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptDefaultPlanProfile_swigregister(TrajOptDefaultPlanProfile)
class TrajOptDefaultCompositeProfile(TrajOptCompositeProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TrajOptDefaultCompositeProfile())
    contact_test_type = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_contact_test_type_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_contact_test_type_set, doc=r""" The type of contact test to perform: FIRST, CLOSEST, ALL""")
    collision_cost_config = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_collision_cost_config_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_collision_cost_config_set, doc=r""" Configuration info for collisions that are modeled as costs""")
    collision_constraint_config = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_collision_constraint_config_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_collision_constraint_config_set, doc=r""" Configuration info for collisions that are modeled as constraints""")
    smooth_velocities = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_smooth_velocities_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_smooth_velocities_set, doc=r""" If true, a joint velocity cost with a target of 0 will be applied for all timesteps Default: true""")
    velocity_coeff = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_velocity_coeff_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_velocity_coeff_set, doc=r""" This default to all ones, but allows you to weight different joints""")
    smooth_accelerations = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_smooth_accelerations_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_smooth_accelerations_set, doc=r""" If true, a joint acceleration cost with a target of 0 will be applied for all timesteps Default: false""")
    acceleration_coeff = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_acceleration_coeff_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_acceleration_coeff_set, doc=r""" This default to all ones, but allows you to weight different joints""")
    smooth_jerks = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_smooth_jerks_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_smooth_jerks_set, doc=r""" If true, a joint jerk cost with a target of 0 will be applied for all timesteps Default: false""")
    jerk_coeff = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_jerk_coeff_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_jerk_coeff_set, doc=r""" This default to all ones, but allows you to weight different joints""")
    avoid_singularity = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_avoid_singularity_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_avoid_singularity_set, doc=r""" If true, applies a cost to avoid kinematic singularities""")
    avoid_singularity_coeff = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_avoid_singularity_coeff_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_avoid_singularity_coeff_set, doc=r""" Optimization weight associated with kinematic singularity avoidance""")
    longest_valid_segment_fraction = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_longest_valid_segment_fraction_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_longest_valid_segment_fraction_set, doc=r"""
     Set the resolution at which state validity needs to be verified in order for a motion between two states
    to be considered valid in post checking of trajectory returned by trajopt.

    The resolution is equal to longest_valid_segment_fraction * state_space.getMaximumExtent()

    Note: The planner takes the conservative of either longest_valid_segment_fraction or longest_valid_segment_length.
    """)
    longest_valid_segment_length = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_longest_valid_segment_length_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_longest_valid_segment_length_set, doc=r"""
     Set the resolution at which state validity needs to be verified in order for a motion between two states
    to be considered valid. If norm(state1 - state0) > longest_valid_segment_length.

    Note: This gets converted to longest_valid_segment_fraction.
          longest_valid_segment_fraction = longest_valid_segment_length / state_space.getMaximumExtent()
    """)
    special_collision_cost = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_special_collision_cost_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_special_collision_cost_set, doc=r"""Special link collision cost distances""")
    special_collision_constraint = property(_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_special_collision_constraint_get, _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_special_collision_constraint_set, doc=r"""Special link collision constraint distances""")

    def create(self, composite_manip_info, env, fixed_indices, start_index, end_index):
        return _tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_create(self, composite_manip_info, env, fixed_indices, start_index, end_index)
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptDefaultCompositeProfile

# Register TrajOptDefaultCompositeProfile in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptDefaultCompositeProfile_swigregister(TrajOptDefaultCompositeProfile)

def createKinematicGroup(manip_info, env):
    return _tesseract_motion_planners_trajopt_python.createKinematicGroup(manip_info, env)

def createCartesianWaypointTermInfo(*args):
    return _tesseract_motion_planners_trajopt_python.createCartesianWaypointTermInfo(*args)

def createDynamicCartesianWaypointTermInfo(*args):
    return _tesseract_motion_planners_trajopt_python.createDynamicCartesianWaypointTermInfo(*args)

def createNearJointStateTermInfo(target, joint_names, index, coeffs, type):
    return _tesseract_motion_planners_trajopt_python.createNearJointStateTermInfo(target, joint_names, index, coeffs, type)

def createJointWaypointTermInfo(j_wp, index, coeffs, type):
    return _tesseract_motion_planners_trajopt_python.createJointWaypointTermInfo(j_wp, index, coeffs, type)

def createTolerancedJointWaypointTermInfo(j_wp, lower_tol, upper_tol, index, coeffs, type):
    return _tesseract_motion_planners_trajopt_python.createTolerancedJointWaypointTermInfo(j_wp, lower_tol, upper_tol, index, coeffs, type)

def createCollisionTermInfo(*args):
    return _tesseract_motion_planners_trajopt_python.createCollisionTermInfo(*args)

def createSmoothVelocityTermInfo(*args):
    return _tesseract_motion_planners_trajopt_python.createSmoothVelocityTermInfo(*args)

def createSmoothAccelerationTermInfo(*args):
    return _tesseract_motion_planners_trajopt_python.createSmoothAccelerationTermInfo(*args)

def createSmoothJerkTermInfo(*args):
    return _tesseract_motion_planners_trajopt_python.createSmoothJerkTermInfo(*args)

def createUserDefinedTermInfo(start_index, end_index, error_function, jacobian_function, type):
    return _tesseract_motion_planners_trajopt_python.createUserDefinedTermInfo(start_index, end_index, error_function, jacobian_function, type)

def createAvoidSingularityTermInfo(*args):
    return _tesseract_motion_planners_trajopt_python.createAvoidSingularityTermInfo(*args)
class TrajOptMotionPlanner(tesseract_robotics.tesseract_motion_planners.tesseract_motion_planners_python.MotionPlanner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r""" Construct a basic planner"""
        _tesseract_motion_planners_trajopt_python.TrajOptMotionPlanner_swiginit(self, _tesseract_motion_planners_trajopt_python.new_TrajOptMotionPlanner(name))
    __swig_destroy__ = _tesseract_motion_planners_trajopt_python.delete_TrajOptMotionPlanner

    def solve(self, request):
        return _tesseract_motion_planners_trajopt_python.TrajOptMotionPlanner_solve(self, request)

    def terminate(self):
        return _tesseract_motion_planners_trajopt_python.TrajOptMotionPlanner_terminate(self)

    def clear(self):
        return _tesseract_motion_planners_trajopt_python.TrajOptMotionPlanner_clear(self)

    def createProblem(self, request):
        return _tesseract_motion_planners_trajopt_python.TrajOptMotionPlanner_createProblem(self, request)

# Register TrajOptMotionPlanner in _tesseract_motion_planners_trajopt_python:
_tesseract_motion_planners_trajopt_python.TrajOptMotionPlanner_swigregister(TrajOptMotionPlanner)

