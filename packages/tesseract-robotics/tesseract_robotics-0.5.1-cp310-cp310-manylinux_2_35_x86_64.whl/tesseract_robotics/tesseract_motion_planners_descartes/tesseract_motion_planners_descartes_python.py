# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_motion_planners_descartes_python
else:
    import _tesseract_motion_planners_descartes_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_motion_planners_descartes_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_SwigPyIterator

    def value(self):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_copy(self)

    def next(self):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_next(self)

    def __next__(self):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___next__(self)

    def previous(self):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.SwigPyIterator_swigregister(SwigPyIterator)
import tesseract_robotics.tesseract_motion_planners.tesseract_motion_planners_python
import tesseract_robotics.tesseract_environment.tesseract_environment_python
import tesseract_robotics.tesseract_kinematics.tesseract_kinematics_python
import tesseract_robotics.tesseract_common.tesseract_common_python
import tesseract_robotics.tesseract_scene_graph.tesseract_scene_graph_python
import tesseract_robotics.tesseract_geometry.tesseract_geometry_python
import tesseract_robotics.tesseract_srdf.tesseract_srdf_python
import tesseract_robotics.tesseract_state_solver.tesseract_state_solver_python
import tesseract_robotics.tesseract_collision.tesseract_collision_python
import tesseract_robotics.tesseract_command_language.tesseract_command_language_python

def sampleToolAxis(tool_pose, axis, resolution, minimum, maximum):
    r"""
    Given a tool pose create samples from [minimum, maximum] around the provided axis.
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :type axis: Eigen::Vector3d
    :param axis: The axis to sample around
    :type resolution: float
    :param resolution: The resolution to sample at
    :type minimum: float
    :param minimum: The minimum angle to start sampling at
    :type maximum: float
    :param maximum: The maximum angle to stop sampling at
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector of tool poses
    """
    return _tesseract_motion_planners_descartes_python.sampleToolAxis(tool_pose, axis, resolution, minimum, maximum)

def sampleToolXAxis(tool_pose, resolution, minimum, maximum):
    r"""
    Given a tool pose create samples from [minimum, maximum] around the x axis.
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :type resolution: float
    :param resolution: The resolution to sample at
    :type minimum: float
    :param minimum: The minimum angle to start sampling at
    :type maximum: float
    :param maximum: The maximum angle to stop sampling at
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector of tool poses
    """
    return _tesseract_motion_planners_descartes_python.sampleToolXAxis(tool_pose, resolution, minimum, maximum)

def sampleToolYAxis(tool_pose, resolution, minimum, maximum):
    r"""
    Given a tool pose create samples from [minimum, maximum] around the y axis.
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :type resolution: float
    :param resolution: The resolution to sample at
    :type minimum: float
    :param minimum: The minimum angle to start sampling at
    :type maximum: float
    :param maximum: The maximum angle to stop sampling at
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector of tool poses
    """
    return _tesseract_motion_planners_descartes_python.sampleToolYAxis(tool_pose, resolution, minimum, maximum)

def sampleToolZAxis(tool_pose, resolution, minimum, maximum):
    r"""
    Given a tool pose create samples from [minimum, maximum] around the z axis.
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :type resolution: float
    :param resolution: The resolution to sample at
    :type minimum: float
    :param minimum: The minimum angle to start sampling at
    :type maximum: float
    :param maximum: The maximum angle to stop sampling at
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector of tool poses
    """
    return _tesseract_motion_planners_descartes_python.sampleToolZAxis(tool_pose, resolution, minimum, maximum)

def sampleFixed(tool_pose):
    r"""
    This is the default sample with if a fixed pose sampler
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector with a single pose that was provided as input to function
    """
    return _tesseract_motion_planners_descartes_python.sampleFixed(tool_pose)
class PoseSamplerFnBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def call(self, a):
        return _tesseract_motion_planners_descartes_python.PoseSamplerFnBase_call(self, a)
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_PoseSamplerFnBase

    def __init__(self):
        if self.__class__ == PoseSamplerFnBase:
            _self = None
        else:
            _self = self
        _tesseract_motion_planners_descartes_python.PoseSamplerFnBase_swiginit(self, _tesseract_motion_planners_descartes_python.new_PoseSamplerFnBase(_self, ))
    def __disown__(self):
        self.this.disown()
        _tesseract_motion_planners_descartes_python.disown_PoseSamplerFnBase(self)
        return weakref.proxy(self)

# Register PoseSamplerFnBase in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.PoseSamplerFnBase_swigregister(PoseSamplerFnBase)


class PoseSamplerFn(PoseSamplerFnBase):
  def __init__(self,fn):
    super(PoseSamplerFn,self).__init__()
    self._fn = fn

  def call(self,*args):
    return self._fn(*args)

@_swig_add_metaclass(_SwigNonDynamicMeta)
class DescartesPlanProfileD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_motion_planners_descartes_python.DescartesPlanProfileD_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesPlanProfileD())
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesPlanProfileD

# Register DescartesPlanProfileD in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesPlanProfileD_swigregister(DescartesPlanProfileD)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class DescartesPlanProfileMapD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___nonzero__(self)

    def __bool__(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___bool__(self)

    def __len__(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_has_key(self, key)

    def keys(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_keys(self)

    def values(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_values(self)

    def items(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_items(self)

    def __contains__(self, key):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___contains__(self, key)

    def key_iterator(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_key_iterator(self)

    def value_iterator(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___setitem__(self, *args)

    def asdict(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_asdict(self)

    def __init__(self, *args):
        _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesPlanProfileMapD(*args))

    def empty(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_empty(self)

    def size(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_size(self)

    def swap(self, v):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_swap(self, v)

    def begin(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_begin(self)

    def end(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_end(self)

    def clear(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_clear(self)

    def get_allocator(self):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_get_allocator(self)

    def count(self, x):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_count(self, x)

    def erase(self, *args):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_erase(self, *args)

    def find(self, x):
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_find(self, x)
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesPlanProfileMapD

# Register DescartesPlanProfileMapD in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_swigregister(DescartesPlanProfileMapD)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class DescartesDefaultPlanProfileD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesDefaultPlanProfileD())
    target_pose_fixed = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_fixed_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_fixed_set, doc=r""" Target pose sampling params""")
    target_pose_sample_axis = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sample_axis_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sample_axis_set)
    target_pose_sample_resolution = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sample_resolution_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sample_resolution_set)
    target_pose_sample_min = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sample_min_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sample_min_set)
    target_pose_sample_max = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sample_max_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sample_max_set)
    manipulator_ik_solver = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_manipulator_ik_solver_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_manipulator_ik_solver_set, doc=r""" Override the manipulator ik solver""")
    allow_collision = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_allow_collision_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_allow_collision_set, doc=r"""
    Flag to indicate that collisions should not cause failures during state/edge evaluation
    Sometimes it is beneficial to evaluate states and edges based on the distance of states from collision
    without treating collisions as failures. In the case that the Descartes trajectory is used as a seed for a
    subsequent planner, such as TrajOpt, the subsequent planner can adjust/optimize individual joint poses such that
    they become collision-free.
    """)
    enable_collision = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_enable_collision_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_enable_collision_set, doc=r""" Flag to apply collision checking during state sampling""")
    vertex_collision_check_config = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_vertex_collision_check_config_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_vertex_collision_check_config_set)
    enable_edge_collision = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_enable_edge_collision_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_enable_edge_collision_set, doc=r""" Flag to apply collision checking during edge evaluation""")
    edge_collision_check_config = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_edge_collision_check_config_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_edge_collision_check_config_set)
    use_redundant_joint_solutions = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_use_redundant_joint_solutions_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_use_redundant_joint_solutions_set, doc=r"""Flag for generating redundant solutions as additional vertices for the planning graph search""")
    debug = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_debug_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_debug_set, doc=r""" Flag to produce debug information during planning""")
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesDefaultPlanProfileD

# Register DescartesDefaultPlanProfileD in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_swigregister(DescartesDefaultPlanProfileD)
class DescartesMotionPlannerD(tesseract_robotics.tesseract_motion_planners.tesseract_motion_planners_python.MotionPlanner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r""" Construct a basic planner"""
        _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesMotionPlannerD(name))
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesMotionPlannerD

    def solve(self, request):
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_solve(self, request)

    def terminate(self):
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_terminate(self)

    def clear(self):
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_clear(self)

# Register DescartesMotionPlannerD in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_swigregister(DescartesMotionPlannerD)

def cast_DescartesPlanProfileD(a):
    return _tesseract_motion_planners_descartes_python.cast_DescartesPlanProfileD(a)

