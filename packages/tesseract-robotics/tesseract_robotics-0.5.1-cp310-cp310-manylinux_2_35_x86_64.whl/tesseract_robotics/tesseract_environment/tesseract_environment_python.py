# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_environment_python
else:
    import _tesseract_environment_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_environment_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_environment_python.delete_SwigPyIterator

    def value(self):
        return _tesseract_environment_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tesseract_environment_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tesseract_environment_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tesseract_environment_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tesseract_environment_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tesseract_environment_python.SwigPyIterator_copy(self)

    def next(self):
        return _tesseract_environment_python.SwigPyIterator_next(self)

    def __next__(self):
        return _tesseract_environment_python.SwigPyIterator___next__(self)

    def previous(self):
        return _tesseract_environment_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tesseract_environment_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tesseract_environment_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tesseract_environment_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tesseract_environment_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tesseract_environment_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tesseract_environment_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tesseract_environment_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_environment_python:
_tesseract_environment_python.SwigPyIterator_swigregister(SwigPyIterator)
import tesseract_robotics.tesseract_kinematics.tesseract_kinematics_python
import tesseract_robotics.tesseract_common.tesseract_common_python
import tesseract_robotics.tesseract_scene_graph.tesseract_scene_graph_python
import tesseract_robotics.tesseract_geometry.tesseract_geometry_python
import tesseract_robotics.tesseract_srdf.tesseract_srdf_python
import tesseract_robotics.tesseract_state_solver.tesseract_state_solver_python
import tesseract_robotics.tesseract_collision.tesseract_collision_python
class FindTCPOffsetCallbackFnBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def call(self, a):
        return _tesseract_environment_python.FindTCPOffsetCallbackFnBase_call(self, a)
    __swig_destroy__ = _tesseract_environment_python.delete_FindTCPOffsetCallbackFnBase

    def __init__(self):
        if self.__class__ == FindTCPOffsetCallbackFnBase:
            _self = None
        else:
            _self = self
        _tesseract_environment_python.FindTCPOffsetCallbackFnBase_swiginit(self, _tesseract_environment_python.new_FindTCPOffsetCallbackFnBase(_self, ))
    def __disown__(self):
        self.this.disown()
        _tesseract_environment_python.disown_FindTCPOffsetCallbackFnBase(self)
        return weakref.proxy(self)

# Register FindTCPOffsetCallbackFnBase in _tesseract_environment_python:
_tesseract_environment_python.FindTCPOffsetCallbackFnBase_swigregister(FindTCPOffsetCallbackFnBase)


class FindTCPOffsetCallbackFn(FindTCPOffsetCallbackFnBase):
  def __init__(self,fn):
    super(FindTCPOffsetCallbackFn,self).__init__()
    self._fn = fn

  def call(self,*args):
    return self._fn(*args)

class EventCallbackFnBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def call(self, a):
        return _tesseract_environment_python.EventCallbackFnBase_call(self, a)
    __swig_destroy__ = _tesseract_environment_python.delete_EventCallbackFnBase

    def __init__(self):
        if self.__class__ == EventCallbackFnBase:
            _self = None
        else:
            _self = self
        _tesseract_environment_python.EventCallbackFnBase_swiginit(self, _tesseract_environment_python.new_EventCallbackFnBase(_self, ))
    def __disown__(self):
        self.this.disown()
        _tesseract_environment_python.disown_EventCallbackFnBase(self)
        return weakref.proxy(self)

# Register EventCallbackFnBase in _tesseract_environment_python:
_tesseract_environment_python.EventCallbackFnBase_swigregister(EventCallbackFnBase)


class EventCallbackFn(EventCallbackFnBase):
  def __init__(self,fn):
    super(EventCallbackFn,self).__init__()
    self._fn = fn

  def call(self,*args):
    return self._fn(*args)

CommandType_UNINITIALIZED = _tesseract_environment_python.CommandType_UNINITIALIZED
CommandType_ADD_LINK = _tesseract_environment_python.CommandType_ADD_LINK
CommandType_MOVE_LINK = _tesseract_environment_python.CommandType_MOVE_LINK
CommandType_MOVE_JOINT = _tesseract_environment_python.CommandType_MOVE_JOINT
CommandType_REMOVE_LINK = _tesseract_environment_python.CommandType_REMOVE_LINK
CommandType_REMOVE_JOINT = _tesseract_environment_python.CommandType_REMOVE_JOINT
CommandType_CHANGE_LINK_ORIGIN = _tesseract_environment_python.CommandType_CHANGE_LINK_ORIGIN
CommandType_CHANGE_JOINT_ORIGIN = _tesseract_environment_python.CommandType_CHANGE_JOINT_ORIGIN
CommandType_CHANGE_LINK_COLLISION_ENABLED = _tesseract_environment_python.CommandType_CHANGE_LINK_COLLISION_ENABLED
CommandType_CHANGE_LINK_VISIBILITY = _tesseract_environment_python.CommandType_CHANGE_LINK_VISIBILITY
CommandType_MODIFY_ALLOWED_COLLISIONS = _tesseract_environment_python.CommandType_MODIFY_ALLOWED_COLLISIONS
CommandType_REMOVE_ALLOWED_COLLISION_LINK = _tesseract_environment_python.CommandType_REMOVE_ALLOWED_COLLISION_LINK
CommandType_ADD_SCENE_GRAPH = _tesseract_environment_python.CommandType_ADD_SCENE_GRAPH
CommandType_CHANGE_JOINT_POSITION_LIMITS = _tesseract_environment_python.CommandType_CHANGE_JOINT_POSITION_LIMITS
CommandType_CHANGE_JOINT_VELOCITY_LIMITS = _tesseract_environment_python.CommandType_CHANGE_JOINT_VELOCITY_LIMITS
CommandType_CHANGE_JOINT_ACCELERATION_LIMITS = _tesseract_environment_python.CommandType_CHANGE_JOINT_ACCELERATION_LIMITS
CommandType_ADD_KINEMATICS_INFORMATION = _tesseract_environment_python.CommandType_ADD_KINEMATICS_INFORMATION
CommandType_REPLACE_JOINT = _tesseract_environment_python.CommandType_REPLACE_JOINT
CommandType_CHANGE_COLLISION_MARGINS = _tesseract_environment_python.CommandType_CHANGE_COLLISION_MARGINS
CommandType_ADD_CONTACT_MANAGERS_PLUGIN_INFO = _tesseract_environment_python.CommandType_ADD_CONTACT_MANAGERS_PLUGIN_INFO
CommandType_SET_ACTIVE_DISCRETE_CONTACT_MANAGER = _tesseract_environment_python.CommandType_SET_ACTIVE_DISCRETE_CONTACT_MANAGER
CommandType_SET_ACTIVE_CONTINUOUS_CONTACT_MANAGER = _tesseract_environment_python.CommandType_SET_ACTIVE_CONTINUOUS_CONTACT_MANAGER
CommandType_ADD_TRAJECTORY_LINK = _tesseract_environment_python.CommandType_ADD_TRAJECTORY_LINK
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Command(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_environment_python.delete_Command

    def __init__(self, *args):
        _tesseract_environment_python.Command_swiginit(self, _tesseract_environment_python.new_Command(*args))

    def getType(self):
        return _tesseract_environment_python.Command_getType(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.Command___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.Command___ne__(self, rhs)

# Register Command in _tesseract_environment_python:
_tesseract_environment_python.Command_swigregister(Command)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Commands(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_environment_python.Commands_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_environment_python.Commands___nonzero__(self)

    def __bool__(self):
        return _tesseract_environment_python.Commands___bool__(self)

    def __len__(self):
        return _tesseract_environment_python.Commands___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_environment_python.Commands___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_environment_python.Commands___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_environment_python.Commands___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_environment_python.Commands___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_environment_python.Commands___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_environment_python.Commands___setitem__(self, *args)

    def pop(self):
        return _tesseract_environment_python.Commands_pop(self)

    def append(self, x):
        return _tesseract_environment_python.Commands_append(self, x)

    def empty(self):
        return _tesseract_environment_python.Commands_empty(self)

    def size(self):
        return _tesseract_environment_python.Commands_size(self)

    def swap(self, v):
        return _tesseract_environment_python.Commands_swap(self, v)

    def begin(self):
        return _tesseract_environment_python.Commands_begin(self)

    def end(self):
        return _tesseract_environment_python.Commands_end(self)

    def rbegin(self):
        return _tesseract_environment_python.Commands_rbegin(self)

    def rend(self):
        return _tesseract_environment_python.Commands_rend(self)

    def clear(self):
        return _tesseract_environment_python.Commands_clear(self)

    def get_allocator(self):
        return _tesseract_environment_python.Commands_get_allocator(self)

    def pop_back(self):
        return _tesseract_environment_python.Commands_pop_back(self)

    def erase(self, *args):
        return _tesseract_environment_python.Commands_erase(self, *args)

    def __init__(self, *args):
        _tesseract_environment_python.Commands_swiginit(self, _tesseract_environment_python.new_Commands(*args))

    def push_back(self, x):
        return _tesseract_environment_python.Commands_push_back(self, x)

    def front(self):
        return _tesseract_environment_python.Commands_front(self)

    def back(self):
        return _tesseract_environment_python.Commands_back(self)

    def assign(self, n, x):
        return _tesseract_environment_python.Commands_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_environment_python.Commands_resize(self, *args)

    def insert(self, *args):
        return _tesseract_environment_python.Commands_insert(self, *args)

    def reserve(self, n):
        return _tesseract_environment_python.Commands_reserve(self, n)

    def capacity(self):
        return _tesseract_environment_python.Commands_capacity(self)
    __swig_destroy__ = _tesseract_environment_python.delete_Commands

# Register Commands in _tesseract_environment_python:
_tesseract_environment_python.Commands_swigregister(Commands)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class AddContactManagersPluginInfoCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Add contact manager plugins
        :type contact_managers_plugin_info: tesseract_common::ContactManagersPluginInfo
        :param contact_managers_plugin_info: Contact managers plugin information
        """
        _tesseract_environment_python.AddContactManagersPluginInfoCommand_swiginit(self, _tesseract_environment_python.new_AddContactManagersPluginInfoCommand(*args))

    def getContactManagersPluginInfo(self):
        return _tesseract_environment_python.AddContactManagersPluginInfoCommand_getContactManagersPluginInfo(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.AddContactManagersPluginInfoCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.AddContactManagersPluginInfoCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_AddContactManagersPluginInfoCommand

# Register AddContactManagersPluginInfoCommand in _tesseract_environment_python:
_tesseract_environment_python.AddContactManagersPluginInfoCommand_swigregister(AddContactManagersPluginInfoCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class AddKinematicsInformationCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Add kinematics information to the environment
        :param kin_info: The kinematics information
        """
        _tesseract_environment_python.AddKinematicsInformationCommand_swiginit(self, _tesseract_environment_python.new_AddKinematicsInformationCommand(*args))

    def getKinematicsInformation(self):
        return _tesseract_environment_python.AddKinematicsInformationCommand_getKinematicsInformation(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.AddKinematicsInformationCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.AddKinematicsInformationCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_AddKinematicsInformationCommand

# Register AddKinematicsInformationCommand in _tesseract_environment_python:
_tesseract_environment_python.AddKinematicsInformationCommand_swigregister(AddKinematicsInformationCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class AddLinkCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Adds or replace a link to the environment

        If the link exists and replace_allowed equals true:

               This command should replace the current link with the new link

        If the link exists and replace_allowed equals false:

               This command should result in an error

        If the link does not exist:

               This command should attach the link to the root link with a fixed joint
               with a joint name of joint_{link name}".

        @param link The link to be added to the graph
        @param replace_allowed If true then if the link exists it will be replaced, otherwise if false it will fail.

        |

        *Overload 2:*

        Adds or replace a link to the environment

        If the link exists and replace_allowed equals true:

               This command should replace the current link with the new link

        If the link exists and replace_allowed equals false:

               This command should result in an error

        If the link does not exist:

               This command should attach the link to the root link with a fixed joint
               with a joint name of joint_{link name}".

        @param link The link to be added to the graph
        @param replace_allowed If true then if the link exists it will be replaced, otherwise if false it will fail.

        |

        *Overload 3:*

        Adds a link and joint in the environment

        If the link and joint exist and replace is allowed

               This command will replace both link and joint if the link is the child link, otherwise this results in error

        If the link and joint exist and replace is not allowed

               This command should result in an error

        If the link or joint only exists:

               This command should result in an error

        :type link: :py:class:`Link`
        :param link: The link to be added to the graph
        :type joint: :py:class:`Joint`
        :param joint: The joint to be used to attach link to environment
        :type replace_allowed: boolean, optional
        :param replace_allowed: If true then if the link and joint exists it will be replaced, otherwise if false it will
            fail.

        |

        *Overload 4:*

        Adds a link and joint in the environment

        If the link and joint exist and replace is allowed

               This command will replace both link and joint if the link is the child link, otherwise this results in error

        If the link and joint exist and replace is not allowed

               This command should result in an error

        If the link or joint only exists:

               This command should result in an error

        :type link: :py:class:`Link`
        :param link: The link to be added to the graph
        :type joint: :py:class:`Joint`
        :param joint: The joint to be used to attach link to environment
        :param replace_allowed: If true then if the link and joint exists it will be replaced, otherwise if false it will
            fail.
        """
        _tesseract_environment_python.AddLinkCommand_swiginit(self, _tesseract_environment_python.new_AddLinkCommand(*args))

    def getLink(self):
        return _tesseract_environment_python.AddLinkCommand_getLink(self)

    def getJoint(self):
        return _tesseract_environment_python.AddLinkCommand_getJoint(self)

    def replaceAllowed(self):
        return _tesseract_environment_python.AddLinkCommand_replaceAllowed(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.AddLinkCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.AddLinkCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_AddLinkCommand

# Register AddLinkCommand in _tesseract_environment_python:
_tesseract_environment_python.AddLinkCommand_swigregister(AddLinkCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class AddSceneGraphCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Merge a graph into the current environment
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :type prefix: string, optional
        :param prefix: string Will be prepended to every link and joint of the merged graph
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a subgraph into the current environment, considering that the root of the merged graph is attached to the
            root of the environment by a fixed joint and no displacement. Every joint and link of the subgraph will be copied
            into the environment graph. The prefix argument is meant to allow adding multiple copies of the same subgraph with
            different names

        |

        *Overload 2:*

        Merge a graph into the current environment
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :param prefix: string Will be prepended to every link and joint of the merged graph
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a subgraph into the current environment, considering that the root of the merged graph is attached to the
            root of the environment by a fixed joint and no displacement. Every joint and link of the subgraph will be copied
            into the environment graph. The prefix argument is meant to allow adding multiple copies of the same subgraph with
            different names

        |

        *Overload 3:*

        Merge a graph into the current environment
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :param root_joint: Const ptr to the joint that connects current environment with root of the merged graph
        :type prefix: string, optional
        :param prefix: string Will be prepended to every link and joint of the merged graph
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a subgraph into the current environment. Every joint and link of the subgraph will be copied into the
            environment graph. The prefix argument is meant to allow adding multiple copies of the same subgraph with different
            names

        |

        *Overload 4:*

        Merge a graph into the current environment
        :type scene_graph: :py:class:`SceneGraph`
        :param scene_graph: Const ref to the graph to be merged (said graph will be copied)
        :param root_joint: Const ptr to the joint that connects current environment with root of the merged graph
        :param prefix: string Will be prepended to every link and joint of the merged graph
        :return: Return False if any link or joint name collides with current environment, otherwise True
            Merge a subgraph into the current environment. Every joint and link of the subgraph will be copied into the
            environment graph. The prefix argument is meant to allow adding multiple copies of the same subgraph with different
            names
        """
        _tesseract_environment_python.AddSceneGraphCommand_swiginit(self, _tesseract_environment_python.new_AddSceneGraphCommand(*args))

    def getSceneGraph(self):
        return _tesseract_environment_python.AddSceneGraphCommand_getSceneGraph(self)

    def getJoint(self):
        return _tesseract_environment_python.AddSceneGraphCommand_getJoint(self)

    def getPrefix(self):
        return _tesseract_environment_python.AddSceneGraphCommand_getPrefix(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.AddSceneGraphCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.AddSceneGraphCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_AddSceneGraphCommand

# Register AddSceneGraphCommand in _tesseract_environment_python:
_tesseract_environment_python.AddSceneGraphCommand_swigregister(AddSceneGraphCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class AddTrajectoryLinkCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Adds or replace a trajectory link to the environment

        If the link exists and replace_allowed equals true:

               This command should replace the current link with the new link

        If the link exists and replace_allowed equals false:

               This command should result in an error

        If the link does not exist:

               This command should attach the link to the parent link with a fixed joint
               with a joint name of joint_{link name}".

        @param link_name The link name
        @param parent_link_name The parent link name
        @param trajectory The trajectory to used for generating link
        @param replace_allowed If true then if the link exists it will be replaced, otherwise if false it will fail.

        |

        *Overload 2:*

        Adds or replace a trajectory link to the environment

        If the link exists and replace_allowed equals true:

               This command should replace the current link with the new link

        If the link exists and replace_allowed equals false:

               This command should result in an error

        If the link does not exist:

               This command should attach the link to the parent link with a fixed joint
               with a joint name of joint_{link name}".

        @param link_name The link name
        @param parent_link_name The parent link name
        @param trajectory The trajectory to used for generating link
        @param replace_allowed If true then if the link exists it will be replaced, otherwise if false it will fail.
        """
        _tesseract_environment_python.AddTrajectoryLinkCommand_swiginit(self, _tesseract_environment_python.new_AddTrajectoryLinkCommand(*args))

    def getLinkName(self):
        return _tesseract_environment_python.AddTrajectoryLinkCommand_getLinkName(self)

    def getParentLinkName(self):
        return _tesseract_environment_python.AddTrajectoryLinkCommand_getParentLinkName(self)

    def getTrajectory(self):
        return _tesseract_environment_python.AddTrajectoryLinkCommand_getTrajectory(self)

    def replaceAllowed(self):
        return _tesseract_environment_python.AddTrajectoryLinkCommand_replaceAllowed(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.AddTrajectoryLinkCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.AddTrajectoryLinkCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_AddTrajectoryLinkCommand

# Register AddTrajectoryLinkCommand in _tesseract_environment_python:
_tesseract_environment_python.AddTrajectoryLinkCommand_swigregister(AddTrajectoryLinkCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ChangeCollisionMarginsCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_environment_python.ChangeCollisionMarginsCommand_swiginit(self, _tesseract_environment_python.new_ChangeCollisionMarginsCommand(*args))

    def getCollisionMarginData(self):
        return _tesseract_environment_python.ChangeCollisionMarginsCommand_getCollisionMarginData(self)

    def getCollisionMarginOverrideType(self):
        return _tesseract_environment_python.ChangeCollisionMarginsCommand_getCollisionMarginOverrideType(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ChangeCollisionMarginsCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ChangeCollisionMarginsCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ChangeCollisionMarginsCommand

# Register ChangeCollisionMarginsCommand in _tesseract_environment_python:
_tesseract_environment_python.ChangeCollisionMarginsCommand_swigregister(ChangeCollisionMarginsCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ChangeJointAccelerationLimitsCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Changes the acceleration limits associated with a joint
        :type joint_name: string
        :param joint_name: Name of the joint to be updated
        :param limits: New acceleration limits to be set as the joint limits

        |

        *Overload 2:*

        Changes the acceleration limits associated with a joint
        :type limits: std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >
        :param limits: A map of joint names to new acceleration limits
        """
        _tesseract_environment_python.ChangeJointAccelerationLimitsCommand_swiginit(self, _tesseract_environment_python.new_ChangeJointAccelerationLimitsCommand(*args))

    def getLimits(self):
        return _tesseract_environment_python.ChangeJointAccelerationLimitsCommand_getLimits(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ChangeJointAccelerationLimitsCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ChangeJointAccelerationLimitsCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ChangeJointAccelerationLimitsCommand

# Register ChangeJointAccelerationLimitsCommand in _tesseract_environment_python:
_tesseract_environment_python.ChangeJointAccelerationLimitsCommand_swigregister(ChangeJointAccelerationLimitsCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ChangeJointOriginCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Changes the origin associated with the joint

        Note: This is the origin as in the "origin" tag in the URDF. This is the location of the
        joint in the frame of the parent link.
        :type joint_name: string
        :param joint_name: Name of the joint to be updated
        :param new_origin: New transform to be set as the origin
        """
        _tesseract_environment_python.ChangeJointOriginCommand_swiginit(self, _tesseract_environment_python.new_ChangeJointOriginCommand(*args))

    def getJointName(self):
        return _tesseract_environment_python.ChangeJointOriginCommand_getJointName(self)

    def getOrigin(self):
        return _tesseract_environment_python.ChangeJointOriginCommand_getOrigin(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ChangeJointOriginCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ChangeJointOriginCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ChangeJointOriginCommand

# Register ChangeJointOriginCommand in _tesseract_environment_python:
_tesseract_environment_python.ChangeJointOriginCommand_swigregister(ChangeJointOriginCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ChangeJointPositionLimitsCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Changes the position limits associated with a joint
        :type joint_name: string
        :param joint_name: Name of the joint to be updated
        :param limits: New position limits to be set as the joint limits

        |

        *Overload 2:*

        Changes the position limits associated with one or more joints
        :type limits: std::unordered_map< std::string,std::pair< double,double >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::pair< double,double > > > >
        :param limits: A map of joint names to new position limits.
            For each limit pair, first is the lower limit second is the upper limit
        """
        _tesseract_environment_python.ChangeJointPositionLimitsCommand_swiginit(self, _tesseract_environment_python.new_ChangeJointPositionLimitsCommand(*args))

    def getLimits(self):
        return _tesseract_environment_python.ChangeJointPositionLimitsCommand_getLimits(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ChangeJointPositionLimitsCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ChangeJointPositionLimitsCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ChangeJointPositionLimitsCommand

# Register ChangeJointPositionLimitsCommand in _tesseract_environment_python:
_tesseract_environment_python.ChangeJointPositionLimitsCommand_swigregister(ChangeJointPositionLimitsCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ChangeJointVelocityLimitsCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Changes the velocity limits associated with a joint
        :type joint_name: string
        :param joint_name: Name of the joint to be updated
        :param limits: New velocity limits to be set as the joint limits

        |

        *Overload 2:*

        Changes the velocity limits associated with a joint
        :type limits: std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >
        :param limits: A map of joint names to new velocity limits
        """
        _tesseract_environment_python.ChangeJointVelocityLimitsCommand_swiginit(self, _tesseract_environment_python.new_ChangeJointVelocityLimitsCommand(*args))

    def getLimits(self):
        return _tesseract_environment_python.ChangeJointVelocityLimitsCommand_getLimits(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ChangeJointVelocityLimitsCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ChangeJointVelocityLimitsCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ChangeJointVelocityLimitsCommand

# Register ChangeJointVelocityLimitsCommand in _tesseract_environment_python:
_tesseract_environment_python.ChangeJointVelocityLimitsCommand_swigregister(ChangeJointVelocityLimitsCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ChangeLinkCollisionEnabledCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Set whether a link should be considered during collision checking
        :type link_name: string
        :param link_name: The link name to modify collision enabled
        :type enabled: boolean
        :param enabled: True if should be condisdered during collision checking, otherwise false
        """
        _tesseract_environment_python.ChangeLinkCollisionEnabledCommand_swiginit(self, _tesseract_environment_python.new_ChangeLinkCollisionEnabledCommand(*args))

    def getLinkName(self):
        return _tesseract_environment_python.ChangeLinkCollisionEnabledCommand_getLinkName(self)

    def getEnabled(self):
        return _tesseract_environment_python.ChangeLinkCollisionEnabledCommand_getEnabled(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ChangeLinkCollisionEnabledCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ChangeLinkCollisionEnabledCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ChangeLinkCollisionEnabledCommand

# Register ChangeLinkCollisionEnabledCommand in _tesseract_environment_python:
_tesseract_environment_python.ChangeLinkCollisionEnabledCommand_swigregister(ChangeLinkCollisionEnabledCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ChangeLinkOriginCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_environment_python.ChangeLinkOriginCommand_swiginit(self, _tesseract_environment_python.new_ChangeLinkOriginCommand(*args))

    def getLinkName(self):
        return _tesseract_environment_python.ChangeLinkOriginCommand_getLinkName(self)

    def getOrigin(self):
        return _tesseract_environment_python.ChangeLinkOriginCommand_getOrigin(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ChangeLinkOriginCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ChangeLinkOriginCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ChangeLinkOriginCommand

# Register ChangeLinkOriginCommand in _tesseract_environment_python:
_tesseract_environment_python.ChangeLinkOriginCommand_swigregister(ChangeLinkOriginCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ChangeLinkVisibilityCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Set a links visibility
        :param name: The name of the link
        :param visibility: True if should be visible, otherwise false
        """
        _tesseract_environment_python.ChangeLinkVisibilityCommand_swiginit(self, _tesseract_environment_python.new_ChangeLinkVisibilityCommand(*args))

    def getLinkName(self):
        return _tesseract_environment_python.ChangeLinkVisibilityCommand_getLinkName(self)

    def getEnabled(self):
        return _tesseract_environment_python.ChangeLinkVisibilityCommand_getEnabled(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ChangeLinkVisibilityCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ChangeLinkVisibilityCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ChangeLinkVisibilityCommand

# Register ChangeLinkVisibilityCommand in _tesseract_environment_python:
_tesseract_environment_python.ChangeLinkVisibilityCommand_swigregister(ChangeLinkVisibilityCommand)
ModifyAllowedCollisionsType_ADD = _tesseract_environment_python.ModifyAllowedCollisionsType_ADD
ModifyAllowedCollisionsType_REMOVE = _tesseract_environment_python.ModifyAllowedCollisionsType_REMOVE
ModifyAllowedCollisionsType_REPLACE = _tesseract_environment_python.ModifyAllowedCollisionsType_REPLACE
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ModifyAllowedCollisionsCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_environment_python.ModifyAllowedCollisionsCommand_swiginit(self, _tesseract_environment_python.new_ModifyAllowedCollisionsCommand(*args))

    def getModifyType(self):
        return _tesseract_environment_python.ModifyAllowedCollisionsCommand_getModifyType(self)

    def getAllowedCollisionMatrix(self):
        return _tesseract_environment_python.ModifyAllowedCollisionsCommand_getAllowedCollisionMatrix(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ModifyAllowedCollisionsCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ModifyAllowedCollisionsCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ModifyAllowedCollisionsCommand

# Register ModifyAllowedCollisionsCommand in _tesseract_environment_python:
_tesseract_environment_python.ModifyAllowedCollisionsCommand_swigregister(ModifyAllowedCollisionsCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MoveJointCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Move a joint from one link to another

               All child links & joints should follow

        :type joint_name: string
        :param joint_name: The name of the joint to move
        :param new_parent_link: The name of the link to move to.e
        """
        _tesseract_environment_python.MoveJointCommand_swiginit(self, _tesseract_environment_python.new_MoveJointCommand(*args))

    def getJointName(self):
        return _tesseract_environment_python.MoveJointCommand_getJointName(self)

    def getParentLink(self):
        return _tesseract_environment_python.MoveJointCommand_getParentLink(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.MoveJointCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.MoveJointCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_MoveJointCommand

# Register MoveJointCommand in _tesseract_environment_python:
_tesseract_environment_python.MoveJointCommand_swigregister(MoveJointCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MoveLinkCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Move a link in the environment

               This should delete the parent joint of the child link. All child links and joints follow.

        :type joint: :py:class:`Joint`
        :param joint: The new joint.
        """
        _tesseract_environment_python.MoveLinkCommand_swiginit(self, _tesseract_environment_python.new_MoveLinkCommand(*args))

    def getJoint(self):
        return _tesseract_environment_python.MoveLinkCommand_getJoint(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.MoveLinkCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.MoveLinkCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_MoveLinkCommand

# Register MoveLinkCommand in _tesseract_environment_python:
_tesseract_environment_python.MoveLinkCommand_swigregister(MoveLinkCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class RemoveAllowedCollisionLinkCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Remove disabled collision for any pair with link_name from allowed collision matrix
        :type link_name: string
        :param link_name: Collision object name
        """
        _tesseract_environment_python.RemoveAllowedCollisionLinkCommand_swiginit(self, _tesseract_environment_python.new_RemoveAllowedCollisionLinkCommand(*args))

    def getLinkName(self):
        return _tesseract_environment_python.RemoveAllowedCollisionLinkCommand_getLinkName(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.RemoveAllowedCollisionLinkCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.RemoveAllowedCollisionLinkCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_RemoveAllowedCollisionLinkCommand

# Register RemoveAllowedCollisionLinkCommand in _tesseract_environment_python:
_tesseract_environment_python.RemoveAllowedCollisionLinkCommand_swigregister(RemoveAllowedCollisionLinkCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class RemoveJointCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Removes a joint from the environment

               All child components (links/joints) should be removed

        :param name: Name of the joint to be removed
        """
        _tesseract_environment_python.RemoveJointCommand_swiginit(self, _tesseract_environment_python.new_RemoveJointCommand(*args))

    def getJointName(self):
        return _tesseract_environment_python.RemoveJointCommand_getJointName(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.RemoveJointCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.RemoveJointCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_RemoveJointCommand

# Register RemoveJointCommand in _tesseract_environment_python:
_tesseract_environment_python.RemoveJointCommand_swigregister(RemoveJointCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class RemoveLinkCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Removes a link from the environment

               Parent joint and all child components (links/joints) should be removed

        :param name: Name of the link to be removed
        """
        _tesseract_environment_python.RemoveLinkCommand_swiginit(self, _tesseract_environment_python.new_RemoveLinkCommand(*args))

    def getLinkName(self):
        return _tesseract_environment_python.RemoveLinkCommand_getLinkName(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.RemoveLinkCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.RemoveLinkCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_RemoveLinkCommand

# Register RemoveLinkCommand in _tesseract_environment_python:
_tesseract_environment_python.RemoveLinkCommand_swigregister(RemoveLinkCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ReplaceJointCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Replace a joint in the environment

        If the joint does not exist:

               This command should result in an error

        If the child link is not the same:

               This command should result in an error

        :type joint: :py:class:`Joint`
        :param joint: The joint to be replaced
        """
        _tesseract_environment_python.ReplaceJointCommand_swiginit(self, _tesseract_environment_python.new_ReplaceJointCommand(*args))

    def getJoint(self):
        return _tesseract_environment_python.ReplaceJointCommand_getJoint(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.ReplaceJointCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.ReplaceJointCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_ReplaceJointCommand

# Register ReplaceJointCommand in _tesseract_environment_python:
_tesseract_environment_python.ReplaceJointCommand_swigregister(ReplaceJointCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SetActiveContinuousContactManagerCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Set the active discrete contact manager
        :type active_contact_manager: string
        :param active_contact_manager: Active contact manager name
        """
        _tesseract_environment_python.SetActiveContinuousContactManagerCommand_swiginit(self, _tesseract_environment_python.new_SetActiveContinuousContactManagerCommand(*args))

    def getName(self):
        return _tesseract_environment_python.SetActiveContinuousContactManagerCommand_getName(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.SetActiveContinuousContactManagerCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.SetActiveContinuousContactManagerCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_SetActiveContinuousContactManagerCommand

# Register SetActiveContinuousContactManagerCommand in _tesseract_environment_python:
_tesseract_environment_python.SetActiveContinuousContactManagerCommand_swigregister(SetActiveContinuousContactManagerCommand)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SetActiveDiscreteContactManagerCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Set the active discrete contact manager
        :type active_contact_manager: string
        :param active_contact_manager: Active contact manager name
        """
        _tesseract_environment_python.SetActiveDiscreteContactManagerCommand_swiginit(self, _tesseract_environment_python.new_SetActiveDiscreteContactManagerCommand(*args))

    def getName(self):
        return _tesseract_environment_python.SetActiveDiscreteContactManagerCommand_getName(self)

    def __eq__(self, rhs):
        return _tesseract_environment_python.SetActiveDiscreteContactManagerCommand___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.SetActiveDiscreteContactManagerCommand___ne__(self, rhs)
    __swig_destroy__ = _tesseract_environment_python.delete_SetActiveDiscreteContactManagerCommand

# Register SetActiveDiscreteContactManagerCommand in _tesseract_environment_python:
_tesseract_environment_python.SetActiveDiscreteContactManagerCommand_swigregister(SetActiveDiscreteContactManagerCommand)
Events_COMMAND_APPLIED = _tesseract_environment_python.Events_COMMAND_APPLIED
Events_SCENE_STATE_CHANGED = _tesseract_environment_python.Events_SCENE_STATE_CHANGED
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Event(object):
    r""" The event base class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_environment_python.delete_Event

    def __init__(self, *args):
        _tesseract_environment_python.Event_swiginit(self, _tesseract_environment_python.new_Event(*args))
    type = property(_tesseract_environment_python.Event_type_get)

# Register Event in _tesseract_environment_python:
_tesseract_environment_python.Event_swigregister(Event)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CommandAppliedEvent(Event):
    r"""
    The command applied event
    Notes: Do not store the const& of command in your code make a copy instead
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, commands, revision):
        _tesseract_environment_python.CommandAppliedEvent_swiginit(self, _tesseract_environment_python.new_CommandAppliedEvent(commands, revision))
    commands = property(_tesseract_environment_python.CommandAppliedEvent_commands_get)
    revision = property(_tesseract_environment_python.CommandAppliedEvent_revision_get, _tesseract_environment_python.CommandAppliedEvent_revision_set)
    __swig_destroy__ = _tesseract_environment_python.delete_CommandAppliedEvent

# Register CommandAppliedEvent in _tesseract_environment_python:
_tesseract_environment_python.CommandAppliedEvent_swigregister(CommandAppliedEvent)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SceneStateChangedEvent(Event):
    r"""
    The scene state changed event
    Notes: Do not store the const& of state in your code make a copy instead
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, state):
        _tesseract_environment_python.SceneStateChangedEvent_swiginit(self, _tesseract_environment_python.new_SceneStateChangedEvent(state))
    state = property(_tesseract_environment_python.SceneStateChangedEvent_state_get)
    __swig_destroy__ = _tesseract_environment_python.delete_SceneStateChangedEvent

# Register SceneStateChangedEvent in _tesseract_environment_python:
_tesseract_environment_python.SceneStateChangedEvent_swigregister(SceneStateChangedEvent)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class EnvironmentUPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_environment_python.EnvironmentUPtr_swiginit(self, _tesseract_environment_python.new_EnvironmentUPtr(*args))

    def __deref__(self):
        return _tesseract_environment_python.EnvironmentUPtr___deref__(self)

    def release(self):
        return _tesseract_environment_python.EnvironmentUPtr_release(self)

    def reset(self, *args):
        return _tesseract_environment_python.EnvironmentUPtr_reset(self, *args)

    def swap(self, __u):
        return _tesseract_environment_python.EnvironmentUPtr_swap(self, __u)

    def get(self):
        return _tesseract_environment_python.EnvironmentUPtr_get(self)

    def __nonzero__(self):
        return _tesseract_environment_python.EnvironmentUPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _tesseract_environment_python.delete_EnvironmentUPtr

    def init(self, *args):
        return _tesseract_environment_python.EnvironmentUPtr_init(self, *args)

    def clone(self):
        r"""
        Clone the environment
        :rtype: :py:class:`UPtr`
        :return: A clone of the environment
        """
        return _tesseract_environment_python.EnvironmentUPtr_clone(self)

    def clear(self):
        r""" clear content and uninitialized"""
        return _tesseract_environment_python.EnvironmentUPtr_clear(self)

    def isInitialized(self):
        r""" check if the environment is initialized"""
        return _tesseract_environment_python.EnvironmentUPtr_isInitialized(self)

    def getRevision(self):
        r"""
        Get the current revision number
        :rtype: int
        :return: Revision number
        """
        return _tesseract_environment_python.EnvironmentUPtr_getRevision(self)

    def getInitRevision(self):
        r"""
        Get the initialization revision number
        :rtype: int
        :return: Initialization revision number
        """
        return _tesseract_environment_python.EnvironmentUPtr_getInitRevision(self)

    def getCommandHistory(self):
        r"""
        Get Environment command history post initialization
        :rtype: std::vector< std::shared_ptr< tesseract_environment::Command const >,std::allocator< std::shared_ptr< tesseract_environment::Command const > > >
        :return: List of commands
        """
        return _tesseract_environment_python.EnvironmentUPtr_getCommandHistory(self)

    def applyCommands(self, commands):
        r"""
        Applies the commands to the environment
        :type commands: std::vector< std::shared_ptr< tesseract_environment::Command const >,std::allocator< std::shared_ptr< tesseract_environment::Command const > > >
        :param commands: Commands to be applied to the environment
        :rtype: boolean
        :return: true if successful. If returned false, then only a partial set of commands have been applied. Call
            getCommandHistory to check. Some commands are not checked for success
        """
        return _tesseract_environment_python.EnvironmentUPtr_applyCommands(self, commands)

    def applyCommand(self, command):
        r"""
        Apply command to the environment
        :type command: :py:class:`Command`
        :param command: Command to be applied to the environment
        :rtype: boolean
        :return: true if successful. If returned false, then the command have not been applied.
            Some type of Command are not checked for success
        """
        return _tesseract_environment_python.EnvironmentUPtr_applyCommand(self, command)

    def getSceneGraph(self):
        r"""
        Get the Scene Graph
        :rtype: :py:class:`SceneGraph`
        :return: SceneGraphConstPtr
        """
        return _tesseract_environment_python.EnvironmentUPtr_getSceneGraph(self)

    def getGroupJointNames(self, group_name):
        r"""
        Get a groups joint names
        :type group_name: string
        :param group_name: The group name
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of joint names
        """
        return _tesseract_environment_python.EnvironmentUPtr_getGroupJointNames(self, group_name)

    def getJointGroup(self, *args):
        r"""
        *Overload 1:*

        Get a joint group by name
        :type group_name: string
        :param group_name: The group name
        :rtype: :py:class:`JointGroup`
        :return: A joint group

        |

        *Overload 2:*

        Get a joint group given a vector of joint names
        :type name: string
        :param name: The name to assign to the joint group
        :type joint_names: std::vector< std::string,std::allocator< std::string > >
        :param joint_names: The joint names that make up the group
        :rtype: :py:class:`JointGroup`
        :return: A joint group
        """
        return _tesseract_environment_python.EnvironmentUPtr_getJointGroup(self, *args)

    def getKinematicGroup(self, *args):
        r"""
        Get a kinematic group given group name and solver name
        If ik_solver_name is empty it will choose the first ik solver for the group
        :type group_name: string
        :param group_name: The group name
        :type ik_solver_name: string, optional
        :param ik_solver_name: The IK solver name
        :rtype: :py:class:`KinematicGroup`
        :return: A kinematics group
        """
        return _tesseract_environment_python.EnvironmentUPtr_getKinematicGroup(self, *args)

    def findTCPOffset(self, manip_info):
        r"""
        Find tool center point provided in the manipulator info

        If manipulator information tcp is defined as a string it does the following
           - First check if manipulator info is empty or already an Isometry3d, if so return identity
           - Next if not, it checks if the tcp offset name is a link in the environment if so throw an exception.
           - Next if not found, it looks up the tcp name in the SRDF kinematics information
           - Next if not found, it leverages the user defined callbacks to try an locate the tcp information.
           - Next throw an exception, because no tcp information was located.

        :type manip_info: :py:class:`ManipulatorInfo`
        :param manip_info: The manipulator info
        :rtype: :py:class:`Isometry3d`
        :return: The tool center point
        """
        return _tesseract_environment_python.EnvironmentUPtr_findTCPOffset(self, manip_info)

    def addFindTCPOffsetCallback(self, fn):
        r"""
        This allows for user defined callbacks for looking up TCP information
        :type fn: tesseract_environment::FindTCPOffsetCallbackFn
        :param fn: User defined callback function for locating TCP information
        """
        return _tesseract_environment_python.EnvironmentUPtr_addFindTCPOffsetCallback(self, fn)

    def getFindTCPOffsetCallbacks(self):
        r"""
        This get the current find tcp callbacks stored in the environment
        :rtype: std::vector< tesseract_environment::FindTCPOffsetCallbackFn,std::allocator< tesseract_environment::FindTCPOffsetCallbackFn > >
        :return: A vector of callback functions
        """
        return _tesseract_environment_python.EnvironmentUPtr_getFindTCPOffsetCallbacks(self)

    def addEventCallback(self, hash, fn):
        r"""
        Add an event callback function
        When these get called they are protected by a unique lock internally so if the
        callback is a long event it can impact performance.
        Notes: These do not get cloned or serialized
        :type hash: int
        :param hash: The id associated with the callback to allow removal. It is recommended to use
            std::hash<Object*>{}(this) to associate the callback with the class it associated with.
        :type fn: tesseract_environment::EventCallbackFn
        :param fn: User defined callback function which gets called for different event triggers
        """
        return _tesseract_environment_python.EnvironmentUPtr_addEventCallback(self, hash, fn)

    def removeEventCallback(self, hash):
        r"""
        Remove event callbacks
        :type hash: int
        :param hash: the id associated with the callback to be removed
        """
        return _tesseract_environment_python.EnvironmentUPtr_removeEventCallback(self, hash)

    def clearEventCallbacks(self):
        r""" clear all event callbacks"""
        return _tesseract_environment_python.EnvironmentUPtr_clearEventCallbacks(self)

    def setResourceLocator(self, locator):
        r"""
        Set resource locator for environment
        :type locator: :py:class:`ResourceLocator`
        :param locator: The resource locator
        """
        return _tesseract_environment_python.EnvironmentUPtr_setResourceLocator(self, locator)

    def getResourceLocator(self):
        r"""
        Get the resource locator assigned
        This can be a nullptr
        :rtype: :py:class:`ResourceLocator`
        :return: The resource locator assigned to the environment
        """
        return _tesseract_environment_python.EnvironmentUPtr_getResourceLocator(self)

    def setName(self, name):
        r""" Give the environment a name"""
        return _tesseract_environment_python.EnvironmentUPtr_setName(self, name)

    def getName(self):
        r"""
         Get the name of the environment

        This may be empty, if so check urdf name
        """
        return _tesseract_environment_python.EnvironmentUPtr_getName(self)

    def setState(self, *args):
        return _tesseract_environment_python.EnvironmentUPtr_setState(self, *args)

    def getState(self, *args):
        r"""
        *Overload 1:*

        Get the state of the environment for a given set or subset of joint values.

        This does not change the internal state of the environment.

        :type joints: std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >
        :param joints: A map of joint names to joint values to change.
        :rtype: :py:class:`SceneState`
        :return: A the state of the environment

        |

        *Overload 2:*
         Get the current state of the environment
        """
        return _tesseract_environment_python.EnvironmentUPtr_getState(self, *args)

    def getTimestamp(self):
        r""" Last update time. Updated when any change to the environment occurs"""
        return _tesseract_environment_python.EnvironmentUPtr_getTimestamp(self)

    def getCurrentStateTimestamp(self):
        r""" Last update time to current state. Updated only when current state is updated"""
        return _tesseract_environment_python.EnvironmentUPtr_getCurrentStateTimestamp(self)

    def getLink(self, name):
        r"""
        Get a link in the environment
        :type name: string
        :param name: The name of the link
        :rtype: :py:class:`Link`
        :return: Return nullptr if link name does not exists, otherwise a pointer to the link
        """
        return _tesseract_environment_python.EnvironmentUPtr_getLink(self, name)

    def getJoint(self, name):
        r"""
        Get joint by name
        :type name: string
        :param name: The name of the joint
        :rtype: :py:class:`Joint`
        :return: Joint Const Pointer
        """
        return _tesseract_environment_python.EnvironmentUPtr_getJoint(self, name)

    def getJointLimits(self, joint_name):
        r"""
        Gets the limits associated with a joint
        :type joint_name: string
        :param joint_name: Name of the joint to be updated
        :rtype: :py:class:`JointLimits`
        :return: The joint limits set for the given joint
        """
        return _tesseract_environment_python.EnvironmentUPtr_getJointLimits(self, joint_name)

    def getLinkCollisionEnabled(self, name):
        r"""
        Get whether a link should be considered during collision checking
        :rtype: boolean
        :return: True if should be considered during collision checking, otherwise false
        """
        return _tesseract_environment_python.EnvironmentUPtr_getLinkCollisionEnabled(self, name)

    def getLinkVisibility(self, name):
        r"""
        Get a given links visibility setting
        :rtype: boolean
        :return: True if should be visible, otherwise false
        """
        return _tesseract_environment_python.EnvironmentUPtr_getLinkVisibility(self, name)

    def getAllowedCollisionMatrix(self):
        r"""
        Get the allowed collision matrix
        :rtype: :py:class:`AllowedCollisionMatrix`
        :return: AllowedCollisionMatrixConstPtr
        """
        return _tesseract_environment_python.EnvironmentUPtr_getAllowedCollisionMatrix(self)

    def getJointNames(self):
        r"""
        Get a vector of joint names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of joint names
        """
        return _tesseract_environment_python.EnvironmentUPtr_getJointNames(self)

    def getActiveJointNames(self):
        r"""
        Get a vector of active joint names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of active joint names
        """
        return _tesseract_environment_python.EnvironmentUPtr_getActiveJointNames(self)

    def getCurrentJointValues(self, *args):
        r"""
        *Overload 1:*

        Get the current state of the environment

        Order should be the same as getActiveJointNames()

        :rtype: Eigen::VectorXd
        :return: A vector of joint values

        |

        *Overload 2:*

        Get the current joint values for a vector of joints

        Order should be the same as the input vector

        :rtype: Eigen::VectorXd
        :return: A vector of joint values
        """
        return _tesseract_environment_python.EnvironmentUPtr_getCurrentJointValues(self, *args)

    def getCurrentFloatingJointValues(self, *args):
        r"""
        *Overload 1:*

        Get the current floating joint values
        :rtype: :py:class:`TransformMap`
        :return: The joint origin transform for the floating joint

        |

        *Overload 2:*

        Get the current floating joint values
        :rtype: :py:class:`TransformMap`
        :return: The joint origin transform for the floating joint
        """
        return _tesseract_environment_python.EnvironmentUPtr_getCurrentFloatingJointValues(self, *args)

    def getRootLinkName(self):
        r"""
        Get the root link name
        :rtype: string
        :return: String
        """
        return _tesseract_environment_python.EnvironmentUPtr_getRootLinkName(self)

    def getLinkNames(self):
        r"""
        Get a vector of link names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of link names
        """
        return _tesseract_environment_python.EnvironmentUPtr_getLinkNames(self)

    def getActiveLinkNames(self, *args):
        r"""
        *Overload 1:*

        Get a vector of active link names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of active link names

        |

        *Overload 2:*

        Get a vector of active link names affected by the provided joints in the environment
        :type joint_names: std::vector< std::string,std::allocator< std::string > >
        :param joint_names: A list of joint names
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of active link names
        """
        return _tesseract_environment_python.EnvironmentUPtr_getActiveLinkNames(self, *args)

    def getStaticLinkNames(self, *args):
        r"""
        *Overload 1:*

        Get a vector of static link names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of static link names

        |

        *Overload 2:*

        Get a vector of static link names not affected by the provided joints in the environment
        :type joint_names: std::vector< std::string,std::allocator< std::string > >
        :param joint_names: A list of joint names
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of static link names
        """
        return _tesseract_environment_python.EnvironmentUPtr_getStaticLinkNames(self, *args)

    def getLinkTransforms(self):
        r"""
        Get all of the links transforms

        Order should be the same as getLinkNames()

        :rtype: :py:class:`VectorIsometry3d`
        :return: Get a vector of transforms for all links in the environment.
        """
        return _tesseract_environment_python.EnvironmentUPtr_getLinkTransforms(self)

    def getLinkTransform(self, link_name):
        r"""
        Get the transform corresponding to the link.
        :rtype: :py:class:`Isometry3d`
        :return: Transform and is identity when no transform is available.
        """
        return _tesseract_environment_python.EnvironmentUPtr_getLinkTransform(self, link_name)

    def getRelativeLinkTransform(self, from_link_name, to_link_name):
        r"""
        Get transform between two links using the current state
        :type from_link_name: string
        :param from_link_name: The link name the transform should be relative to
        :type to_link_name: string
        :param to_link_name: The link name to get transform
        :rtype: :py:class:`Isometry3d`
        :return: The relative transform = inv(Transform(from_link_name)) * Transform(to_link_name)
        """
        return _tesseract_environment_python.EnvironmentUPtr_getRelativeLinkTransform(self, from_link_name, to_link_name)

    def getStateSolver(self):
        r"""
        Returns a clone of the environments state solver

        The Environment::getState contains mutex's which is may not be needed in all motion planners. This allows the user
        to get snap shot of the environment to calculate the state.

        :rtype: std::unique_ptr< tesseract_scene_graph::StateSolver >
        :return: A clone of the environments state solver
        """
        return _tesseract_environment_python.EnvironmentUPtr_getStateSolver(self)

    def getKinematicsInformation(self):
        r"""
        Get the kinematics information
        :rtype: :py:class:`KinematicsInformation`
        :return: The kinematics information
        """
        return _tesseract_environment_python.EnvironmentUPtr_getKinematicsInformation(self)

    def getGroupNames(self):
        r"""
        Get the available group names
        :rtype: std::set< std::string,std::less< std::string >,std::allocator< std::string > >
        :return: The group names
        """
        return _tesseract_environment_python.EnvironmentUPtr_getGroupNames(self)

    def getContactManagersPluginInfo(self):
        r"""
        Get the contact managers plugin information
        :rtype: tesseract_common::ContactManagersPluginInfo
        :return: The contact managers plugin information
        """
        return _tesseract_environment_python.EnvironmentUPtr_getContactManagersPluginInfo(self)

    def setActiveDiscreteContactManager(self, name):
        r"""
        Set the active discrete contact manager
        :type name: string
        :param name: The name used to register the contact manager
        :rtype: boolean
        :return: True of name exists in DiscreteContactManagerFactory
        """
        return _tesseract_environment_python.EnvironmentUPtr_setActiveDiscreteContactManager(self, name)

    def getDiscreteContactManager(self, *args):
        r"""
        *Overload 1:*
        Get a copy of the environments active discrete contact manager

        |

        *Overload 2:*
        Get a copy of the environments available discrete contact manager by name
        """
        return _tesseract_environment_python.EnvironmentUPtr_getDiscreteContactManager(self, *args)

    def clearCachedDiscreteContactManager(self):
        r"""
        Set the cached internal copy of the environments active discrete contact manager not nullptr
        This can be useful to save space in the event the environment is being saved
        """
        return _tesseract_environment_python.EnvironmentUPtr_clearCachedDiscreteContactManager(self)

    def setActiveContinuousContactManager(self, name):
        r"""
        Set the active continuous contact manager
        :type name: string
        :param name: The name used to register the contact manager
        :rtype: boolean
        :return: True of name exists in ContinuousContactManagerFactory
        """
        return _tesseract_environment_python.EnvironmentUPtr_setActiveContinuousContactManager(self, name)

    def getContinuousContactManager(self, *args):
        r"""
        *Overload 1:*
        Get a copy of the environments active continuous contact manager

        |

        *Overload 2:*
        Get a copy of the environments available continuous contact manager by name
        """
        return _tesseract_environment_python.EnvironmentUPtr_getContinuousContactManager(self, *args)

    def clearCachedContinuousContactManager(self):
        r"""
        Set the cached internal copy of the environments active continuous contact manager not nullptr
        This can be useful to save space in the event the environment is being saved
        """
        return _tesseract_environment_python.EnvironmentUPtr_clearCachedContinuousContactManager(self)

    def getCollisionMarginData(self):
        r""" Get the environment collision margin data"""
        return _tesseract_environment_python.EnvironmentUPtr_getCollisionMarginData(self)

    def __eq__(self, rhs):
        r"""
        These operators are to facilitate checking serialization but may have value elsewhere
        :type rhs: :py:class:`Environment`
        :param rhs: The environment to compare
        :rtype: boolean
        :return: True if they are equal otherwise false
        """
        return _tesseract_environment_python.EnvironmentUPtr___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.EnvironmentUPtr___ne__(self, rhs)

# Register EnvironmentUPtr in _tesseract_environment_python:
_tesseract_environment_python.EnvironmentUPtr_swigregister(EnvironmentUPtr)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Environment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        r""" Default constructor"""
        _tesseract_environment_python.Environment_swiginit(self, _tesseract_environment_python.new_Environment())
    __swig_destroy__ = _tesseract_environment_python.delete_Environment

    def init(self, *args):
        return _tesseract_environment_python.Environment_init(self, *args)

    def clone(self):
        r"""
        Clone the environment
        :rtype: :py:class:`UPtr`
        :return: A clone of the environment
        """
        return _tesseract_environment_python.Environment_clone(self)

    def reset(self):
        r"""
        reset to initialized state
        If the environment has not been initialized then this returns false
        :rtype: boolean
        :return: True if environment was successfully reset, otherwise false.
        """
        return _tesseract_environment_python.Environment_reset(self)

    def clear(self):
        r""" clear content and uninitialized"""
        return _tesseract_environment_python.Environment_clear(self)

    def isInitialized(self):
        r""" check if the environment is initialized"""
        return _tesseract_environment_python.Environment_isInitialized(self)

    def getRevision(self):
        r"""
        Get the current revision number
        :rtype: int
        :return: Revision number
        """
        return _tesseract_environment_python.Environment_getRevision(self)

    def getInitRevision(self):
        r"""
        Get the initialization revision number
        :rtype: int
        :return: Initialization revision number
        """
        return _tesseract_environment_python.Environment_getInitRevision(self)

    def getCommandHistory(self):
        r"""
        Get Environment command history post initialization
        :rtype: std::vector< std::shared_ptr< tesseract_environment::Command const >,std::allocator< std::shared_ptr< tesseract_environment::Command const > > >
        :return: List of commands
        """
        return _tesseract_environment_python.Environment_getCommandHistory(self)

    def applyCommands(self, commands):
        r"""
        Applies the commands to the environment
        :type commands: std::vector< std::shared_ptr< tesseract_environment::Command const >,std::allocator< std::shared_ptr< tesseract_environment::Command const > > >
        :param commands: Commands to be applied to the environment
        :rtype: boolean
        :return: true if successful. If returned false, then only a partial set of commands have been applied. Call
            getCommandHistory to check. Some commands are not checked for success
        """
        return _tesseract_environment_python.Environment_applyCommands(self, commands)

    def applyCommand(self, command):
        r"""
        Apply command to the environment
        :type command: :py:class:`Command`
        :param command: Command to be applied to the environment
        :rtype: boolean
        :return: true if successful. If returned false, then the command have not been applied.
            Some type of Command are not checked for success
        """
        return _tesseract_environment_python.Environment_applyCommand(self, command)

    def getSceneGraph(self):
        r"""
        Get the Scene Graph
        :rtype: :py:class:`SceneGraph`
        :return: SceneGraphConstPtr
        """
        return _tesseract_environment_python.Environment_getSceneGraph(self)

    def getGroupJointNames(self, group_name):
        r"""
        Get a groups joint names
        :type group_name: string
        :param group_name: The group name
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of joint names
        """
        return _tesseract_environment_python.Environment_getGroupJointNames(self, group_name)

    def getJointGroup(self, *args):
        r"""
        *Overload 1:*

        Get a joint group by name
        :type group_name: string
        :param group_name: The group name
        :rtype: :py:class:`JointGroup`
        :return: A joint group

        |

        *Overload 2:*

        Get a joint group given a vector of joint names
        :type name: string
        :param name: The name to assign to the joint group
        :type joint_names: std::vector< std::string,std::allocator< std::string > >
        :param joint_names: The joint names that make up the group
        :rtype: :py:class:`JointGroup`
        :return: A joint group
        """
        return _tesseract_environment_python.Environment_getJointGroup(self, *args)

    def getKinematicGroup(self, *args):
        r"""
        Get a kinematic group given group name and solver name
        If ik_solver_name is empty it will choose the first ik solver for the group
        :type group_name: string
        :param group_name: The group name
        :type ik_solver_name: string, optional
        :param ik_solver_name: The IK solver name
        :rtype: :py:class:`KinematicGroup`
        :return: A kinematics group
        """
        return _tesseract_environment_python.Environment_getKinematicGroup(self, *args)

    def findTCPOffset(self, manip_info):
        r"""
        Find tool center point provided in the manipulator info

        If manipulator information tcp is defined as a string it does the following
           - First check if manipulator info is empty or already an Isometry3d, if so return identity
           - Next if not, it checks if the tcp offset name is a link in the environment if so throw an exception.
           - Next if not found, it looks up the tcp name in the SRDF kinematics information
           - Next if not found, it leverages the user defined callbacks to try an locate the tcp information.
           - Next throw an exception, because no tcp information was located.

        :type manip_info: :py:class:`ManipulatorInfo`
        :param manip_info: The manipulator info
        :rtype: :py:class:`Isometry3d`
        :return: The tool center point
        """
        return _tesseract_environment_python.Environment_findTCPOffset(self, manip_info)

    def addFindTCPOffsetCallback(self, fn):
        r"""
        This allows for user defined callbacks for looking up TCP information
        :type fn: tesseract_environment::FindTCPOffsetCallbackFn
        :param fn: User defined callback function for locating TCP information
        """
        return _tesseract_environment_python.Environment_addFindTCPOffsetCallback(self, fn)

    def getFindTCPOffsetCallbacks(self):
        r"""
        This get the current find tcp callbacks stored in the environment
        :rtype: std::vector< tesseract_environment::FindTCPOffsetCallbackFn,std::allocator< tesseract_environment::FindTCPOffsetCallbackFn > >
        :return: A vector of callback functions
        """
        return _tesseract_environment_python.Environment_getFindTCPOffsetCallbacks(self)

    def addEventCallback(self, hash, fn):
        r"""
        Add an event callback function
        When these get called they are protected by a unique lock internally so if the
        callback is a long event it can impact performance.
        Notes: These do not get cloned or serialized
        :type hash: int
        :param hash: The id associated with the callback to allow removal. It is recommended to use
            std::hash<Object*>{}(this) to associate the callback with the class it associated with.
        :type fn: tesseract_environment::EventCallbackFn
        :param fn: User defined callback function which gets called for different event triggers
        """
        return _tesseract_environment_python.Environment_addEventCallback(self, hash, fn)

    def removeEventCallback(self, hash):
        r"""
        Remove event callbacks
        :type hash: int
        :param hash: the id associated with the callback to be removed
        """
        return _tesseract_environment_python.Environment_removeEventCallback(self, hash)

    def clearEventCallbacks(self):
        r""" clear all event callbacks"""
        return _tesseract_environment_python.Environment_clearEventCallbacks(self)

    def setResourceLocator(self, locator):
        r"""
        Set resource locator for environment
        :type locator: :py:class:`ResourceLocator`
        :param locator: The resource locator
        """
        return _tesseract_environment_python.Environment_setResourceLocator(self, locator)

    def getResourceLocator(self):
        r"""
        Get the resource locator assigned
        This can be a nullptr
        :rtype: :py:class:`ResourceLocator`
        :return: The resource locator assigned to the environment
        """
        return _tesseract_environment_python.Environment_getResourceLocator(self)

    def setName(self, name):
        r""" Give the environment a name"""
        return _tesseract_environment_python.Environment_setName(self, name)

    def getName(self):
        r"""
         Get the name of the environment

        This may be empty, if so check urdf name
        """
        return _tesseract_environment_python.Environment_getName(self)

    def setState(self, *args):
        return _tesseract_environment_python.Environment_setState(self, *args)

    def getState(self, *args):
        r"""
        *Overload 1:*

        Get the state of the environment for a given set or subset of joint values.

        This does not change the internal state of the environment.

        :type joints: std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >
        :param joints: A map of joint names to joint values to change.
        :rtype: :py:class:`SceneState`
        :return: A the state of the environment

        |

        *Overload 2:*
         Get the current state of the environment
        """
        return _tesseract_environment_python.Environment_getState(self, *args)

    def getTimestamp(self):
        r""" Last update time. Updated when any change to the environment occurs"""
        return _tesseract_environment_python.Environment_getTimestamp(self)

    def getCurrentStateTimestamp(self):
        r""" Last update time to current state. Updated only when current state is updated"""
        return _tesseract_environment_python.Environment_getCurrentStateTimestamp(self)

    def getLink(self, name):
        r"""
        Get a link in the environment
        :type name: string
        :param name: The name of the link
        :rtype: :py:class:`Link`
        :return: Return nullptr if link name does not exists, otherwise a pointer to the link
        """
        return _tesseract_environment_python.Environment_getLink(self, name)

    def getJoint(self, name):
        r"""
        Get joint by name
        :type name: string
        :param name: The name of the joint
        :rtype: :py:class:`Joint`
        :return: Joint Const Pointer
        """
        return _tesseract_environment_python.Environment_getJoint(self, name)

    def getJointLimits(self, joint_name):
        r"""
        Gets the limits associated with a joint
        :type joint_name: string
        :param joint_name: Name of the joint to be updated
        :rtype: :py:class:`JointLimits`
        :return: The joint limits set for the given joint
        """
        return _tesseract_environment_python.Environment_getJointLimits(self, joint_name)

    def getLinkCollisionEnabled(self, name):
        r"""
        Get whether a link should be considered during collision checking
        :rtype: boolean
        :return: True if should be considered during collision checking, otherwise false
        """
        return _tesseract_environment_python.Environment_getLinkCollisionEnabled(self, name)

    def getLinkVisibility(self, name):
        r"""
        Get a given links visibility setting
        :rtype: boolean
        :return: True if should be visible, otherwise false
        """
        return _tesseract_environment_python.Environment_getLinkVisibility(self, name)

    def getAllowedCollisionMatrix(self):
        r"""
        Get the allowed collision matrix
        :rtype: :py:class:`AllowedCollisionMatrix`
        :return: AllowedCollisionMatrixConstPtr
        """
        return _tesseract_environment_python.Environment_getAllowedCollisionMatrix(self)

    def getJointNames(self):
        r"""
        Get a vector of joint names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of joint names
        """
        return _tesseract_environment_python.Environment_getJointNames(self)

    def getActiveJointNames(self):
        r"""
        Get a vector of active joint names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of active joint names
        """
        return _tesseract_environment_python.Environment_getActiveJointNames(self)

    def getCurrentJointValues(self, *args):
        r"""
        *Overload 1:*

        Get the current state of the environment

        Order should be the same as getActiveJointNames()

        :rtype: Eigen::VectorXd
        :return: A vector of joint values

        |

        *Overload 2:*

        Get the current joint values for a vector of joints

        Order should be the same as the input vector

        :rtype: Eigen::VectorXd
        :return: A vector of joint values
        """
        return _tesseract_environment_python.Environment_getCurrentJointValues(self, *args)

    def getCurrentFloatingJointValues(self, *args):
        r"""
        *Overload 1:*

        Get the current floating joint values
        :rtype: :py:class:`TransformMap`
        :return: The joint origin transform for the floating joint

        |

        *Overload 2:*

        Get the current floating joint values
        :rtype: :py:class:`TransformMap`
        :return: The joint origin transform for the floating joint
        """
        return _tesseract_environment_python.Environment_getCurrentFloatingJointValues(self, *args)

    def getRootLinkName(self):
        r"""
        Get the root link name
        :rtype: string
        :return: String
        """
        return _tesseract_environment_python.Environment_getRootLinkName(self)

    def getLinkNames(self):
        r"""
        Get a vector of link names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of link names
        """
        return _tesseract_environment_python.Environment_getLinkNames(self)

    def getActiveLinkNames(self, *args):
        r"""
        *Overload 1:*

        Get a vector of active link names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of active link names

        |

        *Overload 2:*

        Get a vector of active link names affected by the provided joints in the environment
        :type joint_names: std::vector< std::string,std::allocator< std::string > >
        :param joint_names: A list of joint names
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of active link names
        """
        return _tesseract_environment_python.Environment_getActiveLinkNames(self, *args)

    def getStaticLinkNames(self, *args):
        r"""
        *Overload 1:*

        Get a vector of static link names in the environment
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of static link names

        |

        *Overload 2:*

        Get a vector of static link names not affected by the provided joints in the environment
        :type joint_names: std::vector< std::string,std::allocator< std::string > >
        :param joint_names: A list of joint names
        :rtype: std::vector< std::string,std::allocator< std::string > >
        :return: A vector of static link names
        """
        return _tesseract_environment_python.Environment_getStaticLinkNames(self, *args)

    def getLinkTransforms(self):
        r"""
        Get all of the links transforms

        Order should be the same as getLinkNames()

        :rtype: :py:class:`VectorIsometry3d`
        :return: Get a vector of transforms for all links in the environment.
        """
        return _tesseract_environment_python.Environment_getLinkTransforms(self)

    def getLinkTransform(self, link_name):
        r"""
        Get the transform corresponding to the link.
        :rtype: :py:class:`Isometry3d`
        :return: Transform and is identity when no transform is available.
        """
        return _tesseract_environment_python.Environment_getLinkTransform(self, link_name)

    def getRelativeLinkTransform(self, from_link_name, to_link_name):
        r"""
        Get transform between two links using the current state
        :type from_link_name: string
        :param from_link_name: The link name the transform should be relative to
        :type to_link_name: string
        :param to_link_name: The link name to get transform
        :rtype: :py:class:`Isometry3d`
        :return: The relative transform = inv(Transform(from_link_name)) * Transform(to_link_name)
        """
        return _tesseract_environment_python.Environment_getRelativeLinkTransform(self, from_link_name, to_link_name)

    def getStateSolver(self):
        r"""
        Returns a clone of the environments state solver

        The Environment::getState contains mutex's which is may not be needed in all motion planners. This allows the user
        to get snap shot of the environment to calculate the state.

        :rtype: std::unique_ptr< tesseract_scene_graph::StateSolver >
        :return: A clone of the environments state solver
        """
        return _tesseract_environment_python.Environment_getStateSolver(self)

    def getKinematicsInformation(self):
        r"""
        Get the kinematics information
        :rtype: :py:class:`KinematicsInformation`
        :return: The kinematics information
        """
        return _tesseract_environment_python.Environment_getKinematicsInformation(self)

    def getGroupNames(self):
        r"""
        Get the available group names
        :rtype: std::set< std::string,std::less< std::string >,std::allocator< std::string > >
        :return: The group names
        """
        return _tesseract_environment_python.Environment_getGroupNames(self)

    def getContactManagersPluginInfo(self):
        r"""
        Get the contact managers plugin information
        :rtype: tesseract_common::ContactManagersPluginInfo
        :return: The contact managers plugin information
        """
        return _tesseract_environment_python.Environment_getContactManagersPluginInfo(self)

    def setActiveDiscreteContactManager(self, name):
        r"""
        Set the active discrete contact manager
        :type name: string
        :param name: The name used to register the contact manager
        :rtype: boolean
        :return: True of name exists in DiscreteContactManagerFactory
        """
        return _tesseract_environment_python.Environment_setActiveDiscreteContactManager(self, name)

    def clearCachedDiscreteContactManager(self):
        r"""
        Set the cached internal copy of the environments active discrete contact manager not nullptr
        This can be useful to save space in the event the environment is being saved
        """
        return _tesseract_environment_python.Environment_clearCachedDiscreteContactManager(self)

    def getDiscreteContactManager(self, *args):
        r"""
        *Overload 1:*
        Get a copy of the environments active discrete contact manager

        |

        *Overload 2:*
        Get a copy of the environments available discrete contact manager by name
        """
        return _tesseract_environment_python.Environment_getDiscreteContactManager(self, *args)

    def setActiveContinuousContactManager(self, name):
        r"""
        Set the active continuous contact manager
        :type name: string
        :param name: The name used to register the contact manager
        :rtype: boolean
        :return: True of name exists in ContinuousContactManagerFactory
        """
        return _tesseract_environment_python.Environment_setActiveContinuousContactManager(self, name)

    def clearCachedContinuousContactManager(self):
        r"""
        Set the cached internal copy of the environments active continuous contact manager not nullptr
        This can be useful to save space in the event the environment is being saved
        """
        return _tesseract_environment_python.Environment_clearCachedContinuousContactManager(self)

    def getContinuousContactManager(self, *args):
        r"""
        *Overload 1:*
        Get a copy of the environments active continuous contact manager

        |

        *Overload 2:*
        Get a copy of the environments available continuous contact manager by name
        """
        return _tesseract_environment_python.Environment_getContinuousContactManager(self, *args)

    def getCollisionMarginData(self):
        r""" Get the environment collision margin data"""
        return _tesseract_environment_python.Environment_getCollisionMarginData(self)

    def __eq__(self, rhs):
        r"""
        These operators are to facilitate checking serialization but may have value elsewhere
        :type rhs: :py:class:`Environment`
        :param rhs: The environment to compare
        :rtype: boolean
        :return: True if they are equal otherwise false
        """
        return _tesseract_environment_python.Environment___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_environment_python.Environment___ne__(self, rhs)

# Register Environment in _tesseract_environment_python:
_tesseract_environment_python.Environment_swigregister(Environment)

def cast_SceneStateChangedEvent(a):
    return _tesseract_environment_python.cast_SceneStateChangedEvent(a)

def cast_CommandAppliedEvent(a):
    return _tesseract_environment_python.cast_CommandAppliedEvent(a)

def AnyPoly_wrap_Environment(inner_waypoint):
    return _tesseract_environment_python.AnyPoly_wrap_Environment(inner_waypoint)

def AnyPoly_wrap_EnvironmentConst(inner_waypoint):
    return _tesseract_environment_python.AnyPoly_wrap_EnvironmentConst(inner_waypoint)

def AnyPoly_as_Environment(_self):
    return _tesseract_environment_python.AnyPoly_as_Environment(_self)

def AnyPoly_as_EnvironmentConst(_self):
    return _tesseract_environment_python.AnyPoly_as_EnvironmentConst(_self)

def AnyPoly_is_Environment(_self):
    return _tesseract_environment_python.AnyPoly_is_Environment(_self)

def AnyPoly_is_EnvironmentConst(_self):
    return _tesseract_environment_python.AnyPoly_is_EnvironmentConst(_self)

