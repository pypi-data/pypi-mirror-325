# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_common_python
else:
    import _tesseract_common_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_common_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_common_python.delete_SwigPyIterator

    def value(self):
        return _tesseract_common_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tesseract_common_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tesseract_common_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tesseract_common_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tesseract_common_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tesseract_common_python.SwigPyIterator_copy(self)

    def next(self):
        return _tesseract_common_python.SwigPyIterator_next(self)

    def __next__(self):
        return _tesseract_common_python.SwigPyIterator___next__(self)

    def previous(self):
        return _tesseract_common_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tesseract_common_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tesseract_common_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tesseract_common_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tesseract_common_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tesseract_common_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tesseract_common_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tesseract_common_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_common_python:
_tesseract_common_python.SwigPyIterator_swigregister(SwigPyIterator)
TINYXML2_MAJOR_VERSION = _tesseract_common_python.TINYXML2_MAJOR_VERSION
TINYXML2_MINOR_VERSION = _tesseract_common_python.TINYXML2_MINOR_VERSION
TINYXML2_PATCH_VERSION = _tesseract_common_python.TINYXML2_PATCH_VERSION
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLVisitor(object):
    r"""
    Implements the interface to the "Visitor pattern" (see the Accept() method.)
    If you call the Accept() method, it requires being passed a XMLVisitor
    class to handle callbacks. For nodes that contain other nodes (Document, Element)
    you will get called with a VisitEnter/VisitExit pair. Nodes that are always leafs
    are simply called with Visit().

    If you return 'true' from a Visit method, recursive parsing will continue. If you return
    false, **no children of this node or its siblings** will be visited.

    All flavors of Visit methods have a default implementation that returns 'true' (continue
    visiting). You need to only override methods that are interesting to you.

    Generally Accept() is called on the XMLDocument, although all nodes support visiting.

    You should never change the document from a callback.

    See also: XMLNode::Accept()
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_common_python.delete_XMLVisitor

    def VisitEnter(self, *args):
        r"""
        *Overload 1:*
        Visit a document.

        |

        *Overload 2:*
        Visit an element.
        """
        return _tesseract_common_python.XMLVisitor_VisitEnter(self, *args)

    def VisitExit(self, *args):
        r"""
        *Overload 1:*
        Visit a document.

        |

        *Overload 2:*
        Visit an element.
        """
        return _tesseract_common_python.XMLVisitor_VisitExit(self, *args)

    def Visit(self, *args):
        r"""
        *Overload 1:*
        Visit a declaration.

        |

        *Overload 2:*
        Visit a text node.

        |

        *Overload 3:*
        Visit a comment node.

        |

        *Overload 4:*
        Visit an unknown node.
        """
        return _tesseract_common_python.XMLVisitor_Visit(self, *args)

    def __init__(self):
        _tesseract_common_python.XMLVisitor_swiginit(self, _tesseract_common_python.new_XMLVisitor())

# Register XMLVisitor in _tesseract_common_python:
_tesseract_common_python.XMLVisitor_swigregister(XMLVisitor)
cvar = _tesseract_common_python.cvar
TIXML2_MAJOR_VERSION = cvar.TIXML2_MAJOR_VERSION
TIXML2_MINOR_VERSION = cvar.TIXML2_MINOR_VERSION
TIXML2_PATCH_VERSION = cvar.TIXML2_PATCH_VERSION
TINYXML2_MAX_ELEMENT_DEPTH = cvar.TINYXML2_MAX_ELEMENT_DEPTH

XML_SUCCESS = _tesseract_common_python.XML_SUCCESS
XML_NO_ATTRIBUTE = _tesseract_common_python.XML_NO_ATTRIBUTE
XML_WRONG_ATTRIBUTE_TYPE = _tesseract_common_python.XML_WRONG_ATTRIBUTE_TYPE
XML_ERROR_FILE_NOT_FOUND = _tesseract_common_python.XML_ERROR_FILE_NOT_FOUND
XML_ERROR_FILE_COULD_NOT_BE_OPENED = _tesseract_common_python.XML_ERROR_FILE_COULD_NOT_BE_OPENED
XML_ERROR_FILE_READ_ERROR = _tesseract_common_python.XML_ERROR_FILE_READ_ERROR
XML_ERROR_PARSING_ELEMENT = _tesseract_common_python.XML_ERROR_PARSING_ELEMENT
XML_ERROR_PARSING_ATTRIBUTE = _tesseract_common_python.XML_ERROR_PARSING_ATTRIBUTE
XML_ERROR_PARSING_TEXT = _tesseract_common_python.XML_ERROR_PARSING_TEXT
XML_ERROR_PARSING_CDATA = _tesseract_common_python.XML_ERROR_PARSING_CDATA
XML_ERROR_PARSING_COMMENT = _tesseract_common_python.XML_ERROR_PARSING_COMMENT
XML_ERROR_PARSING_DECLARATION = _tesseract_common_python.XML_ERROR_PARSING_DECLARATION
XML_ERROR_PARSING_UNKNOWN = _tesseract_common_python.XML_ERROR_PARSING_UNKNOWN
XML_ERROR_EMPTY_DOCUMENT = _tesseract_common_python.XML_ERROR_EMPTY_DOCUMENT
XML_ERROR_MISMATCHED_ELEMENT = _tesseract_common_python.XML_ERROR_MISMATCHED_ELEMENT
XML_ERROR_PARSING = _tesseract_common_python.XML_ERROR_PARSING
XML_CAN_NOT_CONVERT_TEXT = _tesseract_common_python.XML_CAN_NOT_CONVERT_TEXT
XML_NO_TEXT_NODE = _tesseract_common_python.XML_NO_TEXT_NODE
XML_ELEMENT_DEPTH_EXCEEDED = _tesseract_common_python.XML_ELEMENT_DEPTH_EXCEEDED
XML_ERROR_COUNT = _tesseract_common_python.XML_ERROR_COUNT
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLUtil(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    @staticmethod
    def SkipWhiteSpace(*args):
        return _tesseract_common_python.XMLUtil_SkipWhiteSpace(*args)

    @staticmethod
    def IsWhiteSpace(p):
        return _tesseract_common_python.XMLUtil_IsWhiteSpace(p)

    @staticmethod
    def IsNameStartChar(ch):
        return _tesseract_common_python.XMLUtil_IsNameStartChar(ch)

    @staticmethod
    def IsNameChar(ch):
        return _tesseract_common_python.XMLUtil_IsNameChar(ch)

    @staticmethod
    def IsPrefixHex(p):
        return _tesseract_common_python.XMLUtil_IsPrefixHex(p)

    @staticmethod
    def StringEqual(*args):
        return _tesseract_common_python.XMLUtil_StringEqual(*args)

    @staticmethod
    def IsUTF8Continuation(p):
        return _tesseract_common_python.XMLUtil_IsUTF8Continuation(p)

    @staticmethod
    def ReadBOM(p, hasBOM):
        return _tesseract_common_python.XMLUtil_ReadBOM(p, hasBOM)

    @staticmethod
    def GetCharacterRef(p, value, length):
        return _tesseract_common_python.XMLUtil_GetCharacterRef(p, value, length)

    @staticmethod
    def ConvertUTF32ToUTF8(input, output, length):
        return _tesseract_common_python.XMLUtil_ConvertUTF32ToUTF8(input, output, length)

    @staticmethod
    def ToStr(*args):
        return _tesseract_common_python.XMLUtil_ToStr(*args)

    @staticmethod
    def ToInt(str, value):
        return _tesseract_common_python.XMLUtil_ToInt(str, value)

    @staticmethod
    def ToUnsigned(str, value):
        return _tesseract_common_python.XMLUtil_ToUnsigned(str, value)

    @staticmethod
    def ToBool(str, value):
        return _tesseract_common_python.XMLUtil_ToBool(str, value)

    @staticmethod
    def ToFloat(str, value):
        return _tesseract_common_python.XMLUtil_ToFloat(str, value)

    @staticmethod
    def ToDouble(str, value):
        return _tesseract_common_python.XMLUtil_ToDouble(str, value)

    @staticmethod
    def ToInt64(str, value):
        return _tesseract_common_python.XMLUtil_ToInt64(str, value)

    @staticmethod
    def ToUnsigned64(str, value):
        return _tesseract_common_python.XMLUtil_ToUnsigned64(str, value)

    @staticmethod
    def SetBoolSerialization(writeTrue, writeFalse):
        return _tesseract_common_python.XMLUtil_SetBoolSerialization(writeTrue, writeFalse)

    def __init__(self):
        _tesseract_common_python.XMLUtil_swiginit(self, _tesseract_common_python.new_XMLUtil())
    __swig_destroy__ = _tesseract_common_python.delete_XMLUtil

# Register XMLUtil in _tesseract_common_python:
_tesseract_common_python.XMLUtil_swigregister(XMLUtil)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLNode(object):
    r"""
    XMLNode is a base class for every object that is in the
    XML Document Object Model (DOM), except XMLAttributes.
    Nodes have siblings, a parent, and children which can
    be navigated. A node is always in a XMLDocument.
    The type of a XMLNode can be queried, and it can
    be cast to its more defined type.

    A XMLDocument allocates memory for all its Nodes.
    When the XMLDocument gets deleted, all its Nodes
    will also be deleted.

    	A Document can contain:	Element	(container or leaf)
    						Comment (leaf)
    						Unknown (leaf)
    						Declaration( leaf )

    An Element can contain:	Element (container or leaf)
    						Text	(leaf)
    						Attributes (not on tree)
    						Comment (leaf)
    						Unknown (leaf)


    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetDocument(self, *args):
        r"""
        *Overload 1:*
        Get the XMLDocument that owns this XMLNode.

        |

        *Overload 2:*
        Get the XMLDocument that owns this XMLNode.
        """
        return _tesseract_common_python.XMLNode_GetDocument(self, *args)

    def ToElement(self, *args):
        return _tesseract_common_python.XMLNode_ToElement(self, *args)

    def ToText(self, *args):
        return _tesseract_common_python.XMLNode_ToText(self, *args)

    def ToComment(self, *args):
        return _tesseract_common_python.XMLNode_ToComment(self, *args)

    def ToDocument(self, *args):
        return _tesseract_common_python.XMLNode_ToDocument(self, *args)

    def ToDeclaration(self, *args):
        return _tesseract_common_python.XMLNode_ToDeclaration(self, *args)

    def ToUnknown(self, *args):
        return _tesseract_common_python.XMLNode_ToUnknown(self, *args)

    def ChildElementCount(self, *args):
        return _tesseract_common_python.XMLNode_ChildElementCount(self, *args)

    def Value(self):
        r"""
        The meaning of 'value' changes for the specific type.
           	    	Document:	empty (NULL is returned, not an empty string)
           	Element:	name of the element
           	Comment:	the comment text
           	Unknown:	the tag contents
           	Text:		the text string

        """
        return _tesseract_common_python.XMLNode_Value(self)

    def SetValue(self, val, staticMem=False):
        r"""
        Set the Value of an XML node.
           	See also: Value()
        """
        return _tesseract_common_python.XMLNode_SetValue(self, val, staticMem)

    def GetLineNum(self):
        r""" Gets the line number the node is in, if the document was parsed from a file."""
        return _tesseract_common_python.XMLNode_GetLineNum(self)

    def Parent(self, *args):
        return _tesseract_common_python.XMLNode_Parent(self, *args)

    def NoChildren(self):
        r""" Returns true if this node has no children."""
        return _tesseract_common_python.XMLNode_NoChildren(self)

    def FirstChild(self, *args):
        return _tesseract_common_python.XMLNode_FirstChild(self, *args)

    def FirstChildElement(self, *args):
        return _tesseract_common_python.XMLNode_FirstChildElement(self, *args)

    def LastChild(self, *args):
        return _tesseract_common_python.XMLNode_LastChild(self, *args)

    def LastChildElement(self, *args):
        return _tesseract_common_python.XMLNode_LastChildElement(self, *args)

    def PreviousSibling(self, *args):
        return _tesseract_common_python.XMLNode_PreviousSibling(self, *args)

    def PreviousSiblingElement(self, *args):
        return _tesseract_common_python.XMLNode_PreviousSiblingElement(self, *args)

    def NextSibling(self, *args):
        return _tesseract_common_python.XMLNode_NextSibling(self, *args)

    def NextSiblingElement(self, *args):
        return _tesseract_common_python.XMLNode_NextSiblingElement(self, *args)

    def InsertEndChild(self, addThis):
        r"""
          	Add a child node as the last (right) child.
        If the child node is already part of the document,
        it is moved from its old location to the new location.
        Returns the addThis argument or 0 if the node does not
        belong to the same document.
        """
        return _tesseract_common_python.XMLNode_InsertEndChild(self, addThis)

    def LinkEndChild(self, addThis):
        return _tesseract_common_python.XMLNode_LinkEndChild(self, addThis)

    def InsertFirstChild(self, addThis):
        r"""
          	Add a child node as the first (left) child.
        If the child node is already part of the document,
        it is moved from its old location to the new location.
        Returns the addThis argument or 0 if the node does not
        belong to the same document.
        """
        return _tesseract_common_python.XMLNode_InsertFirstChild(self, addThis)

    def InsertAfterChild(self, afterThis, addThis):
        r"""
          	Add a node after the specified child node.
        If the child node is already part of the document,
        it is moved from its old location to the new location.
        Returns the addThis argument or 0 if the afterThis node
        is not a child of this node, or if the node does not
        belong to the same document.
        """
        return _tesseract_common_python.XMLNode_InsertAfterChild(self, afterThis, addThis)

    def DeleteChildren(self):
        r"""    	Delete all the children of this node."""
        return _tesseract_common_python.XMLNode_DeleteChildren(self)

    def DeleteChild(self, node):
        r"""    	Delete a child of this node."""
        return _tesseract_common_python.XMLNode_DeleteChild(self, node)

    def ShallowClone(self, document):
        r"""
        Make a copy of this node, but not its children.
        You may pass in a Document pointer that will be
        the owner of the new Node. If the 'document' is
        null, then the node returned will be allocated
        from the current Document. (this->GetDocument())

        Note: if called on a XMLDocument, this will return null.
        """
        return _tesseract_common_python.XMLNode_ShallowClone(self, document)

    def DeepClone(self, target):
        r"""
        Make a copy of this node and all its children.

        If the 'target' is null, then the nodes will
        be allocated in the current document. If 'target'
              is specified, the memory will be allocated is the
              specified XMLDocument.

        NOTE: This is probably not the correct tool to
        copy a document, since XMLDocuments can have multiple
        top level XMLNodes. You probably want to use
              XMLDocument::DeepCopy()
        """
        return _tesseract_common_python.XMLNode_DeepClone(self, target)

    def ShallowEqual(self, compare):
        r"""
        Test if 2 nodes are the same, but don't test children.
        The 2 nodes do not need to be in the same Document.

        Note: if called on a XMLDocument, this will return false.
        """
        return _tesseract_common_python.XMLNode_ShallowEqual(self, compare)

    def Accept(self, visitor):
        r"""
        Accept a hierarchical visit of the nodes in the TinyXML-2 DOM. Every node in the
           	XML tree will be conditionally visited and the host will be called back
           	via the XMLVisitor interface.

           	This is essentially a SAX interface for TinyXML-2. (Note however it doesn't re-parse
           	the XML for the callbacks, so the performance of TinyXML-2 is unchanged by using this
           	interface versus any other.)

           	The interface has been based on ideas from:

           	- http://www.saxproject.org/
           	- http://c2.com/cgi/wiki?HierarchicalVisitorPattern

           	Which are both good references for "visiting".

           	An example of using Accept():
           	    	XMLPrinter printer;
           	tinyxmlDoc.Accept( &printer );
           	const char* xmlcstr = printer.CStr();

        """
        return _tesseract_common_python.XMLNode_Accept(self, visitor)

    def SetUserData(self, userData):
        r"""
        Set user data into the XMLNode. TinyXML-2 in
        no way processes or interprets user data.
        It is initially 0.
        """
        return _tesseract_common_python.XMLNode_SetUserData(self, userData)

    def GetUserData(self):
        r"""
        Get user data set into the XMLNode. TinyXML-2 in
        no way processes or interprets user data.
        It is initially 0.
        """
        return _tesseract_common_python.XMLNode_GetUserData(self)

# Register XMLNode in _tesseract_common_python:
_tesseract_common_python.XMLNode_swigregister(XMLNode)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLText(XMLNode):
    r"""
    XML text.

    Note that a text node can have child element nodes, for example:
    	<root>This is <b>bold</b></root>


    A text node can have 2 ways to output the next. "normal" output
    and CDATA. It will default to the mode it was parsed from the XML file and
    you generally want to leave it alone, but you can change the output mode with
    SetCData() and query it with CData().
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Accept(self, visitor):
        return _tesseract_common_python.XMLText_Accept(self, visitor)

    def ToText(self, *args):
        return _tesseract_common_python.XMLText_ToText(self, *args)

    def SetCData(self, isCData):
        r""" Declare whether this should be CDATA or standard text."""
        return _tesseract_common_python.XMLText_SetCData(self, isCData)

    def CData(self):
        r""" Returns true if this is a CDATA text element."""
        return _tesseract_common_python.XMLText_CData(self)

    def ShallowClone(self, document):
        return _tesseract_common_python.XMLText_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tesseract_common_python.XMLText_ShallowEqual(self, compare)

# Register XMLText in _tesseract_common_python:
_tesseract_common_python.XMLText_swigregister(XMLText)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLComment(XMLNode):
    r""" An XML Comment."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ToComment(self, *args):
        return _tesseract_common_python.XMLComment_ToComment(self, *args)

    def Accept(self, visitor):
        return _tesseract_common_python.XMLComment_Accept(self, visitor)

    def ShallowClone(self, document):
        return _tesseract_common_python.XMLComment_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tesseract_common_python.XMLComment_ShallowEqual(self, compare)

# Register XMLComment in _tesseract_common_python:
_tesseract_common_python.XMLComment_swigregister(XMLComment)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLDeclaration(XMLNode):
    r"""
    In correct XML the declaration is the first entry in the file.
    		<?xml version="1.0" standalone="yes"?>


    TinyXML-2 will happily read or write files without a declaration,
    however.

    The text of the declaration isn't interpreted. It is parsed
    and written as a string.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ToDeclaration(self, *args):
        return _tesseract_common_python.XMLDeclaration_ToDeclaration(self, *args)

    def Accept(self, visitor):
        return _tesseract_common_python.XMLDeclaration_Accept(self, visitor)

    def ShallowClone(self, document):
        return _tesseract_common_python.XMLDeclaration_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tesseract_common_python.XMLDeclaration_ShallowEqual(self, compare)

# Register XMLDeclaration in _tesseract_common_python:
_tesseract_common_python.XMLDeclaration_swigregister(XMLDeclaration)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLUnknown(XMLNode):
    r"""
    Any tag that TinyXML-2 doesn't recognize is saved as an
    unknown. It is a tag of text, but should not be modified.
    It will be written back to the XML, unchanged, when the file
    is saved.

    DTD tags get thrown into XMLUnknowns.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ToUnknown(self, *args):
        return _tesseract_common_python.XMLUnknown_ToUnknown(self, *args)

    def Accept(self, visitor):
        return _tesseract_common_python.XMLUnknown_Accept(self, visitor)

    def ShallowClone(self, document):
        return _tesseract_common_python.XMLUnknown_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tesseract_common_python.XMLUnknown_ShallowEqual(self, compare)

# Register XMLUnknown in _tesseract_common_python:
_tesseract_common_python.XMLUnknown_swigregister(XMLUnknown)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLAttribute(object):
    r"""
    An attribute is a name-value pair. Elements have an arbitrary
    number of attributes, each with a unique name.

    Notes: The attributes are not XMLNodes. You may only query the
    Next() attribute in a list.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self):
        r""" The name of the attribute."""
        return _tesseract_common_python.XMLAttribute_Name(self)

    def Value(self):
        r""" The value of the attribute."""
        return _tesseract_common_python.XMLAttribute_Value(self)

    def GetLineNum(self):
        r""" Gets the line number the attribute is in, if the document was parsed from a file."""
        return _tesseract_common_python.XMLAttribute_GetLineNum(self)

    def Next(self):
        r""" The next attribute in the list."""
        return _tesseract_common_python.XMLAttribute_Next(self)

    def IntValue(self):
        r"""
        IntValue interprets the attribute as an integer, and returns the value.
               If the value isn't an integer, 0 will be returned. There is no error checking;
           	use QueryIntValue() if you need error checking.
        """
        return _tesseract_common_python.XMLAttribute_IntValue(self)

    def Int64Value(self):
        return _tesseract_common_python.XMLAttribute_Int64Value(self)

    def Unsigned64Value(self):
        return _tesseract_common_python.XMLAttribute_Unsigned64Value(self)

    def UnsignedValue(self):
        r""" Query as an unsigned integer. See IntValue()"""
        return _tesseract_common_python.XMLAttribute_UnsignedValue(self)

    def BoolValue(self):
        r""" Query as a boolean. See IntValue()"""
        return _tesseract_common_python.XMLAttribute_BoolValue(self)

    def DoubleValue(self):
        r""" Query as a double. See IntValue()"""
        return _tesseract_common_python.XMLAttribute_DoubleValue(self)

    def FloatValue(self):
        r""" Query as a float. See IntValue()"""
        return _tesseract_common_python.XMLAttribute_FloatValue(self)

    def QueryIntValue(self, value):
        r"""
        QueryIntValue interprets the attribute as an integer, and returns the value
           	in the provided parameter. The function will return XML_SUCCESS on success,
           	and XML_WRONG_ATTRIBUTE_TYPE if the conversion is not successful.
        """
        return _tesseract_common_python.XMLAttribute_QueryIntValue(self, value)

    def QueryUnsignedValue(self, value):
        r""" See QueryIntValue"""
        return _tesseract_common_python.XMLAttribute_QueryUnsignedValue(self, value)

    def QueryInt64Value(self, value):
        r""" See QueryIntValue"""
        return _tesseract_common_python.XMLAttribute_QueryInt64Value(self, value)

    def QueryUnsigned64Value(self, value):
        r""" See QueryIntValue"""
        return _tesseract_common_python.XMLAttribute_QueryUnsigned64Value(self, value)

    def QueryBoolValue(self, value):
        r""" See QueryIntValue"""
        return _tesseract_common_python.XMLAttribute_QueryBoolValue(self, value)

    def QueryDoubleValue(self, value):
        r""" See QueryIntValue"""
        return _tesseract_common_python.XMLAttribute_QueryDoubleValue(self, value)

    def QueryFloatValue(self, value):
        r""" See QueryIntValue"""
        return _tesseract_common_python.XMLAttribute_QueryFloatValue(self, value)

    def SetAttribute(self, *args):
        r"""
        *Overload 1:*
        Set the attribute to a string value.

        |

        *Overload 2:*
        Set the attribute to value.

        |

        *Overload 3:*
        Set the attribute to value.

        |

        *Overload 4:*
        Set the attribute to value.

        |

        *Overload 5:*
        Set the attribute to value.

        |

        *Overload 6:*
        Set the attribute to value.

        |

        *Overload 7:*
        Set the attribute to value.

        |

        *Overload 8:*
        Set the attribute to value.
        """
        return _tesseract_common_python.XMLAttribute_SetAttribute(self, *args)

# Register XMLAttribute in _tesseract_common_python:
_tesseract_common_python.XMLAttribute_swigregister(XMLAttribute)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLElement(XMLNode):
    r"""
    The element is a container class. It has a value, the element name,
    and can contain other elements, text, comments, and unknowns.
    Elements also contain an arbitrary number of attributes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self):
        r""" Get the name of an element (which is the Value() of the node.)"""
        return _tesseract_common_python.XMLElement_Name(self)

    def SetName(self, str, staticMem=False):
        r""" Set the name of the element."""
        return _tesseract_common_python.XMLElement_SetName(self, str, staticMem)

    def ToElement(self, *args):
        return _tesseract_common_python.XMLElement_ToElement(self, *args)

    def Accept(self, visitor):
        return _tesseract_common_python.XMLElement_Accept(self, visitor)

    def Attribute(self, name, value=None):
        r"""
        Given an attribute name, Attribute() returns the value
           	for the attribute of that name, or null if none
           	exists. For example:

           	    	const char* value = ele->Attribute( "foo" );


           	The 'value' parameter is normally null. However, if specified,
           	the attribute will only be returned if the 'name' and 'value'
           	match. This allow you to write code:

           	    	if ( ele->Attribute( "foo", "bar" ) ) callFooIsBar();


           	rather than:
           	    	if ( ele->Attribute( "foo" ) ) {
           		if ( strcmp( ele->Attribute( "foo" ), "bar" ) == 0 ) callFooIsBar();
           	}

        """
        return _tesseract_common_python.XMLElement_Attribute(self, name, value)

    def IntAttribute(self, name, defaultValue=0):
        r"""
        Given an attribute name, IntAttribute() returns the value
           	of the attribute interpreted as an integer. The default
               value will be returned if the attribute isn't present,
               or if there is an error. (For a method with error
           	checking, see QueryIntAttribute()).
        """
        return _tesseract_common_python.XMLElement_IntAttribute(self, name, defaultValue)

    def UnsignedAttribute(self, name, defaultValue=0):
        r""" See IntAttribute()"""
        return _tesseract_common_python.XMLElement_UnsignedAttribute(self, name, defaultValue)

    def Int64Attribute(self, name, defaultValue=0):
        r""" See IntAttribute()"""
        return _tesseract_common_python.XMLElement_Int64Attribute(self, name, defaultValue)

    def Unsigned64Attribute(self, name, defaultValue=0):
        r""" See IntAttribute()"""
        return _tesseract_common_python.XMLElement_Unsigned64Attribute(self, name, defaultValue)

    def BoolAttribute(self, name, defaultValue=False):
        r""" See IntAttribute()"""
        return _tesseract_common_python.XMLElement_BoolAttribute(self, name, defaultValue)

    def DoubleAttribute(self, name, defaultValue=0):
        r""" See IntAttribute()"""
        return _tesseract_common_python.XMLElement_DoubleAttribute(self, name, defaultValue)

    def FloatAttribute(self, name, defaultValue=0):
        r""" See IntAttribute()"""
        return _tesseract_common_python.XMLElement_FloatAttribute(self, name, defaultValue)

    def QueryIntAttribute(self, name, value):
        r"""
        Given an attribute name, QueryIntAttribute() returns
           	XML_SUCCESS, XML_WRONG_ATTRIBUTE_TYPE if the conversion
           	can't be performed, or XML_NO_ATTRIBUTE if the attribute
           	doesn't exist. If successful, the result of the conversion
           	will be written to 'value'. If not successful, nothing will
           	be written to 'value'. This allows you to provide default
           	value:

           	    	int value = 10;
           	QueryIntAttribute( "foo", &value );		// if "foo" isn't found, value will still be 10

        """
        return _tesseract_common_python.XMLElement_QueryIntAttribute(self, name, value)

    def QueryUnsignedAttribute(self, name, value):
        r""" See QueryIntAttribute()"""
        return _tesseract_common_python.XMLElement_QueryUnsignedAttribute(self, name, value)

    def QueryInt64Attribute(self, name, value):
        r""" See QueryIntAttribute()"""
        return _tesseract_common_python.XMLElement_QueryInt64Attribute(self, name, value)

    def QueryUnsigned64Attribute(self, name, value):
        r""" See QueryIntAttribute()"""
        return _tesseract_common_python.XMLElement_QueryUnsigned64Attribute(self, name, value)

    def QueryBoolAttribute(self, name, value):
        r""" See QueryIntAttribute()"""
        return _tesseract_common_python.XMLElement_QueryBoolAttribute(self, name, value)

    def QueryDoubleAttribute(self, name, value):
        r""" See QueryIntAttribute()"""
        return _tesseract_common_python.XMLElement_QueryDoubleAttribute(self, name, value)

    def QueryFloatAttribute(self, name, value):
        r""" See QueryIntAttribute()"""
        return _tesseract_common_python.XMLElement_QueryFloatAttribute(self, name, value)

    def QueryStringAttribute(self, name, value):
        r""" See QueryIntAttribute()"""
        return _tesseract_common_python.XMLElement_QueryStringAttribute(self, name, value)

    def QueryAttribute(self, *args):
        return _tesseract_common_python.XMLElement_QueryAttribute(self, *args)

    def SetAttribute(self, *args):
        r"""
        *Overload 1:*
        Sets the named attribute to value.

        |

        *Overload 2:*
        Sets the named attribute to value.

        |

        *Overload 3:*
        Sets the named attribute to value.

        |

        *Overload 4:*
        Sets the named attribute to value.

        |

        *Overload 5:*
        Sets the named attribute to value.

        |

        *Overload 6:*
        Sets the named attribute to value.

        |

        *Overload 7:*
        Sets the named attribute to value.

        |

        *Overload 8:*
        Sets the named attribute to value.
        """
        return _tesseract_common_python.XMLElement_SetAttribute(self, *args)

    def DeleteAttribute(self, name):
        r"""    	Delete an attribute."""
        return _tesseract_common_python.XMLElement_DeleteAttribute(self, name)

    def FirstAttribute(self):
        r""" Return the first attribute in the list."""
        return _tesseract_common_python.XMLElement_FirstAttribute(self)

    def FindAttribute(self, name):
        r""" Query a specific attribute in the list."""
        return _tesseract_common_python.XMLElement_FindAttribute(self, name)

    def GetText(self):
        r"""
        Convenience function for easy access to the text inside an element. Although easy
           	and concise, GetText() is limited compared to getting the XMLText child
           	and accessing it directly.

           	If the first child of 'this' is a XMLText, the GetText()
           	returns the character string of the Text node, else null is returned.

           	This is a convenient method for getting the text of simple contained text:
           	    	<foo>This is text</foo>
           		const char* str = fooElement->GetText();


           	'str' will be a pointer to "This is text".

           	Note that this function can be misleading. If the element foo was created from
           	this XML:
           	    		<foo><b>This is text</b></foo>


           	then the value of str would be null. The first child node isn't a text node, it is
           	another element. From this XML:
           	    		<foo>This is <b>text</b></foo>

           	GetText() will return "This is ".
        """
        return _tesseract_common_python.XMLElement_GetText(self)

    def SetText(self, *args):
        r"""
        *Overload 1:*
         Convenience function for easy access to the text inside an element. Although easy
            	and concise, SetText() is limited compared to creating an XMLText child
            	and mutating it directly.

            	If the first child of 'this' is a XMLText, SetText() sets its value to
        		the given string, otherwise it will create a first child that is an XMLText.

            	This is a convenient method for setting the text of simple contained text:
            	    	<foo>This is text</foo>
            		fooElement->SetText( "Hullaballoo!" );
             	<foo>Hullaballoo!</foo>


            	Note that this function can be misleading. If the element foo was created from
            	this XML:
            	    		<foo><b>This is text</b></foo>


            	then it will not change "This is text", but rather prefix it with a text element:
            	    		<foo>Hullaballoo!<b>This is text</b></foo>


        		For this XML:
            	    		<foo />

            	SetText() will generate
            	    		<foo>Hullaballoo!</foo>


        |

        *Overload 2:*
         Convenience method for setting text inside an element. See SetText() for important limitations.

        |

        *Overload 3:*
         Convenience method for setting text inside an element. See SetText() for important limitations.

        |

        *Overload 4:*
         Convenience method for setting text inside an element. See SetText() for important limitations.

        |

        *Overload 5:*
         Convenience method for setting text inside an element. See SetText() for important limitations.

        |

        *Overload 6:*
         Convenience method for setting text inside an element. See SetText() for important limitations.

        |

        *Overload 7:*
         Convenience method for setting text inside an element. See SetText() for important limitations.

        |

        *Overload 8:*
         Convenience method for setting text inside an element. See SetText() for important limitations.
        """
        return _tesseract_common_python.XMLElement_SetText(self, *args)

    def QueryIntText(self, ival):
        r"""
            	Convenience method to query the value of a child text node. This is probably best
            	shown by example. Given you have a document is this form:
            	    		<point>
            			<x>1</x>
            			<y>1.4</y>
            		</point>


            	The QueryIntText() and similar functions provide a safe and easier way to get to the
            	"value" of x and y.

            	    		int x = 0;
            		float y = 0;	// types of x and y are contrived for example
            		const XMLElement* xElement = pointElement->FirstChildElement( "x" );
            		const XMLElement* yElement = pointElement->FirstChildElement( "y" );
            		xElement->QueryIntText( &x );
            		yElement->QueryFloatText( &y );


            	:rtype: int
        :return: XML_SUCCESS (0) on success, XML_CAN_NOT_CONVERT_TEXT if the text cannot be converted
                			 to the requested type, and XML_NO_TEXT_NODE if there is no child text to query.
        """
        return _tesseract_common_python.XMLElement_QueryIntText(self, ival)

    def QueryUnsignedText(self, uval):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_QueryUnsignedText(self, uval)

    def QueryInt64Text(self, uval):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_QueryInt64Text(self, uval)

    def QueryUnsigned64Text(self, uval):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_QueryUnsigned64Text(self, uval)

    def QueryBoolText(self, bval):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_QueryBoolText(self, bval)

    def QueryDoubleText(self, dval):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_QueryDoubleText(self, dval)

    def QueryFloatText(self, fval):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_QueryFloatText(self, fval)

    def IntText(self, defaultValue=0):
        return _tesseract_common_python.XMLElement_IntText(self, defaultValue)

    def UnsignedText(self, defaultValue=0):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_UnsignedText(self, defaultValue)

    def Int64Text(self, defaultValue=0):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_Int64Text(self, defaultValue)

    def Unsigned64Text(self, defaultValue=0):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_Unsigned64Text(self, defaultValue)

    def BoolText(self, defaultValue=False):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_BoolText(self, defaultValue)

    def DoubleText(self, defaultValue=0):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_DoubleText(self, defaultValue)

    def FloatText(self, defaultValue=0):
        r""" See QueryIntText()"""
        return _tesseract_common_python.XMLElement_FloatText(self, defaultValue)

    def InsertNewChildElement(self, name):
        r"""
        Convenience method to create a new XMLElement and add it as last (right)
        child of this node. Returns the created and inserted element.
        """
        return _tesseract_common_python.XMLElement_InsertNewChildElement(self, name)

    def InsertNewComment(self, comment):
        r""" See InsertNewChildElement()"""
        return _tesseract_common_python.XMLElement_InsertNewComment(self, comment)

    def InsertNewText(self, text):
        r""" See InsertNewChildElement()"""
        return _tesseract_common_python.XMLElement_InsertNewText(self, text)

    def InsertNewDeclaration(self, text):
        r""" See InsertNewChildElement()"""
        return _tesseract_common_python.XMLElement_InsertNewDeclaration(self, text)

    def InsertNewUnknown(self, text):
        r""" See InsertNewChildElement()"""
        return _tesseract_common_python.XMLElement_InsertNewUnknown(self, text)
    OPEN = _tesseract_common_python.XMLElement_OPEN
    CLOSED = _tesseract_common_python.XMLElement_CLOSED
    CLOSING = _tesseract_common_python.XMLElement_CLOSING

    def ClosingType(self):
        return _tesseract_common_python.XMLElement_ClosingType(self)

    def ShallowClone(self, document):
        return _tesseract_common_python.XMLElement_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tesseract_common_python.XMLElement_ShallowEqual(self, compare)

# Register XMLElement in _tesseract_common_python:
_tesseract_common_python.XMLElement_swigregister(XMLElement)
PRESERVE_WHITESPACE = _tesseract_common_python.PRESERVE_WHITESPACE
COLLAPSE_WHITESPACE = _tesseract_common_python.COLLAPSE_WHITESPACE
PEDANTIC_WHITESPACE = _tesseract_common_python.PEDANTIC_WHITESPACE
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLDocument(XMLNode):
    r"""
    A Document binds together all the functionality.
    It can be saved, loaded, and printed to the screen.
    All Nodes are connected and allocated to a Document.
    If the Document is deleted, all its Nodes are also deleted.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""" constructor"""
        _tesseract_common_python.XMLDocument_swiginit(self, _tesseract_common_python.new_XMLDocument(*args))
    __swig_destroy__ = _tesseract_common_python.delete_XMLDocument

    def ToDocument(self, *args):
        return _tesseract_common_python.XMLDocument_ToDocument(self, *args)

    def Parse(self, *args):
        r"""
        Parse an XML file from a character string.
        Returns XML_SUCCESS (0) on success, or
        an errorID.

        You may optionally pass in the 'nBytes', which is
        the number of bytes which will be parsed. If not
        specified, TinyXML-2 will assume 'xml' points to a
        null terminated string.
        """
        return _tesseract_common_python.XMLDocument_Parse(self, *args)

    def LoadFile(self, *args):
        r"""
        *Overload 1:*

        	Load an XML file from disk.
        	Returns XML_SUCCESS (0) on success, or
        	an errorID.

        |

        *Overload 2:*

        	Load an XML file from disk. You are responsible
        	for providing and closing the FILE*.

            NOTE: The file should be opened as binary ("rb")
            not text in order for TinyXML-2 to correctly
            do newline normalization.

        	Returns XML_SUCCESS (0) on success, or
        	an errorID.
        """
        return _tesseract_common_python.XMLDocument_LoadFile(self, *args)

    def SaveFile(self, *args):
        r"""
        *Overload 1:*

        	Save the XML file to disk.
        	Returns XML_SUCCESS (0) on success, or
        	an errorID.

        |

        *Overload 2:*

        	Save the XML file to disk. You are responsible
        	for providing and closing the FILE*.

        	Returns XML_SUCCESS (0) on success, or
        	an errorID.

        |

        *Overload 3:*

        	Save the XML file to disk. You are responsible
        	for providing and closing the FILE*.

        	Returns XML_SUCCESS (0) on success, or
        	an errorID.
        """
        return _tesseract_common_python.XMLDocument_SaveFile(self, *args)

    def ProcessEntities(self):
        return _tesseract_common_python.XMLDocument_ProcessEntities(self)

    def WhitespaceMode(self):
        return _tesseract_common_python.XMLDocument_WhitespaceMode(self)

    def HasBOM(self):
        r"""    	Returns true if this document has a leading Byte Order Mark of UTF8."""
        return _tesseract_common_python.XMLDocument_HasBOM(self)

    def SetBOM(self, useBOM):
        r""" Sets whether to write the BOM when writing the file."""
        return _tesseract_common_python.XMLDocument_SetBOM(self, useBOM)

    def RootElement(self, *args):
        return _tesseract_common_python.XMLDocument_RootElement(self, *args)

    def Print(self, streamer=None):
        r"""
         Print the Document. If the Printer is not provided, it will
                print to stdout. If you provide Printer, this can print to a file:
            	    	XMLPrinter printer( fp );
            	doc.Print( &printer );


            	Or you can use a printer to print to memory:
            	    	XMLPrinter printer;
            	doc.Print( &printer );
        printer.CStr() has a const char* to the XML

        """
        return _tesseract_common_python.XMLDocument_Print(self, streamer)

    def Accept(self, visitor):
        return _tesseract_common_python.XMLDocument_Accept(self, visitor)

    def NewElement(self, name):
        r"""
        Create a new Element associated with
        this Document. The memory for the Element
        is managed by the Document.
        """
        return _tesseract_common_python.XMLDocument_NewElement(self, name)

    def NewComment(self, comment):
        r"""
        Create a new Comment associated with
        this Document. The memory for the Comment
        is managed by the Document.
        """
        return _tesseract_common_python.XMLDocument_NewComment(self, comment)

    def NewText(self, text):
        r"""
        Create a new Text associated with
        this Document. The memory for the Text
        is managed by the Document.
        """
        return _tesseract_common_python.XMLDocument_NewText(self, text)

    def NewDeclaration(self, text=None):
        r"""
        Create a new Declaration associated with
        this Document. The memory for the object
        is managed by the Document.

        If the 'text' param is null, the standard
        declaration is used.:
            		<?xml version="1.0" encoding="UTF-8"?>

        """
        return _tesseract_common_python.XMLDocument_NewDeclaration(self, text)

    def NewUnknown(self, text):
        r"""
        Create a new Unknown associated with
        this Document. The memory for the object
        is managed by the Document.
        """
        return _tesseract_common_python.XMLDocument_NewUnknown(self, text)

    def DeleteNode(self, node):
        r"""
        Delete a node associated with this document.
        It will be unlinked from the DOM.
        """
        return _tesseract_common_python.XMLDocument_DeleteNode(self, node)

    def ClearError(self):
        r""" Clears the error flags."""
        return _tesseract_common_python.XMLDocument_ClearError(self)

    def Error(self):
        r""" Return true if there was an error parsing the document."""
        return _tesseract_common_python.XMLDocument_Error(self)

    def ErrorID(self):
        r""" Return the errorID."""
        return _tesseract_common_python.XMLDocument_ErrorID(self)

    def ErrorName(self):
        return _tesseract_common_python.XMLDocument_ErrorName(self)

    @staticmethod
    def ErrorIDToName(errorID):
        return _tesseract_common_python.XMLDocument_ErrorIDToName(errorID)

    def ErrorStr(self):
        r"""
        Returns a "long form" error description. A hopefully helpful
               diagnostic with location, line number, and/or additional info.
        """
        return _tesseract_common_python.XMLDocument_ErrorStr(self)

    def PrintError(self):
        r""" A (trivial) utility function that prints the ErrorStr() to stdout."""
        return _tesseract_common_python.XMLDocument_PrintError(self)

    def ErrorLineNum(self):
        r""" Return the line where the error occurred, or zero if unknown."""
        return _tesseract_common_python.XMLDocument_ErrorLineNum(self)

    def Clear(self):
        r""" Clear the document, resetting it to the initial state."""
        return _tesseract_common_python.XMLDocument_Clear(self)

    def DeepCopy(self, target):
        r"""
        Copies this document to a target document.
        The target will be completely cleared before the copy.
        If you want to copy a sub-tree, see XMLNode::DeepClone().

        NOTE: that the 'target' must be non-null.
        """
        return _tesseract_common_python.XMLDocument_DeepCopy(self, target)

    def Identify(self, p, node, first):
        return _tesseract_common_python.XMLDocument_Identify(self, p, node, first)

    def MarkInUse(self, arg2):
        return _tesseract_common_python.XMLDocument_MarkInUse(self, arg2)

    def ShallowClone(self, arg2):
        return _tesseract_common_python.XMLDocument_ShallowClone(self, arg2)

    def ShallowEqual(self, arg2):
        return _tesseract_common_python.XMLDocument_ShallowEqual(self, arg2)

# Register XMLDocument in _tesseract_common_python:
_tesseract_common_python.XMLDocument_swigregister(XMLDocument)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLHandle(object):
    r"""
    	A XMLHandle is a class that wraps a node pointer with null checks; this is
    	an incredibly useful thing. Note that XMLHandle is not part of the TinyXML-2
    	DOM structure. It is a separate utility class.

    	Take an example:
    		<Document>
    		<Element attributeA = "valueA">
    			<Child attributeB = "value1" />
    			<Child attributeB = "value2" />
    		</Element>
    	</Document>


    	Assuming you want the value of "attributeB" in the 2nd "Child" element, it's very
    	easy to write a *lot* of code that looks like:

    		XMLElement* root = document.FirstChildElement( "Document" );
    	if ( root )
    	{
    		XMLElement* element = root->FirstChildElement( "Element" );
    		if ( element )
    		{
    			XMLElement* child = element->FirstChildElement( "Child" );
    			if ( child )
    			{
    				XMLElement* child2 = child->NextSiblingElement( "Child" );
    				if ( child2 )
    				{
    Finally do something useful.


    	And that doesn't even cover "else" cases. XMLHandle addresses the verbosity
    	of such code. A XMLHandle checks for null pointers so it is perfectly safe
    	and correct to use:

    		XMLHandle docHandle( &document );
    	XMLElement* child2 = docHandle.FirstChildElement( "Document" ).FirstChildElement( "Element" ).FirstChildElement().NextSiblingElement();
    	if ( child2 )
    	{
    do something useful


    	Which is MUCH more concise and useful.

    	It is also safe to copy handles - internally they are nothing more than node pointers.
    		XMLHandle handleCopy = handle;


    	See also XMLConstHandle, which is the same as XMLHandle, but operates on const objects.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Create a handle from any node (at any depth of the tree.) This can be a null pointer.

        |

        *Overload 2:*
        Create a handle from a node.

        |

        *Overload 3:*
        Copy constructor
        """
        _tesseract_common_python.XMLHandle_swiginit(self, _tesseract_common_python.new_XMLHandle(*args))

    def FirstChild(self):
        r""" Get the first child of this handle."""
        return _tesseract_common_python.XMLHandle_FirstChild(self)

    def FirstChildElement(self, name=None):
        r""" Get the first child element of this handle."""
        return _tesseract_common_python.XMLHandle_FirstChildElement(self, name)

    def LastChild(self):
        r""" Get the last child of this handle."""
        return _tesseract_common_python.XMLHandle_LastChild(self)

    def LastChildElement(self, name=None):
        r""" Get the last child element of this handle."""
        return _tesseract_common_python.XMLHandle_LastChildElement(self, name)

    def PreviousSibling(self):
        r""" Get the previous sibling of this handle."""
        return _tesseract_common_python.XMLHandle_PreviousSibling(self)

    def PreviousSiblingElement(self, name=None):
        r""" Get the previous sibling element of this handle."""
        return _tesseract_common_python.XMLHandle_PreviousSiblingElement(self, name)

    def NextSibling(self):
        r""" Get the next sibling of this handle."""
        return _tesseract_common_python.XMLHandle_NextSibling(self)

    def NextSiblingElement(self, name=None):
        r""" Get the next sibling element of this handle."""
        return _tesseract_common_python.XMLHandle_NextSiblingElement(self, name)

    def ToNode(self):
        r""" Safe cast to XMLNode. This can return null."""
        return _tesseract_common_python.XMLHandle_ToNode(self)

    def ToElement(self):
        r""" Safe cast to XMLElement. This can return null."""
        return _tesseract_common_python.XMLHandle_ToElement(self)

    def ToText(self):
        r""" Safe cast to XMLText. This can return null."""
        return _tesseract_common_python.XMLHandle_ToText(self)

    def ToUnknown(self):
        r""" Safe cast to XMLUnknown. This can return null."""
        return _tesseract_common_python.XMLHandle_ToUnknown(self)

    def ToDeclaration(self):
        r""" Safe cast to XMLDeclaration. This can return null."""
        return _tesseract_common_python.XMLHandle_ToDeclaration(self)
    __swig_destroy__ = _tesseract_common_python.delete_XMLHandle

# Register XMLHandle in _tesseract_common_python:
_tesseract_common_python.XMLHandle_swigregister(XMLHandle)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLConstHandle(object):
    r"""
    A variant of the XMLHandle class for working with const XMLNodes and Documents. It is the
    same in all regards, except for the 'const' qualifiers. See XMLHandle for API.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_common_python.XMLConstHandle_swiginit(self, _tesseract_common_python.new_XMLConstHandle(*args))

    def FirstChild(self):
        return _tesseract_common_python.XMLConstHandle_FirstChild(self)

    def FirstChildElement(self, name=None):
        return _tesseract_common_python.XMLConstHandle_FirstChildElement(self, name)

    def LastChild(self):
        return _tesseract_common_python.XMLConstHandle_LastChild(self)

    def LastChildElement(self, name=None):
        return _tesseract_common_python.XMLConstHandle_LastChildElement(self, name)

    def PreviousSibling(self):
        return _tesseract_common_python.XMLConstHandle_PreviousSibling(self)

    def PreviousSiblingElement(self, name=None):
        return _tesseract_common_python.XMLConstHandle_PreviousSiblingElement(self, name)

    def NextSibling(self):
        return _tesseract_common_python.XMLConstHandle_NextSibling(self)

    def NextSiblingElement(self, name=None):
        return _tesseract_common_python.XMLConstHandle_NextSiblingElement(self, name)

    def ToNode(self):
        return _tesseract_common_python.XMLConstHandle_ToNode(self)

    def ToElement(self):
        return _tesseract_common_python.XMLConstHandle_ToElement(self)

    def ToText(self):
        return _tesseract_common_python.XMLConstHandle_ToText(self)

    def ToUnknown(self):
        return _tesseract_common_python.XMLConstHandle_ToUnknown(self)

    def ToDeclaration(self):
        return _tesseract_common_python.XMLConstHandle_ToDeclaration(self)
    __swig_destroy__ = _tesseract_common_python.delete_XMLConstHandle

# Register XMLConstHandle in _tesseract_common_python:
_tesseract_common_python.XMLConstHandle_swigregister(XMLConstHandle)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class XMLPrinter(XMLVisitor):
    r"""
    Printing functionality. The XMLPrinter gives you more
    options than the XMLDocument::Print() method.

    It can:
    -# Print to memory.
    -# Print to a file you provide.
    -# Print XML without a XMLDocument.

    Print to Memory

    	XMLPrinter printer;
    doc.Print( &printer );
    SomeFunction( printer.CStr() );


    Print to a File

    You provide the file pointer.
    	XMLPrinter printer( fp );
    doc.Print( &printer );


    Print without a XMLDocument

    When loading, an XML parser is very useful. However, sometimes
    when saving, it just gets in the way. The code is often set up
    for streaming, and constructing the DOM is just overhead.

    The Printer supports the streaming case. The following code
    prints out a trivially simple XML file without ever creating
    an XML document.

    	XMLPrinter printer( fp );
    printer.OpenElement( "foo" );
    printer.PushAttribute( "foo", "bar" );
    printer.CloseElement();

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, file=None, compact=False, depth=0):
        r"""
        Construct the printer. If the FILE* is specified,
           	this will print to the FILE. Else it will print
           	to memory, and the result is available in CStr().
           	If 'compact' is set to true, then output is created
           	with only required whitespace and newlines.
        """
        _tesseract_common_python.XMLPrinter_swiginit(self, _tesseract_common_python.new_XMLPrinter(file, compact, depth))
    __swig_destroy__ = _tesseract_common_python.delete_XMLPrinter

    def PushHeader(self, writeBOM, writeDeclaration):
        r""" If streaming, write the BOM and declaration."""
        return _tesseract_common_python.XMLPrinter_PushHeader(self, writeBOM, writeDeclaration)

    def OpenElement(self, name, compactMode=False):
        r"""
        If streaming, start writing an element.
               The element must be closed with CloseElement()
        """
        return _tesseract_common_python.XMLPrinter_OpenElement(self, name, compactMode)

    def PushAttribute(self, *args):
        return _tesseract_common_python.XMLPrinter_PushAttribute(self, *args)

    def CloseElement(self, compactMode=False):
        r""" If streaming, close the Element."""
        return _tesseract_common_python.XMLPrinter_CloseElement(self, compactMode)

    def PushText(self, *args):
        r"""
        *Overload 1:*
        Add a text node.

        |

        *Overload 2:*
        Add a text node from an integer.

        |

        *Overload 3:*
        Add a text node from an unsigned.

        |

        *Overload 4:*
        Add a text node from a signed 64bit integer.

        |

        *Overload 5:*
        Add a text node from an unsigned 64bit integer.

        |

        *Overload 6:*
        Add a text node from a bool.

        |

        *Overload 7:*
        Add a text node from a float.

        |

        *Overload 8:*
        Add a text node from a double.
        """
        return _tesseract_common_python.XMLPrinter_PushText(self, *args)

    def PushComment(self, comment):
        r""" Add a comment"""
        return _tesseract_common_python.XMLPrinter_PushComment(self, comment)

    def PushDeclaration(self, value):
        return _tesseract_common_python.XMLPrinter_PushDeclaration(self, value)

    def PushUnknown(self, value):
        return _tesseract_common_python.XMLPrinter_PushUnknown(self, value)

    def VisitEnter(self, *args):
        return _tesseract_common_python.XMLPrinter_VisitEnter(self, *args)

    def VisitExit(self, *args):
        return _tesseract_common_python.XMLPrinter_VisitExit(self, *args)

    def Visit(self, *args):
        return _tesseract_common_python.XMLPrinter_Visit(self, *args)

    def CStr(self):
        r"""
        If in print to memory mode, return a pointer to
        the XML file in memory.
        """
        return _tesseract_common_python.XMLPrinter_CStr(self)

    def CStrSize(self):
        r"""
        If in print to memory mode, return the size
        of the XML file in memory. (Note the size returned
        includes the terminating null.)
        """
        return _tesseract_common_python.XMLPrinter_CStrSize(self)

    def ClearBuffer(self, resetToFirstElement=True):
        r"""
        If in print to memory mode, reset the buffer to the
        beginning.
        """
        return _tesseract_common_python.XMLPrinter_ClearBuffer(self, resetToFirstElement)

# Register XMLPrinter in _tesseract_common_python:
_tesseract_common_python.XMLPrinter_swigregister(XMLPrinter)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class FilesystemPath(object):
    r"""Wrapper for boost::filesystem::path"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, s):
        r"""
        Construct a new path object

        :type s: string
        :param s: The path
        """
        _tesseract_common_python.FilesystemPath_swiginit(self, _tesseract_common_python.new_FilesystemPath(s))

    def string(self):
        r"""
        Return the path as a string

        :rtype: string
        :return: The path as a string
        """
        return _tesseract_common_python.FilesystemPath_string(self)

    def __str__(self):
        return self.string()

    __swig_destroy__ = _tesseract_common_python.delete_FilesystemPath

# Register FilesystemPath in _tesseract_common_python:
_tesseract_common_python.FilesystemPath_swigregister(FilesystemPath)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorFilesystemPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorFilesystemPath_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorFilesystemPath___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorFilesystemPath___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorFilesystemPath___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorFilesystemPath___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorFilesystemPath___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorFilesystemPath___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorFilesystemPath___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorFilesystemPath___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorFilesystemPath___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorFilesystemPath_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorFilesystemPath_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorFilesystemPath_empty(self)

    def size(self):
        return _tesseract_common_python.VectorFilesystemPath_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorFilesystemPath_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorFilesystemPath_begin(self)

    def end(self):
        return _tesseract_common_python.VectorFilesystemPath_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorFilesystemPath_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorFilesystemPath_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorFilesystemPath_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorFilesystemPath_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorFilesystemPath_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorFilesystemPath_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorFilesystemPath_swiginit(self, _tesseract_common_python.new_VectorFilesystemPath(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorFilesystemPath_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorFilesystemPath_front(self)

    def back(self):
        return _tesseract_common_python.VectorFilesystemPath_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorFilesystemPath_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorFilesystemPath_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorFilesystemPath_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorFilesystemPath_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorFilesystemPath_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorFilesystemPath

# Register VectorFilesystemPath in _tesseract_common_python:
_tesseract_common_python.VectorFilesystemPath_swigregister(VectorFilesystemPath)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Uuid(object):
    r"""
    Wrapper for boost::uuids::uuid


    This class is a simple wrapper for boost::uuids::uuid.  It is used to
    provide a simple interface for the uuid class in python.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _tesseract_common_python.Uuid___eq__(self, other)

    def __neq__(self, other):
        return _tesseract_common_python.Uuid___neq__(self, other)

    def __str__(self):
        r"""Convert uuid to string"""
        return _tesseract_common_python.Uuid___str__(self)

    def __init__(self):
        _tesseract_common_python.Uuid_swiginit(self, _tesseract_common_python.new_Uuid())
    __swig_destroy__ = _tesseract_common_python.delete_Uuid

# Register Uuid in _tesseract_common_python:
_tesseract_common_python.Uuid_swigregister(Uuid)

def newRandomUuid():
    r"""
    Generate a new random uuid


    This function generates a new random uuid

    :rtype: :py:class:`uuid`
    :return: A new random uuid
    """
    return _tesseract_common_python.newRandomUuid()
class Quaterniond(object):
    r"""
    Eigen::Quaterniond wrapper


    This class is a wrapper around Eigen::Quaterniond that provides additional functionality and easier bindings
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Default constructor, identity quaternion

        |

        *Overload 2:*

        Construct from angle axis
        :type aa: :py:class:`AngleAxisd`
        :param aa: Angle axis

        |

        *Overload 3:*

        Construct from rotation matrix
        :type other: Eigen::Matrix3d
        :param other: Rotation matrix

        |

        *Overload 4:*

        Construct from another quaternion
        :type other: :py:class:`Quaterniond`
        :param other: Quaternion

        |

        *Overload 5:*

        Construct from w, x, y, z
        :type w: float
        :param w: W component
        :type x: float
        :param x: X component
        :type y: float
        :param y: Y component
        :type z: float
        :param z: Z component
        """
        _tesseract_common_python.Quaterniond_swiginit(self, _tesseract_common_python.new_Quaterniond(*args))

    def FromTwoVectors(self, a, b):
        return _tesseract_common_python.Quaterniond_FromTwoVectors(self, a, b)

    @staticmethod
    def UnitRandom():
        r"""            Create random quaternion"""
        return _tesseract_common_python.Quaterniond_UnitRandom()

    def angularDistance(self, other):
        r"""
        Get the angular distance between this and another quaternions

        :type other: :py:class:`Quaterniond`
        :param other: Other quaternion
        :rtype: float
        :return: Angular distance in radians
        """
        return _tesseract_common_python.Quaterniond_angularDistance(self, other)

    def conjugate(self):
        r"""
        Get the conjugate of this quaternion

        :rtype: :py:class:`Quaterniond`
        :return: Conjugate of this quaternion
        """
        return _tesseract_common_python.Quaterniond_conjugate(self)

    def dot(self, other):
        r"""
        Get the dot product of this and another quaternion

        :type other: :py:class:`Quaterniond`
        :param other: Other quaternion
        :rtype: float
        :return: Dot product
        """
        return _tesseract_common_python.Quaterniond_dot(self, other)

    def inverse(self):
        r"""
        Get the inverse of this quaternion

        :rtype: :py:class:`Quaterniond`
        :return: Inverse of this quaternion
        """
        return _tesseract_common_python.Quaterniond_inverse(self)

    def isApprox(self, *args):
        r"""
        *Overload 1:*

        Check if this quaternion is approximately equal to another

        :type other: :py:class:`Quaterniond`
        :param other: Other quaternion
        :rtype: boolean
        :return: True if approximately equal

        |

        *Overload 2:*

        Check if this quaternion is approximately equal to another

        :type other: :py:class:`Quaterniond`
        :param other: Other quaternion
        :type prec: float
        :param prec: Precision
        :rtype: boolean
        :return: True if approximately equal
        """
        return _tesseract_common_python.Quaterniond_isApprox(self, *args)

    def norm(self):
        r"""
        Get the norm of this quaternion

        :rtype: float
        :return: Norm
        """
        return _tesseract_common_python.Quaterniond_norm(self)

    def normalize(self):
        r"""            Normalize this quaternion"""
        return _tesseract_common_python.Quaterniond_normalize(self)

    def normalized(self):
        r"""
        Get the normalized version of this quaternion

        :rtype: :py:class:`Quaterniond`
        :return: Normalized quaternion
        """
        return _tesseract_common_python.Quaterniond_normalized(self)

    def __mul__(self, *args):
        r"""
        *Overload 1:*

        Multiply this quaternion by another quaternion

        :type other: :py:class:`Quaterniond`
        :param other: Other quaternion
        :rtype: :py:class:`Quaterniond`
        :return: Result of multiplication

        |

        *Overload 2:*

        Multiply this quaternion by an Isometry3d

        :type other: :py:class:`Isometry3d`
        :param other: Isometry3d
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication

        |

        *Overload 3:*

        Multiply this quaternion by a Vector3d

        :type other: Eigen::Vector3d
        :param other: Vector3d
        :rtype: Eigen::Vector3d
        :return: Result of multiplication

        |

        *Overload 4:*

        Multiply this quaternion by a Matrix3d

        :type other: Eigen::Matrix3d
        :param other: Matrix3d
        :rtype: Eigen::Matrix3d
        :return: Result of multiplication

        |

        *Overload 5:*

        Multiply this quaternion by a Translation3d

        :type other: :py:class:`Translation3d`
        :param other: Translation3d
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication
        """
        return _tesseract_common_python.Quaterniond___mul__(self, *args)

    def setFromTwoVectors(self, a, b):
        return _tesseract_common_python.Quaterniond_setFromTwoVectors(self, a, b)

    def setIdentity(self):
        r"""
        Set this quaternion to identity

        :rtype: :py:class:`Quaterniond`
        :return: Reference to this quaternion
        """
        return _tesseract_common_python.Quaterniond_setIdentity(self)

    def slerp(self, t, other):
        r"""
        Computer the spherical linear interpolation between this and another quaternion

        :type t: float
        :param t: Interpolation parameter
        :type other: :py:class:`Quaterniond`
        :param other: Other quaternion
        :rtype: :py:class:`Quaterniond`
        :return: Result of interpolation
        """
        return _tesseract_common_python.Quaterniond_slerp(self, t, other)

    def squaredNorm(self):
        r"""
        Get the squared norm of this quaternion

        :rtype: float
        :return: Squared norm
        """
        return _tesseract_common_python.Quaterniond_squaredNorm(self)

    def toRotationMatrix(self):
        r"""
        Get the 3x3 rotation matrix of this quaternion

        :rtype: Eigen::Matrix3d
        :return: Rotation matrix
        """
        return _tesseract_common_python.Quaterniond_toRotationMatrix(self)

    def vec(self):
        r"""
        Get the vector representation of this quaternion

        :rtype: Eigen::Vector3d
        :return: Vector representation
        """
        return _tesseract_common_python.Quaterniond_vec(self)

    def w(self):
        r"""
        Get the w component of this quaternion

        :rtype: float
        :return: W component
        """
        return _tesseract_common_python.Quaterniond_w(self)

    def x(self):
        r"""
        Get the x component of this quaternion

        :rtype: float
        :return: X component
        """
        return _tesseract_common_python.Quaterniond_x(self)

    def y(self):
        r"""
        Get the y component of this quaternion

        :rtype: float
        :return: Y component
        """
        return _tesseract_common_python.Quaterniond_y(self)

    def z(self):
        r"""
        Get the z component of this quaternion

        :rtype: float
        :return: Z component
        """
        return _tesseract_common_python.Quaterniond_z(self)

    def setVec(self, vec):
        r"""
        Set the vector representation of this quaternion

        :type vec: Eigen::Vector3d
        :param vec: Vector representation
        """
        return _tesseract_common_python.Quaterniond_setVec(self, vec)

    def setW(self, w):
        r"""
        Set the w component of this quaternion

        :type w: float
        :param w: W component
        """
        return _tesseract_common_python.Quaterniond_setW(self, w)

    def setX(self, x):
        r"""
        Set the x component of this quaternion

        :type x: float
        :param x: X component
        """
        return _tesseract_common_python.Quaterniond_setX(self, x)

    def setY(self, y):
        r"""
        Set the y component of this quaternion

        :type y: float
        :param y: Y component
        """
        return _tesseract_common_python.Quaterniond_setY(self, y)

    def setZ(self, z):
        r"""
        Set the z component of this quaternion

        :type z: float
        :param z: Z component
        """
        return _tesseract_common_python.Quaterniond_setZ(self, z)
    __swig_destroy__ = _tesseract_common_python.delete_Quaterniond

# Register Quaterniond in _tesseract_common_python:
_tesseract_common_python.Quaterniond_swigregister(Quaterniond)
class AngleAxisd(object):
    r"""
    Eigen::AngleAxisd bindings

    This class is a wrapper around Eigen::AngleAxisd
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Create an identity AngleAxisd

        |

        *Overload 2:*

        Create an AngleAxisd from another AngleAxisd

        :type other: :py:class:`AngleAxisd`
        :param other: Other AngleAxisd

        |

        *Overload 3:*

        Create an AngleAxisd from a rotation matrix

        :type mat: Eigen::Matrix3d
        :param mat: Rotation matrix

        |

        *Overload 4:*

        Create an AngleAxisd from an angle and axis

        :type angle: float
        :param angle: Angle
        :type axis: Eigen::Vector3d
        :param axis: Axis

        |

        *Overload 5:*

        Create an AngleAxisd from a quaternion

        :type q: :py:class:`Quaterniond`
        :param q: Quaternion
        """
        _tesseract_common_python.AngleAxisd_swiginit(self, _tesseract_common_python.new_AngleAxisd(*args))

    def angle(self):
        r"""
        Get the angle of this AngleAxisd

        :rtype: float
        :return: Angle
        """
        return _tesseract_common_python.AngleAxisd_angle(self)

    def axis(self):
        r"""
        Get the axis of this AngleAxisd

        :rtype: Eigen::Vector3d
        :return: Axis
        """
        return _tesseract_common_python.AngleAxisd_axis(self)

    def setAngle(self, angle):
        r"""
        Set the angle of this AngleAxisd

        :type angle: float
        :param angle: Angle
        """
        return _tesseract_common_python.AngleAxisd_setAngle(self, angle)

    def setAxis(self, axis):
        r"""
        Set the axis of this AngleAxisd

        :type axis: Eigen::Vector3d
        :param axis: Axis
        """
        return _tesseract_common_python.AngleAxisd_setAxis(self, axis)

    def inverse(self):
        r"""
        Get the inverse of this AngleAxisd

        :rtype: :py:class:`AngleAxisd`
        :return: Inverse
        """
        return _tesseract_common_python.AngleAxisd_inverse(self)

    def isApprox(self, *args):
        r"""
        *Overload 1:*

        Check if this AngleAxisd is approximately equal to another AngleAxisd

        :type other: :py:class:`AngleAxisd`
        :param other: Other AngleAxisd
        :rtype: boolean
        :return: True if approximately equal, false otherwise

        |

        *Overload 2:*

        Check if this AngleAxisd is approximately equal to another AngleAxisd

        :type other: :py:class:`AngleAxisd`
        :param other: Other AngleAxisd
        :type prec: float
        :param prec: Precision
        :rtype: boolean
        :return: True if approximately equal, false otherwise
        """
        return _tesseract_common_python.AngleAxisd_isApprox(self, *args)

    def toRotationMatrix(self):
        r"""
        Get the 3x3 rotation matrix of this AngleAxisd

        :rtype: Eigen::Matrix3d
        :return: Rotation matrix
        """
        return _tesseract_common_python.AngleAxisd_toRotationMatrix(self)

    def fromRotationMatrix(self, mat):
        r"""
        Set from a rotation matrix

        :type mat: Eigen::Matrix3d
        :param mat: Rotation matrix
        :rtype: :py:class:`AngleAxisd`
        :return: AngleAxisd
        """
        return _tesseract_common_python.AngleAxisd_fromRotationMatrix(self, mat)

    def __mul__(self, *args):
        r"""
        *Overload 1:*

        Multiply this AngleAxisd by another AngleAxisd

        :type other: :py:class:`AngleAxisd`
        :param other: Other AngleAxisd
        :rtype: :py:class:`Quaterniond`
        :return: Result of multiplication

        |

        *Overload 2:*

        Multiply this AngleAxisd by a Quaterniond

        :type other: :py:class:`Quaterniond`
        :param other: Quaterniond
        :rtype: :py:class:`Quaterniond`
        :return: Result of multiplication

        |

        *Overload 3:*

        Multiply this AngleAxisd by a Translation3d

        :type other: :py:class:`Isometry3d`
        :param other: Translation3d
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication

        |

        *Overload 4:*

        Multiply this AngleAxisd by a Vector3d

        :type other: Eigen::Vector3d
        :param other: Vector3d
        :rtype: Eigen::Vector3d
        :return: Result of multiplication

        |

        *Overload 5:*

        Multiply this AngleAxisd by a Matrix3d

        :type other: Eigen::Matrix3d
        :param other: Matrix3d
        :rtype: Eigen::Matrix3d
        :return: Result of multiplication

        |

        *Overload 6:*

        Multiply this AngleAxisd by a Translation3d

        :type other: :py:class:`Translation3d`
        :param other: Translation3d
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication
        """
        return _tesseract_common_python.AngleAxisd___mul__(self, *args)
    __swig_destroy__ = _tesseract_common_python.delete_AngleAxisd

# Register AngleAxisd in _tesseract_common_python:
_tesseract_common_python.AngleAxisd_swigregister(AngleAxisd)
class Translation3d(object):
    r"""
    Eigen::Translation3d bindings

    This class is a wrapper around Eigen::Translation3d
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Create an identity Translation3d

        |

        *Overload 2:*

        Create a Translation3d from another Translation3d

        :type other: :py:class:`Translation3d`
        :param other: Other Translation3d

        |

        *Overload 3:*

        Create a Translation3d from a vector

        :type vector: Eigen::Vector3d
        :param vector: Vector

        |

        *Overload 4:*

        Create a Translation3d from x, y, and z components

        :type x: float
        :param x: X component
        :type y: float
        :param y: Y component
        :type z: float
        :param z: Z component
        """
        _tesseract_common_python.Translation3d_swiginit(self, _tesseract_common_python.new_Translation3d(*args))

    def __mul__(self, *args):
        r"""
        *Overload 1:*

        Multiply this Translation3d by another Translation3d

        :type other: :py:class:`Translation3d`
        :param other: Other Translation3d
        :rtype: :py:class:`Translation3d`
        :return: Result of multiplication

        |

        *Overload 2:*

        Multiply this Translation3d by a Quaterniond

        :type other: :py:class:`Isometry3d`
        :param other: Quaterniond
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication

        |

        *Overload 3:*

        Multiply this Translation3d by a Vector3d

        :type other: :py:class:`AngleAxisd`
        :param other: Vector3d
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication

        |

        *Overload 4:*

        Multiply this Translation3d by a Matrix3d

        :type other: :py:class:`Quaterniond`
        :param other: Matrix3d
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication
        """
        return _tesseract_common_python.Translation3d___mul__(self, *args)

    def x(self):
        r"""
        Get the x component of this Translation3d

        :rtype: float
        :return: X component
        """
        return _tesseract_common_python.Translation3d_x(self)

    def y(self):
        r"""
        Get the y component of this Translation3d

        :rtype: float
        :return: Y component
        """
        return _tesseract_common_python.Translation3d_y(self)

    def z(self):
        r"""
        Get the z component of this Translation3d

        :rtype: float
        :return: Z component
        """
        return _tesseract_common_python.Translation3d_z(self)

    def setX(self, x):
        r"""
        Set the x component of this Translation3d

        :type x: float
        :param x: X component
        """
        return _tesseract_common_python.Translation3d_setX(self, x)

    def setY(self, y):
        r"""
        Set the y component of this Translation3d

        :type y: float
        :param y: Y component
        """
        return _tesseract_common_python.Translation3d_setY(self, y)

    def setZ(self, z):
        r"""
        Set the z component of this Translation3d

        :type z: float
        :param z: Z component
        """
        return _tesseract_common_python.Translation3d_setZ(self, z)
    __swig_destroy__ = _tesseract_common_python.delete_Translation3d

# Register Translation3d in _tesseract_common_python:
_tesseract_common_python.Translation3d_swigregister(Translation3d)
class Isometry3d(object):
    r"""
    Eigen::Isometry3d bindings, used for Transforms in Tesseract

    This class is a wrapper around Eigen::Isometry3d
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Create an identity Isometry3d

        |

        *Overload 2:*

        Create an Isometry3d from a 4x4 holonomic matrix

        :type mat: Eigen::Matrix4d
        :param mat: 4x4 holonomic matrix
        """
        _tesseract_common_python.Isometry3d_swiginit(self, _tesseract_common_python.new_Isometry3d(*args))

    def isApprox(self, *args):
        r"""
        *Overload 1:*

        Check if this Isometry3d is approximately equal to another Isometry3d

        :type other: :py:class:`Isometry3d`
        :param other: Other Isometry3d
        :rtype: boolean
        :return: True if approximately equal, false otherwise

        |

        *Overload 2:*

        Check if this Isometry3d is approximately equal to another Isometry3d

        :type other: :py:class:`Isometry3d`
        :param other: Other Isometry3d
        :type prec: float
        :param prec: Precision
        :rtype: boolean
        :return: True if approximately equal, false otherwise
        """
        return _tesseract_common_python.Isometry3d_isApprox(self, *args)

    def inverse(self):
        r"""
        Get the inverse of this Isometry3d

        :rtype: :py:class:`Isometry3d`
        :return: Inverse of this Isometry3d
        """
        return _tesseract_common_python.Isometry3d_inverse(self)

    def matrix(self):
        r"""
        Get the 4x4 holonomic matrix of this Isometry3d

        :rtype: Eigen::Matrix4d
        :return: 4x4 holonomic matrix of this Isometry3d
        """
        return _tesseract_common_python.Isometry3d_matrix(self)

    def rotation(self):
        r"""
        Get the rotation matrix of this Isometry3d

        :rtype: Eigen::Matrix3d
        :return: Rotation matrix of this Isometry3d
        """
        return _tesseract_common_python.Isometry3d_rotation(self)

    def translation(self):
        r"""
        Get the translation vector of this Isometry3d

        :rtype: Eigen::Vector3d
        :return: Translation vector of this Isometry3d
        """
        return _tesseract_common_python.Isometry3d_translation(self)

    def linear(self):
        r"""
        Get the linear matrix of this Isometry3d

        :rtype: Eigen::Matrix3d
        :return: Linear matrix of this Isometry3d
        """
        return _tesseract_common_python.Isometry3d_linear(self)

    def setMatrix(self, matrix):
        r"""
        Set the 4x4 holonomic matrix of this Isometry3d

        :type matrix: Eigen::Matrix4d
        :param matrix: 4x4 holonomic matrix
        """
        return _tesseract_common_python.Isometry3d_setMatrix(self, matrix)

    def setTranslation(self, translation):
        r"""
        Set the translation vector of this Isometry3d

        :type translation: Eigen::Vector3d
        :param translation: Translation vector
        """
        return _tesseract_common_python.Isometry3d_setTranslation(self, translation)

    def setLinear(self, linear):
        r"""
        Set the linear matrix of this Isometry3d

        :type linear: Eigen::Matrix3d
        :param linear: Linear matrix
        """
        return _tesseract_common_python.Isometry3d_setLinear(self, linear)

    def __mul__(self, *args):
        r"""
        *Overload 1:*

        Multiply this Isometry3d by another Isometry3d

        :type other: :py:class:`Isometry3d`
        :param other: Other Isometry3d
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication

        |

        *Overload 2:*

        Multiply this Isometry3d by an AngleAxisd

        :type other: :py:class:`AngleAxisd`
        :param other: AngleAxisd
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication

        |

        *Overload 3:*

        Multiply this Isometry3d by a Quaterniond

        :type other: :py:class:`Quaterniond`
        :param other: Quaterniond
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication

        |

        *Overload 4:*

        Multiply this Isometry3d by a Translation3d

        :type other: :py:class:`Translation3d`
        :param other: Translation3d
        :rtype: :py:class:`Isometry3d`
        :return: Result of multiplication

        |

        *Overload 5:*

        Multiply this Isometry3d by a holonomic matrix

        :type other: Eigen::Matrix4d
        :param other: Matrix4d
        :rtype: Eigen::Matrix4d
        :return: Result of multiplication
        """
        return _tesseract_common_python.Isometry3d___mul__(self, *args)

    def rotate(self, *args):
        r"""
        *Overload 1:*

        Rotate this Isometry3d by a Matrix3d

        :type rotation: Eigen::Matrix3d
        :param rotation: Matrix3d

        |

        *Overload 2:*

        Rotate this Isometry3d by an AngleAxisd

        :type rotation: :py:class:`AngleAxisd`
        :param rotation: AngleAxisd

        |

        *Overload 3:*

        Rotate this Isometry3d by a Quaterniond

        :type rotation: :py:class:`Quaterniond`
        :param rotation: Quaterniond
        """
        return _tesseract_common_python.Isometry3d_rotate(self, *args)

    def translate(self, vec):
        r"""
        Translate this Isometry3d by a Vector3d

        :type vec: Eigen::Vector3d
        :param vec: Vector3d
        """
        return _tesseract_common_python.Isometry3d_translate(self, vec)

    def prerotate(self, *args):
        r"""
        *Overload 1:*

        Pre-rotate this Isometry3d by a Matrix3d

        :type rotation: Eigen::Matrix3d
        :param rotation: Matrix3d

        |

        *Overload 2:*

        Pre-rotate this Isometry3d by an AngleAxisd

        :type rotation: :py:class:`AngleAxisd`
        :param rotation: AngleAxisd

        |

        *Overload 3:*

        Pre-rotate this Isometry3d by a Quaterniond

        :type rotation: :py:class:`Quaterniond`
        :param rotation: Quaterniond
        """
        return _tesseract_common_python.Isometry3d_prerotate(self, *args)

    def pretranslate(self, vec):
        r"""
        Pre-translate this Isometry3d by a Vector3d

        :type vec: Eigen::Vector3d
        :param vec: Vector3d
        """
        return _tesseract_common_python.Isometry3d_pretranslate(self, vec)

    def setIdentity(self):
        r"""            Set this Isometry3d to the identity"""
        return _tesseract_common_python.Isometry3d_setIdentity(self)

    @staticmethod
    def Identity():
        r"""
        Get the identity Isometry3d

        :rtype: :py:class:`Isometry3d`
        :return: Identity Isometry3d
        """
        return _tesseract_common_python.Isometry3d_Identity()
    __swig_destroy__ = _tesseract_common_python.delete_Isometry3d

# Register Isometry3d in _tesseract_common_python:
_tesseract_common_python.Isometry3d_swigregister(Isometry3d)
CONSOLE_BRIDGE_LOG_DEBUG = _tesseract_common_python.CONSOLE_BRIDGE_LOG_DEBUG
r""" Debug level"""
CONSOLE_BRIDGE_LOG_INFO = _tesseract_common_python.CONSOLE_BRIDGE_LOG_INFO
r""" Informative message"""
CONSOLE_BRIDGE_LOG_WARN = _tesseract_common_python.CONSOLE_BRIDGE_LOG_WARN
r""" Warning"""
CONSOLE_BRIDGE_LOG_ERROR = _tesseract_common_python.CONSOLE_BRIDGE_LOG_ERROR
r""" Error condition"""
CONSOLE_BRIDGE_LOG_NONE = _tesseract_common_python.CONSOLE_BRIDGE_LOG_NONE
r""" Fatal error"""

def setLogLevel(level):
    r"""
    Set the minimum level of logging data to output. Messages with lower logging levels will
    not be recorded.
    """
    return _tesseract_common_python.setLogLevel(level)

def getLogLevel():
    r"""
    Retrieve the current level of logging data. Messages with lower logging levels will not be
    recorded.
    """
    return _tesseract_common_python.getLogLevel()
class OutputHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == OutputHandler:
            _self = None
        else:
            _self = self
        _tesseract_common_python.OutputHandler_swiginit(self, _tesseract_common_python.new_OutputHandler(_self, ))
    __swig_destroy__ = _tesseract_common_python.delete_OutputHandler

    def log(self, text, level, filename, line):
        r"""
        log a message to the output handler with the given text and logging level from a
        specific file and line number
        :type text: string
        :param text: to log
        :type level: int
        :param level: console_bridge log level
        :type filename: string
        :param filename: of the output log
        :type line: int
        :param line:
        """
        return _tesseract_common_python.OutputHandler_log(self, text, level, filename, line)
    def __disown__(self):
        self.this.disown()
        _tesseract_common_python.disown_OutputHandler(self)
        return weakref.proxy(self)

# Register OutputHandler in _tesseract_common_python:
_tesseract_common_python.OutputHandler_swigregister(OutputHandler)

def noOutputHandler():
    r"""
    This function instructs console bridge that no messages should be outputted.
    Equivalent to useOutputHandler(NULL)
    """
    return _tesseract_common_python.noOutputHandler()

def restorePreviousOutputHandler():
    r"""Restore the output handler that was previously in use (if any)"""
    return _tesseract_common_python.restorePreviousOutputHandler()

def useOutputHandler(oh):
    r"""
    Specify the instance of the OutputHandler to use.
    By default, this is OutputHandlerSTD
    """
    return _tesseract_common_python.useOutputHandler(oh)

def log(file, line, level, m):
    r"""
    Root level logging function.  This should not be invoked directly, but rather used via a
    'logging macro'. Formats the message string given the arguments and forwards the
    string to the output handler
    """
    return _tesseract_common_python.log(file, line, level, m)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorEigenIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorEigenIndex_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorEigenIndex___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorEigenIndex___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorEigenIndex___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorEigenIndex___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorEigenIndex___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorEigenIndex___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorEigenIndex___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorEigenIndex___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorEigenIndex___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorEigenIndex_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorEigenIndex_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorEigenIndex_empty(self)

    def size(self):
        return _tesseract_common_python.VectorEigenIndex_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorEigenIndex_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorEigenIndex_begin(self)

    def end(self):
        return _tesseract_common_python.VectorEigenIndex_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorEigenIndex_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorEigenIndex_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorEigenIndex_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorEigenIndex_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorEigenIndex_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorEigenIndex_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorEigenIndex_swiginit(self, _tesseract_common_python.new_VectorEigenIndex(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorEigenIndex_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorEigenIndex_front(self)

    def back(self):
        return _tesseract_common_python.VectorEigenIndex_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorEigenIndex_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorEigenIndex_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorEigenIndex_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorEigenIndex_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorEigenIndex_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorEigenIndex

# Register VectorEigenIndex in _tesseract_common_python:
_tesseract_common_python.VectorEigenIndex_swigregister(VectorEigenIndex)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorString___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorString___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorString___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorString_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorString_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorString_empty(self)

    def size(self):
        return _tesseract_common_python.VectorString_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorString_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorString_begin(self)

    def end(self):
        return _tesseract_common_python.VectorString_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorString_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorString_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorString_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorString_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorString_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorString_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorString_swiginit(self, _tesseract_common_python.new_VectorString(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorString_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorString_front(self)

    def back(self):
        return _tesseract_common_python.VectorString_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorString_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorString_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorString_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorString_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorString

# Register VectorString in _tesseract_common_python:
_tesseract_common_python.VectorString_swigregister(VectorString)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SetString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.SetString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.SetString___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.SetString___bool__(self)

    def __len__(self):
        return _tesseract_common_python.SetString___len__(self)

    def append(self, x):
        return _tesseract_common_python.SetString_append(self, x)

    def __contains__(self, x):
        return _tesseract_common_python.SetString___contains__(self, x)

    def __getitem__(self, i):
        return _tesseract_common_python.SetString___getitem__(self, i)

    def add(self, x):
        return _tesseract_common_python.SetString_add(self, x)

    def discard(self, x):
        return _tesseract_common_python.SetString_discard(self, x)

    def __init__(self, *args):
        _tesseract_common_python.SetString_swiginit(self, _tesseract_common_python.new_SetString(*args))

    def empty(self):
        return _tesseract_common_python.SetString_empty(self)

    def size(self):
        return _tesseract_common_python.SetString_size(self)

    def clear(self):
        return _tesseract_common_python.SetString_clear(self)

    def swap(self, v):
        return _tesseract_common_python.SetString_swap(self, v)

    def count(self, x):
        return _tesseract_common_python.SetString_count(self, x)

    def begin(self):
        return _tesseract_common_python.SetString_begin(self)

    def end(self):
        return _tesseract_common_python.SetString_end(self)

    def rbegin(self):
        return _tesseract_common_python.SetString_rbegin(self)

    def rend(self):
        return _tesseract_common_python.SetString_rend(self)

    def erase(self, *args):
        return _tesseract_common_python.SetString_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.SetString_find(self, x)

    def lower_bound(self, x):
        return _tesseract_common_python.SetString_lower_bound(self, x)

    def upper_bound(self, x):
        return _tesseract_common_python.SetString_upper_bound(self, x)

    def equal_range(self, x):
        return _tesseract_common_python.SetString_equal_range(self, x)

    def insert(self, __x):
        return _tesseract_common_python.SetString_insert(self, __x)
    __swig_destroy__ = _tesseract_common_python.delete_SetString

# Register SetString in _tesseract_common_python:
_tesseract_common_python.SetString_swigregister(SetString)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class PairString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_common_python.PairString_swiginit(self, _tesseract_common_python.new_PairString(*args))
    first = property(_tesseract_common_python.PairString_first_get, _tesseract_common_python.PairString_first_set)
    second = property(_tesseract_common_python.PairString_second_get, _tesseract_common_python.PairString_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _tesseract_common_python.delete_PairString

# Register PairString in _tesseract_common_python:
_tesseract_common_python.PairString_swigregister(PairString)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorPairString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorPairString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorPairString___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorPairString___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorPairString___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorPairString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorPairString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorPairString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorPairString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorPairString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorPairString___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorPairString_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorPairString_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorPairString_empty(self)

    def size(self):
        return _tesseract_common_python.VectorPairString_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorPairString_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorPairString_begin(self)

    def end(self):
        return _tesseract_common_python.VectorPairString_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorPairString_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorPairString_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorPairString_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorPairString_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorPairString_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorPairString_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorPairString_swiginit(self, _tesseract_common_python.new_VectorPairString(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorPairString_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorPairString_front(self)

    def back(self):
        return _tesseract_common_python.VectorPairString_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorPairString_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorPairString_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorPairString_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorPairString_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorPairString_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorPairString

# Register VectorPairString in _tesseract_common_python:
_tesseract_common_python.VectorPairString_swigregister(VectorPairString)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MapStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.MapStringString___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.MapStringString___bool__(self)

    def __len__(self):
        return _tesseract_common_python.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.MapStringString_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.MapStringString_keys(self)

    def values(self):
        return _tesseract_common_python.MapStringString_values(self)

    def items(self):
        return _tesseract_common_python.MapStringString_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.MapStringString_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.MapStringString_swiginit(self, _tesseract_common_python.new_MapStringString(*args))

    def empty(self):
        return _tesseract_common_python.MapStringString_empty(self)

    def size(self):
        return _tesseract_common_python.MapStringString_size(self)

    def swap(self, v):
        return _tesseract_common_python.MapStringString_swap(self, v)

    def begin(self):
        return _tesseract_common_python.MapStringString_begin(self)

    def end(self):
        return _tesseract_common_python.MapStringString_end(self)

    def clear(self):
        return _tesseract_common_python.MapStringString_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.MapStringString_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.MapStringString_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.MapStringString_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.MapStringString_find(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_MapStringString

# Register MapStringString in _tesseract_common_python:
_tesseract_common_python.MapStringString_swigregister(MapStringString)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MapStringString2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.MapStringString2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.MapStringString2___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.MapStringString2___bool__(self)

    def __len__(self):
        return _tesseract_common_python.MapStringString2___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.MapStringString2___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.MapStringString2___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.MapStringString2_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.MapStringString2_keys(self)

    def values(self):
        return _tesseract_common_python.MapStringString2_values(self)

    def items(self):
        return _tesseract_common_python.MapStringString2_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.MapStringString2___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.MapStringString2_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.MapStringString2_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.MapStringString2___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.MapStringString2_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.MapStringString2_swiginit(self, _tesseract_common_python.new_MapStringString2(*args))

    def empty(self):
        return _tesseract_common_python.MapStringString2_empty(self)

    def size(self):
        return _tesseract_common_python.MapStringString2_size(self)

    def swap(self, v):
        return _tesseract_common_python.MapStringString2_swap(self, v)

    def begin(self):
        return _tesseract_common_python.MapStringString2_begin(self)

    def end(self):
        return _tesseract_common_python.MapStringString2_end(self)

    def rbegin(self):
        return _tesseract_common_python.MapStringString2_rbegin(self)

    def rend(self):
        return _tesseract_common_python.MapStringString2_rend(self)

    def clear(self):
        return _tesseract_common_python.MapStringString2_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.MapStringString2_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.MapStringString2_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.MapStringString2_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.MapStringString2_find(self, x)

    def lower_bound(self, x):
        return _tesseract_common_python.MapStringString2_lower_bound(self, x)

    def upper_bound(self, x):
        return _tesseract_common_python.MapStringString2_upper_bound(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_MapStringString2

# Register MapStringString2 in _tesseract_common_python:
_tesseract_common_python.MapStringString2_swigregister(MapStringString2)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MapStringVectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.MapStringVectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.MapStringVectorString___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.MapStringVectorString___bool__(self)

    def __len__(self):
        return _tesseract_common_python.MapStringVectorString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.MapStringVectorString___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.MapStringVectorString___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.MapStringVectorString_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.MapStringVectorString_keys(self)

    def values(self):
        return _tesseract_common_python.MapStringVectorString_values(self)

    def items(self):
        return _tesseract_common_python.MapStringVectorString_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.MapStringVectorString___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.MapStringVectorString_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.MapStringVectorString_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.MapStringVectorString___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.MapStringVectorString_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.MapStringVectorString_swiginit(self, _tesseract_common_python.new_MapStringVectorString(*args))

    def empty(self):
        return _tesseract_common_python.MapStringVectorString_empty(self)

    def size(self):
        return _tesseract_common_python.MapStringVectorString_size(self)

    def swap(self, v):
        return _tesseract_common_python.MapStringVectorString_swap(self, v)

    def begin(self):
        return _tesseract_common_python.MapStringVectorString_begin(self)

    def end(self):
        return _tesseract_common_python.MapStringVectorString_end(self)

    def clear(self):
        return _tesseract_common_python.MapStringVectorString_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.MapStringVectorString_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.MapStringVectorString_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.MapStringVectorString_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.MapStringVectorString_find(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_MapStringVectorString

# Register MapStringVectorString in _tesseract_common_python:
_tesseract_common_python.MapStringVectorString_swigregister(MapStringVectorString)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MapStringVectorPairString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.MapStringVectorPairString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.MapStringVectorPairString___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.MapStringVectorPairString___bool__(self)

    def __len__(self):
        return _tesseract_common_python.MapStringVectorPairString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.MapStringVectorPairString___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.MapStringVectorPairString___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.MapStringVectorPairString_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.MapStringVectorPairString_keys(self)

    def values(self):
        return _tesseract_common_python.MapStringVectorPairString_values(self)

    def items(self):
        return _tesseract_common_python.MapStringVectorPairString_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.MapStringVectorPairString___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.MapStringVectorPairString_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.MapStringVectorPairString_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.MapStringVectorPairString___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.MapStringVectorPairString_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.MapStringVectorPairString_swiginit(self, _tesseract_common_python.new_MapStringVectorPairString(*args))

    def empty(self):
        return _tesseract_common_python.MapStringVectorPairString_empty(self)

    def size(self):
        return _tesseract_common_python.MapStringVectorPairString_size(self)

    def swap(self, v):
        return _tesseract_common_python.MapStringVectorPairString_swap(self, v)

    def begin(self):
        return _tesseract_common_python.MapStringVectorPairString_begin(self)

    def end(self):
        return _tesseract_common_python.MapStringVectorPairString_end(self)

    def clear(self):
        return _tesseract_common_python.MapStringVectorPairString_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.MapStringVectorPairString_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.MapStringVectorPairString_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.MapStringVectorPairString_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.MapStringVectorPairString_find(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_MapStringVectorPairString

# Register MapStringVectorPairString in _tesseract_common_python:
_tesseract_common_python.MapStringVectorPairString_swigregister(MapStringVectorPairString)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class PairVectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_common_python.PairVectorString_swiginit(self, _tesseract_common_python.new_PairVectorString(*args))
    first = property(_tesseract_common_python.PairVectorString_first_get, _tesseract_common_python.PairVectorString_first_set)
    second = property(_tesseract_common_python.PairVectorString_second_get, _tesseract_common_python.PairVectorString_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _tesseract_common_python.delete_PairVectorString

# Register PairVectorString in _tesseract_common_python:
_tesseract_common_python.PairVectorString_swigregister(PairVectorString)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorDouble___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorDouble_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorDouble_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorDouble_empty(self)

    def size(self):
        return _tesseract_common_python.VectorDouble_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorDouble_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorDouble_begin(self)

    def end(self):
        return _tesseract_common_python.VectorDouble_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorDouble_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorDouble_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorDouble_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorDouble_swiginit(self, _tesseract_common_python.new_VectorDouble(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorDouble_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorDouble_front(self)

    def back(self):
        return _tesseract_common_python.VectorDouble_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorDouble_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorDouble_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorDouble

# Register VectorDouble in _tesseract_common_python:
_tesseract_common_python.VectorDouble_swigregister(VectorDouble)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MapStringVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.MapStringVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.MapStringVectorDouble___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.MapStringVectorDouble___bool__(self)

    def __len__(self):
        return _tesseract_common_python.MapStringVectorDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.MapStringVectorDouble___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.MapStringVectorDouble___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.MapStringVectorDouble_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.MapStringVectorDouble_keys(self)

    def values(self):
        return _tesseract_common_python.MapStringVectorDouble_values(self)

    def items(self):
        return _tesseract_common_python.MapStringVectorDouble_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.MapStringVectorDouble___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.MapStringVectorDouble_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.MapStringVectorDouble_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.MapStringVectorDouble___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.MapStringVectorDouble_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.MapStringVectorDouble_swiginit(self, _tesseract_common_python.new_MapStringVectorDouble(*args))

    def empty(self):
        return _tesseract_common_python.MapStringVectorDouble_empty(self)

    def size(self):
        return _tesseract_common_python.MapStringVectorDouble_size(self)

    def swap(self, v):
        return _tesseract_common_python.MapStringVectorDouble_swap(self, v)

    def begin(self):
        return _tesseract_common_python.MapStringVectorDouble_begin(self)

    def end(self):
        return _tesseract_common_python.MapStringVectorDouble_end(self)

    def clear(self):
        return _tesseract_common_python.MapStringVectorDouble_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.MapStringVectorDouble_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.MapStringVectorDouble_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.MapStringVectorDouble_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.MapStringVectorDouble_find(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_MapStringVectorDouble

# Register MapStringVectorDouble in _tesseract_common_python:
_tesseract_common_python.MapStringVectorDouble_swigregister(MapStringVectorDouble)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MapStringDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.MapStringDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.MapStringDouble___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.MapStringDouble___bool__(self)

    def __len__(self):
        return _tesseract_common_python.MapStringDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.MapStringDouble___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.MapStringDouble___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.MapStringDouble_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.MapStringDouble_keys(self)

    def values(self):
        return _tesseract_common_python.MapStringDouble_values(self)

    def items(self):
        return _tesseract_common_python.MapStringDouble_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.MapStringDouble___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.MapStringDouble_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.MapStringDouble_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.MapStringDouble___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.MapStringDouble_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.MapStringDouble_swiginit(self, _tesseract_common_python.new_MapStringDouble(*args))

    def empty(self):
        return _tesseract_common_python.MapStringDouble_empty(self)

    def size(self):
        return _tesseract_common_python.MapStringDouble_size(self)

    def swap(self, v):
        return _tesseract_common_python.MapStringDouble_swap(self, v)

    def begin(self):
        return _tesseract_common_python.MapStringDouble_begin(self)

    def end(self):
        return _tesseract_common_python.MapStringDouble_end(self)

    def clear(self):
        return _tesseract_common_python.MapStringDouble_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.MapStringDouble_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.MapStringDouble_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.MapStringDouble_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.MapStringDouble_find(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_MapStringDouble

# Register MapStringDouble in _tesseract_common_python:
_tesseract_common_python.MapStringDouble_swigregister(MapStringDouble)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MapStringMapStringDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.MapStringMapStringDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.MapStringMapStringDouble___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.MapStringMapStringDouble___bool__(self)

    def __len__(self):
        return _tesseract_common_python.MapStringMapStringDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.MapStringMapStringDouble___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.MapStringMapStringDouble___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.MapStringMapStringDouble_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.MapStringMapStringDouble_keys(self)

    def values(self):
        return _tesseract_common_python.MapStringMapStringDouble_values(self)

    def items(self):
        return _tesseract_common_python.MapStringMapStringDouble_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.MapStringMapStringDouble___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.MapStringMapStringDouble_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.MapStringMapStringDouble_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.MapStringMapStringDouble___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.MapStringMapStringDouble_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.MapStringMapStringDouble_swiginit(self, _tesseract_common_python.new_MapStringMapStringDouble(*args))

    def empty(self):
        return _tesseract_common_python.MapStringMapStringDouble_empty(self)

    def size(self):
        return _tesseract_common_python.MapStringMapStringDouble_size(self)

    def swap(self, v):
        return _tesseract_common_python.MapStringMapStringDouble_swap(self, v)

    def begin(self):
        return _tesseract_common_python.MapStringMapStringDouble_begin(self)

    def end(self):
        return _tesseract_common_python.MapStringMapStringDouble_end(self)

    def clear(self):
        return _tesseract_common_python.MapStringMapStringDouble_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.MapStringMapStringDouble_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.MapStringMapStringDouble_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.MapStringMapStringDouble_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.MapStringMapStringDouble_find(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_MapStringMapStringDouble

# Register MapStringMapStringDouble in _tesseract_common_python:
_tesseract_common_python.MapStringMapStringDouble_swigregister(MapStringMapStringDouble)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MapStringMapStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.MapStringMapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.MapStringMapStringString___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.MapStringMapStringString___bool__(self)

    def __len__(self):
        return _tesseract_common_python.MapStringMapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.MapStringMapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.MapStringMapStringString___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.MapStringMapStringString_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.MapStringMapStringString_keys(self)

    def values(self):
        return _tesseract_common_python.MapStringMapStringString_values(self)

    def items(self):
        return _tesseract_common_python.MapStringMapStringString_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.MapStringMapStringString___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.MapStringMapStringString_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.MapStringMapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.MapStringMapStringString___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.MapStringMapStringString_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.MapStringMapStringString_swiginit(self, _tesseract_common_python.new_MapStringMapStringString(*args))

    def empty(self):
        return _tesseract_common_python.MapStringMapStringString_empty(self)

    def size(self):
        return _tesseract_common_python.MapStringMapStringString_size(self)

    def swap(self, v):
        return _tesseract_common_python.MapStringMapStringString_swap(self, v)

    def begin(self):
        return _tesseract_common_python.MapStringMapStringString_begin(self)

    def end(self):
        return _tesseract_common_python.MapStringMapStringString_end(self)

    def clear(self):
        return _tesseract_common_python.MapStringMapStringString_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.MapStringMapStringString_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.MapStringMapStringString_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.MapStringMapStringString_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.MapStringMapStringString_find(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_MapStringMapStringString

# Register MapStringMapStringString in _tesseract_common_python:
_tesseract_common_python.MapStringMapStringString_swigregister(MapStringMapStringString)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MapStringMapStringMapStringDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble___bool__(self)

    def __len__(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.MapStringMapStringMapStringDouble___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.MapStringMapStringMapStringDouble___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_keys(self)

    def values(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_values(self)

    def items(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.MapStringMapStringMapStringDouble___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.MapStringMapStringMapStringDouble___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.MapStringMapStringMapStringDouble_swiginit(self, _tesseract_common_python.new_MapStringMapStringMapStringDouble(*args))

    def empty(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_empty(self)

    def size(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_size(self)

    def swap(self, v):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_swap(self, v)

    def begin(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_begin(self)

    def end(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_end(self)

    def clear(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.MapStringMapStringMapStringDouble_find(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_MapStringMapStringMapStringDouble

# Register MapStringMapStringMapStringDouble in _tesseract_common_python:
_tesseract_common_python.MapStringMapStringMapStringDouble_swigregister(MapStringMapStringMapStringDouble)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorSizet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorSizet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorSizet___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorSizet___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorSizet___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorSizet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorSizet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorSizet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorSizet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorSizet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorSizet___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorSizet_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorSizet_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorSizet_empty(self)

    def size(self):
        return _tesseract_common_python.VectorSizet_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorSizet_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorSizet_begin(self)

    def end(self):
        return _tesseract_common_python.VectorSizet_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorSizet_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorSizet_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorSizet_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorSizet_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorSizet_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorSizet_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorSizet_swiginit(self, _tesseract_common_python.new_VectorSizet(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorSizet_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorSizet_front(self)

    def back(self):
        return _tesseract_common_python.VectorSizet_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorSizet_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorSizet_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorSizet_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorSizet_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorSizet_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorSizet

# Register VectorSizet in _tesseract_common_python:
_tesseract_common_python.VectorSizet_swigregister(VectorSizet)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Array2Int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.Array2Int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.Array2Int___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.Array2Int___bool__(self)

    def __len__(self):
        return _tesseract_common_python.Array2Int___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.Array2Int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.Array2Int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.Array2Int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.Array2Int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.Array2Int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.Array2Int___setitem__(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.Array2Int_swiginit(self, _tesseract_common_python.new_Array2Int(*args))

    def empty(self):
        return _tesseract_common_python.Array2Int_empty(self)

    def size(self):
        return _tesseract_common_python.Array2Int_size(self)

    def swap(self, v):
        return _tesseract_common_python.Array2Int_swap(self, v)

    def begin(self):
        return _tesseract_common_python.Array2Int_begin(self)

    def end(self):
        return _tesseract_common_python.Array2Int_end(self)

    def rbegin(self):
        return _tesseract_common_python.Array2Int_rbegin(self)

    def rend(self):
        return _tesseract_common_python.Array2Int_rend(self)

    def front(self):
        return _tesseract_common_python.Array2Int_front(self)

    def back(self):
        return _tesseract_common_python.Array2Int_back(self)

    def fill(self, u):
        return _tesseract_common_python.Array2Int_fill(self, u)
    __swig_destroy__ = _tesseract_common_python.delete_Array2Int

# Register Array2Int in _tesseract_common_python:
_tesseract_common_python.Array2Int_swigregister(Array2Int)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Array2String(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.Array2String_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.Array2String___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.Array2String___bool__(self)

    def __len__(self):
        return _tesseract_common_python.Array2String___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.Array2String___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.Array2String___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.Array2String___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.Array2String___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.Array2String___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.Array2String___setitem__(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.Array2String_swiginit(self, _tesseract_common_python.new_Array2String(*args))

    def empty(self):
        return _tesseract_common_python.Array2String_empty(self)

    def size(self):
        return _tesseract_common_python.Array2String_size(self)

    def swap(self, v):
        return _tesseract_common_python.Array2String_swap(self, v)

    def begin(self):
        return _tesseract_common_python.Array2String_begin(self)

    def end(self):
        return _tesseract_common_python.Array2String_end(self)

    def rbegin(self):
        return _tesseract_common_python.Array2String_rbegin(self)

    def rend(self):
        return _tesseract_common_python.Array2String_rend(self)

    def front(self):
        return _tesseract_common_python.Array2String_front(self)

    def back(self):
        return _tesseract_common_python.Array2String_back(self)

    def fill(self, u):
        return _tesseract_common_python.Array2String_fill(self, u)
    __swig_destroy__ = _tesseract_common_python.delete_Array2String

# Register Array2String in _tesseract_common_python:
_tesseract_common_python.Array2String_swigregister(Array2String)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Array2Vector3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.Array2Vector3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.Array2Vector3d___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.Array2Vector3d___bool__(self)

    def __len__(self):
        return _tesseract_common_python.Array2Vector3d___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.Array2Vector3d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.Array2Vector3d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.Array2Vector3d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.Array2Vector3d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.Array2Vector3d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.Array2Vector3d___setitem__(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.Array2Vector3d_swiginit(self, _tesseract_common_python.new_Array2Vector3d(*args))

    def empty(self):
        return _tesseract_common_python.Array2Vector3d_empty(self)

    def size(self):
        return _tesseract_common_python.Array2Vector3d_size(self)

    def swap(self, v):
        return _tesseract_common_python.Array2Vector3d_swap(self, v)

    def begin(self):
        return _tesseract_common_python.Array2Vector3d_begin(self)

    def end(self):
        return _tesseract_common_python.Array2Vector3d_end(self)

    def rbegin(self):
        return _tesseract_common_python.Array2Vector3d_rbegin(self)

    def rend(self):
        return _tesseract_common_python.Array2Vector3d_rend(self)

    def front(self):
        return _tesseract_common_python.Array2Vector3d_front(self)

    def back(self):
        return _tesseract_common_python.Array2Vector3d_back(self)

    def fill(self, u):
        return _tesseract_common_python.Array2Vector3d_fill(self, u)
    __swig_destroy__ = _tesseract_common_python.delete_Array2Vector3d

# Register Array2Vector3d in _tesseract_common_python:
_tesseract_common_python.Array2Vector3d_swigregister(Array2Vector3d)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Array2Isometry3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.Array2Isometry3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.Array2Isometry3d___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.Array2Isometry3d___bool__(self)

    def __len__(self):
        return _tesseract_common_python.Array2Isometry3d___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.Array2Isometry3d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.Array2Isometry3d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.Array2Isometry3d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.Array2Isometry3d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.Array2Isometry3d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.Array2Isometry3d___setitem__(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.Array2Isometry3d_swiginit(self, _tesseract_common_python.new_Array2Isometry3d(*args))

    def empty(self):
        return _tesseract_common_python.Array2Isometry3d_empty(self)

    def size(self):
        return _tesseract_common_python.Array2Isometry3d_size(self)

    def swap(self, v):
        return _tesseract_common_python.Array2Isometry3d_swap(self, v)

    def begin(self):
        return _tesseract_common_python.Array2Isometry3d_begin(self)

    def end(self):
        return _tesseract_common_python.Array2Isometry3d_end(self)

    def rbegin(self):
        return _tesseract_common_python.Array2Isometry3d_rbegin(self)

    def rend(self):
        return _tesseract_common_python.Array2Isometry3d_rend(self)

    def front(self):
        return _tesseract_common_python.Array2Isometry3d_front(self)

    def back(self):
        return _tesseract_common_python.Array2Isometry3d_back(self)

    def fill(self, u):
        return _tesseract_common_python.Array2Isometry3d_fill(self, u)
    __swig_destroy__ = _tesseract_common_python.delete_Array2Isometry3d

# Register Array2Isometry3d in _tesseract_common_python:
_tesseract_common_python.Array2Isometry3d_swigregister(Array2Isometry3d)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Array2Double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.Array2Double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.Array2Double___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.Array2Double___bool__(self)

    def __len__(self):
        return _tesseract_common_python.Array2Double___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.Array2Double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.Array2Double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.Array2Double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.Array2Double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.Array2Double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.Array2Double___setitem__(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.Array2Double_swiginit(self, _tesseract_common_python.new_Array2Double(*args))

    def empty(self):
        return _tesseract_common_python.Array2Double_empty(self)

    def size(self):
        return _tesseract_common_python.Array2Double_size(self)

    def swap(self, v):
        return _tesseract_common_python.Array2Double_swap(self, v)

    def begin(self):
        return _tesseract_common_python.Array2Double_begin(self)

    def end(self):
        return _tesseract_common_python.Array2Double_end(self)

    def rbegin(self):
        return _tesseract_common_python.Array2Double_rbegin(self)

    def rend(self):
        return _tesseract_common_python.Array2Double_rend(self)

    def front(self):
        return _tesseract_common_python.Array2Double_front(self)

    def back(self):
        return _tesseract_common_python.Array2Double_back(self)

    def fill(self, u):
        return _tesseract_common_python.Array2Double_fill(self, u)
    __swig_destroy__ = _tesseract_common_python.delete_Array2Double

# Register Array2Double in _tesseract_common_python:
_tesseract_common_python.Array2Double_swigregister(Array2Double)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorIsometry3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorIsometry3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorIsometry3d___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorIsometry3d___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorIsometry3d___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorIsometry3d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorIsometry3d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorIsometry3d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorIsometry3d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorIsometry3d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorIsometry3d___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorIsometry3d_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorIsometry3d_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorIsometry3d_empty(self)

    def size(self):
        return _tesseract_common_python.VectorIsometry3d_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorIsometry3d_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorIsometry3d_begin(self)

    def end(self):
        return _tesseract_common_python.VectorIsometry3d_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorIsometry3d_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorIsometry3d_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorIsometry3d_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorIsometry3d_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorIsometry3d_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorIsometry3d_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorIsometry3d_swiginit(self, _tesseract_common_python.new_VectorIsometry3d(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorIsometry3d_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorIsometry3d_front(self)

    def back(self):
        return _tesseract_common_python.VectorIsometry3d_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorIsometry3d_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorIsometry3d_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorIsometry3d_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorIsometry3d_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorIsometry3d_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorIsometry3d

# Register VectorIsometry3d in _tesseract_common_python:
_tesseract_common_python.VectorIsometry3d_swigregister(VectorIsometry3d)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorVector3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorVector3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorVector3d___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorVector3d___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorVector3d___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorVector3d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorVector3d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorVector3d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorVector3d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorVector3d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorVector3d___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorVector3d_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorVector3d_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorVector3d_empty(self)

    def size(self):
        return _tesseract_common_python.VectorVector3d_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorVector3d_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorVector3d_begin(self)

    def end(self):
        return _tesseract_common_python.VectorVector3d_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorVector3d_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorVector3d_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorVector3d_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorVector3d_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorVector3d_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorVector3d_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorVector3d_swiginit(self, _tesseract_common_python.new_VectorVector3d(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorVector3d_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorVector3d_front(self)

    def back(self):
        return _tesseract_common_python.VectorVector3d_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorVector3d_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorVector3d_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorVector3d_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorVector3d_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorVector3d_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorVector3d

# Register VectorVector3d in _tesseract_common_python:
_tesseract_common_python.VectorVector3d_swigregister(VectorVector3d)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorVectorXd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorVectorXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorVectorXd___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorVectorXd___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorVectorXd___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorVectorXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorVectorXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorVectorXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorVectorXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorVectorXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorVectorXd___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorVectorXd_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorVectorXd_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorVectorXd_empty(self)

    def size(self):
        return _tesseract_common_python.VectorVectorXd_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorVectorXd_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorVectorXd_begin(self)

    def end(self):
        return _tesseract_common_python.VectorVectorXd_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorVectorXd_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorVectorXd_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorVectorXd_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorVectorXd_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorVectorXd_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorVectorXd_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorVectorXd_swiginit(self, _tesseract_common_python.new_VectorVectorXd(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorVectorXd_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorVectorXd_front(self)

    def back(self):
        return _tesseract_common_python.VectorVectorXd_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorVectorXd_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorVectorXd_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorVectorXd_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorVectorXd_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorVectorXd_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorVectorXd

# Register VectorVectorXd in _tesseract_common_python:
_tesseract_common_python.VectorVectorXd_swigregister(VectorVectorXd)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorVector2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorVector2d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorVector2d___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorVector2d___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorVector2d___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorVector2d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorVector2d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorVector2d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorVector2d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorVector2d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorVector2d___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorVector2d_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorVector2d_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorVector2d_empty(self)

    def size(self):
        return _tesseract_common_python.VectorVector2d_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorVector2d_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorVector2d_begin(self)

    def end(self):
        return _tesseract_common_python.VectorVector2d_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorVector2d_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorVector2d_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorVector2d_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorVector2d_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorVector2d_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorVector2d_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorVector2d_swiginit(self, _tesseract_common_python.new_VectorVector2d(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorVector2d_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorVector2d_front(self)

    def back(self):
        return _tesseract_common_python.VectorVector2d_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorVector2d_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorVector2d_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorVector2d_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorVector2d_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorVector2d_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorVector2d

# Register VectorVector2d in _tesseract_common_python:
_tesseract_common_python.VectorVector2d_swigregister(VectorVector2d)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorVector4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorVector4d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorVector4d___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorVector4d___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorVector4d___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorVector4d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorVector4d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorVector4d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorVector4d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorVector4d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorVector4d___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorVector4d_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorVector4d_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorVector4d_empty(self)

    def size(self):
        return _tesseract_common_python.VectorVector4d_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorVector4d_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorVector4d_begin(self)

    def end(self):
        return _tesseract_common_python.VectorVector4d_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorVector4d_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorVector4d_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorVector4d_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorVector4d_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorVector4d_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorVector4d_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorVector4d_swiginit(self, _tesseract_common_python.new_VectorVector4d(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorVector4d_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorVector4d_front(self)

    def back(self):
        return _tesseract_common_python.VectorVector4d_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorVector4d_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorVector4d_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorVector4d_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorVector4d_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorVector4d_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorVector4d

# Register VectorVector4d in _tesseract_common_python:
_tesseract_common_python.VectorVector4d_swigregister(VectorVector4d)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TransformMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.TransformMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.TransformMap___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.TransformMap___bool__(self)

    def __len__(self):
        return _tesseract_common_python.TransformMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.TransformMap___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.TransformMap___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.TransformMap_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.TransformMap_keys(self)

    def values(self):
        return _tesseract_common_python.TransformMap_values(self)

    def items(self):
        return _tesseract_common_python.TransformMap_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.TransformMap___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.TransformMap_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.TransformMap_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.TransformMap___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.TransformMap_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.TransformMap_swiginit(self, _tesseract_common_python.new_TransformMap(*args))

    def empty(self):
        return _tesseract_common_python.TransformMap_empty(self)

    def size(self):
        return _tesseract_common_python.TransformMap_size(self)

    def swap(self, v):
        return _tesseract_common_python.TransformMap_swap(self, v)

    def begin(self):
        return _tesseract_common_python.TransformMap_begin(self)

    def end(self):
        return _tesseract_common_python.TransformMap_end(self)

    def rbegin(self):
        return _tesseract_common_python.TransformMap_rbegin(self)

    def rend(self):
        return _tesseract_common_python.TransformMap_rend(self)

    def clear(self):
        return _tesseract_common_python.TransformMap_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.TransformMap_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.TransformMap_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.TransformMap_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.TransformMap_find(self, x)

    def lower_bound(self, x):
        return _tesseract_common_python.TransformMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _tesseract_common_python.TransformMap_upper_bound(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_TransformMap

# Register TransformMap in _tesseract_common_python:
_tesseract_common_python.TransformMap_swigregister(TransformMap)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorUuid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorUuid_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorUuid___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorUuid___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorUuid___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorUuid___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorUuid___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorUuid___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorUuid___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorUuid___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorUuid___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorUuid_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorUuid_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorUuid_empty(self)

    def size(self):
        return _tesseract_common_python.VectorUuid_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorUuid_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorUuid_begin(self)

    def end(self):
        return _tesseract_common_python.VectorUuid_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorUuid_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorUuid_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorUuid_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorUuid_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorUuid_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorUuid_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorUuid_swiginit(self, _tesseract_common_python.new_VectorUuid(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorUuid_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorUuid_front(self)

    def back(self):
        return _tesseract_common_python.VectorUuid_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorUuid_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorUuid_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorUuid_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorUuid_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorUuid_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorUuid

# Register VectorUuid in _tesseract_common_python:
_tesseract_common_python.VectorUuid_swigregister(VectorUuid)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class type_index(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def hash_code(self):
        return _tesseract_common_python.type_index_hash_code(self)

    def name(self):
        return _tesseract_common_python.type_index_name(self)
    __swig_destroy__ = _tesseract_common_python.delete_type_index

# Register type_index in _tesseract_common_python:
_tesseract_common_python.type_index_swigregister(type_index)
class SimpleResourceLocatorFnBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def call(self, a):
        return _tesseract_common_python.SimpleResourceLocatorFnBase_call(self, a)
    __swig_destroy__ = _tesseract_common_python.delete_SimpleResourceLocatorFnBase

    def __init__(self):
        if self.__class__ == SimpleResourceLocatorFnBase:
            _self = None
        else:
            _self = self
        _tesseract_common_python.SimpleResourceLocatorFnBase_swiginit(self, _tesseract_common_python.new_SimpleResourceLocatorFnBase(_self, ))
    def __disown__(self):
        self.this.disown()
        _tesseract_common_python.disown_SimpleResourceLocatorFnBase(self)
        return weakref.proxy(self)

# Register SimpleResourceLocatorFnBase in _tesseract_common_python:
_tesseract_common_python.SimpleResourceLocatorFnBase_swigregister(SimpleResourceLocatorFnBase)


class SimpleResourceLocatorFn(SimpleResourceLocatorFnBase):
  def __init__(self,fn):
    super(SimpleResourceLocatorFn,self).__init__()
    self._fn = fn

  def call(self,*args):
    return self._fn(*args)

@_swig_add_metaclass(_SwigNonDynamicMeta)
class VectorUInt8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.VectorUInt8_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.VectorUInt8___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.VectorUInt8___bool__(self)

    def __len__(self):
        return _tesseract_common_python.VectorUInt8___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.VectorUInt8___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.VectorUInt8___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.VectorUInt8___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.VectorUInt8___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.VectorUInt8___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.VectorUInt8___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.VectorUInt8_pop(self)

    def append(self, x):
        return _tesseract_common_python.VectorUInt8_append(self, x)

    def empty(self):
        return _tesseract_common_python.VectorUInt8_empty(self)

    def size(self):
        return _tesseract_common_python.VectorUInt8_size(self)

    def swap(self, v):
        return _tesseract_common_python.VectorUInt8_swap(self, v)

    def begin(self):
        return _tesseract_common_python.VectorUInt8_begin(self)

    def end(self):
        return _tesseract_common_python.VectorUInt8_end(self)

    def rbegin(self):
        return _tesseract_common_python.VectorUInt8_rbegin(self)

    def rend(self):
        return _tesseract_common_python.VectorUInt8_rend(self)

    def clear(self):
        return _tesseract_common_python.VectorUInt8_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.VectorUInt8_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.VectorUInt8_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.VectorUInt8_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.VectorUInt8_swiginit(self, _tesseract_common_python.new_VectorUInt8(*args))

    def push_back(self, x):
        return _tesseract_common_python.VectorUInt8_push_back(self, x)

    def front(self):
        return _tesseract_common_python.VectorUInt8_front(self)

    def back(self):
        return _tesseract_common_python.VectorUInt8_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.VectorUInt8_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.VectorUInt8_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.VectorUInt8_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.VectorUInt8_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.VectorUInt8_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_VectorUInt8

# Register VectorUInt8 in _tesseract_common_python:
_tesseract_common_python.VectorUInt8_swigregister(VectorUInt8)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class PairHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __call__(self, pair):
        return _tesseract_common_python.PairHash___call__(self, pair)

    def __init__(self):
        _tesseract_common_python.PairHash_swiginit(self, _tesseract_common_python.new_PairHash())
    __swig_destroy__ = _tesseract_common_python.delete_PairHash

# Register PairHash in _tesseract_common_python:
_tesseract_common_python.PairHash_swigregister(PairHash)

def makeOrderedLinkPair(*args):
    r"""
    *Overload 1:*

    Create a pair of strings, where the pair.first is always <= pair.second.

    This is commonly used along with PairHash as the key to an unordered_map<LinkNamesPair, Type, PairHash>
    :type link_name1: string
    :param link_name1: First link name
    :type link_name2: string
    :param link_name2: Second link name
    :rtype: :py:class:`LinkNamesPair`
    :return: LinkNamesPair a lexicographically sorted pair of strings

    |

    *Overload 2:*

    Populate a pair of strings, where the pair.first is always <= pair.second.

    This is used to avoid multiple memory application throughout the code base

    This is commonly used along with PairHash as the key to an unordered_map<LinkNamesPair, Type, PairHash>

    :type pair: :py:class:`LinkNamesPair`
    :param pair: The link name pair to load a lexicographically sorted pair of strings
    :type link_name1: string
    :param link_name1: First link name
    :type link_name2: string
    :param link_name2: Second link nam
    """
    return _tesseract_common_python.makeOrderedLinkPair(*args)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class AllowedCollisionEntries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.AllowedCollisionEntries_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.AllowedCollisionEntries___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.AllowedCollisionEntries___bool__(self)

    def __len__(self):
        return _tesseract_common_python.AllowedCollisionEntries___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.AllowedCollisionEntries___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.AllowedCollisionEntries___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.AllowedCollisionEntries_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.AllowedCollisionEntries_keys(self)

    def values(self):
        return _tesseract_common_python.AllowedCollisionEntries_values(self)

    def items(self):
        return _tesseract_common_python.AllowedCollisionEntries_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.AllowedCollisionEntries___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.AllowedCollisionEntries_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.AllowedCollisionEntries_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.AllowedCollisionEntries___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.AllowedCollisionEntries_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.AllowedCollisionEntries_swiginit(self, _tesseract_common_python.new_AllowedCollisionEntries(*args))

    def empty(self):
        return _tesseract_common_python.AllowedCollisionEntries_empty(self)

    def size(self):
        return _tesseract_common_python.AllowedCollisionEntries_size(self)

    def swap(self, v):
        return _tesseract_common_python.AllowedCollisionEntries_swap(self, v)

    def begin(self):
        return _tesseract_common_python.AllowedCollisionEntries_begin(self)

    def end(self):
        return _tesseract_common_python.AllowedCollisionEntries_end(self)

    def clear(self):
        return _tesseract_common_python.AllowedCollisionEntries_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.AllowedCollisionEntries_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.AllowedCollisionEntries_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.AllowedCollisionEntries_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.AllowedCollisionEntries_find(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_AllowedCollisionEntries

# Register AllowedCollisionEntries in _tesseract_common_python:
_tesseract_common_python.AllowedCollisionEntries_swigregister(AllowedCollisionEntries)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class PluginInfoMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.PluginInfoMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.PluginInfoMap___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.PluginInfoMap___bool__(self)

    def __len__(self):
        return _tesseract_common_python.PluginInfoMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_common_python.PluginInfoMap___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_common_python.PluginInfoMap___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_common_python.PluginInfoMap_has_key(self, key)

    def keys(self):
        return _tesseract_common_python.PluginInfoMap_keys(self)

    def values(self):
        return _tesseract_common_python.PluginInfoMap_values(self)

    def items(self):
        return _tesseract_common_python.PluginInfoMap_items(self)

    def __contains__(self, key):
        return _tesseract_common_python.PluginInfoMap___contains__(self, key)

    def key_iterator(self):
        return _tesseract_common_python.PluginInfoMap_key_iterator(self)

    def value_iterator(self):
        return _tesseract_common_python.PluginInfoMap_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_common_python.PluginInfoMap___setitem__(self, *args)

    def asdict(self):
        return _tesseract_common_python.PluginInfoMap_asdict(self)

    def __init__(self, *args):
        _tesseract_common_python.PluginInfoMap_swiginit(self, _tesseract_common_python.new_PluginInfoMap(*args))

    def empty(self):
        return _tesseract_common_python.PluginInfoMap_empty(self)

    def size(self):
        return _tesseract_common_python.PluginInfoMap_size(self)

    def swap(self, v):
        return _tesseract_common_python.PluginInfoMap_swap(self, v)

    def begin(self):
        return _tesseract_common_python.PluginInfoMap_begin(self)

    def end(self):
        return _tesseract_common_python.PluginInfoMap_end(self)

    def rbegin(self):
        return _tesseract_common_python.PluginInfoMap_rbegin(self)

    def rend(self):
        return _tesseract_common_python.PluginInfoMap_rend(self)

    def clear(self):
        return _tesseract_common_python.PluginInfoMap_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.PluginInfoMap_get_allocator(self)

    def count(self, x):
        return _tesseract_common_python.PluginInfoMap_count(self, x)

    def erase(self, *args):
        return _tesseract_common_python.PluginInfoMap_erase(self, *args)

    def find(self, x):
        return _tesseract_common_python.PluginInfoMap_find(self, x)

    def lower_bound(self, x):
        return _tesseract_common_python.PluginInfoMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _tesseract_common_python.PluginInfoMap_upper_bound(self, x)
    __swig_destroy__ = _tesseract_common_python.delete_PluginInfoMap

# Register PluginInfoMap in _tesseract_common_python:
_tesseract_common_python.PluginInfoMap_swigregister(PluginInfoMap)
class ResourceLocator(object):
    r""" Abstract class for resource loaders"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_common_python.delete_ResourceLocator

    def locateResource(self, url):
        r"""
        Locate a resource based on a URL

        :type url: string
        :param url: The URL of the resource
        :rtype: :py:class:`Resource`
        :return: A shared pointer to a Resource instance, or nullptr if not found
        """
        return _tesseract_common_python.ResourceLocator_locateResource(self, url)

    def __eq__(self, rhs):
        return _tesseract_common_python.ResourceLocator___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_common_python.ResourceLocator___ne__(self, rhs)

    def __init__(self):
        if self.__class__ == ResourceLocator:
            _self = None
        else:
            _self = self
        _tesseract_common_python.ResourceLocator_swiginit(self, _tesseract_common_python.new_ResourceLocator(_self, ))
    def __disown__(self):
        self.this.disown()
        _tesseract_common_python.disown_ResourceLocator(self)
        return weakref.proxy(self)

# Register ResourceLocator in _tesseract_common_python:
_tesseract_common_python.ResourceLocator_swigregister(ResourceLocator)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class GeneralResourceLocator(ResourceLocator):
    r"""
    A general resource loaders using environment variable
    Also can set this environment variable TESSERACT_RESOURCE_PATH
    with ':' separated directories and then use the directires as package names
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_common_python.GeneralResourceLocator_swiginit(self, _tesseract_common_python.new_GeneralResourceLocator(*args))
    __swig_destroy__ = _tesseract_common_python.delete_GeneralResourceLocator

    def locateResource(self, url):
        return _tesseract_common_python.GeneralResourceLocator_locateResource(self, url)

    def __eq__(self, rhs):
        return _tesseract_common_python.GeneralResourceLocator___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_common_python.GeneralResourceLocator___ne__(self, rhs)

    def addPath(self, path):
        r"""
        Add path to the resource locator

        :type path: :py:class:`path`
        :param path: The path to add. Must be a directory
        :rtype: boolean
        :return: true Success
        :rtype: boolean
        :return: false Directory does not exist
        """
        return _tesseract_common_python.GeneralResourceLocator_addPath(self, path)

    def loadEnvironmentVariable(self, environment_variable):
        r"""
        Load paths from an environment variable

        :type environment_variable: string
        :param environment_variable: The environment variable to load paths from
        :rtype: boolean
        :return: true Success
        :rtype: boolean
        :return: false Environment variable does not exist
        """
        return _tesseract_common_python.GeneralResourceLocator_loadEnvironmentVariable(self, environment_variable)

# Register GeneralResourceLocator in _tesseract_common_python:
_tesseract_common_python.GeneralResourceLocator_swigregister(GeneralResourceLocator)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Resource(ResourceLocator):
    r"""  Represents resource data available from a file or url"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isFile(self):
        r"""
        Returns true if the located resource is a local file

        :rtype: boolean
        :return: true if the resource is a local file, otherwise false
        """
        return _tesseract_common_python.Resource_isFile(self)

    def getUrl(self):
        r"""
        Get the original URL used to locate the file

        :rtype: string
        :return: The URL of the resource
        """
        return _tesseract_common_python.Resource_getUrl(self)

    def getFilePath(self):
        r"""
        Get the file path of the resource. Only valid if isFile() is true.

        :rtype: string
        :return: The file path to the resource
        """
        return _tesseract_common_python.Resource_getFilePath(self)

    def getResourceContents(self):
        r"""
        Get the resource as bytes. This function may block

        :rtype: std::vector< uint8_t,std::allocator< uint8_t > >
        :return: Resource bytes as a uint8_t vector
        """
        return _tesseract_common_python.Resource_getResourceContents(self)

    def getResourceContentStream(self):
        r"""
        Get the resource as a std::istream. This function and the returned stream may block

        :rtype: std::shared_ptr< std::istream >
        :return: A std::istream shared pointer for the resource data
        """
        return _tesseract_common_python.Resource_getResourceContentStream(self)

    def __eq__(self, rhs):
        return _tesseract_common_python.Resource___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_common_python.Resource___ne__(self, rhs)
    __swig_destroy__ = _tesseract_common_python.delete_Resource

# Register Resource in _tesseract_common_python:
_tesseract_common_python.Resource_swigregister(Resource)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SimpleLocatedResource(Resource):
    r""" Resource implementation for a local file"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_common_python.delete_SimpleLocatedResource

    def __init__(self, *args):
        _tesseract_common_python.SimpleLocatedResource_swiginit(self, _tesseract_common_python.new_SimpleLocatedResource(*args))

    def isFile(self):
        return _tesseract_common_python.SimpleLocatedResource_isFile(self)

    def getUrl(self):
        return _tesseract_common_python.SimpleLocatedResource_getUrl(self)

    def getFilePath(self):
        return _tesseract_common_python.SimpleLocatedResource_getFilePath(self)

    def getResourceContents(self):
        return _tesseract_common_python.SimpleLocatedResource_getResourceContents(self)

    def getResourceContentStream(self):
        return _tesseract_common_python.SimpleLocatedResource_getResourceContentStream(self)

    def locateResource(self, url):
        return _tesseract_common_python.SimpleLocatedResource_locateResource(self, url)

    def __eq__(self, rhs):
        return _tesseract_common_python.SimpleLocatedResource___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_common_python.SimpleLocatedResource___ne__(self, rhs)

# Register SimpleLocatedResource in _tesseract_common_python:
_tesseract_common_python.SimpleLocatedResource_swigregister(SimpleLocatedResource)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class BytesResource(Resource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_common_python.delete_BytesResource

    def __init__(self, *args):
        _tesseract_common_python.BytesResource_swiginit(self, _tesseract_common_python.new_BytesResource(*args))

    def isFile(self):
        return _tesseract_common_python.BytesResource_isFile(self)

    def getUrl(self):
        return _tesseract_common_python.BytesResource_getUrl(self)

    def getFilePath(self):
        return _tesseract_common_python.BytesResource_getFilePath(self)

    def getResourceContents(self):
        return _tesseract_common_python.BytesResource_getResourceContents(self)

    def getResourceContentStream(self):
        return _tesseract_common_python.BytesResource_getResourceContentStream(self)

    def locateResource(self, url):
        return _tesseract_common_python.BytesResource_locateResource(self, url)

    def __eq__(self, rhs):
        return _tesseract_common_python.BytesResource___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_common_python.BytesResource___ne__(self, rhs)

# Register BytesResource in _tesseract_common_python:
_tesseract_common_python.BytesResource_swigregister(BytesResource)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ManipulatorInfo(object):
    r"""Contains information about a robot manipulator"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_common_python.ManipulatorInfo_swiginit(self, _tesseract_common_python.new_ManipulatorInfo(*args))
    manipulator = property(_tesseract_common_python.ManipulatorInfo_manipulator_get, _tesseract_common_python.ManipulatorInfo_manipulator_set, doc=r""" Name of the manipulator group""")
    working_frame = property(_tesseract_common_python.ManipulatorInfo_working_frame_get, _tesseract_common_python.ManipulatorInfo_working_frame_set, doc=r"""
    The working frame to which waypoints are relative.
    If the tcp_frame is external to manipulator then the working frame must be an active frame on the
    manipulator
    """)
    tcp_frame = property(_tesseract_common_python.ManipulatorInfo_tcp_frame_get, _tesseract_common_python.ManipulatorInfo_tcp_frame_set, doc=r"""
    The coordinate frame within to the environment to use as the reference frame for the tool center
    point (TCP) which is defined by an offset transform relative to this frame
    """)
    manipulator_ik_solver = property(_tesseract_common_python.ManipulatorInfo_manipulator_ik_solver_get, _tesseract_common_python.ManipulatorInfo_manipulator_ik_solver_set, doc=r""" (Optional) IK Solver to be used""")

    def getCombined(self, manip_info_override):
        r"""
        If the provided manipulator information member is not empty it will override this and return a
        new manipulator information with the combined results
        :type manip_info_override: :py:class:`ManipulatorInfo`
        :param manip_info_override: The manipulator information to check for overrides
        :rtype: :py:class:`ManipulatorInfo`
        :return: The combined manipulator information
        """
        return _tesseract_common_python.ManipulatorInfo_getCombined(self, manip_info_override)

    def empty(self):
        r"""
        Check if any data is current being stored
        :rtype: boolean
        :return: True if empty otherwise false
        """
        return _tesseract_common_python.ManipulatorInfo_empty(self)

    def __eq__(self, rhs):
        return _tesseract_common_python.ManipulatorInfo___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_common_python.ManipulatorInfo___ne__(self, rhs)

    def _setTcpOffset(self, *args):
        return _tesseract_common_python.ManipulatorInfo__setTcpOffset(self, *args)

    def _getTcpOffsetIndex(self):
        return _tesseract_common_python.ManipulatorInfo__getTcpOffsetIndex(self)

    def _getTcpOffsetIsometry3d(self):
        return _tesseract_common_python.ManipulatorInfo__getTcpOffsetIsometry3d(self)

    def _getTcpOffsetString(self):
        return _tesseract_common_python.ManipulatorInfo__getTcpOffsetString(self)

    def _getTcpOffset(self):
      if self._getTcpOffsetIndex() == 0:
        return self._getTcpOffsetString()
      else:
        return self._getTcpOffsetIsometry3d()
    tcp_offset = property(_getTcpOffset, _setTcpOffset)

    __swig_destroy__ = _tesseract_common_python.delete_ManipulatorInfo

# Register ManipulatorInfo in _tesseract_common_python:
_tesseract_common_python.ManipulatorInfo_swigregister(ManipulatorInfo)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_common_python.JointState_swiginit(self, _tesseract_common_python.new_JointState(*args))
    joint_names = property(_tesseract_common_python.JointState_joint_names_get, _tesseract_common_python.JointState_joint_names_set, doc=r""" The joint corresponding to the position vector.""")
    position = property(_tesseract_common_python.JointState_position_get, _tesseract_common_python.JointState_position_set, doc=r""" The joint position at the waypoint""")
    velocity = property(_tesseract_common_python.JointState_velocity_get, _tesseract_common_python.JointState_velocity_set, doc=r""" The velocity at the waypoint (optional)""")
    acceleration = property(_tesseract_common_python.JointState_acceleration_get, _tesseract_common_python.JointState_acceleration_set, doc=r""" The Acceleration at the waypoint (optional)""")
    effort = property(_tesseract_common_python.JointState_effort_get, _tesseract_common_python.JointState_effort_set, doc=r""" The Effort at the waypoint (optional)""")
    time = property(_tesseract_common_python.JointState_time_get, _tesseract_common_python.JointState_time_set, doc=r""" The Time from start at the waypoint (optional)""")

    def __eq__(self, other):
        return _tesseract_common_python.JointState___eq__(self, other)

    def __ne__(self, rhs):
        return _tesseract_common_python.JointState___ne__(self, rhs)
    __swig_destroy__ = _tesseract_common_python.delete_JointState

# Register JointState in _tesseract_common_python:
_tesseract_common_python.JointState_swigregister(JointState)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointStates(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_common_python.JointStates_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.JointStates___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.JointStates___bool__(self)

    def __len__(self):
        return _tesseract_common_python.JointStates___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.JointStates___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.JointStates___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.JointStates___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.JointStates___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.JointStates___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.JointStates___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.JointStates_pop(self)

    def append(self, x):
        return _tesseract_common_python.JointStates_append(self, x)

    def empty(self):
        return _tesseract_common_python.JointStates_empty(self)

    def size(self):
        return _tesseract_common_python.JointStates_size(self)

    def swap(self, v):
        return _tesseract_common_python.JointStates_swap(self, v)

    def begin(self):
        return _tesseract_common_python.JointStates_begin(self)

    def end(self):
        return _tesseract_common_python.JointStates_end(self)

    def rbegin(self):
        return _tesseract_common_python.JointStates_rbegin(self)

    def rend(self):
        return _tesseract_common_python.JointStates_rend(self)

    def clear(self):
        return _tesseract_common_python.JointStates_clear(self)

    def get_allocator(self):
        return _tesseract_common_python.JointStates_get_allocator(self)

    def pop_back(self):
        return _tesseract_common_python.JointStates_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.JointStates_erase(self, *args)

    def __init__(self, *args):
        _tesseract_common_python.JointStates_swiginit(self, _tesseract_common_python.new_JointStates(*args))

    def push_back(self, x):
        return _tesseract_common_python.JointStates_push_back(self, x)

    def front(self):
        return _tesseract_common_python.JointStates_front(self)

    def back(self):
        return _tesseract_common_python.JointStates_back(self)

    def assign(self, n, x):
        return _tesseract_common_python.JointStates_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_common_python.JointStates_resize(self, *args)

    def insert(self, *args):
        return _tesseract_common_python.JointStates_insert(self, *args)

    def reserve(self, n):
        return _tesseract_common_python.JointStates_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.JointStates_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_JointStates

# Register JointStates in _tesseract_common_python:
_tesseract_common_python.JointStates_swigregister(JointStates)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointTrajectory(object):
    r""" Represents a joint trajectory"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_common_python.JointTrajectory_swiginit(self, _tesseract_common_python.new_JointTrajectory(*args))
    states = property(_tesseract_common_python.JointTrajectory_states_get, _tesseract_common_python.JointTrajectory_states_set)
    description = property(_tesseract_common_python.JointTrajectory_description_get, _tesseract_common_python.JointTrajectory_description_set)

    def __eq__(self, other):
        return _tesseract_common_python.JointTrajectory___eq__(self, other)

    def __ne__(self, rhs):
        return _tesseract_common_python.JointTrajectory___ne__(self, rhs)

    def iterator(self):
        return _tesseract_common_python.JointTrajectory_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_common_python.JointTrajectory___nonzero__(self)

    def __bool__(self):
        return _tesseract_common_python.JointTrajectory___bool__(self)

    def __len__(self):
        return _tesseract_common_python.JointTrajectory___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_common_python.JointTrajectory___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_common_python.JointTrajectory___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_common_python.JointTrajectory___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_common_python.JointTrajectory___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_common_python.JointTrajectory___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_common_python.JointTrajectory___setitem__(self, *args)

    def pop(self):
        return _tesseract_common_python.JointTrajectory_pop(self)

    def append(self, x):
        return _tesseract_common_python.JointTrajectory_append(self, x)

    def empty(self):
        return _tesseract_common_python.JointTrajectory_empty(self)

    def size(self):
        return _tesseract_common_python.JointTrajectory_size(self)

    def begin(self):
        return _tesseract_common_python.JointTrajectory_begin(self)

    def end(self):
        return _tesseract_common_python.JointTrajectory_end(self)

    def rbegin(self):
        return _tesseract_common_python.JointTrajectory_rbegin(self)

    def rend(self):
        return _tesseract_common_python.JointTrajectory_rend(self)

    def clear(self):
        return _tesseract_common_python.JointTrajectory_clear(self)

    def pop_back(self):
        return _tesseract_common_python.JointTrajectory_pop_back(self)

    def erase(self, *args):
        return _tesseract_common_python.JointTrajectory_erase(self, *args)

    def push_back(self, x):
        return _tesseract_common_python.JointTrajectory_push_back(self, x)

    def front(self):
        return _tesseract_common_python.JointTrajectory_front(self)

    def back(self):
        return _tesseract_common_python.JointTrajectory_back(self)

    def reserve(self, n):
        return _tesseract_common_python.JointTrajectory_reserve(self, n)

    def capacity(self):
        return _tesseract_common_python.JointTrajectory_capacity(self)
    __swig_destroy__ = _tesseract_common_python.delete_JointTrajectory

# Register JointTrajectory in _tesseract_common_python:
_tesseract_common_python.JointTrajectory_swigregister(JointTrajectory)
CollisionMarginOverrideType_NONE = _tesseract_common_python.CollisionMarginOverrideType_NONE
r""" Do not apply contact margin data"""
CollisionMarginOverrideType_REPLACE = _tesseract_common_python.CollisionMarginOverrideType_REPLACE
r""" Replace the contact manager's CollisionMarginData"""
CollisionMarginOverrideType_MODIFY = _tesseract_common_python.CollisionMarginOverrideType_MODIFY
r"""
    Modify the contact managers default margin and pair margins
    This will preserve existing pairs not being modified by the provided margin data.
    If a pair already exist it will be updated with the provided margin data.
    """
CollisionMarginOverrideType_OVERRIDE_DEFAULT_MARGIN = _tesseract_common_python.CollisionMarginOverrideType_OVERRIDE_DEFAULT_MARGIN
r""" Override the contact managers default margin only"""
CollisionMarginOverrideType_OVERRIDE_PAIR_MARGIN = _tesseract_common_python.CollisionMarginOverrideType_OVERRIDE_PAIR_MARGIN
r""" Override the contact managers pair margin only. This does not preserve any existing pair margin data"""
CollisionMarginOverrideType_MODIFY_PAIR_MARGIN = _tesseract_common_python.CollisionMarginOverrideType_MODIFY_PAIR_MARGIN
r"""
    Modify the contact managers pair margin only.
    This will preserve existing pairs not being modified by the provided margin data.
    If a pair already exist it will be updated with the provided margin data.
    """
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CollisionMarginData(object):
    r""" Stores information about how the margins allowed between collision objects"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_common_python.CollisionMarginData_swiginit(self, _tesseract_common_python.new_CollisionMarginData(*args))

    def setDefaultCollisionMargin(self, default_collision_margin):
        r"""
        Set the default collision margin
        :type default_collision_margin: float
        :param default_collision_margin: New default collision margin
        """
        return _tesseract_common_python.CollisionMarginData_setDefaultCollisionMargin(self, default_collision_margin)

    def getDefaultCollisionMargin(self):
        r"""
        Get the default collision margin
        :rtype: float
        :return: default collision margin
        """
        return _tesseract_common_python.CollisionMarginData_getDefaultCollisionMargin(self)

    def setPairCollisionMargin(self, obj1, obj2, collision_margin):
        r"""
        Set the margin for a given contact pair

        The order of the object names does not matter, that is handled internal to
        the class.

        :type obj1: string
        :param obj1: The first object name. Order doesn't matter
        :type obj2: string
        :param obj2: The Second object name. Order doesn't matter
        :type collision_margin: float
        :param collision_margin: contacts with distance < collision_margin are considered in collision
        """
        return _tesseract_common_python.CollisionMarginData_setPairCollisionMargin(self, obj1, obj2, collision_margin)

    def getPairCollisionMargin(self, obj1, obj2):
        r"""
        Get the pairs collision margin data

        If a collision margin for the request pair does not exist it returns the default collision margin data.

        :type obj1: string
        :param obj1: The first object name
        :type obj2: string
        :param obj2: The second object name
        :rtype: float
        :return: A Vector2d[Contact Distance Threshold, Coefficient]
        """
        return _tesseract_common_python.CollisionMarginData_getPairCollisionMargin(self, obj1, obj2)

    def getPairCollisionMargins(self):
        r"""
        Get Collision Margin Data for stored pairs
        :rtype: tesseract_common::PairsCollisionMarginData
        :return: A map of link pairs collision margin data
        """
        return _tesseract_common_python.CollisionMarginData_getPairCollisionMargins(self)

    def getMaxCollisionMargin(self):
        r"""
        Get the largest collision margin

        This used when setting the contact distance in the contact manager.

        :rtype: float
        :return: Max contact distance threshold
        """
        return _tesseract_common_python.CollisionMarginData_getMaxCollisionMargin(self)

    def incrementMargins(self, increment):
        r"""
        Increment all margins by input amount. Useful for inflating or reducing margins
        :type increment: float
        :param increment: Amount to increment margins
        """
        return _tesseract_common_python.CollisionMarginData_incrementMargins(self, increment)

    def scaleMargins(self, scale):
        r"""
        Scale all margins by input value
        :type scale: float
        :param scale: Value by which all margins are multiplied
        """
        return _tesseract_common_python.CollisionMarginData_scaleMargins(self, scale)

    def apply(self, collision_margin_data, override_type):
        r"""
        Apply the contents of the provide CollisionMarginData based on the override type
        :type collision_margin_data: :py:class:`CollisionMarginData`
        :param collision_margin_data: The collision margin data to apply
        :type override_type: int
        :param override_type: The type indicating how the provided data should be applied.
        """
        return _tesseract_common_python.CollisionMarginData_apply(self, collision_margin_data, override_type)

    def __eq__(self, rhs):
        return _tesseract_common_python.CollisionMarginData___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_common_python.CollisionMarginData___ne__(self, rhs)
    __swig_destroy__ = _tesseract_common_python.delete_CollisionMarginData

# Register CollisionMarginData in _tesseract_common_python:
_tesseract_common_python.CollisionMarginData_swigregister(CollisionMarginData)

def __eq__(entries_1, entries_2):
    return _tesseract_common_python.__eq__(entries_1, entries_2)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class AllowedCollisionMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_common_python.delete_AllowedCollisionMatrix

    def __init__(self, *args):
        _tesseract_common_python.AllowedCollisionMatrix_swiginit(self, _tesseract_common_python.new_AllowedCollisionMatrix(*args))

    def addAllowedCollision(self, link_name1, link_name2, reason):
        r"""
        Disable collision between two collision objects
        :param obj1: Collision object name
        :param obj2: Collision object name
        :type reason: string
        :param reason: The reason for disabling collison
        """
        return _tesseract_common_python.AllowedCollisionMatrix_addAllowedCollision(self, link_name1, link_name2, reason)

    def getAllAllowedCollisions(self):
        r"""
        Get all of the entries in the allowed collision matrix
        :rtype: :py:class:`AllowedCollisionEntries`
        :return: AllowedCollisionEntries an unordered map containing all allowed
                    collision entries. The keys of the unordered map are a std::pair
                    of the link names in the allowed collision pair.
        """
        return _tesseract_common_python.AllowedCollisionMatrix_getAllAllowedCollisions(self)

    def removeAllowedCollision(self, *args):
        r"""
        *Overload 1:*

        Remove disabled collision pair from allowed collision matrix
        :param obj1: Collision object name
        :param obj2: Collision object name

        |

        *Overload 2:*

        Remove disabled collision for any pair with link_name from allowed collision matrix
        :type link_name: string
        :param link_name: Collision object name
        """
        return _tesseract_common_python.AllowedCollisionMatrix_removeAllowedCollision(self, *args)

    def isCollisionAllowed(self, link_name1, link_name2):
        r"""
        This checks if two links are allowed to be in collision
        :type link_name1: string
        :param link_name1: First link name
        :type link_name2: string
        :param link_name2: Second link anme
        :rtype: boolean
        :return: True if allowed to be in collision, otherwise false
        """
        return _tesseract_common_python.AllowedCollisionMatrix_isCollisionAllowed(self, link_name1, link_name2)

    def clearAllowedCollisions(self):
        r"""
        Clears the list of allowed collisions, so that no collision will be
               allowed.
        """
        return _tesseract_common_python.AllowedCollisionMatrix_clearAllowedCollisions(self)

    def insertAllowedCollisionMatrix(self, acm):
        r"""
        Inserts an allowable collision matrix ignoring duplicate pairs
        :type acm: :py:class:`AllowedCollisionMatrix`
        :param acm: ACM to be inserted
        """
        return _tesseract_common_python.AllowedCollisionMatrix_insertAllowedCollisionMatrix(self, acm)

    def reserveAllowedCollisionMatrix(self, size):
        r"""
        Reserve space for the internal data storage
        :type size: int
        :param size: The size to reserve
        """
        return _tesseract_common_python.AllowedCollisionMatrix_reserveAllowedCollisionMatrix(self, size)

    def __eq__(self, rhs):
        return _tesseract_common_python.AllowedCollisionMatrix___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_common_python.AllowedCollisionMatrix___ne__(self, rhs)

# Register AllowedCollisionMatrix in _tesseract_common_python:
_tesseract_common_python.AllowedCollisionMatrix_swigregister(AllowedCollisionMatrix)

def __lshift__(os, acm):
    return _tesseract_common_python.__lshift__(os, acm)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class KinematicLimits(object):
    r""" Store kinematic limits"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    joint_limits = property(_tesseract_common_python.KinematicLimits_joint_limits_get, _tesseract_common_python.KinematicLimits_joint_limits_set, doc=r""" The position limits""")
    velocity_limits = property(_tesseract_common_python.KinematicLimits_velocity_limits_get, _tesseract_common_python.KinematicLimits_velocity_limits_set, doc=r""" The velocity limits""")
    acceleration_limits = property(_tesseract_common_python.KinematicLimits_acceleration_limits_get, _tesseract_common_python.KinematicLimits_acceleration_limits_set, doc=r""" The acceleration limits""")
    jerk_limits = property(_tesseract_common_python.KinematicLimits_jerk_limits_get, _tesseract_common_python.KinematicLimits_jerk_limits_set, doc=r""" The jerk limits""")

    def resize(self, size):
        return _tesseract_common_python.KinematicLimits_resize(self, size)

    def __eq__(self, rhs):
        return _tesseract_common_python.KinematicLimits___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_common_python.KinematicLimits___ne__(self, rhs)

    def __init__(self):
        _tesseract_common_python.KinematicLimits_swiginit(self, _tesseract_common_python.new_KinematicLimits())
    __swig_destroy__ = _tesseract_common_python.delete_KinematicLimits

# Register KinematicLimits in _tesseract_common_python:
_tesseract_common_python.KinematicLimits_swigregister(KinematicLimits)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Timer(object):
    r""" A timer which calls a callback every interval on a separate thread"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_common_python.Timer_swiginit(self, _tesseract_common_python.new_Timer())
    __swig_destroy__ = _tesseract_common_python.delete_Timer

    def start(self, callback, interval):
        r"""
        Start the timer with a callback function and a std::chrono::duration interval
        :type callback: std::function< void () >
        :param callback: The callback called every time the timer expires
        :type interval: std::chrono::steady_clock::duration
        :param interval: The interval at which the timer triggers
        """
        return _tesseract_common_python.Timer_start(self, callback, interval)

    def stop(self):
        r""" Stop the timer"""
        return _tesseract_common_python.Timer_stop(self)

# Register Timer in _tesseract_common_python:
_tesseract_common_python.Timer_swigregister(Timer)

def isWithinLimits(values, limits):
    r"""
    Check if within limits
    :param joint_positions: The values to check
    :param position_limits: The limits to perform check
    :rtype: boolean
    :return: 
    """
    return _tesseract_common_python.isWithinLimits(values, limits)

def satisfiesLimits(*args):
    r"""
    *Overload 1:*

    Check if values are within bounds or relatively equal to a limit
    :type values: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,1 > const >
    :param values: The values to check
    :type limits: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,2 > const >
    :param limits: The limits to perform check
    :type max_diff: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,1 > const >
    :param max_diff: The max diff when comparing value to limit value max(abs(value - limit)) <= max_diff, if true
        they are considered equal
    :type max_rel_diff: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,1 > const >
    :param max_rel_diff: The max relative diff between value and limit abs(value - limit) <= largest * max_rel_diff,
        if true considered equal. The largest is the largest of the absolute values of value and limit.
    :rtype: boolean
    :return: True if the all values are within the limits or relatively equal to the limit, otherwise false.

    |

    *Overload 2:*

    Check if values is within bounds or relatively equal to a limit
    :type values: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,1 > const >
    :param values: The values to check
    :type limits: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,2 > const >
    :param limits: The limits to perform check
    :type max_diff: float, optional
    :param max_diff: The max diff when comparing value to limit value max(abs(value - limit)) <= max_diff, if true
        they are considered equal
    :type max_rel_diff: float, optional
    :param max_rel_diff: The max relative diff between value and limit abs(value - limit) <= largest * max_rel_diff,
        if true considered equal. The largest is the largest of the absolute values of value and limit.
    :rtype: boolean
    :return: True if the all values are within the limits or relatively equal to the limit, otherwise false.

    |

    *Overload 3:*

    Check if values is within bounds or relatively equal to a limit
    :type values: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,1 > const >
    :param values: The values to check
    :type limits: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,2 > const >
    :param limits: The limits to perform check
    :type max_diff: float, optional
    :param max_diff: The max diff when comparing value to limit value max(abs(value - limit)) <= max_diff, if true
        they are considered equal
    :param max_rel_diff: The max relative diff between value and limit abs(value - limit) <= largest * max_rel_diff,
        if true considered equal. The largest is the largest of the absolute values of value and limit.
    :rtype: boolean
    :return: True if the all values are within the limits or relatively equal to the limit, otherwise false.

    |

    *Overload 4:*

    Check if values is within bounds or relatively equal to a limit
    :type values: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,1 > const >
    :param values: The values to check
    :type limits: Eigen::Ref< Eigen::Matrix< double,Eigen::Dynamic,2 > const >
    :param limits: The limits to perform check
    :param max_diff: The max diff when comparing value to limit value max(abs(value - limit)) <= max_diff, if true
        they are considered equal
    :param max_rel_diff: The max relative diff between value and limit abs(value - limit) <= largest * max_rel_diff,
        if true considered equal. The largest is the largest of the absolute values of value and limit.
    :rtype: boolean
    :return: True if the all values are within the limits or relatively equal to the limit, otherwise false.
    """
    return _tesseract_common_python.satisfiesLimits(*args)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TypeErasureInterface(object):
    r""" This is the interface that all type erasures interfaces must inherit from"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_common_python.delete_TypeErasureInterface

    def equals(self, other):
        return _tesseract_common_python.TypeErasureInterface_equals(self, other)

    def getType(self):
        return _tesseract_common_python.TypeErasureInterface_getType(self)

    def recover(self, *args):
        return _tesseract_common_python.TypeErasureInterface_recover(self, *args)

# Register TypeErasureInterface in _tesseract_common_python:
_tesseract_common_python.TypeErasureInterface_swigregister(TypeErasureInterface)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class AnyPoly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_common_python.AnyPoly_swiginit(self, _tesseract_common_python.new_AnyPoly())
    __swig_destroy__ = _tesseract_common_python.delete_AnyPoly

# Register AnyPoly in _tesseract_common_python:
_tesseract_common_python.AnyPoly_swigregister(AnyPoly)

def AnyPoly_wrap_double(inner_waypoint):
    return _tesseract_common_python.AnyPoly_wrap_double(inner_waypoint)

def AnyPoly_as_double(_self):
    return _tesseract_common_python.AnyPoly_as_double(_self)

def AnyPoly_is_double(_self):
    return _tesseract_common_python.AnyPoly_is_double(_self)

def AnyPoly_wrap_string(inner_waypoint):
    return _tesseract_common_python.AnyPoly_wrap_string(inner_waypoint)

def AnyPoly_as_string(_self):
    return _tesseract_common_python.AnyPoly_as_string(_self)

def AnyPoly_is_string(_self):
    return _tesseract_common_python.AnyPoly_is_string(_self)

