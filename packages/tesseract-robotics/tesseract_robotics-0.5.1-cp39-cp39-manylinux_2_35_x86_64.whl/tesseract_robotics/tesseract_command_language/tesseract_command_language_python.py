# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_command_language_python
else:
    import _tesseract_command_language_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_command_language_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_command_language_python.delete_SwigPyIterator

    def value(self):
        return _tesseract_command_language_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tesseract_command_language_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tesseract_command_language_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tesseract_command_language_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tesseract_command_language_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tesseract_command_language_python.SwigPyIterator_copy(self)

    def next(self):
        return _tesseract_command_language_python.SwigPyIterator_next(self)

    def __next__(self):
        return _tesseract_command_language_python.SwigPyIterator___next__(self)

    def previous(self):
        return _tesseract_command_language_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tesseract_command_language_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tesseract_command_language_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tesseract_command_language_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tesseract_command_language_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tesseract_command_language_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tesseract_command_language_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tesseract_command_language_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_command_language_python:
_tesseract_command_language_python.SwigPyIterator_swigregister(SwigPyIterator)
import tesseract_robotics.tesseract_common.tesseract_common_python
class flattenFilterFnBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def call(self, a, b, c):
        return _tesseract_command_language_python.flattenFilterFnBase_call(self, a, b, c)
    __swig_destroy__ = _tesseract_command_language_python.delete_flattenFilterFnBase

    def __init__(self):
        if self.__class__ == flattenFilterFnBase:
            _self = None
        else:
            _self = self
        _tesseract_command_language_python.flattenFilterFnBase_swiginit(self, _tesseract_command_language_python.new_flattenFilterFnBase(_self, ))
    def __disown__(self):
        self.this.disown()
        _tesseract_command_language_python.disown_flattenFilterFnBase(self)
        return weakref.proxy(self)

# Register flattenFilterFnBase in _tesseract_command_language_python:
_tesseract_command_language_python.flattenFilterFnBase_swigregister(flattenFilterFnBase)


class flattenFilterFn(flattenFilterFnBase):
  def __init__(self,fn):
    super(flattenFilterFn,self).__init__()
    self._fn = fn

  def call(self,*args):
    return self._fn(*args)

class locateFilterFnBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def call(self, a, b, c):
        return _tesseract_command_language_python.locateFilterFnBase_call(self, a, b, c)
    __swig_destroy__ = _tesseract_command_language_python.delete_locateFilterFnBase

    def __init__(self):
        if self.__class__ == locateFilterFnBase:
            _self = None
        else:
            _self = self
        _tesseract_command_language_python.locateFilterFnBase_swiginit(self, _tesseract_command_language_python.new_locateFilterFnBase(_self, ))
    def __disown__(self):
        self.this.disown()
        _tesseract_command_language_python.disown_locateFilterFnBase(self)
        return weakref.proxy(self)

# Register locateFilterFnBase in _tesseract_command_language_python:
_tesseract_command_language_python.locateFilterFnBase_swigregister(locateFilterFnBase)


class locateFilterFn(locateFilterFnBase):
  def __init__(self,fn):
    super(locateFilterFn,self).__init__()
    self._fn = fn

  def call(self,*args):
    return self._fn(*args)

@_swig_add_metaclass(_SwigNonDynamicMeta)
class Profile(object):
    r"""The Profile class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.Profile_swiginit(self, _tesseract_command_language_python.new_Profile(*args))
    __swig_destroy__ = _tesseract_command_language_python.delete_Profile

    def getKey(self):
        r"""
        Get the hash code associated with the profile
        :rtype: int
        :return: The profile's hash code
        """
        return _tesseract_command_language_python.Profile_getKey(self)

# Register Profile in _tesseract_command_language_python:
_tesseract_command_language_python.Profile_swigregister(Profile)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class ProfileDictionary(object):
    r"""
    This class is used to store profiles used by various tasks
    This is a thread safe class
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def addProfile(self, *args):
        return _tesseract_command_language_python.ProfileDictionary_addProfile(self, *args)

    def hasProfile(self, key, ns, profile_name):
        r"""
        Check if a profile exists
        If profile entry does not exist it also returns false
        :type key: int
        :param key: The profile key
        :type ns: string
        :param ns: The profile namespace
        :type profile_name: string
        :param profile_name: The profile name
        :rtype: boolean
        :return: True if profile exists, otherwise false
        """
        return _tesseract_command_language_python.ProfileDictionary_hasProfile(self, key, ns, profile_name)

    def getProfile(self, key, ns, profile_name):
        r"""
        Get a profile by name
        Check if the profile exist before calling this function, if missing an exception is thrown
        :type key: int
        :param key: The profile key
        :type ns: string
        :param ns: The profile namespace
        :type profile_name: string
        :param profile_name: The profile name
        :rtype: :py:class:`Profile`
        :return: The profile
        """
        return _tesseract_command_language_python.ProfileDictionary_getProfile(self, key, ns, profile_name)

    def removeProfile(self, key, ns, profile_name):
        r"""
        Remove a profile
        :type key: int
        :param key: The profile key
        :type ns: string
        :param ns: The profile namespace
        :type profile_name: string
        :param profile_name: The profile to be removed
        """
        return _tesseract_command_language_python.ProfileDictionary_removeProfile(self, key, ns, profile_name)

    def hasProfileEntry(self, key, ns):
        r"""
        Check if a profile entry exists
        :type key: int
        :param key: The profile key
        :type ns: string
        :param ns: The profile namespace
        :rtype: boolean
        :return: True if exists, otherwise false
        """
        return _tesseract_command_language_python.ProfileDictionary_hasProfileEntry(self, key, ns)

    def removeProfileEntry(self, key, ns):
        r"""
        Remove a profile entry
        :type key: int
        :param key: The profile key
        :type ns: string
        :param ns: The profile namespace
        """
        return _tesseract_command_language_python.ProfileDictionary_removeProfileEntry(self, key, ns)

    def getProfileEntry(self, key, ns):
        r"""
        Get a profile entry
        :type key: int
        :param key: The profile key
        :type ns: string
        :param ns: The profile namespace
        :rtype: std::unordered_map< std::string,tesseract_planning::Profile::ConstPtr,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,tesseract_planning::Profile::ConstPtr > > >
        :return: The profile map associated with the profile entry
        """
        return _tesseract_command_language_python.ProfileDictionary_getProfileEntry(self, key, ns)

    def clear(self):
        r""" Clear the dictionary"""
        return _tesseract_command_language_python.ProfileDictionary_clear(self)

    def __init__(self):
        _tesseract_command_language_python.ProfileDictionary_swiginit(self, _tesseract_command_language_python.new_ProfileDictionary())
    __swig_destroy__ = _tesseract_command_language_python.delete_ProfileDictionary

# Register ProfileDictionary in _tesseract_command_language_python:
_tesseract_command_language_python.ProfileDictionary_swigregister(ProfileDictionary)
class WaypointPoly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.WaypointPoly_swiginit(self, _tesseract_command_language_python.new_WaypointPoly(*args))

    def setName(self, name):
        return _tesseract_command_language_python.WaypointPoly_setName(self, name)

    def getName(self):
        return _tesseract_command_language_python.WaypointPoly_getName(self)

    def _print(self, *args):
        return _tesseract_command_language_python.WaypointPoly__print(self, *args)

    def isCartesianWaypoint(self):
        return _tesseract_command_language_python.WaypointPoly_isCartesianWaypoint(self)

    def isJointWaypoint(self):
        return _tesseract_command_language_python.WaypointPoly_isJointWaypoint(self)

    def isStateWaypoint(self):
        return _tesseract_command_language_python.WaypointPoly_isStateWaypoint(self)
    __swig_destroy__ = _tesseract_command_language_python.delete_WaypointPoly

# Register WaypointPoly in _tesseract_command_language_python:
_tesseract_command_language_python.WaypointPoly_swigregister(WaypointPoly)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CartesianWaypointPoly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.CartesianWaypointPoly_swiginit(self, _tesseract_command_language_python.new_CartesianWaypointPoly(*args))

    def setTransform(self, transform):
        return _tesseract_command_language_python.CartesianWaypointPoly_setTransform(self, transform)

    def getTransform(self):
        return _tesseract_command_language_python.CartesianWaypointPoly_getTransform(self)

    def setUpperTolerance(self, upper_tol):
        return _tesseract_command_language_python.CartesianWaypointPoly_setUpperTolerance(self, upper_tol)

    def getUpperTolerance(self):
        return _tesseract_command_language_python.CartesianWaypointPoly_getUpperTolerance(self)

    def setLowerTolerance(self, lower_tol):
        return _tesseract_command_language_python.CartesianWaypointPoly_setLowerTolerance(self, lower_tol)

    def getLowerTolerance(self):
        return _tesseract_command_language_python.CartesianWaypointPoly_getLowerTolerance(self)

    def setSeed(self, seed):
        return _tesseract_command_language_python.CartesianWaypointPoly_setSeed(self, seed)

    def getSeed(self):
        return _tesseract_command_language_python.CartesianWaypointPoly_getSeed(self)

    def setName(self, name):
        return _tesseract_command_language_python.CartesianWaypointPoly_setName(self, name)

    def getName(self):
        return _tesseract_command_language_python.CartesianWaypointPoly_getName(self)

    def _print(self, *args):
        return _tesseract_command_language_python.CartesianWaypointPoly__print(self, *args)

    def hasSeed(self):
        r"""
        Check if it has a seed. If the position or joint names is empty this returns false
        :rtype: boolean
        :return: True if it has a seed, otherwise false
        """
        return _tesseract_command_language_python.CartesianWaypointPoly_hasSeed(self)

    def clearSeed(self):
        r""" Clear the seed to empty data structures"""
        return _tesseract_command_language_python.CartesianWaypointPoly_clearSeed(self)

    def isToleranced(self):
        r"""
        Returns true if waypoint has tolerances
        :rtype: boolean
        :return: True if waypoint has tolerances
        """
        return _tesseract_command_language_python.CartesianWaypointPoly_isToleranced(self)
    __swig_destroy__ = _tesseract_command_language_python.delete_CartesianWaypointPoly

# Register CartesianWaypointPoly in _tesseract_command_language_python:
_tesseract_command_language_python.CartesianWaypointPoly_swigregister(CartesianWaypointPoly)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointWaypointPoly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.JointWaypointPoly_swiginit(self, _tesseract_command_language_python.new_JointWaypointPoly(*args))

    def setNames(self, names):
        return _tesseract_command_language_python.JointWaypointPoly_setNames(self, names)

    def getNames(self):
        return _tesseract_command_language_python.JointWaypointPoly_getNames(self)

    def setPosition(self, position):
        return _tesseract_command_language_python.JointWaypointPoly_setPosition(self, position)

    def getPosition(self):
        return _tesseract_command_language_python.JointWaypointPoly_getPosition(self)

    def setUpperTolerance(self, upper_tol):
        return _tesseract_command_language_python.JointWaypointPoly_setUpperTolerance(self, upper_tol)

    def getUpperTolerance(self):
        return _tesseract_command_language_python.JointWaypointPoly_getUpperTolerance(self)

    def setLowerTolerance(self, lower_tol):
        return _tesseract_command_language_python.JointWaypointPoly_setLowerTolerance(self, lower_tol)

    def getLowerTolerance(self):
        return _tesseract_command_language_python.JointWaypointPoly_getLowerTolerance(self)

    def setIsConstrained(self, value):
        return _tesseract_command_language_python.JointWaypointPoly_setIsConstrained(self, value)

    def isConstrained(self):
        return _tesseract_command_language_python.JointWaypointPoly_isConstrained(self)

    def setName(self, name):
        return _tesseract_command_language_python.JointWaypointPoly_setName(self, name)

    def getName(self):
        return _tesseract_command_language_python.JointWaypointPoly_getName(self)

    def _print(self, *args):
        return _tesseract_command_language_python.JointWaypointPoly__print(self, *args)

    def isToleranced(self):
        r"""
        Returns true if waypoint has tolerances
        :rtype: boolean
        :return: True if waypoint has tolerances
        """
        return _tesseract_command_language_python.JointWaypointPoly_isToleranced(self)
    __swig_destroy__ = _tesseract_command_language_python.delete_JointWaypointPoly

# Register JointWaypointPoly in _tesseract_command_language_python:
_tesseract_command_language_python.JointWaypointPoly_swigregister(JointWaypointPoly)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class StateWaypointPoly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.StateWaypointPoly_swiginit(self, _tesseract_command_language_python.new_StateWaypointPoly(*args))

    def setNames(self, names):
        return _tesseract_command_language_python.StateWaypointPoly_setNames(self, names)

    def getNames(self):
        return _tesseract_command_language_python.StateWaypointPoly_getNames(self)

    def setPosition(self, position):
        return _tesseract_command_language_python.StateWaypointPoly_setPosition(self, position)

    def getPosition(self):
        return _tesseract_command_language_python.StateWaypointPoly_getPosition(self)

    def setVelocity(self, velocity):
        return _tesseract_command_language_python.StateWaypointPoly_setVelocity(self, velocity)

    def getVelocity(self):
        return _tesseract_command_language_python.StateWaypointPoly_getVelocity(self)

    def setAcceleration(self, acceleration):
        return _tesseract_command_language_python.StateWaypointPoly_setAcceleration(self, acceleration)

    def getAcceleration(self):
        return _tesseract_command_language_python.StateWaypointPoly_getAcceleration(self)

    def setEffort(self, effort):
        return _tesseract_command_language_python.StateWaypointPoly_setEffort(self, effort)

    def getEffort(self):
        return _tesseract_command_language_python.StateWaypointPoly_getEffort(self)

    def setTime(self, time):
        return _tesseract_command_language_python.StateWaypointPoly_setTime(self, time)

    def getTime(self):
        return _tesseract_command_language_python.StateWaypointPoly_getTime(self)

    def setName(self, name):
        return _tesseract_command_language_python.StateWaypointPoly_setName(self, name)

    def getName(self):
        return _tesseract_command_language_python.StateWaypointPoly_getName(self)

    def _print(self, *args):
        return _tesseract_command_language_python.StateWaypointPoly__print(self, *args)
    __swig_destroy__ = _tesseract_command_language_python.delete_StateWaypointPoly

# Register StateWaypointPoly in _tesseract_command_language_python:
_tesseract_command_language_python.StateWaypointPoly_swigregister(StateWaypointPoly)
class InstructionPoly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.InstructionPoly_swiginit(self, _tesseract_command_language_python.new_InstructionPoly(*args))

    def getUUID(self):
        return _tesseract_command_language_python.InstructionPoly_getUUID(self)

    def regenerateUUID(self):
        return _tesseract_command_language_python.InstructionPoly_regenerateUUID(self)

    def getParentUUID(self):
        return _tesseract_command_language_python.InstructionPoly_getParentUUID(self)

    def setParentUUID(self, uuid):
        return _tesseract_command_language_python.InstructionPoly_setParentUUID(self, uuid)

    def getDescription(self):
        return _tesseract_command_language_python.InstructionPoly_getDescription(self)

    def setDescription(self, description):
        return _tesseract_command_language_python.InstructionPoly_setDescription(self, description)

    def _print(self, *args):
        return _tesseract_command_language_python.InstructionPoly__print(self, *args)

    def isCompositeInstruction(self):
        return _tesseract_command_language_python.InstructionPoly_isCompositeInstruction(self)

    def isMoveInstruction(self):
        return _tesseract_command_language_python.InstructionPoly_isMoveInstruction(self)
    __swig_destroy__ = _tesseract_command_language_python.delete_InstructionPoly

# Register InstructionPoly in _tesseract_command_language_python:
_tesseract_command_language_python.InstructionPoly_swigregister(InstructionPoly)
MoveInstructionType_LINEAR = _tesseract_command_language_python.MoveInstructionType_LINEAR
MoveInstructionType_FREESPACE = _tesseract_command_language_python.MoveInstructionType_FREESPACE
MoveInstructionType_CIRCULAR = _tesseract_command_language_python.MoveInstructionType_CIRCULAR
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MoveInstructionPoly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.MoveInstructionPoly_swiginit(self, _tesseract_command_language_python.new_MoveInstructionPoly(*args))

    def getUUID(self):
        return _tesseract_command_language_python.MoveInstructionPoly_getUUID(self)

    def regenerateUUID(self):
        return _tesseract_command_language_python.MoveInstructionPoly_regenerateUUID(self)

    def getParentUUID(self):
        return _tesseract_command_language_python.MoveInstructionPoly_getParentUUID(self)

    def setParentUUID(self, uuid):
        return _tesseract_command_language_python.MoveInstructionPoly_setParentUUID(self, uuid)

    def assignCartesianWaypoint(self, waypoint):
        return _tesseract_command_language_python.MoveInstructionPoly_assignCartesianWaypoint(self, waypoint)

    def assignJointWaypoint(self, waypoint):
        return _tesseract_command_language_python.MoveInstructionPoly_assignJointWaypoint(self, waypoint)

    def assignStateWaypoint(self, waypoint):
        return _tesseract_command_language_python.MoveInstructionPoly_assignStateWaypoint(self, waypoint)

    def getWaypoint(self, *args):
        return _tesseract_command_language_python.MoveInstructionPoly_getWaypoint(self, *args)

    def setManipulatorInfo(self, info):
        return _tesseract_command_language_python.MoveInstructionPoly_setManipulatorInfo(self, info)

    def getManipulatorInfo(self, *args):
        return _tesseract_command_language_python.MoveInstructionPoly_getManipulatorInfo(self, *args)

    def setProfile(self, profile):
        return _tesseract_command_language_python.MoveInstructionPoly_setProfile(self, profile)

    def getProfile(self):
        return _tesseract_command_language_python.MoveInstructionPoly_getProfile(self)

    def setPathProfile(self, profile):
        return _tesseract_command_language_python.MoveInstructionPoly_setPathProfile(self, profile)

    def getPathProfile(self):
        return _tesseract_command_language_python.MoveInstructionPoly_getPathProfile(self)

    def setProfileOverrides(self, profile_overrides):
        return _tesseract_command_language_python.MoveInstructionPoly_setProfileOverrides(self, profile_overrides)

    def getProfileOverrides(self):
        return _tesseract_command_language_python.MoveInstructionPoly_getProfileOverrides(self)

    def setPathProfileOverrides(self, profile_overrides):
        return _tesseract_command_language_python.MoveInstructionPoly_setPathProfileOverrides(self, profile_overrides)

    def getPathProfileOverrides(self):
        return _tesseract_command_language_python.MoveInstructionPoly_getPathProfileOverrides(self)

    def setMoveType(self, move_type):
        return _tesseract_command_language_python.MoveInstructionPoly_setMoveType(self, move_type)

    def getMoveType(self):
        return _tesseract_command_language_python.MoveInstructionPoly_getMoveType(self)

    def getDescription(self):
        return _tesseract_command_language_python.MoveInstructionPoly_getDescription(self)

    def setDescription(self, description):
        return _tesseract_command_language_python.MoveInstructionPoly_setDescription(self, description)

    def _print(self, *args):
        return _tesseract_command_language_python.MoveInstructionPoly__print(self, *args)

    def createCartesianWaypoint(self):
        return _tesseract_command_language_python.MoveInstructionPoly_createCartesianWaypoint(self)

    def createJointWaypoint(self):
        return _tesseract_command_language_python.MoveInstructionPoly_createJointWaypoint(self)

    def createStateWaypoint(self):
        return _tesseract_command_language_python.MoveInstructionPoly_createStateWaypoint(self)

    def createChild(self):
        return _tesseract_command_language_python.MoveInstructionPoly_createChild(self)

    def isLinear(self):
        return _tesseract_command_language_python.MoveInstructionPoly_isLinear(self)

    def isFreespace(self):
        return _tesseract_command_language_python.MoveInstructionPoly_isFreespace(self)

    def isCircular(self):
        return _tesseract_command_language_python.MoveInstructionPoly_isCircular(self)

    def isChild(self):
        return _tesseract_command_language_python.MoveInstructionPoly_isChild(self)
    __swig_destroy__ = _tesseract_command_language_python.delete_MoveInstructionPoly

# Register MoveInstructionPoly in _tesseract_command_language_python:
_tesseract_command_language_python.MoveInstructionPoly_swigregister(MoveInstructionPoly)

def WaypointPoly_as_CartesianWaypointPoly(_self):
    return _tesseract_command_language_python.WaypointPoly_as_CartesianWaypointPoly(_self)

def CartesianWaypointPoly_as_WaypointPoly(_self):
    return _tesseract_command_language_python.CartesianWaypointPoly_as_WaypointPoly(_self)

def AnyPoly_wrap_CartesianWaypointPoly(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_CartesianWaypointPoly(inner_waypoint)

def AnyPoly_as_CartesianWaypointPoly(_self):
    return _tesseract_command_language_python.AnyPoly_as_CartesianWaypointPoly(_self)

def AnyPoly_is_CartesianWaypointPoly(_self):
    return _tesseract_command_language_python.AnyPoly_is_CartesianWaypointPoly(_self)

def CartesianWaypointPoly_wrap_CartesianWaypoint(inner_waypoint):
    return _tesseract_command_language_python.CartesianWaypointPoly_wrap_CartesianWaypoint(inner_waypoint)

def WaypointPoly_as_JointWaypointPoly(_self):
    return _tesseract_command_language_python.WaypointPoly_as_JointWaypointPoly(_self)

def JointWaypointPoly_as_WaypointPoly(_self):
    return _tesseract_command_language_python.JointWaypointPoly_as_WaypointPoly(_self)

def AnyPoly_wrap_JointWaypointPoly(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_JointWaypointPoly(inner_waypoint)

def AnyPoly_as_JointWaypointPoly(_self):
    return _tesseract_command_language_python.AnyPoly_as_JointWaypointPoly(_self)

def AnyPoly_is_JointWaypointPoly(_self):
    return _tesseract_command_language_python.AnyPoly_is_JointWaypointPoly(_self)

def JointWaypointPoly_wrap_JointWaypoint(inner_waypoint):
    return _tesseract_command_language_python.JointWaypointPoly_wrap_JointWaypoint(inner_waypoint)

def WaypointPoly_as_StateWaypointPoly(_self):
    return _tesseract_command_language_python.WaypointPoly_as_StateWaypointPoly(_self)

def StateWaypointPoly_as_WaypointPoly(_self):
    return _tesseract_command_language_python.StateWaypointPoly_as_WaypointPoly(_self)

def AnyPoly_wrap_StateWaypointPoly(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_StateWaypointPoly(inner_waypoint)

def AnyPoly_as_StateWaypointPoly(_self):
    return _tesseract_command_language_python.AnyPoly_as_StateWaypointPoly(_self)

def AnyPoly_is_StateWaypointPoly(_self):
    return _tesseract_command_language_python.AnyPoly_is_StateWaypointPoly(_self)

def StateWaypointPoly_wrap_StateWaypoint(inner_waypoint):
    return _tesseract_command_language_python.StateWaypointPoly_wrap_StateWaypoint(inner_waypoint)

def InstructionPoly_as_MoveInstructionPoly(_self):
    return _tesseract_command_language_python.InstructionPoly_as_MoveInstructionPoly(_self)

def MoveInstructionPoly_as_InstructionPoly(_self):
    return _tesseract_command_language_python.MoveInstructionPoly_as_InstructionPoly(_self)

def AnyPoly_wrap_MoveInstructionPoly(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_MoveInstructionPoly(inner_waypoint)

def AnyPoly_as_MoveInstructionPoly(_self):
    return _tesseract_command_language_python.AnyPoly_as_MoveInstructionPoly(_self)

def AnyPoly_is_MoveInstructionPoly(_self):
    return _tesseract_command_language_python.AnyPoly_is_MoveInstructionPoly(_self)

def MoveInstructionPoly_wrap_MoveInstruction(inner_waypoint):
    return _tesseract_command_language_python.MoveInstructionPoly_wrap_MoveInstruction(inner_waypoint)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Waypoints(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_command_language_python.Waypoints_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_command_language_python.Waypoints___nonzero__(self)

    def __bool__(self):
        return _tesseract_command_language_python.Waypoints___bool__(self)

    def __len__(self):
        return _tesseract_command_language_python.Waypoints___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_command_language_python.Waypoints___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_command_language_python.Waypoints___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_command_language_python.Waypoints___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_command_language_python.Waypoints___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_command_language_python.Waypoints___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_command_language_python.Waypoints___setitem__(self, *args)

    def pop(self):
        return _tesseract_command_language_python.Waypoints_pop(self)

    def append(self, x):
        return _tesseract_command_language_python.Waypoints_append(self, x)

    def empty(self):
        return _tesseract_command_language_python.Waypoints_empty(self)

    def size(self):
        return _tesseract_command_language_python.Waypoints_size(self)

    def swap(self, v):
        return _tesseract_command_language_python.Waypoints_swap(self, v)

    def begin(self):
        return _tesseract_command_language_python.Waypoints_begin(self)

    def end(self):
        return _tesseract_command_language_python.Waypoints_end(self)

    def rbegin(self):
        return _tesseract_command_language_python.Waypoints_rbegin(self)

    def rend(self):
        return _tesseract_command_language_python.Waypoints_rend(self)

    def clear(self):
        return _tesseract_command_language_python.Waypoints_clear(self)

    def get_allocator(self):
        return _tesseract_command_language_python.Waypoints_get_allocator(self)

    def pop_back(self):
        return _tesseract_command_language_python.Waypoints_pop_back(self)

    def erase(self, *args):
        return _tesseract_command_language_python.Waypoints_erase(self, *args)

    def __init__(self, *args):
        _tesseract_command_language_python.Waypoints_swiginit(self, _tesseract_command_language_python.new_Waypoints(*args))

    def push_back(self, x):
        return _tesseract_command_language_python.Waypoints_push_back(self, x)

    def front(self):
        return _tesseract_command_language_python.Waypoints_front(self)

    def back(self):
        return _tesseract_command_language_python.Waypoints_back(self)

    def assign(self, n, x):
        return _tesseract_command_language_python.Waypoints_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_command_language_python.Waypoints_resize(self, *args)

    def insert(self, *args):
        return _tesseract_command_language_python.Waypoints_insert(self, *args)

    def reserve(self, n):
        return _tesseract_command_language_python.Waypoints_reserve(self, n)

    def capacity(self):
        return _tesseract_command_language_python.Waypoints_capacity(self)
    __swig_destroy__ = _tesseract_command_language_python.delete_Waypoints

# Register Waypoints in _tesseract_command_language_python:
_tesseract_command_language_python.Waypoints_swigregister(Waypoints)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class Instructions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_command_language_python.Instructions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_command_language_python.Instructions___nonzero__(self)

    def __bool__(self):
        return _tesseract_command_language_python.Instructions___bool__(self)

    def __len__(self):
        return _tesseract_command_language_python.Instructions___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_command_language_python.Instructions___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_command_language_python.Instructions___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_command_language_python.Instructions___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_command_language_python.Instructions___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_command_language_python.Instructions___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_command_language_python.Instructions___setitem__(self, *args)

    def pop(self):
        return _tesseract_command_language_python.Instructions_pop(self)

    def append(self, x):
        return _tesseract_command_language_python.Instructions_append(self, x)

    def empty(self):
        return _tesseract_command_language_python.Instructions_empty(self)

    def size(self):
        return _tesseract_command_language_python.Instructions_size(self)

    def swap(self, v):
        return _tesseract_command_language_python.Instructions_swap(self, v)

    def begin(self):
        return _tesseract_command_language_python.Instructions_begin(self)

    def end(self):
        return _tesseract_command_language_python.Instructions_end(self)

    def rbegin(self):
        return _tesseract_command_language_python.Instructions_rbegin(self)

    def rend(self):
        return _tesseract_command_language_python.Instructions_rend(self)

    def clear(self):
        return _tesseract_command_language_python.Instructions_clear(self)

    def get_allocator(self):
        return _tesseract_command_language_python.Instructions_get_allocator(self)

    def pop_back(self):
        return _tesseract_command_language_python.Instructions_pop_back(self)

    def erase(self, *args):
        return _tesseract_command_language_python.Instructions_erase(self, *args)

    def __init__(self, *args):
        _tesseract_command_language_python.Instructions_swiginit(self, _tesseract_command_language_python.new_Instructions(*args))

    def push_back(self, x):
        return _tesseract_command_language_python.Instructions_push_back(self, x)

    def front(self):
        return _tesseract_command_language_python.Instructions_front(self)

    def back(self):
        return _tesseract_command_language_python.Instructions_back(self)

    def assign(self, n, x):
        return _tesseract_command_language_python.Instructions_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_command_language_python.Instructions_resize(self, *args)

    def insert(self, *args):
        return _tesseract_command_language_python.Instructions_insert(self, *args)

    def reserve(self, n):
        return _tesseract_command_language_python.Instructions_reserve(self, n)

    def capacity(self):
        return _tesseract_command_language_python.Instructions_capacity(self)
    __swig_destroy__ = _tesseract_command_language_python.delete_Instructions

# Register Instructions in _tesseract_command_language_python:
_tesseract_command_language_python.Instructions_swigregister(Instructions)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MoveInstructionPolyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector___nonzero__(self)

    def __bool__(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector___bool__(self)

    def __len__(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_command_language_python.MoveInstructionPolyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_command_language_python.MoveInstructionPolyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_command_language_python.MoveInstructionPolyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_command_language_python.MoveInstructionPolyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_command_language_python.MoveInstructionPolyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_command_language_python.MoveInstructionPolyVector___setitem__(self, *args)

    def pop(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_pop(self)

    def append(self, x):
        return _tesseract_command_language_python.MoveInstructionPolyVector_append(self, x)

    def empty(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_empty(self)

    def size(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_size(self)

    def swap(self, v):
        return _tesseract_command_language_python.MoveInstructionPolyVector_swap(self, v)

    def begin(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_begin(self)

    def end(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_end(self)

    def rbegin(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_rbegin(self)

    def rend(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_rend(self)

    def clear(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_clear(self)

    def get_allocator(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_get_allocator(self)

    def pop_back(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_pop_back(self)

    def erase(self, *args):
        return _tesseract_command_language_python.MoveInstructionPolyVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_command_language_python.MoveInstructionPolyVector_swiginit(self, _tesseract_command_language_python.new_MoveInstructionPolyVector(*args))

    def push_back(self, x):
        return _tesseract_command_language_python.MoveInstructionPolyVector_push_back(self, x)

    def front(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_front(self)

    def back(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_back(self)

    def assign(self, n, x):
        return _tesseract_command_language_python.MoveInstructionPolyVector_assign(self, n, x)

    def resize(self, *args):
        return _tesseract_command_language_python.MoveInstructionPolyVector_resize(self, *args)

    def insert(self, *args):
        return _tesseract_command_language_python.MoveInstructionPolyVector_insert(self, *args)

    def reserve(self, n):
        return _tesseract_command_language_python.MoveInstructionPolyVector_reserve(self, n)

    def capacity(self):
        return _tesseract_command_language_python.MoveInstructionPolyVector_capacity(self)
    __swig_destroy__ = _tesseract_command_language_python.delete_MoveInstructionPolyVector

# Register MoveInstructionPolyVector in _tesseract_command_language_python:
_tesseract_command_language_python.MoveInstructionPolyVector_swigregister(MoveInstructionPolyVector)

def isSetAnalogInstruction(instruction):
    return _tesseract_command_language_python.isSetAnalogInstruction(instruction)

def isSetToolInstruction(instruction):
    return _tesseract_command_language_python.isSetToolInstruction(instruction)

def isTimerInstruction(instruction):
    return _tesseract_command_language_python.isTimerInstruction(instruction)

def isWaitInstruction(instruction):
    return _tesseract_command_language_python.isWaitInstruction(instruction)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CartesianWaypoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.CartesianWaypoint_swiginit(self, _tesseract_command_language_python.new_CartesianWaypoint(*args))

    def setTransform(self, transform):
        return _tesseract_command_language_python.CartesianWaypoint_setTransform(self, transform)

    def getTransform(self, *args):
        return _tesseract_command_language_python.CartesianWaypoint_getTransform(self, *args)

    def setUpperTolerance(self, upper_tol):
        return _tesseract_command_language_python.CartesianWaypoint_setUpperTolerance(self, upper_tol)

    def getUpperTolerance(self, *args):
        return _tesseract_command_language_python.CartesianWaypoint_getUpperTolerance(self, *args)

    def setLowerTolerance(self, lower_tol):
        return _tesseract_command_language_python.CartesianWaypoint_setLowerTolerance(self, lower_tol)

    def getLowerTolerance(self, *args):
        return _tesseract_command_language_python.CartesianWaypoint_getLowerTolerance(self, *args)

    def setSeed(self, seed):
        return _tesseract_command_language_python.CartesianWaypoint_setSeed(self, seed)

    def getSeed(self, *args):
        return _tesseract_command_language_python.CartesianWaypoint_getSeed(self, *args)

    def setName(self, name):
        return _tesseract_command_language_python.CartesianWaypoint_setName(self, name)

    def getName(self):
        return _tesseract_command_language_python.CartesianWaypoint_getName(self)

    def _print(self, *args):
        return _tesseract_command_language_python.CartesianWaypoint__print(self, *args)

    def __eq__(self, rhs):
        return _tesseract_command_language_python.CartesianWaypoint___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_command_language_python.CartesianWaypoint___ne__(self, rhs)
    __swig_destroy__ = _tesseract_command_language_python.delete_CartesianWaypoint

# Register CartesianWaypoint in _tesseract_command_language_python:
_tesseract_command_language_python.CartesianWaypoint_swigregister(CartesianWaypoint)

def WaypointPoly_wrap_CartesianWaypoint(inner_waypoint):
    return _tesseract_command_language_python.WaypointPoly_wrap_CartesianWaypoint(inner_waypoint)

def WaypointPoly_as_CartesianWaypoint(_self):
    return _tesseract_command_language_python.WaypointPoly_as_CartesianWaypoint(_self)

def AnyPoly_wrap_CartesianWaypoint(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_CartesianWaypoint(inner_waypoint)

def AnyPoly_as_CartesianWaypoint(_self):
    return _tesseract_command_language_python.AnyPoly_as_CartesianWaypoint(_self)

def AnyPoly_is_CartesianWaypoint(_self):
    return _tesseract_command_language_python.AnyPoly_is_CartesianWaypoint(_self)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class JointWaypoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.JointWaypoint_swiginit(self, _tesseract_command_language_python.new_JointWaypoint(*args))

    def setNames(self, names):
        return _tesseract_command_language_python.JointWaypoint_setNames(self, names)

    def getNames(self, *args):
        return _tesseract_command_language_python.JointWaypoint_getNames(self, *args)

    def setPosition(self, position):
        return _tesseract_command_language_python.JointWaypoint_setPosition(self, position)

    def getPosition(self, *args):
        return _tesseract_command_language_python.JointWaypoint_getPosition(self, *args)

    def setUpperTolerance(self, upper_tol):
        return _tesseract_command_language_python.JointWaypoint_setUpperTolerance(self, upper_tol)

    def getUpperTolerance(self, *args):
        return _tesseract_command_language_python.JointWaypoint_getUpperTolerance(self, *args)

    def setLowerTolerance(self, lower_tol):
        return _tesseract_command_language_python.JointWaypoint_setLowerTolerance(self, lower_tol)

    def getLowerTolerance(self, *args):
        return _tesseract_command_language_python.JointWaypoint_getLowerTolerance(self, *args)

    def setIsConstrained(self, value):
        return _tesseract_command_language_python.JointWaypoint_setIsConstrained(self, value)

    def isConstrained(self):
        return _tesseract_command_language_python.JointWaypoint_isConstrained(self)

    def setName(self, name):
        return _tesseract_command_language_python.JointWaypoint_setName(self, name)

    def getName(self):
        return _tesseract_command_language_python.JointWaypoint_getName(self)

    def _print(self, *args):
        return _tesseract_command_language_python.JointWaypoint__print(self, *args)

    def __eq__(self, rhs):
        return _tesseract_command_language_python.JointWaypoint___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_command_language_python.JointWaypoint___ne__(self, rhs)
    __swig_destroy__ = _tesseract_command_language_python.delete_JointWaypoint

# Register JointWaypoint in _tesseract_command_language_python:
_tesseract_command_language_python.JointWaypoint_swigregister(JointWaypoint)

def WaypointPoly_wrap_JointWaypoint(inner_waypoint):
    return _tesseract_command_language_python.WaypointPoly_wrap_JointWaypoint(inner_waypoint)

def WaypointPoly_as_JointWaypoint(_self):
    return _tesseract_command_language_python.WaypointPoly_as_JointWaypoint(_self)

def AnyPoly_wrap_JointWaypoint(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_JointWaypoint(inner_waypoint)

def AnyPoly_as_JointWaypoint(_self):
    return _tesseract_command_language_python.AnyPoly_as_JointWaypoint(_self)

def AnyPoly_is_JointWaypoint(_self):
    return _tesseract_command_language_python.AnyPoly_is_JointWaypoint(_self)
class StateWaypoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.StateWaypoint_swiginit(self, _tesseract_command_language_python.new_StateWaypoint(*args))

    def setNames(self, names):
        return _tesseract_command_language_python.StateWaypoint_setNames(self, names)

    def getNames(self, *args):
        return _tesseract_command_language_python.StateWaypoint_getNames(self, *args)

    def setPosition(self, position):
        return _tesseract_command_language_python.StateWaypoint_setPosition(self, position)

    def getPosition(self, *args):
        return _tesseract_command_language_python.StateWaypoint_getPosition(self, *args)

    def setVelocity(self, velocity):
        return _tesseract_command_language_python.StateWaypoint_setVelocity(self, velocity)

    def getVelocity(self, *args):
        return _tesseract_command_language_python.StateWaypoint_getVelocity(self, *args)

    def setAcceleration(self, acceleration):
        return _tesseract_command_language_python.StateWaypoint_setAcceleration(self, acceleration)

    def getAcceleration(self, *args):
        return _tesseract_command_language_python.StateWaypoint_getAcceleration(self, *args)

    def setEffort(self, effort):
        return _tesseract_command_language_python.StateWaypoint_setEffort(self, effort)

    def getEffort(self, *args):
        return _tesseract_command_language_python.StateWaypoint_getEffort(self, *args)

    def setTime(self, time):
        return _tesseract_command_language_python.StateWaypoint_setTime(self, time)

    def getTime(self):
        return _tesseract_command_language_python.StateWaypoint_getTime(self)

    def setName(self, name):
        return _tesseract_command_language_python.StateWaypoint_setName(self, name)

    def getName(self):
        return _tesseract_command_language_python.StateWaypoint_getName(self)

    def _print(self, *args):
        return _tesseract_command_language_python.StateWaypoint__print(self, *args)

    def __eq__(self, rhs):
        return _tesseract_command_language_python.StateWaypoint___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_command_language_python.StateWaypoint___ne__(self, rhs)
    __swig_destroy__ = _tesseract_command_language_python.delete_StateWaypoint

# Register StateWaypoint in _tesseract_command_language_python:
_tesseract_command_language_python.StateWaypoint_swigregister(StateWaypoint)

def WaypointPoly_wrap_StateWaypoint(inner_waypoint):
    return _tesseract_command_language_python.WaypointPoly_wrap_StateWaypoint(inner_waypoint)

def WaypointPoly_as_StateWaypoint(_self):
    return _tesseract_command_language_python.WaypointPoly_as_StateWaypoint(_self)

def AnyPoly_wrap_StateWaypoint(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_StateWaypoint(inner_waypoint)

def AnyPoly_as_StateWaypoint(_self):
    return _tesseract_command_language_python.AnyPoly_as_StateWaypoint(_self)

def AnyPoly_is_StateWaypoint(_self):
    return _tesseract_command_language_python.AnyPoly_is_StateWaypoint(_self)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class MoveInstruction(object):
    r"""
    The move instruction is used when defining the results of a motion planning request

    This instruction contains two profiles 'profile' and 'path_profile' which are similar to industrial robots
    termination type and Motion Options.
      - profile (Termination Type): is used to define a set of costs/constraints associated only with the waypoint
    assigned to this instruction
      - path_profile (Motion Options): is used to define a set of costs/constraints associated only with the path taken
    to the waypoint assigned to this instruction
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.MoveInstruction_swiginit(self, _tesseract_command_language_python.new_MoveInstruction(*args))

    def getUUID(self):
        return _tesseract_command_language_python.MoveInstruction_getUUID(self)

    def setUUID(self, uuid):
        return _tesseract_command_language_python.MoveInstruction_setUUID(self, uuid)

    def regenerateUUID(self):
        return _tesseract_command_language_python.MoveInstruction_regenerateUUID(self)

    def getParentUUID(self):
        return _tesseract_command_language_python.MoveInstruction_getParentUUID(self)

    def setParentUUID(self, uuid):
        return _tesseract_command_language_python.MoveInstruction_setParentUUID(self, uuid)

    def setMoveType(self, move_type):
        return _tesseract_command_language_python.MoveInstruction_setMoveType(self, move_type)

    def getMoveType(self):
        return _tesseract_command_language_python.MoveInstruction_getMoveType(self)

    def assignCartesianWaypoint(self, waypoint):
        return _tesseract_command_language_python.MoveInstruction_assignCartesianWaypoint(self, waypoint)

    def assignJointWaypoint(self, waypoint):
        return _tesseract_command_language_python.MoveInstruction_assignJointWaypoint(self, waypoint)

    def assignStateWaypoint(self, waypoint):
        return _tesseract_command_language_python.MoveInstruction_assignStateWaypoint(self, waypoint)

    def getWaypoint(self, *args):
        return _tesseract_command_language_python.MoveInstruction_getWaypoint(self, *args)

    def setManipulatorInfo(self, info):
        return _tesseract_command_language_python.MoveInstruction_setManipulatorInfo(self, info)

    def getManipulatorInfo(self, *args):
        return _tesseract_command_language_python.MoveInstruction_getManipulatorInfo(self, *args)

    def setProfile(self, profile):
        return _tesseract_command_language_python.MoveInstruction_setProfile(self, profile)

    def getProfile(self, *args):
        return _tesseract_command_language_python.MoveInstruction_getProfile(self, *args)

    def setPathProfile(self, profile):
        return _tesseract_command_language_python.MoveInstruction_setPathProfile(self, profile)

    def getPathProfile(self, *args):
        return _tesseract_command_language_python.MoveInstruction_getPathProfile(self, *args)

    def setProfileOverrides(self, profile_overrides):
        return _tesseract_command_language_python.MoveInstruction_setProfileOverrides(self, profile_overrides)

    def getProfileOverrides(self):
        return _tesseract_command_language_python.MoveInstruction_getProfileOverrides(self)

    def setPathProfileOverrides(self, profile_overrides):
        return _tesseract_command_language_python.MoveInstruction_setPathProfileOverrides(self, profile_overrides)

    def getPathProfileOverrides(self):
        return _tesseract_command_language_python.MoveInstruction_getPathProfileOverrides(self)

    def getDescription(self):
        return _tesseract_command_language_python.MoveInstruction_getDescription(self)

    def setDescription(self, description):
        return _tesseract_command_language_python.MoveInstruction_setDescription(self, description)

    def _print(self, *args):
        return _tesseract_command_language_python.MoveInstruction__print(self, *args)

    @staticmethod
    def createCartesianWaypoint():
        return _tesseract_command_language_python.MoveInstruction_createCartesianWaypoint()

    @staticmethod
    def createJointWaypoint():
        return _tesseract_command_language_python.MoveInstruction_createJointWaypoint()

    @staticmethod
    def createStateWaypoint():
        return _tesseract_command_language_python.MoveInstruction_createStateWaypoint()

    def __eq__(self, rhs):
        return _tesseract_command_language_python.MoveInstruction___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_command_language_python.MoveInstruction___ne__(self, rhs)
    __swig_destroy__ = _tesseract_command_language_python.delete_MoveInstruction

# Register MoveInstruction in _tesseract_command_language_python:
_tesseract_command_language_python.MoveInstruction_swigregister(MoveInstruction)

def InstructionPoly_wrap_MoveInstruction(inner_waypoint):
    return _tesseract_command_language_python.InstructionPoly_wrap_MoveInstruction(inner_waypoint)

def InstructionPoly_as_MoveInstruction(_self):
    return _tesseract_command_language_python.InstructionPoly_as_MoveInstruction(_self)

def AnyPoly_wrap_MoveInstruction(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_MoveInstruction(inner_waypoint)

def AnyPoly_as_MoveInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_as_MoveInstruction(_self)

def AnyPoly_is_MoveInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_is_MoveInstruction(_self)
TimerInstructionType_DIGITAL_OUTPUT_HIGH = _tesseract_command_language_python.TimerInstructionType_DIGITAL_OUTPUT_HIGH
TimerInstructionType_DIGITAL_OUTPUT_LOW = _tesseract_command_language_python.TimerInstructionType_DIGITAL_OUTPUT_LOW
@_swig_add_metaclass(_SwigNonDynamicMeta)
class TimerInstruction(object):
    r"""
    This instruction indicates that a timer should be started and when the time expires it either sets a digital
    output high(1) or low(0).

      - DIGITAL_OUTPUT_HIGH : The digital output will be set to high(1) when the timer expires
      - DIGITAL_OUTPUT_LOW  : The digital output will be set to low(0) when the timer expires
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.TimerInstruction_swiginit(self, _tesseract_command_language_python.new_TimerInstruction(*args))

    def getUUID(self):
        return _tesseract_command_language_python.TimerInstruction_getUUID(self)

    def setUUID(self, uuid):
        return _tesseract_command_language_python.TimerInstruction_setUUID(self, uuid)

    def regenerateUUID(self):
        return _tesseract_command_language_python.TimerInstruction_regenerateUUID(self)

    def getParentUUID(self):
        return _tesseract_command_language_python.TimerInstruction_getParentUUID(self)

    def setParentUUID(self, uuid):
        return _tesseract_command_language_python.TimerInstruction_setParentUUID(self, uuid)

    def getDescription(self):
        return _tesseract_command_language_python.TimerInstruction_getDescription(self)

    def setDescription(self, description):
        return _tesseract_command_language_python.TimerInstruction_setDescription(self, description)

    def _print(self, *args):
        return _tesseract_command_language_python.TimerInstruction__print(self, *args)

    def getTimerType(self):
        r"""
        Get the timer type
        :rtype: int
        :return: The timer type
        """
        return _tesseract_command_language_python.TimerInstruction_getTimerType(self)

    def setTimerType(self, type):
        r"""
        Set the timer type
        :type type: int
        :param type: The timer type
        """
        return _tesseract_command_language_python.TimerInstruction_setTimerType(self, type)

    def getTimerTime(self):
        r"""
        Get timer time in second
        :rtype: float
        :return: The timer time in second
        """
        return _tesseract_command_language_python.TimerInstruction_getTimerTime(self)

    def setTimerTime(self, time):
        r"""
        Set timer time in second
        :type time: float
        :param time: The timer time in second
        """
        return _tesseract_command_language_python.TimerInstruction_setTimerTime(self, time)

    def getTimerIO(self):
        r"""
        Get the timer IO
        :rtype: int
        :return: The timer IO
        """
        return _tesseract_command_language_python.TimerInstruction_getTimerIO(self)

    def setTimerIO(self, io):
        r"""
        Set the timer IO
        :type io: int
        :param io: The timer IO
        """
        return _tesseract_command_language_python.TimerInstruction_setTimerIO(self, io)

    def __eq__(self, rhs):
        r"""
        Equal operator. Does not compare descriptions
        :type rhs: :py:class:`TimerInstruction`
        :param rhs: TimerInstruction
        :rtype: boolean
        :return: True if equal, otherwise false
        """
        return _tesseract_command_language_python.TimerInstruction___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        Not equal operator. Does not compare descriptions
        :type rhs: :py:class:`TimerInstruction`
        :param rhs: TimerInstruction
        :rtype: boolean
        :return: True if not equal, otherwise false
        """
        return _tesseract_command_language_python.TimerInstruction___ne__(self, rhs)
    __swig_destroy__ = _tesseract_command_language_python.delete_TimerInstruction

# Register TimerInstruction in _tesseract_command_language_python:
_tesseract_command_language_python.TimerInstruction_swigregister(TimerInstruction)

def InstructionPoly_wrap_TimerInstruction(inner_waypoint):
    return _tesseract_command_language_python.InstructionPoly_wrap_TimerInstruction(inner_waypoint)

def InstructionPoly_as_TimerInstruction(_self):
    return _tesseract_command_language_python.InstructionPoly_as_TimerInstruction(_self)

def AnyPoly_wrap_TimerInstruction(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_TimerInstruction(inner_waypoint)

def AnyPoly_as_TimerInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_as_TimerInstruction(_self)

def AnyPoly_is_TimerInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_is_TimerInstruction(_self)
WaitInstructionType_TIME = _tesseract_command_language_python.WaitInstructionType_TIME
WaitInstructionType_DIGITAL_INPUT_HIGH = _tesseract_command_language_python.WaitInstructionType_DIGITAL_INPUT_HIGH
WaitInstructionType_DIGITAL_INPUT_LOW = _tesseract_command_language_python.WaitInstructionType_DIGITAL_INPUT_LOW
WaitInstructionType_DIGITAL_OUTPUT_HIGH = _tesseract_command_language_python.WaitInstructionType_DIGITAL_OUTPUT_HIGH
WaitInstructionType_DIGITAL_OUTPUT_LOW = _tesseract_command_language_python.WaitInstructionType_DIGITAL_OUTPUT_LOW
@_swig_add_metaclass(_SwigNonDynamicMeta)
class WaitInstruction(object):
    r"""
    This is a wait instruction similar to wait instruction on industrial controllers.
    The instruction has several modes of operation.

      - TIME                : This will wait for a specified number of seconds and then continue
      - DIGITAL_INPUT_HIGH  : This will wait for a digital input to go high(1) then continue
      - DIGITAL_INPUT_LOW   : This will wait for a digital input to go low(0) then continue
      - DIGITAL_OUTPUT_HIGH : This will wait for a digital output to go high(1) then continue
      - DIGITAL_OUTPUT_LOW  : This will wait for a digital output to go low(0) then continue
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.WaitInstruction_swiginit(self, _tesseract_command_language_python.new_WaitInstruction(*args))

    def getUUID(self):
        return _tesseract_command_language_python.WaitInstruction_getUUID(self)

    def setUUID(self, uuid):
        return _tesseract_command_language_python.WaitInstruction_setUUID(self, uuid)

    def regenerateUUID(self):
        return _tesseract_command_language_python.WaitInstruction_regenerateUUID(self)

    def getParentUUID(self):
        return _tesseract_command_language_python.WaitInstruction_getParentUUID(self)

    def setParentUUID(self, uuid):
        return _tesseract_command_language_python.WaitInstruction_setParentUUID(self, uuid)

    def getDescription(self):
        return _tesseract_command_language_python.WaitInstruction_getDescription(self)

    def setDescription(self, description):
        return _tesseract_command_language_python.WaitInstruction_setDescription(self, description)

    def _print(self, *args):
        return _tesseract_command_language_python.WaitInstruction__print(self, *args)

    def getWaitType(self):
        r"""
        Get the wait type
        :rtype: int
        :return: The wait type
        """
        return _tesseract_command_language_python.WaitInstruction_getWaitType(self)

    def setWaitType(self, type):
        r"""
        Set the wait type
        :type type: int
        :param type: The wait type
        """
        return _tesseract_command_language_python.WaitInstruction_setWaitType(self, type)

    def getWaitTime(self):
        r"""
        Get wait time in second
        :rtype: float
        :return: The wait time in second
        """
        return _tesseract_command_language_python.WaitInstruction_getWaitTime(self)

    def setWaitTime(self, time):
        r"""
        Set wait time in second
        :type time: float
        :param time: The wait time in second
        """
        return _tesseract_command_language_python.WaitInstruction_setWaitTime(self, time)

    def getWaitIO(self):
        r"""
        Get the wait IO
        :rtype: int
        :return: The wait IO
        """
        return _tesseract_command_language_python.WaitInstruction_getWaitIO(self)

    def setWaitIO(self, io):
        r"""
        Set the wait IO
        :type io: int
        :param io: The wait IO
        """
        return _tesseract_command_language_python.WaitInstruction_setWaitIO(self, io)

    def __eq__(self, rhs):
        r"""
        Equal operator. Does not compare descriptions
        :type rhs: :py:class:`WaitInstruction`
        :param rhs: TimerInstruction
        :rtype: boolean
        :return: True if equal, otherwise false
        """
        return _tesseract_command_language_python.WaitInstruction___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        Not equal operator. Does not compare descriptions
        :type rhs: :py:class:`WaitInstruction`
        :param rhs: TimerInstruction
        :rtype: boolean
        :return: True if not equal, otherwise false
        """
        return _tesseract_command_language_python.WaitInstruction___ne__(self, rhs)
    __swig_destroy__ = _tesseract_command_language_python.delete_WaitInstruction

# Register WaitInstruction in _tesseract_command_language_python:
_tesseract_command_language_python.WaitInstruction_swigregister(WaitInstruction)

def InstructionPoly_wrap_WaitInstruction(inner_waypoint):
    return _tesseract_command_language_python.InstructionPoly_wrap_WaitInstruction(inner_waypoint)

def InstructionPoly_as_WaitInstruction(_self):
    return _tesseract_command_language_python.InstructionPoly_as_WaitInstruction(_self)

def AnyPoly_wrap_WaitInstruction(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_WaitInstruction(inner_waypoint)

def AnyPoly_as_WaitInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_as_WaitInstruction(_self)

def AnyPoly_is_WaitInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_is_WaitInstruction(_self)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SetToolInstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.SetToolInstruction_swiginit(self, _tesseract_command_language_python.new_SetToolInstruction(*args))

    def getUUID(self):
        return _tesseract_command_language_python.SetToolInstruction_getUUID(self)

    def setUUID(self, uuid):
        return _tesseract_command_language_python.SetToolInstruction_setUUID(self, uuid)

    def regenerateUUID(self):
        return _tesseract_command_language_python.SetToolInstruction_regenerateUUID(self)

    def getParentUUID(self):
        return _tesseract_command_language_python.SetToolInstruction_getParentUUID(self)

    def setParentUUID(self, uuid):
        return _tesseract_command_language_python.SetToolInstruction_setParentUUID(self, uuid)

    def getDescription(self):
        return _tesseract_command_language_python.SetToolInstruction_getDescription(self)

    def setDescription(self, description):
        return _tesseract_command_language_python.SetToolInstruction_setDescription(self, description)

    def _print(self, *args):
        return _tesseract_command_language_python.SetToolInstruction__print(self, *args)

    def getTool(self):
        r"""
        Get the tool ID
        :rtype: int
        :return: The tool ID
        """
        return _tesseract_command_language_python.SetToolInstruction_getTool(self)

    def __eq__(self, rhs):
        r"""
        Equal operator. Does not compare descriptions
        :type rhs: :py:class:`SetToolInstruction`
        :param rhs: SetToolInstruction
        :rtype: boolean
        :return: True if equal, otherwise false
        """
        return _tesseract_command_language_python.SetToolInstruction___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        Not equal operator. Does not compare descriptions
        :type rhs: :py:class:`SetToolInstruction`
        :param rhs: SetToolInstruction
        :rtype: boolean
        :return: True if not equal, otherwise false
        """
        return _tesseract_command_language_python.SetToolInstruction___ne__(self, rhs)
    __swig_destroy__ = _tesseract_command_language_python.delete_SetToolInstruction

# Register SetToolInstruction in _tesseract_command_language_python:
_tesseract_command_language_python.SetToolInstruction_swigregister(SetToolInstruction)

def InstructionPoly_wrap_SetToolInstruction(inner_waypoint):
    return _tesseract_command_language_python.InstructionPoly_wrap_SetToolInstruction(inner_waypoint)

def InstructionPoly_as_SetToolInstruction(_self):
    return _tesseract_command_language_python.InstructionPoly_as_SetToolInstruction(_self)

def AnyPoly_wrap_SetToolInstruction(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_SetToolInstruction(inner_waypoint)

def AnyPoly_as_SetToolInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_as_SetToolInstruction(_self)

def AnyPoly_is_SetToolInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_is_SetToolInstruction(_self)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SetAnalogInstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.SetAnalogInstruction_swiginit(self, _tesseract_command_language_python.new_SetAnalogInstruction(*args))

    def getUUID(self):
        return _tesseract_command_language_python.SetAnalogInstruction_getUUID(self)

    def setUUID(self, uuid):
        return _tesseract_command_language_python.SetAnalogInstruction_setUUID(self, uuid)

    def regenerateUUID(self):
        return _tesseract_command_language_python.SetAnalogInstruction_regenerateUUID(self)

    def getParentUUID(self):
        return _tesseract_command_language_python.SetAnalogInstruction_getParentUUID(self)

    def setParentUUID(self, uuid):
        return _tesseract_command_language_python.SetAnalogInstruction_setParentUUID(self, uuid)

    def getDescription(self):
        return _tesseract_command_language_python.SetAnalogInstruction_getDescription(self)

    def setDescription(self, description):
        return _tesseract_command_language_python.SetAnalogInstruction_setDescription(self, description)

    def _print(self, *args):
        return _tesseract_command_language_python.SetAnalogInstruction__print(self, *args)

    def getKey(self):
        r""" Get the analog key"""
        return _tesseract_command_language_python.SetAnalogInstruction_getKey(self)

    def getIndex(self):
        r""" Get the analog index"""
        return _tesseract_command_language_python.SetAnalogInstruction_getIndex(self)

    def getValue(self):
        r""" Get the analgo value"""
        return _tesseract_command_language_python.SetAnalogInstruction_getValue(self)

    def __eq__(self, rhs):
        r"""
        Equal operator. Does not compare descriptions
        :type rhs: :py:class:`SetAnalogInstruction`
        :param rhs: SetAnalogInstruction
        :rtype: boolean
        :return: True if equal, otherwise false
        """
        return _tesseract_command_language_python.SetAnalogInstruction___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        Not equal operator. Does not compare descriptions
        :type rhs: :py:class:`SetAnalogInstruction`
        :param rhs: SetAnalogInstruction
        :rtype: boolean
        :return: True if not equal, otherwise false
        """
        return _tesseract_command_language_python.SetAnalogInstruction___ne__(self, rhs)
    __swig_destroy__ = _tesseract_command_language_python.delete_SetAnalogInstruction

# Register SetAnalogInstruction in _tesseract_command_language_python:
_tesseract_command_language_python.SetAnalogInstruction_swigregister(SetAnalogInstruction)

def InstructionPoly_wrap_SetAnalogInstruction(inner_waypoint):
    return _tesseract_command_language_python.InstructionPoly_wrap_SetAnalogInstruction(inner_waypoint)

def InstructionPoly_as_SetAnalogInstruction(_self):
    return _tesseract_command_language_python.InstructionPoly_as_SetAnalogInstruction(_self)

def AnyPoly_wrap_SetAnalogInstruction(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_SetAnalogInstruction(inner_waypoint)

def AnyPoly_as_SetAnalogInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_as_SetAnalogInstruction(_self)

def AnyPoly_is_SetAnalogInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_is_SetAnalogInstruction(_self)
CompositeInstructionOrder_ORDERED = _tesseract_command_language_python.CompositeInstructionOrder_ORDERED
CompositeInstructionOrder_UNORDERED = _tesseract_command_language_python.CompositeInstructionOrder_UNORDERED
CompositeInstructionOrder_ORDERED_AND_REVERABLE = _tesseract_command_language_python.CompositeInstructionOrder_ORDERED_AND_REVERABLE
@_swig_add_metaclass(_SwigNonDynamicMeta)
class CompositeInstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_command_language_python.CompositeInstruction_swiginit(self, _tesseract_command_language_python.new_CompositeInstruction(*args))

    def getOrder(self):
        return _tesseract_command_language_python.CompositeInstruction_getOrder(self)

    def getUUID(self):
        return _tesseract_command_language_python.CompositeInstruction_getUUID(self)

    def regenerateUUID(self):
        return _tesseract_command_language_python.CompositeInstruction_regenerateUUID(self)

    def getParentUUID(self):
        return _tesseract_command_language_python.CompositeInstruction_getParentUUID(self)

    def setParentUUID(self, uuid):
        return _tesseract_command_language_python.CompositeInstruction_setParentUUID(self, uuid)

    def setDescription(self, description):
        return _tesseract_command_language_python.CompositeInstruction_setDescription(self, description)

    def getDescription(self):
        return _tesseract_command_language_python.CompositeInstruction_getDescription(self)

    def setProfile(self, profile):
        return _tesseract_command_language_python.CompositeInstruction_setProfile(self, profile)

    def getProfile(self):
        return _tesseract_command_language_python.CompositeInstruction_getProfile(self)

    def setProfileOverrides(self, profile_overrides):
        r""" Dictionary of profiles that will override named profiles for a specific task"""
        return _tesseract_command_language_python.CompositeInstruction_setProfileOverrides(self, profile_overrides)

    def getProfileOverrides(self):
        return _tesseract_command_language_python.CompositeInstruction_getProfileOverrides(self)

    def setManipulatorInfo(self, info):
        return _tesseract_command_language_python.CompositeInstruction_setManipulatorInfo(self, info)

    def getManipulatorInfo(self, *args):
        return _tesseract_command_language_python.CompositeInstruction_getManipulatorInfo(self, *args)

    def setInstructions(self, instructions):
        return _tesseract_command_language_python.CompositeInstruction_setInstructions(self, instructions)

    def getInstructions(self, *args):
        return _tesseract_command_language_python.CompositeInstruction_getInstructions(self, *args)

    def appendMoveInstruction(self, *args):
        return _tesseract_command_language_python.CompositeInstruction_appendMoveInstruction(self, *args)

    def _print(self, *args):
        return _tesseract_command_language_python.CompositeInstruction__print(self, *args)

    def __eq__(self, rhs):
        return _tesseract_command_language_python.CompositeInstruction___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_command_language_python.CompositeInstruction___ne__(self, rhs)

    def getFirstMoveInstruction(self, *args):
        r"""
        *Overload 1:*

        Get the first Move Instruction in a Composite Instruction
        This does not consider the start instruction in child composite instruction
        :param composite_instruction: Composite Instruction to search
        :rtype: :py:class:`MoveInstructionPoly`
        :return: The first Move Instruction (Non-Const)

        |

        *Overload 2:*

        Get the first Move Instruction in a Composite Instruction
        This does not consider the start instruction in child composite instruction
        :param composite_instruction: Composite Instruction to search
        :rtype: :py:class:`MoveInstructionPoly`
        :return: The first Move Instruction (Const)
        """
        return _tesseract_command_language_python.CompositeInstruction_getFirstMoveInstruction(self, *args)

    def getLastMoveInstruction(self, *args):
        r"""
        *Overload 1:*

        Get the last Move Instruction in a Composite Instruction
        This does not consider the start instruction in child composite instruction
        :param composite_instruction: Composite Instruction to search
        :rtype: :py:class:`MoveInstructionPoly`
        :return: The last Move Instruction (Non-Const)

        |

        *Overload 2:*

        Get the last Move Instruction in a Composite Instruction
        This does not consider the start instruction in child composite instruction
        :param composite_instruction: Composite Instruction to search
        :rtype: :py:class:`MoveInstructionPoly`
        :return: The last Move Instruction (Const)
        """
        return _tesseract_command_language_python.CompositeInstruction_getLastMoveInstruction(self, *args)

    def getMoveInstructionCount(self):
        r"""
        Get number of Move Instruction in a Composite Instruction
        This does not consider the start instruction in the child composite instruction
        :param composite_instruction: The Composite Instruction to process
        :rtype: int
        :return: The number of Move Instructions
        """
        return _tesseract_command_language_python.CompositeInstruction_getMoveInstructionCount(self)

    def getFirstInstruction(self, *args):
        r"""
        *Overload 1:*

        Get the first Instruction in a Composite Instruction that is identified by the filter
        :param composite_instruction: Composite Instruction to search
        :param locate_filter: The filter to indicate if an instruction should be considered
        :param process_child_composites: Indicate if child Composite Instructions should be searched
        :rtype: :py:class:`InstructionPoly`
        :return: The first Instruction (Const)

        |

        *Overload 2:*

        Get the first Instruction in a Composite Instruction that is identified by the filter
        :param composite_instruction: Composite Instruction to search
        :param locate_filter: The filter to indicate if an instruction should be considered
        :param process_child_composites: Indicate if child Composite Instructions should be searched
        :rtype: :py:class:`InstructionPoly`
        :return: The first Instruction (Non-Const)
        """
        return _tesseract_command_language_python.CompositeInstruction_getFirstInstruction(self, *args)

    def getLastInstruction(self, *args):
        r"""
        *Overload 1:*

        Get the last Instruction in a Composite Instruction that is identified by the filter
        :param composite_instruction: Composite Instruction to search
        :param locate_filter: The filter to indicate if an instruction should be considered
        :param process_child_composites: Indicate if child Composite Instructions should be searched
        :rtype: :py:class:`InstructionPoly`
        :return: The Last Instruction (Const)

        |

        *Overload 2:*

        Get the last Instruction in a Composite Instruction that is identified by the filter
        :param composite_instruction: Composite Instruction to search
        :param locate_filter: The filter to indicate if an instruction should be considered
        :param process_child_composites: Indicate if child Composite Instructions should be searched
        :rtype: :py:class:`InstructionPoly`
        :return: The Last Instruction (Non-Const)
        """
        return _tesseract_command_language_python.CompositeInstruction_getLastInstruction(self, *args)

    def getInstructionCount(self):
        r"""
        Get number of Instruction in a Composite Instruction
        :param composite_instruction: The Composite Instruction to process
        :param locate_filter: The filter to indicate if an instruction should be considered
        :param process_child_composites: Indicate if child Composite Instructions should be searched
        :rtype: int
        :return: The number of Instructions
        """
        return _tesseract_command_language_python.CompositeInstruction_getInstructionCount(self)

    def flatten(self, *args):
        r"""
        *Overload 1:*

        Flattens a CompositeInstruction into a vector of Instruction
        :param composite_instruction: Input composite instruction to be flattened
        :param filter: Used to filter only what should be considered. Should return true to include otherwise false
        :rtype: std::vector< std::reference_wrapper< tesseract_planning::InstructionPoly >,std::allocator< std::reference_wrapper< tesseract_planning::InstructionPoly > > >
        :return: A new flattened vector referencing the original instruction elements

        |

        *Overload 2:*

        Flattens a CompositeInstruction into a vector of Instruction
        :param instruction: Input composite instruction to be flattened
        :param filter: Used to filter only what should be considered. Should return true to include otherwise false
        :rtype: std::vector< std::reference_wrapper< tesseract_planning::InstructionPoly const >,std::allocator< std::reference_wrapper< tesseract_planning::InstructionPoly const > > >
        :return: A new flattened vector referencing the original instruction elements
        """
        return _tesseract_command_language_python.CompositeInstruction_flatten(self, *args)

    def iterator(self):
        return _tesseract_command_language_python.CompositeInstruction_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_command_language_python.CompositeInstruction___nonzero__(self)

    def __bool__(self):
        return _tesseract_command_language_python.CompositeInstruction___bool__(self)

    def __len__(self):
        return _tesseract_command_language_python.CompositeInstruction___len__(self)

    def __getslice__(self, i, j):
        return _tesseract_command_language_python.CompositeInstruction___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tesseract_command_language_python.CompositeInstruction___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tesseract_command_language_python.CompositeInstruction___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tesseract_command_language_python.CompositeInstruction___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tesseract_command_language_python.CompositeInstruction___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tesseract_command_language_python.CompositeInstruction___setitem__(self, *args)

    def pop(self):
        return _tesseract_command_language_python.CompositeInstruction_pop(self)

    def append(self, x):
        return _tesseract_command_language_python.CompositeInstruction_append(self, x)

    def empty(self):
        return _tesseract_command_language_python.CompositeInstruction_empty(self)

    def size(self):
        return _tesseract_command_language_python.CompositeInstruction_size(self)

    def begin(self):
        return _tesseract_command_language_python.CompositeInstruction_begin(self)

    def end(self):
        return _tesseract_command_language_python.CompositeInstruction_end(self)

    def rbegin(self):
        return _tesseract_command_language_python.CompositeInstruction_rbegin(self)

    def rend(self):
        return _tesseract_command_language_python.CompositeInstruction_rend(self)

    def clear(self):
        return _tesseract_command_language_python.CompositeInstruction_clear(self)

    def pop_back(self):
        return _tesseract_command_language_python.CompositeInstruction_pop_back(self)

    def erase(self, *args):
        return _tesseract_command_language_python.CompositeInstruction_erase(self, *args)

    def push_back(self, x):
        return _tesseract_command_language_python.CompositeInstruction_push_back(self, x)

    def front(self):
        return _tesseract_command_language_python.CompositeInstruction_front(self)

    def back(self):
        return _tesseract_command_language_python.CompositeInstruction_back(self)

    def reserve(self, n):
        return _tesseract_command_language_python.CompositeInstruction_reserve(self, n)

    def capacity(self):
        return _tesseract_command_language_python.CompositeInstruction_capacity(self)
    __swig_destroy__ = _tesseract_command_language_python.delete_CompositeInstruction

# Register CompositeInstruction in _tesseract_command_language_python:
_tesseract_command_language_python.CompositeInstruction_swigregister(CompositeInstruction)

def InstructionPoly_wrap_CompositeInstruction(inner_waypoint):
    return _tesseract_command_language_python.InstructionPoly_wrap_CompositeInstruction(inner_waypoint)

def InstructionPoly_as_CompositeInstruction(_self):
    return _tesseract_command_language_python.InstructionPoly_as_CompositeInstruction(_self)

def AnyPoly_wrap_CompositeInstruction(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_CompositeInstruction(inner_waypoint)

def AnyPoly_as_CompositeInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_as_CompositeInstruction(_self)

def AnyPoly_is_CompositeInstruction(_self):
    return _tesseract_command_language_python.AnyPoly_is_CompositeInstruction(_self)

def toJointTrajectory(*args):
    r"""
    *Overload 1:*

    Convert instruction to a joint trajectory
    This searches for both move instructions. If it contains a Cartesian waypoint it is skipped.
    :type instruction: :py:class:`InstructionPoly`
    :param instruction: The instruction to convert
    :rtype: :py:class:`JointTrajectory`
    :return: A joint trajectory

    |

    *Overload 2:*

    Convert composite instruction to a joint trajectory
    This searches for both move and plan instruction to support converting both input and results to planning
    requests. If it contains a Cartesian waypoint it is skipped.
    :type composite_instructions: :py:class:`CompositeInstruction`
    :param composite_instructions: The composite instruction to convert
    :rtype: :py:class:`JointTrajectory`
    :return: A joint trajectory
    """
    return _tesseract_command_language_python.toJointTrajectory(*args)

def getJointNames(waypoint):
    r"""
    Gets joint names from waypoints that contain that information.

    Throws if waypoint does not directly contain that information

    :type waypoint: :py:class:`WaypointPoly`
    :param waypoint: The waypoint to try and extract the joint position from
    :rtype: std::vector< std::string,std::allocator< std::string > >
    :return: The joint names
    """
    return _tesseract_command_language_python.getJointNames(waypoint)

def getJointPosition(*args):
    r"""
    *Overload 1:*

    Gets joint position from waypoints that contain that information.

    Throws if waypoint does not directly contain that information
    :type waypoint: :py:class:`WaypointPoly`
    :param waypoint: The waypoint to try and extract the joint position from
    :rtype: Eigen::VectorXd
    :return: The joint values

    |

    *Overload 2:*

    Get the joint positions ordered by the provided joint names

    Throws if waypoint does not directly contain that information

    Also this is an expensive call so the motion planners do not leverage this and they expect the order through out
    the program all match.

    :type joint_names: std::vector< std::string,std::allocator< std::string > >
    :param joint_names: The joint names defining the order desired
    :type waypoint: :py:class:`WaypointPoly`
    :param waypoint: The waypoint to
    :rtype: Eigen::VectorXd
    :return: The joint values ordered by the provided joint_names
    """
    return _tesseract_command_language_python.getJointPosition(*args)

def formatJointPosition(joint_names, waypoint):
    r"""
    Format the waypoints joint ordered by the provided joint names

    Throws if waypoint does not directly contain that information

    Also this is an expensive call so the motion planners do not leverage this and they expect the order through out
    the program all match.

    :type joint_names: std::vector< std::string,std::allocator< std::string > >
    :param joint_names: The joint names defining the order desired
    :type waypoint: :py:class:`WaypointPoly`
    :param waypoint: The waypoint to format
    :rtype: boolean
    :return: True if formatting was required, otherwise false.
    """
    return _tesseract_command_language_python.formatJointPosition(joint_names, waypoint)

def checkJointPositionFormat(joint_names, waypoint):
    r"""
    Check the waypoints joint order against the provided joint names

    Throws if waypoint does not directly contain that information

    Also this is an expensive call so the motion planners do not leverage this and they expect the order through out
    the program all match.

    :type joint_names: std::vector< std::string,std::allocator< std::string > >
    :param joint_names: The joint names defining the order desired
    :type waypoint: :py:class:`WaypointPoly`
    :param waypoint: The waypoint to check format
    :rtype: boolean
    :return: True if waypoint format is correct, otherwise false.
    """
    return _tesseract_command_language_python.checkJointPositionFormat(joint_names, waypoint)

def setJointPosition(waypoint, position):
    r"""
    Set the joint position for waypoints that contain that information
    :type waypoint: :py:class:`WaypointPoly`
    :param waypoint: Waypoint to set
    :type position: Eigen::Ref< Eigen::VectorXd const >
    :param position: Joint position
    :rtype: boolean
    :return: true if successful (if the waypoint is a supported type)
    """
    return _tesseract_command_language_python.setJointPosition(waypoint, position)

def isWithinJointLimits(wp, limits):
    r"""
    Checks if a waypoint is
    :type wp: :py:class:`WaypointPoly`
    :param wp: Waypoint to be checked. Only checks if a JointPosition or State waypoint (otherwise returns true)
    :type limits: Eigen::Ref< Eigen::MatrixX2d const >
    :param limits: Matrix2d of limits with first column being lower limits and second column being upper limits
    :rtype: boolean
    :return: True if the waypoit falls within the joint limits
    """
    return _tesseract_command_language_python.isWithinJointLimits(wp, limits)

def clampToJointLimits(wp, limits, max_deviation):
    r"""
    Clamps a waypoint to be within joint limits
    :type wp: :py:class:`WaypointPoly`
    :param wp: Waypoint to be adjusted. Does nothing if not a JointPosition or State waypoint
    :type limits: Eigen::Ref< Eigen::MatrixX2d const >
    :param limits: Matrix2d of limits with first column being lower limits and second column being upper limits
    :type max_deviation: Eigen::Ref< Eigen::VectorXd const >
    :param max_deviation:. Max deviation that will be clamped
    :rtype: boolean
    :return: True if successful or if the waypoint doesn't contain that information.

    Clamps a waypoint to be within joint limits
    :type wp: :py:class:`WaypointPoly`
    :param wp: Waypoint to be adjusted. Does nothing if not a JointPosition or State waypoint
    :type limits: Eigen::Ref< Eigen::MatrixX2d const >
    :param limits: Matrix2d of limits with first column being lower limits and second column being upper limits
    :type max_deviation: Eigen::Ref< Eigen::VectorXd const >
    :param max_deviation:. Max deviation that will be clamped
    :rtype: boolean
    :return: True if successful or if the waypoint doesn't contain that information.
    """
    return _tesseract_command_language_python.clampToJointLimits(wp, limits, max_deviation)

def toDelimitedFile(*args):
    r"""
    Convert a CompositeInstruction to delimited formate file by extracting all MoveInstructions
    :type composite_instructions: :py:class:`CompositeInstruction`
    :param composite_instructions: The CompositeInstruction to extract data from
    :type file_path: string
    :param file_path: The location to save the file
    :type separator: char, optional
    :param separator: The separator to use
    :rtype: boolean
    :return: true if successful
    """
    return _tesseract_command_language_python.toDelimitedFile(*args)

def AnyPoly_wrap_ProfileDictionary(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_ProfileDictionary(inner_waypoint)

def AnyPoly_wrap_ProfileDictionaryConst(inner_waypoint):
    return _tesseract_command_language_python.AnyPoly_wrap_ProfileDictionaryConst(inner_waypoint)

def AnyPoly_as_ProfileDictionary(_self):
    return _tesseract_command_language_python.AnyPoly_as_ProfileDictionary(_self)

def AnyPoly_as_ProfileDictionaryConst(_self):
    return _tesseract_command_language_python.AnyPoly_as_ProfileDictionaryConst(_self)

def AnyPoly_is_ProfileDictionary(_self):
    return _tesseract_command_language_python.AnyPoly_is_ProfileDictionary(_self)

def AnyPoly_is_ProfileDictionaryConst(_self):
    return _tesseract_command_language_python.AnyPoly_is_ProfileDictionaryConst(_self)

cvar = _tesseract_command_language_python.cvar
DEFAULT_PROFILE_KEY = cvar.DEFAULT_PROFILE_KEY

