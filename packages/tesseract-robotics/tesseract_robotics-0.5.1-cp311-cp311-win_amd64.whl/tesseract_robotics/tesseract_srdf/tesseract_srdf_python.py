# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_srdf_python
else:
    import _tesseract_srdf_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_srdf_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_srdf_python.delete_SwigPyIterator

    def value(self):
        return _tesseract_srdf_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tesseract_srdf_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tesseract_srdf_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tesseract_srdf_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tesseract_srdf_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tesseract_srdf_python.SwigPyIterator_copy(self)

    def next(self):
        return _tesseract_srdf_python.SwigPyIterator_next(self)

    def __next__(self):
        return _tesseract_srdf_python.SwigPyIterator___next__(self)

    def previous(self):
        return _tesseract_srdf_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tesseract_srdf_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tesseract_srdf_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tesseract_srdf_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tesseract_srdf_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tesseract_srdf_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tesseract_srdf_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tesseract_srdf_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_srdf_python:
_tesseract_srdf_python.SwigPyIterator_swigregister(SwigPyIterator)
import tesseract_robotics.tesseract_scene_graph.tesseract_scene_graph_python
import tesseract_robotics.tesseract_geometry.tesseract_geometry_python
import tesseract_robotics.tesseract_common.tesseract_common_python
@_swig_add_metaclass(_SwigNonDynamicMeta)
class KinematicsInformation(object):
    r"""
    This hold the kinematics information used to create the SRDF and is the data
    container for the manipulator manager.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    group_names = property(_tesseract_srdf_python.KinematicsInformation_group_names_get, _tesseract_srdf_python.KinematicsInformation_group_names_set, doc=r""" A set of group names""")
    chain_groups = property(_tesseract_srdf_python.KinematicsInformation_chain_groups_get, _tesseract_srdf_python.KinematicsInformation_chain_groups_set, doc=r""" A map of chains groups""")
    joint_groups = property(_tesseract_srdf_python.KinematicsInformation_joint_groups_get, _tesseract_srdf_python.KinematicsInformation_joint_groups_set, doc=r""" A map of joint groups""")
    link_groups = property(_tesseract_srdf_python.KinematicsInformation_link_groups_get, _tesseract_srdf_python.KinematicsInformation_link_groups_set, doc=r""" A map of link groups""")
    group_states = property(_tesseract_srdf_python.KinematicsInformation_group_states_get, _tesseract_srdf_python.KinematicsInformation_group_states_set, doc=r""" A map of group states""")
    group_tcps = property(_tesseract_srdf_python.KinematicsInformation_group_tcps_get, _tesseract_srdf_python.KinematicsInformation_group_tcps_set, doc=r""" A map of group tool center points""")
    kinematics_plugin_info = property(_tesseract_srdf_python.KinematicsInformation_kinematics_plugin_info_get, _tesseract_srdf_python.KinematicsInformation_kinematics_plugin_info_set, doc=r""" The kinematics plugin information""")

    def insert(self, other):
        r""" Insert the content of an other KinematicsInformation"""
        return _tesseract_srdf_python.KinematicsInformation_insert(self, other)

    def clear(self):
        r""" Clear the kinematics information"""
        return _tesseract_srdf_python.KinematicsInformation_clear(self)

    def hasGroup(self, group_name):
        r""" Check if group exists"""
        return _tesseract_srdf_python.KinematicsInformation_hasGroup(self, group_name)

    def addChainGroup(self, group_name, chain_group):
        r""" Add chain group"""
        return _tesseract_srdf_python.KinematicsInformation_addChainGroup(self, group_name, chain_group)

    def removeChainGroup(self, group_name):
        r""" Remove chain group"""
        return _tesseract_srdf_python.KinematicsInformation_removeChainGroup(self, group_name)

    def hasChainGroup(self, group_name):
        r""" Check if chain group exists"""
        return _tesseract_srdf_python.KinematicsInformation_hasChainGroup(self, group_name)

    def addJointGroup(self, group_name, joint_group):
        r""" Add joint group"""
        return _tesseract_srdf_python.KinematicsInformation_addJointGroup(self, group_name, joint_group)

    def removeJointGroup(self, group_name):
        r""" Remove joint group"""
        return _tesseract_srdf_python.KinematicsInformation_removeJointGroup(self, group_name)

    def hasJointGroup(self, group_name):
        r""" Check if joint group exists"""
        return _tesseract_srdf_python.KinematicsInformation_hasJointGroup(self, group_name)

    def addLinkGroup(self, group_name, link_group):
        r""" Add link group"""
        return _tesseract_srdf_python.KinematicsInformation_addLinkGroup(self, group_name, link_group)

    def removeLinkGroup(self, group_name):
        r""" Remove link group"""
        return _tesseract_srdf_python.KinematicsInformation_removeLinkGroup(self, group_name)

    def hasLinkGroup(self, group_name):
        r""" Check if link group exists"""
        return _tesseract_srdf_python.KinematicsInformation_hasLinkGroup(self, group_name)

    def addGroupJointState(self, group_name, state_name, joint_state):
        r""" Add group joint state"""
        return _tesseract_srdf_python.KinematicsInformation_addGroupJointState(self, group_name, state_name, joint_state)

    def removeGroupJointState(self, group_name, state_name):
        r""" Remove group joint state"""
        return _tesseract_srdf_python.KinematicsInformation_removeGroupJointState(self, group_name, state_name)

    def hasGroupJointState(self, group_name, state_name):
        r""" Check if group joint state exists"""
        return _tesseract_srdf_python.KinematicsInformation_hasGroupJointState(self, group_name, state_name)

    def addGroupTCP(self, group_name, tcp_name, tcp):
        r""" Add group tool center point"""
        return _tesseract_srdf_python.KinematicsInformation_addGroupTCP(self, group_name, tcp_name, tcp)

    def removeGroupTCP(self, group_name, tcp_name):
        r""" Remove group tool center point"""
        return _tesseract_srdf_python.KinematicsInformation_removeGroupTCP(self, group_name, tcp_name)

    def hasGroupTCP(self, group_name, tcp_name):
        r""" Check if group tool center point exists"""
        return _tesseract_srdf_python.KinematicsInformation_hasGroupTCP(self, group_name, tcp_name)

    def __eq__(self, rhs):
        return _tesseract_srdf_python.KinematicsInformation___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_srdf_python.KinematicsInformation___ne__(self, rhs)

    def __init__(self):
        _tesseract_srdf_python.KinematicsInformation_swiginit(self, _tesseract_srdf_python.new_KinematicsInformation())
    __swig_destroy__ = _tesseract_srdf_python.delete_KinematicsInformation

# Register KinematicsInformation in _tesseract_srdf_python:
_tesseract_srdf_python.KinematicsInformation_swigregister(KinematicsInformation)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SRDFModel(object):
    r""" Representation of semantic information about the robot"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_srdf_python.delete_SRDFModel

    def __init__(self, *args):
        _tesseract_srdf_python.SRDFModel_swiginit(self, _tesseract_srdf_python.new_SRDFModel(*args))

    def initFile(self, scene_graph, filename, locator):
        r"""
        Load Model given a filename
        :raises: std::nested_exception if an error occurs during parsing srdf
        """
        return _tesseract_srdf_python.SRDFModel_initFile(self, scene_graph, filename, locator)

    def initString(self, scene_graph, xmlstring, locator):
        r"""
        Load Model from a XML-string
        :raises: std::nested_exception if an error occurs during parsing srdf
        """
        return _tesseract_srdf_python.SRDFModel_initString(self, scene_graph, xmlstring, locator)

    def saveToFile(self, file_path):
        r""" Save the model to a file"""
        return _tesseract_srdf_python.SRDFModel_saveToFile(self, file_path)

    def clear(self):
        r""" Clear the model"""
        return _tesseract_srdf_python.SRDFModel_clear(self)
    name = property(_tesseract_srdf_python.SRDFModel_name_get, _tesseract_srdf_python.SRDFModel_name_set, doc=r""" The name of the srdf model""")
    version = property(_tesseract_srdf_python.SRDFModel_version_get, _tesseract_srdf_python.SRDFModel_version_set, doc=r""" The version number major.minor[.patch]""")
    kinematics_information = property(_tesseract_srdf_python.SRDFModel_kinematics_information_get, _tesseract_srdf_python.SRDFModel_kinematics_information_set, doc=r""" Contact information related to kinematics""")
    contact_managers_plugin_info = property(_tesseract_srdf_python.SRDFModel_contact_managers_plugin_info_get, _tesseract_srdf_python.SRDFModel_contact_managers_plugin_info_set, doc=r""" The contact managers plugin information""")
    acm = property(_tesseract_srdf_python.SRDFModel_acm_get, _tesseract_srdf_python.SRDFModel_acm_set, doc=r""" The allowed collision matrix""")
    collision_margin_data = property(_tesseract_srdf_python.SRDFModel_collision_margin_data_get, _tesseract_srdf_python.SRDFModel_collision_margin_data_set, doc=r""" Collision margin data""")
    calibration_info = property(_tesseract_srdf_python.SRDFModel_calibration_info_get, _tesseract_srdf_python.SRDFModel_calibration_info_set, doc=r""" The calibration information""")

    def __eq__(self, rhs):
        return _tesseract_srdf_python.SRDFModel___eq__(self, rhs)

    def __ne__(self, rhs):
        return _tesseract_srdf_python.SRDFModel___ne__(self, rhs)

# Register SRDFModel in _tesseract_srdf_python:
_tesseract_srdf_python.SRDFModel_swigregister(SRDFModel)

def processSRDFAllowedCollisions(scene_graph, srdf_model):
    r"""
    Add allowed collisions to the scene graph
    :type scene_graph: :py:class:`SceneGraph`
    :param scene_graph: The scene graph to add allowed collisions data
    :type srdf_model: :py:class:`SRDFModel`
    :param srdf_model: The srdf model to extract allowed collisions
    """
    return _tesseract_srdf_python.processSRDFAllowedCollisions(scene_graph, srdf_model)

def compareLinkPairAlphabetically(pair1, pair2):
    r"""
    Used to sort a pair of strings alphabetically - first by the pair.first and then by pair.second
    :type pair1: std::reference_wrapper< tesseract_common::LinkNamesPair const >
    :param pair1: First pair of strings
    :type pair2: std::reference_wrapper< tesseract_common::LinkNamesPair const >
    :param pair2: Second pair of strings
    :rtype: boolean
    :return: True if pair1 should go before pair2 (is closer to A)
    """
    return _tesseract_srdf_python.compareLinkPairAlphabetically(pair1, pair2)

def getAlphabeticalACMKeys(allowed_collision_entries):
    r"""
    Returns an alphabetically sorted vector of ACM keys (the link pairs)
    :type allowed_collision_entries: :py:class:`AllowedCollisionEntries`
    :param allowed_collision_entries: Entries to be sorted
    :rtype: std::vector< std::reference_wrapper< tesseract_common::LinkNamesPair const >,std::allocator< std::reference_wrapper< tesseract_common::LinkNamesPair const > > >
    :return: An alphabetically sorted vector of ACM keys (the link pairs)
    """
    return _tesseract_srdf_python.getAlphabeticalACMKeys(allowed_collision_entries)

def parseCalibrationConfigString(scene_graph, yaml_str):
    return _tesseract_srdf_python.parseCalibrationConfigString(scene_graph, yaml_str)

def parseKinematicsPluginConfigString(yaml_str):
    return _tesseract_srdf_python.parseKinematicsPluginConfigString(yaml_str)

def parseContactManagersPluginConfigString(yaml_str):
    return _tesseract_srdf_python.parseContactManagersPluginConfigString(yaml_str)

