# Generated from PS.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,191,1002,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,1,0,3,0,168,8,0,1,0,1,0,
        1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,182,8,3,1,4,1,4,1,4,
        1,4,3,4,188,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,
        3,7,202,8,7,1,8,1,8,1,8,5,8,207,8,8,10,8,12,8,210,9,8,1,9,1,9,1,
        9,1,9,5,9,216,8,9,10,9,12,9,219,9,9,1,9,3,9,222,8,9,1,9,1,9,1,9,
        1,9,1,9,1,9,5,9,230,8,9,10,9,12,9,233,9,9,1,9,3,9,236,8,9,1,9,1,
        9,3,9,240,8,9,1,9,1,9,1,9,1,9,1,9,3,9,247,8,9,1,9,1,9,1,9,1,9,3,
        9,253,8,9,1,10,1,10,1,10,1,10,5,10,259,8,10,10,10,12,10,262,9,10,
        1,10,3,10,265,8,10,1,10,1,10,1,11,1,11,1,11,5,11,272,8,11,10,11,
        12,11,275,9,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,283,8,12,10,12,
        12,12,286,9,12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,5,15,300,8,15,10,15,12,15,303,9,15,1,16,1,16,1,16,1,16,
        1,16,1,16,5,16,311,8,16,10,16,12,16,314,9,16,1,17,1,17,1,17,1,17,
        1,17,1,17,5,17,322,8,17,10,17,12,17,325,9,17,1,18,1,18,1,18,4,18,
        330,8,18,11,18,12,18,331,3,18,334,8,18,1,19,1,19,1,19,1,19,5,19,
        340,8,19,10,19,12,19,343,9,19,3,19,345,8,19,1,20,1,20,5,20,349,8,
        20,10,20,12,20,352,9,20,1,21,1,21,5,21,356,8,21,10,21,12,21,359,
        9,21,1,22,1,22,1,22,1,22,3,22,365,8,22,1,23,1,23,1,23,1,23,1,23,
        1,23,3,23,373,8,23,1,24,1,24,1,24,1,24,3,24,379,8,24,1,24,1,24,1,
        25,1,25,1,25,1,25,3,25,387,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,3,26,401,8,26,1,26,3,26,404,8,26,5,26,
        406,8,26,10,26,12,26,409,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,3,27,421,8,27,1,27,3,27,424,8,27,5,27,426,8,27,10,
        27,12,27,429,9,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,3,28,444,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,3,29,458,8,29,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,488,8,
        30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,500,8,
        31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,3,33,518,8,33,1,34,1,34,1,34,1,34,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,3,35,532,8,35,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,3,36,542,8,36,1,37,1,37,3,37,546,8,37,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,557,8,38,1,39,1,39,1,39,
        1,39,5,39,563,8,39,10,39,12,39,566,9,39,1,39,1,39,1,39,3,39,571,
        8,39,1,40,1,40,3,40,575,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,3,41,585,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        3,43,609,8,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,625,8,48,1,49,1,49,1,49,1,49,1,49,1,49,
        3,49,633,8,49,1,50,1,50,3,50,637,8,50,1,50,3,50,640,8,50,1,50,3,
        50,643,8,50,1,50,3,50,646,8,50,3,50,648,8,50,1,50,1,50,1,50,1,50,
        1,50,3,50,655,8,50,1,50,1,50,3,50,659,8,50,1,50,3,50,662,8,50,1,
        50,3,50,665,8,50,1,50,3,50,668,8,50,3,50,670,8,50,1,50,1,50,1,50,
        1,50,1,50,3,50,677,8,50,1,50,1,50,3,50,681,8,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,3,50,703,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,3,50,726,8,50,1,50,3,50,729,8,50,1,50,1,50,1,50,3,50,734,
        8,50,1,50,1,50,1,50,1,50,1,50,3,50,741,8,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,754,8,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,3,50,764,8,50,3,50,766,8,50,1,51,1,51,1,
        51,1,51,1,51,3,51,773,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,3,52,783,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,
        53,794,8,53,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,1,
        56,3,56,807,8,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,3,58,816,8,58,
        1,58,1,58,3,58,820,8,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,828,8,
        59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,
        62,1,62,1,62,1,62,3,62,846,8,62,1,62,1,62,1,62,5,62,851,8,62,10,
        62,12,62,854,9,62,1,63,1,63,1,63,1,63,1,63,1,63,5,63,862,8,63,10,
        63,12,63,865,9,63,1,64,1,64,1,64,1,64,1,64,1,64,5,64,873,8,64,10,
        64,12,64,876,9,64,1,65,1,65,1,65,1,65,1,65,1,65,5,65,884,8,65,10,
        65,12,65,887,9,65,1,66,1,66,1,66,1,66,1,66,3,66,894,8,66,1,67,1,
        67,1,67,1,67,3,67,900,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,
        69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,920,8,
        69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,3,70,935,8,70,1,71,1,71,1,71,1,71,1,72,1,72,1,73,1,73,1,73,5,
        73,946,8,73,10,73,12,73,949,9,73,1,74,1,74,1,74,5,74,954,8,74,10,
        74,12,74,957,9,74,1,75,1,75,1,75,5,75,962,8,75,10,75,12,75,965,9,
        75,1,76,1,76,1,76,5,76,970,8,76,10,76,12,76,973,9,76,1,77,1,77,1,
        77,3,77,978,8,77,1,78,1,78,1,78,3,78,983,8,78,1,79,1,79,1,79,1,79,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,998,8,80,1,81,
        1,81,1,81,0,10,24,30,32,34,52,54,124,126,128,130,82,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        0,18,1,0,1,4,1,0,5,12,1,0,162,170,1,0,163,164,1,0,24,25,4,0,26,27,
        126,128,132,132,150,150,3,0,157,157,173,174,183,183,3,0,66,89,103,
        104,107,107,2,0,101,102,105,106,6,0,90,95,98,99,108,108,111,112,
        114,117,121,125,4,0,96,97,109,110,113,113,118,120,1,0,64,65,2,0,
        157,157,173,174,2,0,162,163,191,191,1,0,189,190,5,0,28,28,30,30,
        32,32,40,40,42,42,5,0,29,29,31,31,33,33,41,41,43,43,1,0,162,163,
        1082,0,167,1,0,0,0,2,171,1,0,0,0,4,173,1,0,0,0,6,175,1,0,0,0,8,187,
        1,0,0,0,10,191,1,0,0,0,12,195,1,0,0,0,14,201,1,0,0,0,16,203,1,0,
        0,0,18,239,1,0,0,0,20,254,1,0,0,0,22,268,1,0,0,0,24,276,1,0,0,0,
        26,287,1,0,0,0,28,291,1,0,0,0,30,293,1,0,0,0,32,304,1,0,0,0,34,315,
        1,0,0,0,36,333,1,0,0,0,38,344,1,0,0,0,40,346,1,0,0,0,42,353,1,0,
        0,0,44,364,1,0,0,0,46,366,1,0,0,0,48,374,1,0,0,0,50,382,1,0,0,0,
        52,390,1,0,0,0,54,410,1,0,0,0,56,443,1,0,0,0,58,457,1,0,0,0,60,487,
        1,0,0,0,62,499,1,0,0,0,64,501,1,0,0,0,66,517,1,0,0,0,68,519,1,0,
        0,0,70,531,1,0,0,0,72,541,1,0,0,0,74,543,1,0,0,0,76,547,1,0,0,0,
        78,570,1,0,0,0,80,572,1,0,0,0,82,584,1,0,0,0,84,586,1,0,0,0,86,608,
        1,0,0,0,88,610,1,0,0,0,90,612,1,0,0,0,92,614,1,0,0,0,94,616,1,0,
        0,0,96,624,1,0,0,0,98,632,1,0,0,0,100,765,1,0,0,0,102,772,1,0,0,
        0,104,782,1,0,0,0,106,784,1,0,0,0,108,797,1,0,0,0,110,799,1,0,0,
        0,112,806,1,0,0,0,114,808,1,0,0,0,116,810,1,0,0,0,118,821,1,0,0,
        0,120,829,1,0,0,0,122,834,1,0,0,0,124,845,1,0,0,0,126,855,1,0,0,
        0,128,866,1,0,0,0,130,877,1,0,0,0,132,893,1,0,0,0,134,899,1,0,0,
        0,136,901,1,0,0,0,138,919,1,0,0,0,140,934,1,0,0,0,142,936,1,0,0,
        0,144,940,1,0,0,0,146,942,1,0,0,0,148,950,1,0,0,0,150,958,1,0,0,
        0,152,966,1,0,0,0,154,977,1,0,0,0,156,982,1,0,0,0,158,984,1,0,0,
        0,160,997,1,0,0,0,162,999,1,0,0,0,164,168,3,142,71,0,165,168,3,144,
        72,0,166,168,3,124,62,0,167,164,1,0,0,0,167,165,1,0,0,0,167,166,
        1,0,0,0,168,169,1,0,0,0,169,170,5,0,0,1,170,1,1,0,0,0,171,172,7,
        0,0,0,172,3,1,0,0,0,173,174,7,1,0,0,174,5,1,0,0,0,175,176,5,157,
        0,0,176,181,5,148,0,0,177,182,5,160,0,0,178,179,5,34,0,0,179,180,
        5,160,0,0,180,182,5,35,0,0,181,177,1,0,0,0,181,178,1,0,0,0,182,7,
        1,0,0,0,183,188,3,28,14,0,184,188,3,60,30,0,185,188,5,24,0,0,186,
        188,5,25,0,0,187,183,1,0,0,0,187,184,1,0,0,0,187,185,1,0,0,0,187,
        186,1,0,0,0,188,189,1,0,0,0,189,190,3,6,3,0,190,9,1,0,0,0,191,192,
        3,6,3,0,192,193,5,159,0,0,193,194,3,6,3,0,194,11,1,0,0,0,195,196,
        3,6,3,0,196,197,3,8,4,0,197,13,1,0,0,0,198,202,3,12,6,0,199,202,
        3,8,4,0,200,202,3,10,5,0,201,198,1,0,0,0,201,199,1,0,0,0,201,200,
        1,0,0,0,202,15,1,0,0,0,203,208,3,14,7,0,204,205,5,152,0,0,205,207,
        3,14,7,0,206,204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,
        1,0,0,0,209,17,1,0,0,0,210,208,1,0,0,0,211,212,5,140,0,0,212,217,
        3,22,11,0,213,214,5,147,0,0,214,216,3,22,11,0,215,213,1,0,0,0,216,
        219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,221,1,0,0,0,219,
        217,1,0,0,0,220,222,5,147,0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,
        223,1,0,0,0,223,224,5,141,0,0,224,240,1,0,0,0,225,226,5,142,0,0,
        226,231,3,22,11,0,227,228,5,147,0,0,228,230,3,22,11,0,229,227,1,
        0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,235,1,
        0,0,0,233,231,1,0,0,0,234,236,5,147,0,0,235,234,1,0,0,0,235,236,
        1,0,0,0,236,237,1,0,0,0,237,238,5,143,0,0,238,240,1,0,0,0,239,211,
        1,0,0,0,239,225,1,0,0,0,240,252,1,0,0,0,241,246,5,158,0,0,242,243,
        5,40,0,0,243,244,3,16,8,0,244,245,5,41,0,0,245,247,1,0,0,0,246,242,
        1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,5,34,0,0,249,250,
        3,16,8,0,250,251,5,35,0,0,251,253,1,0,0,0,252,241,1,0,0,0,252,253,
        1,0,0,0,253,19,1,0,0,0,254,255,5,144,0,0,255,260,3,22,11,0,256,257,
        5,147,0,0,257,259,3,22,11,0,258,256,1,0,0,0,259,262,1,0,0,0,260,
        258,1,0,0,0,260,261,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,263,
        265,5,147,0,0,264,263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,
        267,5,145,0,0,267,21,1,0,0,0,268,273,3,28,14,0,269,270,5,146,0,0,
        270,272,3,28,14,0,271,269,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,
        0,273,274,1,0,0,0,274,23,1,0,0,0,275,273,1,0,0,0,276,277,6,12,-1,
        0,277,278,3,28,14,0,278,284,1,0,0,0,279,280,10,2,0,0,280,281,7,2,
        0,0,281,283,3,24,12,3,282,279,1,0,0,0,283,286,1,0,0,0,284,282,1,
        0,0,0,284,285,1,0,0,0,285,25,1,0,0,0,286,284,1,0,0,0,287,288,3,28,
        14,0,288,289,7,3,0,0,289,290,3,28,14,0,290,27,1,0,0,0,291,292,3,
        30,15,0,292,29,1,0,0,0,293,294,6,15,-1,0,294,295,3,32,16,0,295,301,
        1,0,0,0,296,297,10,2,0,0,297,298,7,4,0,0,298,300,3,30,15,3,299,296,
        1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,31,1,
        0,0,0,303,301,1,0,0,0,304,305,6,16,-1,0,305,306,3,36,18,0,306,312,
        1,0,0,0,307,308,10,2,0,0,308,309,7,5,0,0,309,311,3,32,16,3,310,307,
        1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,33,1,
        0,0,0,314,312,1,0,0,0,315,316,6,17,-1,0,316,317,3,38,19,0,317,323,
        1,0,0,0,318,319,10,2,0,0,319,320,7,5,0,0,320,322,3,34,17,3,321,318,
        1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,35,1,
        0,0,0,325,323,1,0,0,0,326,327,7,4,0,0,327,334,3,36,18,0,328,330,
        3,40,20,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,
        1,0,0,0,332,334,1,0,0,0,333,326,1,0,0,0,333,329,1,0,0,0,334,37,1,
        0,0,0,335,336,7,4,0,0,336,345,3,38,19,0,337,341,3,40,20,0,338,340,
        3,42,21,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,
        1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,344,335,1,0,0,0,344,337,
        1,0,0,0,345,39,1,0,0,0,346,350,3,52,26,0,347,349,3,44,22,0,348,347,
        1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,41,1,
        0,0,0,352,350,1,0,0,0,353,357,3,54,27,0,354,356,3,44,22,0,355,354,
        1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,43,1,
        0,0,0,359,357,1,0,0,0,360,365,5,171,0,0,361,365,3,46,23,0,362,365,
        3,2,1,0,363,365,3,4,2,0,364,360,1,0,0,0,364,361,1,0,0,0,364,362,
        1,0,0,0,364,363,1,0,0,0,365,45,1,0,0,0,366,372,5,46,0,0,367,373,
        3,50,25,0,368,373,3,48,24,0,369,370,3,50,25,0,370,371,3,48,24,0,
        371,373,1,0,0,0,372,367,1,0,0,0,372,368,1,0,0,0,372,369,1,0,0,0,
        373,47,1,0,0,0,374,375,5,148,0,0,375,378,5,34,0,0,376,379,3,28,14,
        0,377,379,3,26,13,0,378,376,1,0,0,0,378,377,1,0,0,0,379,380,1,0,
        0,0,380,381,5,35,0,0,381,49,1,0,0,0,382,383,5,149,0,0,383,386,5,
        34,0,0,384,387,3,28,14,0,385,387,3,26,13,0,386,384,1,0,0,0,386,385,
        1,0,0,0,387,388,1,0,0,0,388,389,5,35,0,0,389,51,1,0,0,0,390,391,
        6,26,-1,0,391,392,3,56,28,0,392,407,1,0,0,0,393,394,10,2,0,0,394,
        400,5,149,0,0,395,401,3,82,41,0,396,397,5,34,0,0,397,398,3,28,14,
        0,398,399,5,35,0,0,399,401,1,0,0,0,400,395,1,0,0,0,400,396,1,0,0,
        0,401,403,1,0,0,0,402,404,3,116,58,0,403,402,1,0,0,0,403,404,1,0,
        0,0,404,406,1,0,0,0,405,393,1,0,0,0,406,409,1,0,0,0,407,405,1,0,
        0,0,407,408,1,0,0,0,408,53,1,0,0,0,409,407,1,0,0,0,410,411,6,27,
        -1,0,411,412,3,58,29,0,412,427,1,0,0,0,413,414,10,2,0,0,414,420,
        5,149,0,0,415,421,3,82,41,0,416,417,5,34,0,0,417,418,3,28,14,0,418,
        419,5,35,0,0,419,421,1,0,0,0,420,415,1,0,0,0,420,416,1,0,0,0,421,
        423,1,0,0,0,422,424,3,116,58,0,423,422,1,0,0,0,423,424,1,0,0,0,424,
        426,1,0,0,0,425,413,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,
        428,1,0,0,0,428,55,1,0,0,0,429,427,1,0,0,0,430,444,3,60,30,0,431,
        444,3,62,31,0,432,444,3,64,32,0,433,444,3,66,33,0,434,444,3,68,34,
        0,435,444,3,70,35,0,436,444,3,72,36,0,437,444,3,100,50,0,438,444,
        3,82,41,0,439,444,3,84,42,0,440,444,3,86,43,0,441,444,3,18,9,0,442,
        444,3,20,10,0,443,430,1,0,0,0,443,431,1,0,0,0,443,432,1,0,0,0,443,
        433,1,0,0,0,443,434,1,0,0,0,443,435,1,0,0,0,443,436,1,0,0,0,443,
        437,1,0,0,0,443,438,1,0,0,0,443,439,1,0,0,0,443,440,1,0,0,0,443,
        441,1,0,0,0,443,442,1,0,0,0,444,57,1,0,0,0,445,458,3,60,30,0,446,
        458,3,62,31,0,447,458,3,64,32,0,448,458,3,66,33,0,449,458,3,68,34,
        0,450,458,3,70,35,0,451,458,3,72,36,0,452,458,3,82,41,0,453,458,
        3,84,42,0,454,458,3,86,43,0,455,458,3,18,9,0,456,458,3,20,10,0,457,
        445,1,0,0,0,457,446,1,0,0,0,457,447,1,0,0,0,457,448,1,0,0,0,457,
        449,1,0,0,0,457,450,1,0,0,0,457,451,1,0,0,0,457,452,1,0,0,0,457,
        453,1,0,0,0,457,454,1,0,0,0,457,455,1,0,0,0,457,456,1,0,0,0,458,
        59,1,0,0,0,459,460,5,28,0,0,460,461,3,28,14,0,461,462,5,29,0,0,462,
        488,1,0,0,0,463,464,5,32,0,0,464,465,3,28,14,0,465,466,5,33,0,0,
        466,488,1,0,0,0,467,468,5,34,0,0,468,469,3,28,14,0,469,470,5,35,
        0,0,470,488,1,0,0,0,471,472,5,40,0,0,472,473,3,28,14,0,473,474,5,
        41,0,0,474,488,1,0,0,0,475,476,5,36,0,0,476,477,3,28,14,0,477,478,
        5,37,0,0,478,488,1,0,0,0,479,480,5,38,0,0,480,481,3,28,14,0,481,
        482,5,39,0,0,482,488,1,0,0,0,483,484,5,42,0,0,484,485,3,28,14,0,
        485,486,5,43,0,0,486,488,1,0,0,0,487,459,1,0,0,0,487,463,1,0,0,0,
        487,467,1,0,0,0,487,471,1,0,0,0,487,475,1,0,0,0,487,479,1,0,0,0,
        487,483,1,0,0,0,488,61,1,0,0,0,489,490,5,44,0,0,490,491,5,34,0,0,
        491,492,3,28,14,0,492,493,5,35,0,0,493,500,1,0,0,0,494,495,5,45,
        0,0,495,496,5,34,0,0,496,497,3,28,14,0,497,498,5,35,0,0,498,500,
        1,0,0,0,499,489,1,0,0,0,499,494,1,0,0,0,500,63,1,0,0,0,501,502,5,
        50,0,0,502,503,3,28,14,0,503,504,5,50,0,0,504,65,1,0,0,0,505,506,
        5,46,0,0,506,507,3,28,14,0,507,508,5,46,0,0,508,518,1,0,0,0,509,
        510,5,47,0,0,510,511,3,28,14,0,511,512,5,48,0,0,512,518,1,0,0,0,
        513,514,5,49,0,0,514,515,3,28,14,0,515,516,5,49,0,0,516,518,1,0,
        0,0,517,505,1,0,0,0,517,509,1,0,0,0,517,513,1,0,0,0,518,67,1,0,0,
        0,519,520,5,51,0,0,520,521,3,28,14,0,521,522,5,52,0,0,522,69,1,0,
        0,0,523,524,5,53,0,0,524,525,3,28,14,0,525,526,5,54,0,0,526,532,
        1,0,0,0,527,528,5,55,0,0,528,529,3,28,14,0,529,530,5,56,0,0,530,
        532,1,0,0,0,531,523,1,0,0,0,531,527,1,0,0,0,532,71,1,0,0,0,533,534,
        5,57,0,0,534,535,3,28,14,0,535,536,5,58,0,0,536,542,1,0,0,0,537,
        538,5,59,0,0,538,539,3,28,14,0,539,540,5,60,0,0,540,542,1,0,0,0,
        541,533,1,0,0,0,541,537,1,0,0,0,542,73,1,0,0,0,543,545,7,6,0,0,544,
        546,3,116,58,0,545,544,1,0,0,0,545,546,1,0,0,0,546,75,1,0,0,0,547,
        556,7,6,0,0,548,549,3,118,59,0,549,550,3,116,58,0,550,557,1,0,0,
        0,551,552,3,116,58,0,552,553,3,118,59,0,553,557,1,0,0,0,554,557,
        3,116,58,0,555,557,3,118,59,0,556,548,1,0,0,0,556,551,1,0,0,0,556,
        554,1,0,0,0,556,555,1,0,0,0,556,557,1,0,0,0,557,77,1,0,0,0,558,559,
        5,28,0,0,559,564,3,76,38,0,560,561,5,152,0,0,561,563,3,76,38,0,562,
        560,1,0,0,0,563,566,1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,
        567,1,0,0,0,566,564,1,0,0,0,567,568,5,29,0,0,568,571,1,0,0,0,569,
        571,3,76,38,0,570,558,1,0,0,0,570,569,1,0,0,0,571,79,1,0,0,0,572,
        574,5,160,0,0,573,575,3,116,58,0,574,573,1,0,0,0,574,575,1,0,0,0,
        575,81,1,0,0,0,576,585,3,76,38,0,577,585,5,175,0,0,578,585,3,80,
        40,0,579,585,5,172,0,0,580,585,5,161,0,0,581,585,5,156,0,0,582,585,
        5,154,0,0,583,585,5,176,0,0,584,576,1,0,0,0,584,577,1,0,0,0,584,
        578,1,0,0,0,584,579,1,0,0,0,584,580,1,0,0,0,584,581,1,0,0,0,584,
        582,1,0,0,0,584,583,1,0,0,0,585,83,1,0,0,0,586,587,5,129,0,0,587,
        588,5,34,0,0,588,589,3,28,14,0,589,590,5,35,0,0,590,591,5,34,0,0,
        591,592,3,28,14,0,592,593,5,35,0,0,593,85,1,0,0,0,594,595,5,34,0,
        0,595,596,3,28,14,0,596,597,5,131,0,0,597,598,3,28,14,0,598,599,
        5,35,0,0,599,609,1,0,0,0,600,601,5,130,0,0,601,602,5,34,0,0,602,
        603,3,28,14,0,603,604,5,35,0,0,604,605,5,34,0,0,605,606,3,28,14,
        0,606,607,5,35,0,0,607,609,1,0,0,0,608,594,1,0,0,0,608,600,1,0,0,
        0,609,87,1,0,0,0,610,611,7,7,0,0,611,89,1,0,0,0,612,613,7,8,0,0,
        613,91,1,0,0,0,614,615,7,9,0,0,615,93,1,0,0,0,616,617,7,10,0,0,617,
        95,1,0,0,0,618,625,3,88,44,0,619,620,5,134,0,0,620,621,5,34,0,0,
        621,622,3,92,46,0,622,623,5,35,0,0,623,625,1,0,0,0,624,618,1,0,0,
        0,624,619,1,0,0,0,625,97,1,0,0,0,626,633,3,90,45,0,627,628,5,134,
        0,0,628,629,5,34,0,0,629,630,3,94,47,0,630,631,5,35,0,0,631,633,
        1,0,0,0,632,626,1,0,0,0,632,627,1,0,0,0,633,99,1,0,0,0,634,647,3,
        96,48,0,635,637,3,116,58,0,636,635,1,0,0,0,636,637,1,0,0,0,637,639,
        1,0,0,0,638,640,3,118,59,0,639,638,1,0,0,0,639,640,1,0,0,0,640,648,
        1,0,0,0,641,643,3,118,59,0,642,641,1,0,0,0,642,643,1,0,0,0,643,645,
        1,0,0,0,644,646,3,116,58,0,645,644,1,0,0,0,645,646,1,0,0,0,646,648,
        1,0,0,0,647,636,1,0,0,0,647,642,1,0,0,0,648,654,1,0,0,0,649,650,
        5,28,0,0,650,651,3,108,54,0,651,652,5,29,0,0,652,655,1,0,0,0,653,
        655,3,110,55,0,654,649,1,0,0,0,654,653,1,0,0,0,655,766,1,0,0,0,656,
        669,3,98,49,0,657,659,3,116,58,0,658,657,1,0,0,0,658,659,1,0,0,0,
        659,661,1,0,0,0,660,662,3,118,59,0,661,660,1,0,0,0,661,662,1,0,0,
        0,662,670,1,0,0,0,663,665,3,118,59,0,664,663,1,0,0,0,664,665,1,0,
        0,0,665,667,1,0,0,0,666,668,3,116,58,0,667,666,1,0,0,0,667,668,1,
        0,0,0,668,670,1,0,0,0,669,658,1,0,0,0,669,664,1,0,0,0,670,676,1,
        0,0,0,671,672,5,28,0,0,672,673,3,112,56,0,673,674,5,29,0,0,674,677,
        1,0,0,0,675,677,3,114,57,0,676,671,1,0,0,0,676,675,1,0,0,0,677,766,
        1,0,0,0,678,680,3,74,37,0,679,681,3,118,59,0,680,679,1,0,0,0,680,
        681,1,0,0,0,681,702,1,0,0,0,682,683,5,28,0,0,683,684,3,104,52,0,
        684,685,5,29,0,0,685,703,1,0,0,0,686,687,5,40,0,0,687,688,3,104,
        52,0,688,689,5,41,0,0,689,703,1,0,0,0,690,691,5,34,0,0,691,692,5,
        28,0,0,692,693,3,104,52,0,693,694,5,29,0,0,694,695,5,35,0,0,695,
        703,1,0,0,0,696,697,5,34,0,0,697,698,5,40,0,0,698,699,3,104,52,0,
        699,700,5,41,0,0,700,701,5,35,0,0,701,703,1,0,0,0,702,682,1,0,0,
        0,702,686,1,0,0,0,702,690,1,0,0,0,702,696,1,0,0,0,703,766,1,0,0,
        0,704,725,5,63,0,0,705,706,3,116,58,0,706,707,3,118,59,0,707,726,
        1,0,0,0,708,709,3,118,59,0,709,710,3,116,58,0,710,726,1,0,0,0,711,
        712,5,148,0,0,712,713,5,34,0,0,713,714,5,35,0,0,714,715,1,0,0,0,
        715,716,5,149,0,0,716,717,5,34,0,0,717,726,5,35,0,0,718,719,5,149,
        0,0,719,720,5,34,0,0,720,721,5,35,0,0,721,722,1,0,0,0,722,723,5,
        148,0,0,723,724,5,34,0,0,724,726,5,35,0,0,725,705,1,0,0,0,725,708,
        1,0,0,0,725,711,1,0,0,0,725,718,1,0,0,0,725,726,1,0,0,0,726,733,
        1,0,0,0,727,729,3,30,15,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,
        1,0,0,0,730,734,5,154,0,0,731,734,3,84,42,0,732,734,3,30,15,0,733,
        728,1,0,0,0,733,731,1,0,0,0,733,732,1,0,0,0,734,766,1,0,0,0,735,
        740,5,100,0,0,736,737,5,40,0,0,737,738,3,28,14,0,738,739,5,41,0,
        0,739,741,1,0,0,0,740,736,1,0,0,0,740,741,1,0,0,0,741,742,1,0,0,
        0,742,743,5,34,0,0,743,744,3,28,14,0,744,745,5,35,0,0,745,766,1,
        0,0,0,746,753,7,11,0,0,747,748,3,120,60,0,748,749,3,118,59,0,749,
        754,1,0,0,0,750,751,3,118,59,0,751,752,3,120,60,0,752,754,1,0,0,
        0,753,747,1,0,0,0,753,750,1,0,0,0,754,755,1,0,0,0,755,756,3,32,16,
        0,756,766,1,0,0,0,757,758,5,61,0,0,758,759,3,106,53,0,759,760,3,
        32,16,0,760,766,1,0,0,0,761,763,5,155,0,0,762,764,3,118,59,0,763,
        762,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,765,634,1,0,0,0,765,
        656,1,0,0,0,765,678,1,0,0,0,765,704,1,0,0,0,765,735,1,0,0,0,765,
        746,1,0,0,0,765,757,1,0,0,0,765,761,1,0,0,0,766,101,1,0,0,0,767,
        768,3,28,14,0,768,769,5,152,0,0,769,770,3,102,51,0,770,773,1,0,0,
        0,771,773,3,28,14,0,772,767,1,0,0,0,772,771,1,0,0,0,773,103,1,0,
        0,0,774,783,3,82,41,0,775,776,3,28,14,0,776,777,5,152,0,0,777,783,
        1,0,0,0,778,779,3,28,14,0,779,780,5,152,0,0,780,781,3,102,51,0,781,
        783,1,0,0,0,782,774,1,0,0,0,782,775,1,0,0,0,782,778,1,0,0,0,783,
        105,1,0,0,0,784,785,5,148,0,0,785,786,5,34,0,0,786,787,7,12,0,0,
        787,788,5,62,0,0,788,793,3,28,14,0,789,790,5,149,0,0,790,791,5,34,
        0,0,791,792,7,4,0,0,792,794,5,35,0,0,793,789,1,0,0,0,793,794,1,0,
        0,0,794,795,1,0,0,0,795,796,5,35,0,0,796,107,1,0,0,0,797,798,3,28,
        14,0,798,109,1,0,0,0,799,800,3,34,17,0,800,111,1,0,0,0,801,807,3,
        28,14,0,802,803,3,28,14,0,803,804,5,152,0,0,804,805,3,112,56,0,805,
        807,1,0,0,0,806,801,1,0,0,0,806,802,1,0,0,0,807,113,1,0,0,0,808,
        809,3,34,17,0,809,115,1,0,0,0,810,819,5,148,0,0,811,820,3,82,41,
        0,812,815,5,34,0,0,813,816,3,28,14,0,814,816,3,102,51,0,815,813,
        1,0,0,0,815,814,1,0,0,0,816,817,1,0,0,0,817,818,5,35,0,0,818,820,
        1,0,0,0,819,811,1,0,0,0,819,812,1,0,0,0,820,117,1,0,0,0,821,827,
        5,149,0,0,822,828,3,82,41,0,823,824,5,34,0,0,824,825,3,28,14,0,825,
        826,5,35,0,0,826,828,1,0,0,0,827,822,1,0,0,0,827,823,1,0,0,0,828,
        119,1,0,0,0,829,830,5,148,0,0,830,831,5,34,0,0,831,832,3,26,13,0,
        832,833,5,35,0,0,833,121,1,0,0,0,834,835,5,148,0,0,835,836,5,34,
        0,0,836,837,3,26,13,0,837,838,5,35,0,0,838,123,1,0,0,0,839,840,6,
        62,-1,0,840,841,3,78,39,0,841,842,7,13,0,0,842,843,3,124,62,2,843,
        846,1,0,0,0,844,846,3,126,63,0,845,839,1,0,0,0,845,844,1,0,0,0,846,
        852,1,0,0,0,847,848,10,3,0,0,848,849,7,14,0,0,849,851,3,124,62,4,
        850,847,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,0,
        853,125,1,0,0,0,854,852,1,0,0,0,855,856,6,63,-1,0,856,857,3,128,
        64,0,857,863,1,0,0,0,858,859,10,2,0,0,859,860,5,186,0,0,860,862,
        3,126,63,3,861,858,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,
        1,0,0,0,864,127,1,0,0,0,865,863,1,0,0,0,866,867,6,64,-1,0,867,868,
        3,130,65,0,868,874,1,0,0,0,869,870,10,2,0,0,870,871,5,184,0,0,871,
        873,3,128,64,3,872,869,1,0,0,0,873,876,1,0,0,0,874,872,1,0,0,0,874,
        875,1,0,0,0,875,129,1,0,0,0,876,874,1,0,0,0,877,878,6,65,-1,0,878,
        879,3,132,66,0,879,885,1,0,0,0,880,881,10,2,0,0,881,882,5,185,0,
        0,882,884,3,130,65,3,883,880,1,0,0,0,884,887,1,0,0,0,885,883,1,0,
        0,0,885,886,1,0,0,0,886,131,1,0,0,0,887,885,1,0,0,0,888,889,5,28,
        0,0,889,890,3,126,63,0,890,891,5,29,0,0,891,894,1,0,0,0,892,894,
        3,134,67,0,893,888,1,0,0,0,893,892,1,0,0,0,894,133,1,0,0,0,895,900,
        3,136,68,0,896,900,3,160,80,0,897,900,3,138,69,0,898,900,3,140,70,
        0,899,895,1,0,0,0,899,896,1,0,0,0,899,897,1,0,0,0,899,898,1,0,0,
        0,900,135,1,0,0,0,901,902,7,15,0,0,902,903,3,28,14,0,903,904,5,152,
        0,0,904,905,3,28,14,0,905,906,7,16,0,0,906,137,1,0,0,0,907,908,5,
        28,0,0,908,909,3,146,73,0,909,910,5,29,0,0,910,920,1,0,0,0,911,912,
        5,30,0,0,912,913,3,146,73,0,913,914,5,31,0,0,914,920,1,0,0,0,915,
        916,5,40,0,0,916,917,3,146,73,0,917,918,5,41,0,0,918,920,1,0,0,0,
        919,907,1,0,0,0,919,911,1,0,0,0,919,915,1,0,0,0,920,139,1,0,0,0,
        921,922,5,34,0,0,922,923,3,146,73,0,923,924,5,35,0,0,924,935,1,0,
        0,0,925,926,5,36,0,0,926,927,3,146,73,0,927,928,5,37,0,0,928,935,
        1,0,0,0,929,930,5,45,0,0,930,931,5,34,0,0,931,932,3,146,73,0,932,
        933,5,35,0,0,933,935,1,0,0,0,934,921,1,0,0,0,934,925,1,0,0,0,934,
        929,1,0,0,0,935,141,1,0,0,0,936,937,3,78,39,0,937,938,7,17,0,0,938,
        939,3,148,74,0,939,143,1,0,0,0,940,941,3,146,73,0,941,145,1,0,0,
        0,942,947,3,150,75,0,943,944,5,151,0,0,944,946,3,150,75,0,945,943,
        1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,147,
        1,0,0,0,949,947,1,0,0,0,950,955,3,152,76,0,951,952,5,151,0,0,952,
        954,3,152,76,0,953,951,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,955,
        956,1,0,0,0,956,149,1,0,0,0,957,955,1,0,0,0,958,963,3,156,78,0,959,
        960,5,152,0,0,960,962,3,156,78,0,961,959,1,0,0,0,962,965,1,0,0,0,
        963,961,1,0,0,0,963,964,1,0,0,0,964,151,1,0,0,0,965,963,1,0,0,0,
        966,971,3,154,77,0,967,968,5,152,0,0,968,970,3,154,77,0,969,967,
        1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,153,
        1,0,0,0,973,971,1,0,0,0,974,978,3,158,79,0,975,978,3,134,67,0,976,
        978,3,28,14,0,977,974,1,0,0,0,977,975,1,0,0,0,977,976,1,0,0,0,978,
        155,1,0,0,0,979,983,3,158,79,0,980,983,3,134,67,0,981,983,3,24,12,
        0,982,979,1,0,0,0,982,980,1,0,0,0,982,981,1,0,0,0,983,157,1,0,0,
        0,984,985,3,28,14,0,985,986,5,187,0,0,986,987,3,28,14,0,987,159,
        1,0,0,0,988,998,5,177,0,0,989,998,5,178,0,0,990,998,5,179,0,0,991,
        998,5,180,0,0,992,998,5,181,0,0,993,998,5,182,0,0,994,998,5,188,
        0,0,995,996,5,34,0,0,996,998,5,35,0,0,997,988,1,0,0,0,997,989,1,
        0,0,0,997,990,1,0,0,0,997,991,1,0,0,0,997,992,1,0,0,0,997,993,1,
        0,0,0,997,994,1,0,0,0,997,995,1,0,0,0,998,161,1,0,0,0,999,1000,5,
        155,0,0,1000,163,1,0,0,0,95,167,181,187,201,208,217,221,231,235,
        239,246,252,260,264,273,284,301,312,323,331,333,341,344,350,357,
        364,372,378,386,400,403,407,420,423,427,443,457,487,499,517,531,
        541,545,556,564,570,574,584,608,624,632,636,639,642,645,647,654,
        658,661,664,667,669,676,680,702,725,728,733,740,753,763,765,772,
        782,793,806,815,819,827,845,852,863,874,885,893,899,919,934,947,
        955,963,971,977,982,997
    ]

class PSParser ( Parser ):

    grammarFileName = "PS.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'^T'", "'^{T}'", "'^{\\\\top}'", "'''", 
                     "'^\\circ'", "'^\\degree'", "'^\\circle'", "'^\\u00B0'", 
                     "'^{\\circ}'", "'^{\\degree}'", "'^{\\circle}'", "'^{\\u00B0}'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\quad'", "'\\qquad'", "<INVALID>", "'\\negmedspace'", 
                     "'\\negthickspace'", "'\\$'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'('", "')'", 
                     "'\\('", "'\\)'", "'\\lgroup'", "'\\rgroup'", "'{'", 
                     "'}'", "'\\{'", "'\\}'", "'\\lbrace'", "'\\rbrace'", 
                     "'['", "']'", "'\\lbrack'", "'\\rbrack'", "'\\phantom'", 
                     "'\\boxed'", "'|'", "'\\lvert'", "'\\rvert'", "'\\vert'", 
                     "'\\|'", "'\\langle'", "'\\rangle'", "'\\lfloor'", 
                     "'\\rfloor'", "'\\llcorner'", "'\\lrcorner'", "'\\lceil'", 
                     "'\\rceil'", "'\\ulcorner'", "'\\urcorner'", "'\\lim'", 
                     "<INVALID>", "'\\int'", "'\\sum'", "'\\prod'", "'\\log'", 
                     "'\\ln'", "'\\exp'", "'\\sin'", "'\\cos'", "'\\tan'", 
                     "'\\csc'", "'\\sec'", "'\\cot'", "'\\arcsin'", "'\\arccos'", 
                     "'\\arctan'", "'\\arccsc'", "'\\arcsec'", "'\\arccot'", 
                     "'\\sinh'", "'\\cosh'", "'\\tanh'", "'\\arsinh'", "'\\arcosh'", 
                     "'\\artanh'", "'\\arcsinh'", "'\\arccosh'", "'\\arctanh'", 
                     "'arsinh'", "'arcsinh'", "'arcosh'", "'arccosh'", "'artanh'", 
                     "'arctanh'", "'gcd'", "'lcm'", "'floor'", "'ceil'", 
                     "'\\sqrt'", "'\\gcd'", "'\\lcm'", "'\\floor'", "'\\ceil'", 
                     "'\\max'", "'\\min'", "'\\det'", "'eye'", "'zeros'", 
                     "'ones'", "'cols'", "'rows'", "'diag'", "'norm'", "'rank'", 
                     "<INVALID>", "'rref'", "'hstack'", "'vstack'", "<INVALID>", 
                     "'nullspace'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\\times'", "'\\cdot'", "'\\div'", "<INVALID>", 
                     "<INVALID>", "'\\choose'", "'\\mod'", "'\\mathit'", 
                     "'\\operatorname'", "'matrix'", "'pmatrix'", "'bmatrix'", 
                     "'vmatrix'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'&'", "'\\\\'", "'_'", "'^'", "':'", "';'", "','", 
                     "'.'", "<INVALID>", "<INVALID>", "'E'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\in'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "WS", "THINSPACE", "MEDSPACE", "THICKSPACE", 
                      "QUAD", "QQUAD", "NEGTHINSPACE", "NEGMEDSPACE", "NEGTHICKSPACE", 
                      "DOLLAR_SIGN", "IGNORE", "ADD", "SUB", "MUL", "DIV", 
                      "L_PAREN", "R_PAREN", "L_PAREN_VISUAL", "R_PAREN_VISUAL", 
                      "L_GROUP", "R_GROUP", "L_BRACE", "R_BRACE", "L_BRACE_VISUAL", 
                      "R_BRACE_VISUAL", "L_BRACE_CMD", "R_BRACE_CMD", "L_BRACKET", 
                      "R_BRACKET", "L_BRACK", "R_BRACK", "PHANTOM_CMD", 
                      "BOXED_CMD", "BAR", "L_VERT", "R_VERT", "VERT", "NORM", 
                      "L_ANGLE", "R_ANGLE", "L_FLOOR", "R_FLOOR", "LL_CORNER", 
                      "LR_CORNER", "L_CEIL", "R_CEIL", "UL_CORNER", "UR_CORNER", 
                      "FUNC_LIM", "LIM_APPROACH_SYM", "FUNC_INT", "FUNC_SUM", 
                      "FUNC_PROD", "FUNC_LOG", "FUNC_LN", "FUNC_EXP", "FUNC_SIN", 
                      "FUNC_COS", "FUNC_TAN", "FUNC_CSC", "FUNC_SEC", "FUNC_COT", 
                      "FUNC_ARCSIN", "FUNC_ARCCOS", "FUNC_ARCTAN", "FUNC_ARCCSC", 
                      "FUNC_ARCSEC", "FUNC_ARCCOT", "FUNC_SINH", "FUNC_COSH", 
                      "FUNC_TANH", "FUNC_ARSINH", "FUNC_ARCOSH", "FUNC_ARTANH", 
                      "FUNC_ARCSINH", "FUNC_ARCCOSH", "FUNC_ARCTANH", "FUNC_ARSINH_NAME", 
                      "FUNC_ARCSINH_NAME", "FUNC_ARCOSH_NAME", "FUNC_ARCCOSH_NAME", 
                      "FUNC_ARTANH_NAME", "FUNC_ARCTANH_NAME", "FUNC_GCD_NAME", 
                      "FUNC_LCM_NAME", "FUNC_FLOOR_NAME", "FUNC_CEIL_NAME", 
                      "FUNC_SQRT", "FUNC_GCD", "FUNC_LCM", "FUNC_FLOOR", 
                      "FUNC_CEIL", "FUNC_MAX", "FUNC_MIN", "FUNC_DET", "FUNC_EYE_NAME", 
                      "FUNC_ZEROS_NAME", "FUNC_ONES_NAME", "FUNC_COLS_NAME", 
                      "FUNC_ROWS_NAME", "FUNC_DIAG_NAME", "FUNC_NORM_NAME", 
                      "FUNC_RANK_NAME", "FUNC_TRACE_NAME", "FUNC_RREF_NAME", 
                      "FUNC_HSTACK_NAME", "FUNC_VSTACK_NAME", "FUNC_ORTHOGONALIZE_NAME", 
                      "FUNC_NULLSPACE_NAME", "FUNC_DIAGONALIZE_NAME", "FUNC_EIGENVALS_NAME", 
                      "FUNC_EIGENVECTORS_NAME", "FUNC_SVD_NAME", "CMD_TIMES", 
                      "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_CHOOSE", 
                      "CMD_MOD", "CMD_MATHIT", "CMD_OPERATORNAME", "MATRIX_TYPE_MATRIX", 
                      "MATRIX_TYPE_PMATRIX", "MATRIX_TYPE_BMATRIX", "MATRIX_TYPE_DET", 
                      "MATRIX_TYPES", "CMD_MATRIX_START", "CMD_MATRIX_END", 
                      "CMD_ARRAY_START", "CMD_ARRAY_END", "CMD_DET_START", 
                      "CMD_DET_END", "MATRIX_DEL_COL", "MATRIX_DEL_ROW", 
                      "UNDERSCORE", "CARET", "COLON", "SEMICOLON", "COMMA", 
                      "PERIOD", "DIFFERENTIAL", "EXP_E", "E_NOTATION_E", 
                      "LETTER_NO_E", "MATRIX_XRIGHTARROW", "TRANSFORM_EXCHANGE", 
                      "NUMBER", "E_NOTATION", "IN", "ASSIGNMENT", "EQUAL", 
                      "APPROX", "LT", "LTE", "GT", "GTE", "UNEQUAL", "BANG", 
                      "PERCENT_NUMBER", "GREEK_CMD", "OTHER_SYMBOL_CMD", 
                      "SYMBOL", "VARIABLE", "SET_NATURALS", "SET_INTEGERS", 
                      "SET_RATIONALS", "SET_REALS", "SET_COMPLEX", "SET_PRIMES", 
                      "ACCENT", "UNION", "INTERSECTION", "SET_MINUS", "PLUS_MINUS", 
                      "SET_EMPTY", "SUPSET", "SUBSET", "NOTIN" ]

    RULE_math = 0
    RULE_transpose = 1
    RULE_degree = 2
    RULE_transform_atom = 3
    RULE_transform_scale = 4
    RULE_transform_swap = 5
    RULE_transform_assignment = 6
    RULE_elementary_transform = 7
    RULE_elementary_transforms = 8
    RULE_matrix = 9
    RULE_det = 10
    RULE_matrix_row = 11
    RULE_relation = 12
    RULE_equality = 13
    RULE_expr = 14
    RULE_additive = 15
    RULE_mp = 16
    RULE_mp_nofunc = 17
    RULE_unary = 18
    RULE_unary_nofunc = 19
    RULE_postfix = 20
    RULE_postfix_nofunc = 21
    RULE_postfix_op = 22
    RULE_eval_at = 23
    RULE_eval_at_sub = 24
    RULE_eval_at_sup = 25
    RULE_exp = 26
    RULE_exp_nofunc = 27
    RULE_comp = 28
    RULE_comp_nofunc = 29
    RULE_group = 30
    RULE_formatting_group = 31
    RULE_norm_group = 32
    RULE_abs_group = 33
    RULE_dot_product = 34
    RULE_floor_group = 35
    RULE_ceil_group = 36
    RULE_atom_expr_no_supexpr = 37
    RULE_atom_expr = 38
    RULE_atom_expr_list = 39
    RULE_number_subexpr = 40
    RULE_atom = 41
    RULE_frac = 42
    RULE_binom = 43
    RULE_func_normal_functions_single_arg = 44
    RULE_func_normal_functions_multi_arg = 45
    RULE_func_operator_names_single_arg = 46
    RULE_func_operator_names_multi_arg = 47
    RULE_func_normal_single_arg = 48
    RULE_func_normal_multi_arg = 49
    RULE_func = 50
    RULE_args = 51
    RULE_func_common_args = 52
    RULE_limit_sub = 53
    RULE_func_single_arg = 54
    RULE_func_single_arg_noparens = 55
    RULE_func_multi_arg = 56
    RULE_func_multi_arg_noparens = 57
    RULE_subexpr = 58
    RULE_supexpr = 59
    RULE_subeq = 60
    RULE_supeq = 61
    RULE_set_relation = 62
    RULE_minus_expr = 63
    RULE_union_expr = 64
    RULE_intersection_expr = 65
    RULE_set_group = 66
    RULE_set_atom = 67
    RULE_interval = 68
    RULE_ordered_tuple = 69
    RULE_finite_set = 70
    RULE_set_elements_relation = 71
    RULE_set_elements = 72
    RULE_semicolon_elements = 73
    RULE_semicolon_elements_no_relation = 74
    RULE_comma_elements = 75
    RULE_comma_elements_no_relation = 76
    RULE_element_no_relation = 77
    RULE_element = 78
    RULE_plus_minus_expr = 79
    RULE_literal_set = 80
    RULE_just_e = 81

    ruleNames =  [ "math", "transpose", "degree", "transform_atom", "transform_scale", 
                   "transform_swap", "transform_assignment", "elementary_transform", 
                   "elementary_transforms", "matrix", "det", "matrix_row", 
                   "relation", "equality", "expr", "additive", "mp", "mp_nofunc", 
                   "unary", "unary_nofunc", "postfix", "postfix_nofunc", 
                   "postfix_op", "eval_at", "eval_at_sub", "eval_at_sup", 
                   "exp", "exp_nofunc", "comp", "comp_nofunc", "group", 
                   "formatting_group", "norm_group", "abs_group", "dot_product", 
                   "floor_group", "ceil_group", "atom_expr_no_supexpr", 
                   "atom_expr", "atom_expr_list", "number_subexpr", "atom", 
                   "frac", "binom", "func_normal_functions_single_arg", 
                   "func_normal_functions_multi_arg", "func_operator_names_single_arg", 
                   "func_operator_names_multi_arg", "func_normal_single_arg", 
                   "func_normal_multi_arg", "func", "args", "func_common_args", 
                   "limit_sub", "func_single_arg", "func_single_arg_noparens", 
                   "func_multi_arg", "func_multi_arg_noparens", "subexpr", 
                   "supexpr", "subeq", "supeq", "set_relation", "minus_expr", 
                   "union_expr", "intersection_expr", "set_group", "set_atom", 
                   "interval", "ordered_tuple", "finite_set", "set_elements_relation", 
                   "set_elements", "semicolon_elements", "semicolon_elements_no_relation", 
                   "comma_elements", "comma_elements_no_relation", "element_no_relation", 
                   "element", "plus_minus_expr", "literal_set", "just_e" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    WS=13
    THINSPACE=14
    MEDSPACE=15
    THICKSPACE=16
    QUAD=17
    QQUAD=18
    NEGTHINSPACE=19
    NEGMEDSPACE=20
    NEGTHICKSPACE=21
    DOLLAR_SIGN=22
    IGNORE=23
    ADD=24
    SUB=25
    MUL=26
    DIV=27
    L_PAREN=28
    R_PAREN=29
    L_PAREN_VISUAL=30
    R_PAREN_VISUAL=31
    L_GROUP=32
    R_GROUP=33
    L_BRACE=34
    R_BRACE=35
    L_BRACE_VISUAL=36
    R_BRACE_VISUAL=37
    L_BRACE_CMD=38
    R_BRACE_CMD=39
    L_BRACKET=40
    R_BRACKET=41
    L_BRACK=42
    R_BRACK=43
    PHANTOM_CMD=44
    BOXED_CMD=45
    BAR=46
    L_VERT=47
    R_VERT=48
    VERT=49
    NORM=50
    L_ANGLE=51
    R_ANGLE=52
    L_FLOOR=53
    R_FLOOR=54
    LL_CORNER=55
    LR_CORNER=56
    L_CEIL=57
    R_CEIL=58
    UL_CORNER=59
    UR_CORNER=60
    FUNC_LIM=61
    LIM_APPROACH_SYM=62
    FUNC_INT=63
    FUNC_SUM=64
    FUNC_PROD=65
    FUNC_LOG=66
    FUNC_LN=67
    FUNC_EXP=68
    FUNC_SIN=69
    FUNC_COS=70
    FUNC_TAN=71
    FUNC_CSC=72
    FUNC_SEC=73
    FUNC_COT=74
    FUNC_ARCSIN=75
    FUNC_ARCCOS=76
    FUNC_ARCTAN=77
    FUNC_ARCCSC=78
    FUNC_ARCSEC=79
    FUNC_ARCCOT=80
    FUNC_SINH=81
    FUNC_COSH=82
    FUNC_TANH=83
    FUNC_ARSINH=84
    FUNC_ARCOSH=85
    FUNC_ARTANH=86
    FUNC_ARCSINH=87
    FUNC_ARCCOSH=88
    FUNC_ARCTANH=89
    FUNC_ARSINH_NAME=90
    FUNC_ARCSINH_NAME=91
    FUNC_ARCOSH_NAME=92
    FUNC_ARCCOSH_NAME=93
    FUNC_ARTANH_NAME=94
    FUNC_ARCTANH_NAME=95
    FUNC_GCD_NAME=96
    FUNC_LCM_NAME=97
    FUNC_FLOOR_NAME=98
    FUNC_CEIL_NAME=99
    FUNC_SQRT=100
    FUNC_GCD=101
    FUNC_LCM=102
    FUNC_FLOOR=103
    FUNC_CEIL=104
    FUNC_MAX=105
    FUNC_MIN=106
    FUNC_DET=107
    FUNC_EYE_NAME=108
    FUNC_ZEROS_NAME=109
    FUNC_ONES_NAME=110
    FUNC_COLS_NAME=111
    FUNC_ROWS_NAME=112
    FUNC_DIAG_NAME=113
    FUNC_NORM_NAME=114
    FUNC_RANK_NAME=115
    FUNC_TRACE_NAME=116
    FUNC_RREF_NAME=117
    FUNC_HSTACK_NAME=118
    FUNC_VSTACK_NAME=119
    FUNC_ORTHOGONALIZE_NAME=120
    FUNC_NULLSPACE_NAME=121
    FUNC_DIAGONALIZE_NAME=122
    FUNC_EIGENVALS_NAME=123
    FUNC_EIGENVECTORS_NAME=124
    FUNC_SVD_NAME=125
    CMD_TIMES=126
    CMD_CDOT=127
    CMD_DIV=128
    CMD_FRAC=129
    CMD_BINOM=130
    CMD_CHOOSE=131
    CMD_MOD=132
    CMD_MATHIT=133
    CMD_OPERATORNAME=134
    MATRIX_TYPE_MATRIX=135
    MATRIX_TYPE_PMATRIX=136
    MATRIX_TYPE_BMATRIX=137
    MATRIX_TYPE_DET=138
    MATRIX_TYPES=139
    CMD_MATRIX_START=140
    CMD_MATRIX_END=141
    CMD_ARRAY_START=142
    CMD_ARRAY_END=143
    CMD_DET_START=144
    CMD_DET_END=145
    MATRIX_DEL_COL=146
    MATRIX_DEL_ROW=147
    UNDERSCORE=148
    CARET=149
    COLON=150
    SEMICOLON=151
    COMMA=152
    PERIOD=153
    DIFFERENTIAL=154
    EXP_E=155
    E_NOTATION_E=156
    LETTER_NO_E=157
    MATRIX_XRIGHTARROW=158
    TRANSFORM_EXCHANGE=159
    NUMBER=160
    E_NOTATION=161
    IN=162
    ASSIGNMENT=163
    EQUAL=164
    APPROX=165
    LT=166
    LTE=167
    GT=168
    GTE=169
    UNEQUAL=170
    BANG=171
    PERCENT_NUMBER=172
    GREEK_CMD=173
    OTHER_SYMBOL_CMD=174
    SYMBOL=175
    VARIABLE=176
    SET_NATURALS=177
    SET_INTEGERS=178
    SET_RATIONALS=179
    SET_REALS=180
    SET_COMPLEX=181
    SET_PRIMES=182
    ACCENT=183
    UNION=184
    INTERSECTION=185
    SET_MINUS=186
    PLUS_MINUS=187
    SET_EMPTY=188
    SUPSET=189
    SUBSET=190
    NOTIN=191

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PSParser.EOF, 0)

        def set_elements_relation(self):
            return self.getTypedRuleContext(PSParser.Set_elements_relationContext,0)


        def set_elements(self):
            return self.getTypedRuleContext(PSParser.Set_elementsContext,0)


        def set_relation(self):
            return self.getTypedRuleContext(PSParser.Set_relationContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath" ):
                listener.enterMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath" ):
                listener.exitMath(self)




    def math(self):

        localctx = PSParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 164
                self.set_elements_relation()
                pass

            elif la_ == 2:
                self.state = 165
                self.set_elements()
                pass

            elif la_ == 3:
                self.state = 166
                self.set_relation(0)
                pass


            self.state = 169
            self.match(PSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PSParser.RULE_transpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranspose" ):
                listener.enterTranspose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranspose" ):
                listener.exitTranspose(self)




    def transpose(self):

        localctx = PSParser.TransposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_transpose)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 30) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DegreeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PSParser.RULE_degree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDegree" ):
                listener.enterDegree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDegree" ):
                listener.exitDegree(self)




    def degree(self):

        localctx = PSParser.DegreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_degree)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8160) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def NUMBER(self):
            return self.getToken(PSParser.NUMBER, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_transform_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_atom" ):
                listener.enterTransform_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_atom" ):
                listener.exitTransform_atom(self)




    def transform_atom(self):

        localctx = PSParser.Transform_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_transform_atom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self.match(PSParser.LETTER_NO_E)
            self.state = 176
            self.match(PSParser.UNDERSCORE)
            self.state = 181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                self.state = 177
                self.match(PSParser.NUMBER)
                pass
            elif token in [34]:
                self.state = 178
                self.match(PSParser.L_BRACE)
                self.state = 179
                self.match(PSParser.NUMBER)
                self.state = 180
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_scaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self):
            return self.getTypedRuleContext(PSParser.Transform_atomContext,0)


        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def group(self):
            return self.getTypedRuleContext(PSParser.GroupContext,0)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def getRuleIndex(self):
            return PSParser.RULE_transform_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_scale" ):
                listener.enterTransform_scale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_scale" ):
                listener.exitTransform_scale(self)




    def transform_scale(self):

        localctx = PSParser.Transform_scaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_transform_scale)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 183
                self.expr()
                pass

            elif la_ == 2:
                self.state = 184
                self.group()
                pass

            elif la_ == 3:
                self.state = 185
                self.match(PSParser.ADD)
                pass

            elif la_ == 4:
                self.state = 186
                self.match(PSParser.SUB)
                pass


            self.state = 189
            self.transform_atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_swapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Transform_atomContext)
            else:
                return self.getTypedRuleContext(PSParser.Transform_atomContext,i)


        def TRANSFORM_EXCHANGE(self):
            return self.getToken(PSParser.TRANSFORM_EXCHANGE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_transform_swap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_swap" ):
                listener.enterTransform_swap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_swap" ):
                listener.exitTransform_swap(self)




    def transform_swap(self):

        localctx = PSParser.Transform_swapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_transform_swap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.transform_atom()
            self.state = 192
            self.match(PSParser.TRANSFORM_EXCHANGE)
            self.state = 193
            self.transform_atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_atom(self):
            return self.getTypedRuleContext(PSParser.Transform_atomContext,0)


        def transform_scale(self):
            return self.getTypedRuleContext(PSParser.Transform_scaleContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_transform_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_assignment" ):
                listener.enterTransform_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_assignment" ):
                listener.exitTransform_assignment(self)




    def transform_assignment(self):

        localctx = PSParser.Transform_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transform_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.transform_atom()
            self.state = 196
            self.transform_scale()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elementary_transformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transform_assignment(self):
            return self.getTypedRuleContext(PSParser.Transform_assignmentContext,0)


        def transform_scale(self):
            return self.getTypedRuleContext(PSParser.Transform_scaleContext,0)


        def transform_swap(self):
            return self.getTypedRuleContext(PSParser.Transform_swapContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_elementary_transform

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementary_transform" ):
                listener.enterElementary_transform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementary_transform" ):
                listener.exitElementary_transform(self)




    def elementary_transform(self):

        localctx = PSParser.Elementary_transformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_elementary_transform)
        try:
            self.state = 201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 198
                self.transform_assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 199
                self.transform_scale()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 200
                self.transform_swap()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elementary_transformsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementary_transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Elementary_transformContext)
            else:
                return self.getTypedRuleContext(PSParser.Elementary_transformContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_elementary_transforms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementary_transforms" ):
                listener.enterElementary_transforms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementary_transforms" ):
                listener.exitElementary_transforms(self)




    def elementary_transforms(self):

        localctx = PSParser.Elementary_transformsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_elementary_transforms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.elementary_transform()
            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==152:
                self.state = 204
                self.match(PSParser.COMMA)
                self.state = 205
                self.elementary_transform()
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATRIX_START(self):
            return self.getToken(PSParser.CMD_MATRIX_START, 0)

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(PSParser.Matrix_rowContext,i)


        def CMD_MATRIX_END(self):
            return self.getToken(PSParser.CMD_MATRIX_END, 0)

        def CMD_ARRAY_START(self):
            return self.getToken(PSParser.CMD_ARRAY_START, 0)

        def CMD_ARRAY_END(self):
            return self.getToken(PSParser.CMD_ARRAY_END, 0)

        def MATRIX_XRIGHTARROW(self):
            return self.getToken(PSParser.MATRIX_XRIGHTARROW, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def elementary_transforms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Elementary_transformsContext)
            else:
                return self.getTypedRuleContext(PSParser.Elementary_transformsContext,i)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def MATRIX_DEL_ROW(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(PSParser.MATRIX_DEL_ROW, i)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_matrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix" ):
                listener.enterMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix" ):
                listener.exitMatrix(self)




    def matrix(self):

        localctx = PSParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_matrix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.state = 211
                self.match(PSParser.CMD_MATRIX_START)
                self.state = 212
                self.matrix_row()
                self.state = 217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 213
                        self.match(PSParser.MATRIX_DEL_ROW)
                        self.state = 214
                        self.matrix_row() 
                    self.state = 219
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 220
                    self.match(PSParser.MATRIX_DEL_ROW)


                self.state = 223
                self.match(PSParser.CMD_MATRIX_END)
                pass
            elif token in [142]:
                self.state = 225
                self.match(PSParser.CMD_ARRAY_START)
                self.state = 226
                self.matrix_row()
                self.state = 231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 227
                        self.match(PSParser.MATRIX_DEL_ROW)
                        self.state = 228
                        self.matrix_row() 
                    self.state = 233
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 234
                    self.match(PSParser.MATRIX_DEL_ROW)


                self.state = 237
                self.match(PSParser.CMD_ARRAY_END)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 241
                self.match(PSParser.MATRIX_XRIGHTARROW)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 242
                    self.match(PSParser.L_BRACKET)
                    self.state = 243
                    self.elementary_transforms()
                    self.state = 244
                    self.match(PSParser.R_BRACKET)


                self.state = 248
                self.match(PSParser.L_BRACE)
                self.state = 249
                self.elementary_transforms()
                self.state = 250
                self.match(PSParser.R_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DET_START(self):
            return self.getToken(PSParser.CMD_DET_START, 0)

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(PSParser.Matrix_rowContext,i)


        def CMD_DET_END(self):
            return self.getToken(PSParser.CMD_DET_END, 0)

        def MATRIX_DEL_ROW(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(PSParser.MATRIX_DEL_ROW, i)

        def getRuleIndex(self):
            return PSParser.RULE_det

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDet" ):
                listener.enterDet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDet" ):
                listener.exitDet(self)




    def det(self):

        localctx = PSParser.DetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_det)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(PSParser.CMD_DET_START)
            self.state = 255
            self.matrix_row()
            self.state = 260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 256
                    self.match(PSParser.MATRIX_DEL_ROW)
                    self.state = 257
                    self.matrix_row() 
                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 263
                self.match(PSParser.MATRIX_DEL_ROW)


            self.state = 266
            self.match(PSParser.CMD_DET_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def MATRIX_DEL_COL(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.MATRIX_DEL_COL)
            else:
                return self.getToken(PSParser.MATRIX_DEL_COL, i)

        def getRuleIndex(self):
            return PSParser.RULE_matrix_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix_row" ):
                listener.enterMatrix_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix_row" ):
                listener.exitMatrix_row(self)




    def matrix_row(self):

        localctx = PSParser.Matrix_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_matrix_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.expr()
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==146:
                self.state = 269
                self.match(PSParser.MATRIX_DEL_COL)
                self.state = 270
                self.expr()
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.RelationContext)
            else:
                return self.getTypedRuleContext(PSParser.RelationContext,i)


        def IN(self):
            return self.getToken(PSParser.IN, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def EQUAL(self):
            return self.getToken(PSParser.EQUAL, 0)

        def APPROX(self):
            return self.getToken(PSParser.APPROX, 0)

        def LT(self):
            return self.getToken(PSParser.LT, 0)

        def LTE(self):
            return self.getToken(PSParser.LTE, 0)

        def GT(self):
            return self.getToken(PSParser.GT, 0)

        def GTE(self):
            return self.getToken(PSParser.GTE, 0)

        def UNEQUAL(self):
            return self.getToken(PSParser.UNEQUAL, 0)

        def getRuleIndex(self):
            return PSParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 279
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 280
                    _la = self._input.LA(1)
                    if not(((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & 511) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 281
                    self.relation(3) 
                self.state = 286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def EQUAL(self):
            return self.getToken(PSParser.EQUAL, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return PSParser.RULE_equality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality" ):
                listener.enterEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality" ):
                listener.exitEquality(self)




    def equality(self):

        localctx = PSParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_equality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.expr()
            self.state = 288
            _la = self._input.LA(1)
            if not(_la==163 or _la==164):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 289
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive(self):
            return self.getTypedRuleContext(PSParser.AdditiveContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = PSParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.additive(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp(self):
            return self.getTypedRuleContext(PSParser.MpContext,0)


        def additive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.AdditiveContext)
            else:
                return self.getTypedRuleContext(PSParser.AdditiveContext,i)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def getRuleIndex(self):
            return PSParser.RULE_additive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive" ):
                listener.enterAdditive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive" ):
                listener.exitAdditive(self)



    def additive(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.AdditiveContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_additive, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.mp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.AdditiveContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
                    self.state = 296
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 297
                    _la = self._input.LA(1)
                    if not(_la==24 or _la==25):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 298
                    self.additive(3) 
                self.state = 303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(PSParser.UnaryContext,0)


        def mp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.MpContext)
            else:
                return self.getTypedRuleContext(PSParser.MpContext,i)


        def MUL(self):
            return self.getToken(PSParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(PSParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(PSParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(PSParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(PSParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(PSParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(PSParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_mp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMp" ):
                listener.enterMp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMp" ):
                listener.exitMp(self)



    def mp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.MpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_mp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 312
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.MpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
                    self.state = 307
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 308
                    _la = self._input.LA(1)
                    if not(_la==26 or _la==27 or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 16777287) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 309
                    self.mp(3) 
                self.state = 314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(PSParser.Unary_nofuncContext,0)


        def mp_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Mp_nofuncContext)
            else:
                return self.getTypedRuleContext(PSParser.Mp_nofuncContext,i)


        def MUL(self):
            return self.getToken(PSParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(PSParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(PSParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(PSParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(PSParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(PSParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(PSParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_mp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMp_nofunc" ):
                listener.enterMp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMp_nofunc" ):
                listener.exitMp_nofunc(self)



    def mp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Mp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_mp_nofunc, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.unary_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Mp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
                    self.state = 318
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 319
                    _la = self._input.LA(1)
                    if not(_la==26 or _la==27 or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 16777287) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 320
                    self.mp_nofunc(3) 
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(PSParser.UnaryContext,0)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.PostfixContext)
            else:
                return self.getTypedRuleContext(PSParser.PostfixContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)




    def unary(self):

        localctx = PSParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_unary)
        self._la = 0 # Token type
        try:
            self.state = 333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24, 25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                _la = self._input.LA(1)
                if not(_la==24 or _la==25):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 327
                self.unary()
                pass
            elif token in [28, 32, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 50, 51, 53, 55, 57, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 129, 130, 134, 140, 142, 144, 154, 155, 156, 157, 160, 161, 172, 173, 174, 175, 176, 183]:
                self.enterOuterAlt(localctx, 2)
                self.state = 329 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 328
                        self.postfix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 331 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(PSParser.Unary_nofuncContext,0)


        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def postfix(self):
            return self.getTypedRuleContext(PSParser.PostfixContext,0)


        def postfix_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Postfix_nofuncContext)
            else:
                return self.getTypedRuleContext(PSParser.Postfix_nofuncContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_unary_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_nofunc" ):
                listener.enterUnary_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_nofunc" ):
                listener.exitUnary_nofunc(self)




    def unary_nofunc(self):

        localctx = PSParser.Unary_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unary_nofunc)
        self._la = 0 # Token type
        try:
            self.state = 344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24, 25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                _la = self._input.LA(1)
                if not(_la==24 or _la==25):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 336
                self.unary_nofunc()
                pass
            elif token in [28, 32, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 50, 51, 53, 55, 57, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 129, 130, 134, 140, 142, 144, 154, 155, 156, 157, 160, 161, 172, 173, 174, 175, 176, 183]:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.postfix()
                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 338
                        self.postfix_nofunc() 
                    self.state = 343
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp(self):
            return self.getTypedRuleContext(PSParser.ExpContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(PSParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_postfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix" ):
                listener.enterPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix" ):
                listener.exitPostfix(self)




    def postfix(self):

        localctx = PSParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_postfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.exp(0)
            self.state = 350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 347
                    self.postfix_op() 
                self.state = 352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Exp_nofuncContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(PSParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_postfix_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_nofunc" ):
                listener.enterPostfix_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_nofunc" ):
                listener.exitPostfix_nofunc(self)




    def postfix_nofunc(self):

        localctx = PSParser.Postfix_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_postfix_nofunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.exp_nofunc(0)
            self.state = 357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 354
                    self.postfix_op() 
                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(PSParser.BANG, 0)

        def eval_at(self):
            return self.getTypedRuleContext(PSParser.Eval_atContext,0)


        def transpose(self):
            return self.getTypedRuleContext(PSParser.TransposeContext,0)


        def degree(self):
            return self.getTypedRuleContext(PSParser.DegreeContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_postfix_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_op" ):
                listener.enterPostfix_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_op" ):
                listener.exitPostfix_op(self)




    def postfix_op(self):

        localctx = PSParser.Postfix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_postfix_op)
        try:
            self.state = 364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 360
                self.match(PSParser.BANG)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 361
                self.eval_at()
                pass
            elif token in [1, 2, 3, 4]:
                self.enterOuterAlt(localctx, 3)
                self.state = 362
                self.transpose()
                pass
            elif token in [5, 6, 7, 8, 9, 10, 11, 12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 363
                self.degree()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(PSParser.BAR, 0)

        def eval_at_sup(self):
            return self.getTypedRuleContext(PSParser.Eval_at_supContext,0)


        def eval_at_sub(self):
            return self.getTypedRuleContext(PSParser.Eval_at_subContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_eval_at

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at" ):
                listener.enterEval_at(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at" ):
                listener.exitEval_at(self)




    def eval_at(self):

        localctx = PSParser.Eval_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_eval_at)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(PSParser.BAR)
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 367
                self.eval_at_sup()
                pass

            elif la_ == 2:
                self.state = 368
                self.eval_at_sub()
                pass

            elif la_ == 3:
                self.state = 369
                self.eval_at_sup()
                self.state = 370
                self.eval_at_sub()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_eval_at_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at_sub" ):
                listener.enterEval_at_sub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at_sub" ):
                listener.exitEval_at_sub(self)




    def eval_at_sub(self):

        localctx = PSParser.Eval_at_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eval_at_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(PSParser.UNDERSCORE)
            self.state = 375
            self.match(PSParser.L_BRACE)
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 376
                self.expr()
                pass

            elif la_ == 2:
                self.state = 377
                self.equality()
                pass


            self.state = 380
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_supContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_eval_at_sup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_at_sup" ):
                listener.enterEval_at_sup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_at_sup" ):
                listener.exitEval_at_sup(self)




    def eval_at_sup(self):

        localctx = PSParser.Eval_at_supContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_eval_at_sup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(PSParser.CARET)
            self.state = 383
            self.match(PSParser.L_BRACE)
            self.state = 386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 384
                self.expr()
                pass

            elif la_ == 2:
                self.state = 385
                self.equality()
                pass


            self.state = 388
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(PSParser.CompContext,0)


        def exp(self):
            return self.getTypedRuleContext(PSParser.ExpContext,0)


        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp" ):
                listener.enterExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp" ):
                listener.exitExp(self)



    def exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.ExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.comp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.ExpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
                    self.state = 393
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 394
                    self.match(PSParser.CARET)
                    self.state = 400
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [154, 156, 157, 160, 161, 172, 173, 174, 175, 176, 183]:
                        self.state = 395
                        self.atom()
                        pass
                    elif token in [34]:
                        self.state = 396
                        self.match(PSParser.L_BRACE)
                        self.state = 397
                        self.expr()
                        self.state = 398
                        self.match(PSParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 403
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                    if la_ == 1:
                        self.state = 402
                        self.subexpr()

             
                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Exp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Comp_nofuncContext,0)


        def exp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Exp_nofuncContext,0)


        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_exp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_nofunc" ):
                listener.enterExp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_nofunc" ):
                listener.exitExp_nofunc(self)



    def exp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Exp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_exp_nofunc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.comp_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 427
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Exp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
                    self.state = 413
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 414
                    self.match(PSParser.CARET)
                    self.state = 420
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [154, 156, 157, 160, 161, 172, 173, 174, 175, 176, 183]:
                        self.state = 415
                        self.atom()
                        pass
                    elif token in [34]:
                        self.state = 416
                        self.match(PSParser.L_BRACE)
                        self.state = 417
                        self.expr()
                        self.state = 418
                        self.match(PSParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 423
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        self.state = 422
                        self.subexpr()

             
                self.state = 429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(PSParser.GroupContext,0)


        def formatting_group(self):
            return self.getTypedRuleContext(PSParser.Formatting_groupContext,0)


        def norm_group(self):
            return self.getTypedRuleContext(PSParser.Norm_groupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(PSParser.Abs_groupContext,0)


        def dot_product(self):
            return self.getTypedRuleContext(PSParser.Dot_productContext,0)


        def floor_group(self):
            return self.getTypedRuleContext(PSParser.Floor_groupContext,0)


        def ceil_group(self):
            return self.getTypedRuleContext(PSParser.Ceil_groupContext,0)


        def func(self):
            return self.getTypedRuleContext(PSParser.FuncContext,0)


        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def frac(self):
            return self.getTypedRuleContext(PSParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(PSParser.BinomContext,0)


        def matrix(self):
            return self.getTypedRuleContext(PSParser.MatrixContext,0)


        def det(self):
            return self.getTypedRuleContext(PSParser.DetContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp" ):
                listener.enterComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp" ):
                listener.exitComp(self)




    def comp(self):

        localctx = PSParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_comp)
        try:
            self.state = 443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 430
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 431
                self.formatting_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 432
                self.norm_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 433
                self.abs_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 434
                self.dot_product()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 435
                self.floor_group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 436
                self.ceil_group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 437
                self.func()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 438
                self.atom()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 439
                self.frac()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 440
                self.binom()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 441
                self.matrix()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 442
                self.det()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(PSParser.GroupContext,0)


        def formatting_group(self):
            return self.getTypedRuleContext(PSParser.Formatting_groupContext,0)


        def norm_group(self):
            return self.getTypedRuleContext(PSParser.Norm_groupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(PSParser.Abs_groupContext,0)


        def dot_product(self):
            return self.getTypedRuleContext(PSParser.Dot_productContext,0)


        def floor_group(self):
            return self.getTypedRuleContext(PSParser.Floor_groupContext,0)


        def ceil_group(self):
            return self.getTypedRuleContext(PSParser.Ceil_groupContext,0)


        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def frac(self):
            return self.getTypedRuleContext(PSParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(PSParser.BinomContext,0)


        def matrix(self):
            return self.getTypedRuleContext(PSParser.MatrixContext,0)


        def det(self):
            return self.getTypedRuleContext(PSParser.DetContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_comp_nofunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_nofunc" ):
                listener.enterComp_nofunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_nofunc" ):
                listener.exitComp_nofunc(self)




    def comp_nofunc(self):

        localctx = PSParser.Comp_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_comp_nofunc)
        try:
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 445
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 446
                self.formatting_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 447
                self.norm_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 448
                self.abs_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 449
                self.dot_product()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 450
                self.floor_group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 451
                self.ceil_group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 452
                self.atom()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 453
                self.frac()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 454
                self.binom()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 455
                self.matrix()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 456
                self.det()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def L_GROUP(self):
            return self.getToken(PSParser.L_GROUP, 0)

        def R_GROUP(self):
            return self.getToken(PSParser.R_GROUP, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(PSParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(PSParser.R_BRACE_VISUAL, 0)

        def L_BRACE_CMD(self):
            return self.getToken(PSParser.L_BRACE_CMD, 0)

        def R_BRACE_CMD(self):
            return self.getToken(PSParser.R_BRACE_CMD, 0)

        def L_BRACK(self):
            return self.getToken(PSParser.L_BRACK, 0)

        def R_BRACK(self):
            return self.getToken(PSParser.R_BRACK, 0)

        def getRuleIndex(self):
            return PSParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)




    def group(self):

        localctx = PSParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_group)
        try:
            self.state = 487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.match(PSParser.L_PAREN)
                self.state = 460
                self.expr()
                self.state = 461
                self.match(PSParser.R_PAREN)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.match(PSParser.L_GROUP)
                self.state = 464
                self.expr()
                self.state = 465
                self.match(PSParser.R_GROUP)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 467
                self.match(PSParser.L_BRACE)
                self.state = 468
                self.expr()
                self.state = 469
                self.match(PSParser.R_BRACE)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 4)
                self.state = 471
                self.match(PSParser.L_BRACKET)
                self.state = 472
                self.expr()
                self.state = 473
                self.match(PSParser.R_BRACKET)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 475
                self.match(PSParser.L_BRACE_VISUAL)
                self.state = 476
                self.expr()
                self.state = 477
                self.match(PSParser.R_BRACE_VISUAL)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 6)
                self.state = 479
                self.match(PSParser.L_BRACE_CMD)
                self.state = 480
                self.expr()
                self.state = 481
                self.match(PSParser.R_BRACE_CMD)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 7)
                self.state = 483
                self.match(PSParser.L_BRACK)
                self.state = 484
                self.expr()
                self.state = 485
                self.match(PSParser.R_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formatting_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PHANTOM_CMD(self):
            return self.getToken(PSParser.PHANTOM_CMD, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def BOXED_CMD(self):
            return self.getToken(PSParser.BOXED_CMD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_formatting_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatting_group" ):
                listener.enterFormatting_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatting_group" ):
                listener.exitFormatting_group(self)




    def formatting_group(self):

        localctx = PSParser.Formatting_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_formatting_group)
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.match(PSParser.PHANTOM_CMD)
                self.state = 490
                self.match(PSParser.L_BRACE)
                self.state = 491
                self.expr()
                self.state = 492
                self.match(PSParser.R_BRACE)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 494
                self.match(PSParser.BOXED_CMD)
                self.state = 495
                self.match(PSParser.L_BRACE)
                self.state = 496
                self.expr()
                self.state = 497
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Norm_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORM(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.NORM)
            else:
                return self.getToken(PSParser.NORM, i)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_norm_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNorm_group" ):
                listener.enterNorm_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNorm_group" ):
                listener.exitNorm_group(self)




    def norm_group(self):

        localctx = PSParser.Norm_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_norm_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(PSParser.NORM)
            self.state = 502
            self.expr()
            self.state = 503
            self.match(PSParser.NORM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abs_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.BAR)
            else:
                return self.getToken(PSParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def L_VERT(self):
            return self.getToken(PSParser.L_VERT, 0)

        def R_VERT(self):
            return self.getToken(PSParser.R_VERT, 0)

        def VERT(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.VERT)
            else:
                return self.getToken(PSParser.VERT, i)

        def getRuleIndex(self):
            return PSParser.RULE_abs_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbs_group" ):
                listener.enterAbs_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbs_group" ):
                listener.exitAbs_group(self)




    def abs_group(self):

        localctx = PSParser.Abs_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_abs_group)
        try:
            self.state = 517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self.match(PSParser.BAR)
                self.state = 506
                self.expr()
                self.state = 507
                self.match(PSParser.BAR)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.match(PSParser.L_VERT)
                self.state = 510
                self.expr()
                self.state = 511
                self.match(PSParser.R_VERT)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 3)
                self.state = 513
                self.match(PSParser.VERT)
                self.state = 514
                self.expr()
                self.state = 515
                self.match(PSParser.VERT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_productContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_ANGLE(self):
            return self.getToken(PSParser.L_ANGLE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_ANGLE(self):
            return self.getToken(PSParser.R_ANGLE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_dot_product

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_product" ):
                listener.enterDot_product(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_product" ):
                listener.exitDot_product(self)




    def dot_product(self):

        localctx = PSParser.Dot_productContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dot_product)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(PSParser.L_ANGLE)
            self.state = 520
            self.expr()
            self.state = 521
            self.match(PSParser.R_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floor_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_FLOOR(self):
            return self.getToken(PSParser.L_FLOOR, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_FLOOR(self):
            return self.getToken(PSParser.R_FLOOR, 0)

        def LL_CORNER(self):
            return self.getToken(PSParser.LL_CORNER, 0)

        def LR_CORNER(self):
            return self.getToken(PSParser.LR_CORNER, 0)

        def getRuleIndex(self):
            return PSParser.RULE_floor_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloor_group" ):
                listener.enterFloor_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloor_group" ):
                listener.exitFloor_group(self)




    def floor_group(self):

        localctx = PSParser.Floor_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_floor_group)
        try:
            self.state = 531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 523
                self.match(PSParser.L_FLOOR)
                self.state = 524
                self.expr()
                self.state = 525
                self.match(PSParser.R_FLOOR)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.match(PSParser.LL_CORNER)
                self.state = 528
                self.expr()
                self.state = 529
                self.match(PSParser.LR_CORNER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ceil_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CEIL(self):
            return self.getToken(PSParser.L_CEIL, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_CEIL(self):
            return self.getToken(PSParser.R_CEIL, 0)

        def UL_CORNER(self):
            return self.getToken(PSParser.UL_CORNER, 0)

        def UR_CORNER(self):
            return self.getToken(PSParser.UR_CORNER, 0)

        def getRuleIndex(self):
            return PSParser.RULE_ceil_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCeil_group" ):
                listener.enterCeil_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCeil_group" ):
                listener.exitCeil_group(self)




    def ceil_group(self):

        localctx = PSParser.Ceil_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ceil_group)
        try:
            self.state = 541
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 533
                self.match(PSParser.L_CEIL)
                self.state = 534
                self.expr()
                self.state = 535
                self.match(PSParser.R_CEIL)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.match(PSParser.UL_CORNER)
                self.state = 538
                self.expr()
                self.state = 539
                self.match(PSParser.UR_CORNER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_expr_no_supexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(PSParser.GREEK_CMD, 0)

        def OTHER_SYMBOL_CMD(self):
            return self.getToken(PSParser.OTHER_SYMBOL_CMD, 0)

        def ACCENT(self):
            return self.getToken(PSParser.ACCENT, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_atom_expr_no_supexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr_no_supexpr" ):
                listener.enterAtom_expr_no_supexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr_no_supexpr" ):
                listener.exitAtom_expr_no_supexpr(self)




    def atom_expr_no_supexpr(self):

        localctx = PSParser.Atom_expr_no_supexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_atom_expr_no_supexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 67305473) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 544
                self.subexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(PSParser.GREEK_CMD, 0)

        def OTHER_SYMBOL_CMD(self):
            return self.getToken(PSParser.OTHER_SYMBOL_CMD, 0)

        def ACCENT(self):
            return self.getToken(PSParser.ACCENT, 0)

        def supexpr(self):
            return self.getTypedRuleContext(PSParser.SupexprContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)




    def atom_expr(self):

        localctx = PSParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 67305473) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 548
                self.supexpr()
                self.state = 549
                self.subexpr()

            elif la_ == 2:
                self.state = 551
                self.subexpr()
                self.state = 552
                self.supexpr()

            elif la_ == 3:
                self.state = 554
                self.subexpr()

            elif la_ == 4:
                self.state = 555
                self.supexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def atom_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Atom_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Atom_exprContext,i)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_atom_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr_list" ):
                listener.enterAtom_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr_list" ):
                listener.exitAtom_expr_list(self)




    def atom_expr_list(self):

        localctx = PSParser.Atom_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_atom_expr_list)
        self._la = 0 # Token type
        try:
            self.state = 570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self.match(PSParser.L_PAREN)
                self.state = 559
                self.atom_expr()
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==152:
                    self.state = 560
                    self.match(PSParser.COMMA)
                    self.state = 561
                    self.atom_expr()
                    self.state = 566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 567
                self.match(PSParser.R_PAREN)
                pass
            elif token in [157, 173, 174, 183]:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.atom_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PSParser.NUMBER, 0)

        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_number_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_subexpr" ):
                listener.enterNumber_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_subexpr" ):
                listener.exitNumber_subexpr(self)




    def number_subexpr(self):

        localctx = PSParser.Number_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_number_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(PSParser.NUMBER)
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 573
                self.subexpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(PSParser.Atom_exprContext,0)


        def SYMBOL(self):
            return self.getToken(PSParser.SYMBOL, 0)

        def number_subexpr(self):
            return self.getTypedRuleContext(PSParser.Number_subexprContext,0)


        def PERCENT_NUMBER(self):
            return self.getToken(PSParser.PERCENT_NUMBER, 0)

        def E_NOTATION(self):
            return self.getToken(PSParser.E_NOTATION, 0)

        def E_NOTATION_E(self):
            return self.getToken(PSParser.E_NOTATION_E, 0)

        def DIFFERENTIAL(self):
            return self.getToken(PSParser.DIFFERENTIAL, 0)

        def VARIABLE(self):
            return self.getToken(PSParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = PSParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_atom)
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [157, 173, 174, 183]:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.atom_expr()
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.match(PSParser.SYMBOL)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 3)
                self.state = 578
                self.number_subexpr()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 4)
                self.state = 579
                self.match(PSParser.PERCENT_NUMBER)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 5)
                self.state = 580
                self.match(PSParser.E_NOTATION)
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 6)
                self.state = 581
                self.match(PSParser.E_NOTATION_E)
                pass
            elif token in [154]:
                self.enterOuterAlt(localctx, 7)
                self.state = 582
                self.match(PSParser.DIFFERENTIAL)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 8)
                self.state = 583
                self.match(PSParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FracContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None # ExprContext
            self.lower = None # ExprContext

        def CMD_FRAC(self):
            return self.getToken(PSParser.CMD_FRAC, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def getRuleIndex(self):
            return PSParser.RULE_frac

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrac" ):
                listener.enterFrac(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrac" ):
                listener.exitFrac(self)




    def frac(self):

        localctx = PSParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(PSParser.CMD_FRAC)
            self.state = 587
            self.match(PSParser.L_BRACE)
            self.state = 588
            localctx.upper = self.expr()
            self.state = 589
            self.match(PSParser.R_BRACE)
            self.state = 590
            self.match(PSParser.L_BRACE)
            self.state = 591
            localctx.lower = self.expr()
            self.state = 592
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None # ExprContext
            self.lower = None # ExprContext

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def CMD_CHOOSE(self):
            return self.getToken(PSParser.CMD_CHOOSE, 0)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def CMD_BINOM(self):
            return self.getToken(PSParser.CMD_BINOM, 0)

        def getRuleIndex(self):
            return PSParser.RULE_binom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinom" ):
                listener.enterBinom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinom" ):
                listener.exitBinom(self)




    def binom(self):

        localctx = PSParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_binom)
        try:
            self.state = 608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.match(PSParser.L_BRACE)
                self.state = 595
                localctx.upper = self.expr()
                self.state = 596
                self.match(PSParser.CMD_CHOOSE)
                self.state = 597
                localctx.lower = self.expr()
                self.state = 598
                self.match(PSParser.R_BRACE)
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self.match(PSParser.CMD_BINOM)
                self.state = 601
                self.match(PSParser.L_BRACE)
                self.state = 602
                localctx.upper = self.expr()
                self.state = 603
                self.match(PSParser.R_BRACE)
                self.state = 604
                self.match(PSParser.L_BRACE)
                self.state = 605
                localctx.lower = self.expr()
                self.state = 606
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_functions_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_LOG(self):
            return self.getToken(PSParser.FUNC_LOG, 0)

        def FUNC_LN(self):
            return self.getToken(PSParser.FUNC_LN, 0)

        def FUNC_EXP(self):
            return self.getToken(PSParser.FUNC_EXP, 0)

        def FUNC_SIN(self):
            return self.getToken(PSParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(PSParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(PSParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(PSParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(PSParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(PSParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(PSParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(PSParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(PSParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(PSParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(PSParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(PSParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(PSParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(PSParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(PSParser.FUNC_TANH, 0)

        def FUNC_ARSINH(self):
            return self.getToken(PSParser.FUNC_ARSINH, 0)

        def FUNC_ARCOSH(self):
            return self.getToken(PSParser.FUNC_ARCOSH, 0)

        def FUNC_ARTANH(self):
            return self.getToken(PSParser.FUNC_ARTANH, 0)

        def FUNC_ARCSINH(self):
            return self.getToken(PSParser.FUNC_ARCSINH, 0)

        def FUNC_ARCCOSH(self):
            return self.getToken(PSParser.FUNC_ARCCOSH, 0)

        def FUNC_ARCTANH(self):
            return self.getToken(PSParser.FUNC_ARCTANH, 0)

        def FUNC_FLOOR(self):
            return self.getToken(PSParser.FUNC_FLOOR, 0)

        def FUNC_CEIL(self):
            return self.getToken(PSParser.FUNC_CEIL, 0)

        def FUNC_DET(self):
            return self.getToken(PSParser.FUNC_DET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_normal_functions_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_functions_single_arg" ):
                listener.enterFunc_normal_functions_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_functions_single_arg" ):
                listener.exitFunc_normal_functions_single_arg(self)




    def func_normal_functions_single_arg(self):

        localctx = PSParser.Func_normal_functions_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_func_normal_functions_single_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2611356893183) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_functions_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD(self):
            return self.getToken(PSParser.FUNC_GCD, 0)

        def FUNC_LCM(self):
            return self.getToken(PSParser.FUNC_LCM, 0)

        def FUNC_MAX(self):
            return self.getToken(PSParser.FUNC_MAX, 0)

        def FUNC_MIN(self):
            return self.getToken(PSParser.FUNC_MIN, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_normal_functions_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_functions_multi_arg" ):
                listener.enterFunc_normal_functions_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_functions_multi_arg" ):
                listener.exitFunc_normal_functions_multi_arg(self)




    def func_normal_functions_multi_arg(self):

        localctx = PSParser.Func_normal_functions_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_func_normal_functions_multi_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 51) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_operator_names_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_ARSINH_NAME(self):
            return self.getToken(PSParser.FUNC_ARSINH_NAME, 0)

        def FUNC_ARCOSH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCOSH_NAME, 0)

        def FUNC_ARTANH_NAME(self):
            return self.getToken(PSParser.FUNC_ARTANH_NAME, 0)

        def FUNC_ARCSINH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCSINH_NAME, 0)

        def FUNC_ARCCOSH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCCOSH_NAME, 0)

        def FUNC_ARCTANH_NAME(self):
            return self.getToken(PSParser.FUNC_ARCTANH_NAME, 0)

        def FUNC_FLOOR_NAME(self):
            return self.getToken(PSParser.FUNC_FLOOR_NAME, 0)

        def FUNC_CEIL_NAME(self):
            return self.getToken(PSParser.FUNC_CEIL_NAME, 0)

        def FUNC_EYE_NAME(self):
            return self.getToken(PSParser.FUNC_EYE_NAME, 0)

        def FUNC_RANK_NAME(self):
            return self.getToken(PSParser.FUNC_RANK_NAME, 0)

        def FUNC_TRACE_NAME(self):
            return self.getToken(PSParser.FUNC_TRACE_NAME, 0)

        def FUNC_RREF_NAME(self):
            return self.getToken(PSParser.FUNC_RREF_NAME, 0)

        def FUNC_NULLSPACE_NAME(self):
            return self.getToken(PSParser.FUNC_NULLSPACE_NAME, 0)

        def FUNC_DIAGONALIZE_NAME(self):
            return self.getToken(PSParser.FUNC_DIAGONALIZE_NAME, 0)

        def FUNC_NORM_NAME(self):
            return self.getToken(PSParser.FUNC_NORM_NAME, 0)

        def FUNC_EIGENVALS_NAME(self):
            return self.getToken(PSParser.FUNC_EIGENVALS_NAME, 0)

        def FUNC_EIGENVECTORS_NAME(self):
            return self.getToken(PSParser.FUNC_EIGENVECTORS_NAME, 0)

        def FUNC_SVD_NAME(self):
            return self.getToken(PSParser.FUNC_SVD_NAME, 0)

        def FUNC_COLS_NAME(self):
            return self.getToken(PSParser.FUNC_COLS_NAME, 0)

        def FUNC_ROWS_NAME(self):
            return self.getToken(PSParser.FUNC_ROWS_NAME, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_operator_names_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_operator_names_single_arg" ):
                listener.enterFunc_operator_names_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_operator_names_single_arg" ):
                listener.exitFunc_operator_names_single_arg(self)




    def func_operator_names_single_arg(self):

        localctx = PSParser.Func_operator_names_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_func_operator_names_single_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            _la = self._input.LA(1)
            if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 66830205759) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_operator_names_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD_NAME(self):
            return self.getToken(PSParser.FUNC_GCD_NAME, 0)

        def FUNC_LCM_NAME(self):
            return self.getToken(PSParser.FUNC_LCM_NAME, 0)

        def FUNC_ZEROS_NAME(self):
            return self.getToken(PSParser.FUNC_ZEROS_NAME, 0)

        def FUNC_ORTHOGONALIZE_NAME(self):
            return self.getToken(PSParser.FUNC_ORTHOGONALIZE_NAME, 0)

        def FUNC_ONES_NAME(self):
            return self.getToken(PSParser.FUNC_ONES_NAME, 0)

        def FUNC_DIAG_NAME(self):
            return self.getToken(PSParser.FUNC_DIAG_NAME, 0)

        def FUNC_HSTACK_NAME(self):
            return self.getToken(PSParser.FUNC_HSTACK_NAME, 0)

        def FUNC_VSTACK_NAME(self):
            return self.getToken(PSParser.FUNC_VSTACK_NAME, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func_operator_names_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_operator_names_multi_arg" ):
                listener.enterFunc_operator_names_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_operator_names_multi_arg" ):
                listener.exitFunc_operator_names_multi_arg(self)




    def func_operator_names_multi_arg(self):

        localctx = PSParser.Func_operator_names_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_func_operator_names_multi_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 29515779) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None # Func_operator_names_single_argContext

        def func_normal_functions_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_functions_single_argContext,0)


        def CMD_OPERATORNAME(self):
            return self.getToken(PSParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def func_operator_names_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_operator_names_single_argContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_normal_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_single_arg" ):
                listener.enterFunc_normal_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_single_arg" ):
                listener.exitFunc_normal_single_arg(self)




    def func_normal_single_arg(self):

        localctx = PSParser.Func_normal_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_func_normal_single_arg)
        try:
            self.state = 624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 103, 104, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.func_normal_functions_single_arg()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.match(PSParser.CMD_OPERATORNAME)
                self.state = 620
                self.match(PSParser.L_BRACE)
                self.state = 621
                localctx.func_operator_name = self.func_operator_names_single_arg()
                self.state = 622
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normal_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None # Func_operator_names_multi_argContext

        def func_normal_functions_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_functions_multi_argContext,0)


        def CMD_OPERATORNAME(self):
            return self.getToken(PSParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def func_operator_names_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_operator_names_multi_argContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_normal_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_normal_multi_arg" ):
                listener.enterFunc_normal_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_normal_multi_arg" ):
                listener.exitFunc_normal_multi_arg(self)




    def func_normal_multi_arg(self):

        localctx = PSParser.Func_normal_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_func_normal_multi_arg)
        try:
            self.state = 632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101, 102, 105, 106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.func_normal_functions_multi_arg()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.match(PSParser.CMD_OPERATORNAME)
                self.state = 628
                self.match(PSParser.L_BRACE)
                self.state = 629
                localctx.func_operator_name = self.func_operator_names_multi_arg()
                self.state = 630
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.root = None # ExprContext
            self.base = None # ExprContext

        def func_normal_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_single_argContext,0)


        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def func_single_arg(self):
            return self.getTypedRuleContext(PSParser.Func_single_argContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def func_single_arg_noparens(self):
            return self.getTypedRuleContext(PSParser.Func_single_arg_noparensContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(PSParser.SubexprContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(PSParser.SupexprContext,0)


        def func_normal_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_normal_multi_argContext,0)


        def func_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_multi_argContext,0)


        def func_multi_arg_noparens(self):
            return self.getTypedRuleContext(PSParser.Func_multi_arg_noparensContext,0)


        def atom_expr_no_supexpr(self):
            return self.getTypedRuleContext(PSParser.Atom_expr_no_supexprContext,0)


        def func_common_args(self):
            return self.getTypedRuleContext(PSParser.Func_common_argsContext,0)


        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def FUNC_INT(self):
            return self.getToken(PSParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(PSParser.DIFFERENTIAL, 0)

        def frac(self):
            return self.getTypedRuleContext(PSParser.FracContext,0)


        def additive(self):
            return self.getTypedRuleContext(PSParser.AdditiveContext,0)


        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def FUNC_SQRT(self):
            return self.getToken(PSParser.FUNC_SQRT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def mp(self):
            return self.getTypedRuleContext(PSParser.MpContext,0)


        def FUNC_SUM(self):
            return self.getToken(PSParser.FUNC_SUM, 0)

        def FUNC_PROD(self):
            return self.getToken(PSParser.FUNC_PROD, 0)

        def subeq(self):
            return self.getTypedRuleContext(PSParser.SubeqContext,0)


        def FUNC_LIM(self):
            return self.getToken(PSParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(PSParser.Limit_subContext,0)


        def EXP_E(self):
            return self.getToken(PSParser.EXP_E, 0)

        def getRuleIndex(self):
            return PSParser.RULE_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc" ):
                listener.enterFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc" ):
                listener.exitFunc(self)




    def func(self):

        localctx = PSParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_func)
        self._la = 0 # Token type
        try:
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.func_normal_single_arg()
                self.state = 647
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 636
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 635
                        self.subexpr()


                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==149:
                        self.state = 638
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==149:
                        self.state = 641
                        self.supexpr()


                    self.state = 645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 644
                        self.subexpr()


                    pass


                self.state = 654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 649
                    self.match(PSParser.L_PAREN)
                    self.state = 650
                    self.func_single_arg()
                    self.state = 651
                    self.match(PSParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 653
                    self.func_single_arg_noparens()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.func_normal_multi_arg()
                self.state = 669
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 657
                        self.subexpr()


                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==149:
                        self.state = 660
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==149:
                        self.state = 663
                        self.supexpr()


                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 666
                        self.subexpr()


                    pass


                self.state = 676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 671
                    self.match(PSParser.L_PAREN)
                    self.state = 672
                    self.func_multi_arg()
                    self.state = 673
                    self.match(PSParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 675
                    self.func_multi_arg_noparens()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 678
                self.atom_expr_no_supexpr()
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149:
                    self.state = 679
                    self.supexpr()


                self.state = 702
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 682
                    self.match(PSParser.L_PAREN)
                    self.state = 683
                    self.func_common_args()
                    self.state = 684
                    self.match(PSParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 686
                    self.match(PSParser.L_BRACKET)
                    self.state = 687
                    self.func_common_args()
                    self.state = 688
                    self.match(PSParser.R_BRACKET)
                    pass

                elif la_ == 3:
                    self.state = 690
                    self.match(PSParser.L_BRACE)
                    self.state = 691
                    self.match(PSParser.L_PAREN)
                    self.state = 692
                    self.func_common_args()
                    self.state = 693
                    self.match(PSParser.R_PAREN)
                    self.state = 694
                    self.match(PSParser.R_BRACE)
                    pass

                elif la_ == 4:
                    self.state = 696
                    self.match(PSParser.L_BRACE)
                    self.state = 697
                    self.match(PSParser.L_BRACKET)
                    self.state = 698
                    self.func_common_args()
                    self.state = 699
                    self.match(PSParser.R_BRACKET)
                    self.state = 700
                    self.match(PSParser.R_BRACE)
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 704
                self.match(PSParser.FUNC_INT)
                self.state = 725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 705
                    self.subexpr()
                    self.state = 706
                    self.supexpr()

                elif la_ == 2:
                    self.state = 708
                    self.supexpr()
                    self.state = 709
                    self.subexpr()

                elif la_ == 3:
                    self.state = 711
                    self.match(PSParser.UNDERSCORE)
                    self.state = 712
                    self.match(PSParser.L_BRACE)
                    self.state = 713
                    self.match(PSParser.R_BRACE)

                    self.state = 715
                    self.match(PSParser.CARET)
                    self.state = 716
                    self.match(PSParser.L_BRACE)
                    self.state = 717
                    self.match(PSParser.R_BRACE)

                elif la_ == 4:
                    self.state = 718
                    self.match(PSParser.CARET)
                    self.state = 719
                    self.match(PSParser.L_BRACE)
                    self.state = 720
                    self.match(PSParser.R_BRACE)

                    self.state = 722
                    self.match(PSParser.UNDERSCORE)
                    self.state = 723
                    self.match(PSParser.L_BRACE)
                    self.state = 724
                    self.match(PSParser.R_BRACE)


                self.state = 733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 728
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                    if la_ == 1:
                        self.state = 727
                        self.additive(0)


                    self.state = 730
                    self.match(PSParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 731
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 732
                    self.additive(0)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 735
                self.match(PSParser.FUNC_SQRT)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 736
                    self.match(PSParser.L_BRACKET)
                    self.state = 737
                    localctx.root = self.expr()
                    self.state = 738
                    self.match(PSParser.R_BRACKET)


                self.state = 742
                self.match(PSParser.L_BRACE)
                self.state = 743
                localctx.base = self.expr()
                self.state = 744
                self.match(PSParser.R_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 746
                _la = self._input.LA(1)
                if not(_la==64 or _la==65):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 753
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [148]:
                    self.state = 747
                    self.subeq()
                    self.state = 748
                    self.supexpr()
                    pass
                elif token in [149]:
                    self.state = 750
                    self.supexpr()
                    self.state = 751
                    self.subeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 755
                self.mp(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 757
                self.match(PSParser.FUNC_LIM)
                self.state = 758
                self.limit_sub()
                self.state = 759
                self.mp(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 761
                self.match(PSParser.EXP_E)
                self.state = 763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 762
                    self.supexpr()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(PSParser.ArgsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = PSParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_args)
        try:
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 767
                self.expr()
                self.state = 768
                self.match(PSParser.COMMA)
                self.state = 769
                self.args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_common_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(PSParser.ArgsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_common_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_common_args" ):
                listener.enterFunc_common_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_common_args" ):
                listener.exitFunc_common_args(self)




    def func_common_args(self):

        localctx = PSParser.Func_common_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_func_common_args)
        try:
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.atom()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.expr()
                self.state = 776
                self.match(PSParser.COMMA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 778
                self.expr()
                self.state = 779
                self.match(PSParser.COMMA)
                self.state = 780
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.L_BRACE)
            else:
                return self.getToken(PSParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(PSParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.R_BRACE)
            else:
                return self.getToken(PSParser.R_BRACE, i)

        def LETTER_NO_E(self):
            return self.getToken(PSParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(PSParser.GREEK_CMD, 0)

        def OTHER_SYMBOL_CMD(self):
            return self.getToken(PSParser.OTHER_SYMBOL_CMD, 0)

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def ADD(self):
            return self.getToken(PSParser.ADD, 0)

        def SUB(self):
            return self.getToken(PSParser.SUB, 0)

        def getRuleIndex(self):
            return PSParser.RULE_limit_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_sub" ):
                listener.enterLimit_sub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_sub" ):
                listener.exitLimit_sub(self)




    def limit_sub(self):

        localctx = PSParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_limit_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(PSParser.UNDERSCORE)
            self.state = 785
            self.match(PSParser.L_BRACE)
            self.state = 786
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 196609) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 787
            self.match(PSParser.LIM_APPROACH_SYM)
            self.state = 788
            self.expr()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 789
                self.match(PSParser.CARET)
                self.state = 790
                self.match(PSParser.L_BRACE)
                self.state = 791
                _la = self._input.LA(1)
                if not(_la==24 or _la==25):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 792
                self.match(PSParser.R_BRACE)


            self.state = 795
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_single_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_single_arg" ):
                listener.enterFunc_single_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_single_arg" ):
                listener.exitFunc_single_arg(self)




    def func_single_arg(self):

        localctx = PSParser.Func_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_func_single_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_single_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_single_arg_noparens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_single_arg_noparens" ):
                listener.enterFunc_single_arg_noparens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_single_arg_noparens" ):
                listener.exitFunc_single_arg_noparens(self)




    def func_single_arg_noparens(self):

        localctx = PSParser.Func_single_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_func_single_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def func_multi_arg(self):
            return self.getTypedRuleContext(PSParser.Func_multi_argContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_multi_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_multi_arg" ):
                listener.enterFunc_multi_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_multi_arg" ):
                listener.exitFunc_multi_arg(self)




    def func_multi_arg(self):

        localctx = PSParser.Func_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_func_multi_arg)
        try:
            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.expr()
                self.state = 803
                self.match(PSParser.COMMA)
                self.state = 804
                self.func_multi_arg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_multi_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(PSParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_func_multi_arg_noparens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_multi_arg_noparens" ):
                listener.enterFunc_multi_arg_noparens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_multi_arg_noparens" ):
                listener.exitFunc_multi_arg_noparens(self)




    def func_multi_arg_noparens(self):

        localctx = PSParser.Func_multi_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_func_multi_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def args(self):
            return self.getTypedRuleContext(PSParser.ArgsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubexpr" ):
                listener.enterSubexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubexpr" ):
                listener.exitSubexpr(self)




    def subexpr(self):

        localctx = PSParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(PSParser.UNDERSCORE)
            self.state = 819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154, 156, 157, 160, 161, 172, 173, 174, 175, 176, 183]:
                self.state = 811
                self.atom()
                pass
            elif token in [34]:
                self.state = 812
                self.match(PSParser.L_BRACE)
                self.state = 815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 813
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 814
                    self.args()
                    pass


                self.state = 817
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(PSParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(PSParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_supexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupexpr" ):
                listener.enterSupexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupexpr" ):
                listener.exitSupexpr(self)




    def supexpr(self):

        localctx = PSParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(PSParser.CARET)
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154, 156, 157, 160, 161, 172, 173, 174, 175, 176, 183]:
                self.state = 822
                self.atom()
                pass
            elif token in [34]:
                self.state = 823
                self.match(PSParser.L_BRACE)
                self.state = 824
                self.expr()
                self.state = 825
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_subeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubeq" ):
                listener.enterSubeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubeq" ):
                listener.exitSubeq(self)




    def subeq(self):

        localctx = PSParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(PSParser.UNDERSCORE)
            self.state = 830
            self.match(PSParser.L_BRACE)
            self.state = 831
            self.equality()
            self.state = 832
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(PSParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(PSParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_supeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupeq" ):
                listener.enterSupeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupeq" ):
                listener.exitSupeq(self)




    def supeq(self):

        localctx = PSParser.SupeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_supeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(PSParser.UNDERSCORE)
            self.state = 835
            self.match(PSParser.L_BRACE)
            self.state = 836
            self.equality()
            self.state = 837
            self.match(PSParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr_list(self):
            return self.getTypedRuleContext(PSParser.Atom_expr_listContext,0)


        def set_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Set_relationContext)
            else:
                return self.getTypedRuleContext(PSParser.Set_relationContext,i)


        def IN(self):
            return self.getToken(PSParser.IN, 0)

        def NOTIN(self):
            return self.getToken(PSParser.NOTIN, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def minus_expr(self):
            return self.getTypedRuleContext(PSParser.Minus_exprContext,0)


        def SUBSET(self):
            return self.getToken(PSParser.SUBSET, 0)

        def SUPSET(self):
            return self.getToken(PSParser.SUPSET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_set_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_relation" ):
                listener.enterSet_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_relation" ):
                listener.exitSet_relation(self)



    def set_relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Set_relationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_set_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 840
                self.atom_expr_list()
                self.state = 841
                _la = self._input.LA(1)
                if not(((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & 536870915) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 842
                self.set_relation(2)
                pass

            elif la_ == 2:
                self.state = 844
                self.minus_expr(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Set_relationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_relation)
                    self.state = 847
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 848
                    _la = self._input.LA(1)
                    if not(_la==189 or _la==190):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 849
                    self.set_relation(4) 
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Minus_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_expr(self):
            return self.getTypedRuleContext(PSParser.Union_exprContext,0)


        def minus_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Minus_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Minus_exprContext,i)


        def SET_MINUS(self):
            return self.getToken(PSParser.SET_MINUS, 0)

        def getRuleIndex(self):
            return PSParser.RULE_minus_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinus_expr" ):
                listener.enterMinus_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinus_expr" ):
                listener.exitMinus_expr(self)



    def minus_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Minus_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_minus_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.union_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 863
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Minus_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_minus_expr)
                    self.state = 858
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 859
                    self.match(PSParser.SET_MINUS)
                    self.state = 860
                    self.minus_expr(3) 
                self.state = 865
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Union_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intersection_expr(self):
            return self.getTypedRuleContext(PSParser.Intersection_exprContext,0)


        def union_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Union_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Union_exprContext,i)


        def UNION(self):
            return self.getToken(PSParser.UNION, 0)

        def getRuleIndex(self):
            return PSParser.RULE_union_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_expr" ):
                listener.enterUnion_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_expr" ):
                listener.exitUnion_expr(self)



    def union_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Union_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_union_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.intersection_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 874
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Union_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_union_expr)
                    self.state = 869
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 870
                    self.match(PSParser.UNION)
                    self.state = 871
                    self.union_expr(3) 
                self.state = 876
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Intersection_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_group(self):
            return self.getTypedRuleContext(PSParser.Set_groupContext,0)


        def intersection_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Intersection_exprContext)
            else:
                return self.getTypedRuleContext(PSParser.Intersection_exprContext,i)


        def INTERSECTION(self):
            return self.getToken(PSParser.INTERSECTION, 0)

        def getRuleIndex(self):
            return PSParser.RULE_intersection_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersection_expr" ):
                listener.enterIntersection_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersection_expr" ):
                listener.exitIntersection_expr(self)



    def intersection_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PSParser.Intersection_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_intersection_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.set_group()
            self._ctx.stop = self._input.LT(-1)
            self.state = 885
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PSParser.Intersection_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_intersection_expr)
                    self.state = 880
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 881
                    self.match(PSParser.INTERSECTION)
                    self.state = 882
                    self.intersection_expr(3) 
                self.state = 887
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Set_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def minus_expr(self):
            return self.getTypedRuleContext(PSParser.Minus_exprContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def set_atom(self):
            return self.getTypedRuleContext(PSParser.Set_atomContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_set_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_group" ):
                listener.enterSet_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_group" ):
                listener.exitSet_group(self)




    def set_group(self):

        localctx = PSParser.Set_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_set_group)
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.match(PSParser.L_PAREN)
                self.state = 889
                self.minus_expr(0)
                self.state = 890
                self.match(PSParser.R_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.set_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interval(self):
            return self.getTypedRuleContext(PSParser.IntervalContext,0)


        def literal_set(self):
            return self.getTypedRuleContext(PSParser.Literal_setContext,0)


        def ordered_tuple(self):
            return self.getTypedRuleContext(PSParser.Ordered_tupleContext,0)


        def finite_set(self):
            return self.getTypedRuleContext(PSParser.Finite_setContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_set_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_atom" ):
                listener.enterSet_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_atom" ):
                listener.exitSet_atom(self)




    def set_atom(self):

        localctx = PSParser.Set_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_set_atom)
        try:
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.interval()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 896
                self.literal_set()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 897
                self.ordered_tuple()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 898
                self.finite_set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def COMMA(self):
            return self.getToken(PSParser.COMMA, 0)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def L_PAREN_VISUAL(self):
            return self.getToken(PSParser.L_PAREN_VISUAL, 0)

        def L_BRACK(self):
            return self.getToken(PSParser.L_BRACK, 0)

        def L_GROUP(self):
            return self.getToken(PSParser.L_GROUP, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def R_PAREN_VISUAL(self):
            return self.getToken(PSParser.R_PAREN_VISUAL, 0)

        def R_BRACK(self):
            return self.getToken(PSParser.R_BRACK, 0)

        def R_GROUP(self):
            return self.getToken(PSParser.R_GROUP, 0)

        def getRuleIndex(self):
            return PSParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = PSParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 5503195283456) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 902
            self.expr()
            self.state = 903
            self.match(PSParser.COMMA)
            self.state = 904
            self.expr()
            self.state = 905
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 11006390566912) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordered_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(PSParser.L_PAREN, 0)

        def semicolon_elements(self):
            return self.getTypedRuleContext(PSParser.Semicolon_elementsContext,0)


        def R_PAREN(self):
            return self.getToken(PSParser.R_PAREN, 0)

        def L_PAREN_VISUAL(self):
            return self.getToken(PSParser.L_PAREN_VISUAL, 0)

        def R_PAREN_VISUAL(self):
            return self.getToken(PSParser.R_PAREN_VISUAL, 0)

        def L_BRACKET(self):
            return self.getToken(PSParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(PSParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return PSParser.RULE_ordered_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdered_tuple" ):
                listener.enterOrdered_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdered_tuple" ):
                listener.exitOrdered_tuple(self)




    def ordered_tuple(self):

        localctx = PSParser.Ordered_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_ordered_tuple)
        try:
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.match(PSParser.L_PAREN)
                self.state = 908
                self.semicolon_elements()
                self.state = 909
                self.match(PSParser.R_PAREN)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.match(PSParser.L_PAREN_VISUAL)
                self.state = 912
                self.semicolon_elements()
                self.state = 913
                self.match(PSParser.R_PAREN_VISUAL)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 3)
                self.state = 915
                self.match(PSParser.L_BRACKET)
                self.state = 916
                self.semicolon_elements()
                self.state = 917
                self.match(PSParser.R_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finite_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def semicolon_elements(self):
            return self.getTypedRuleContext(PSParser.Semicolon_elementsContext,0)


        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(PSParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(PSParser.R_BRACE_VISUAL, 0)

        def BOXED_CMD(self):
            return self.getToken(PSParser.BOXED_CMD, 0)

        def getRuleIndex(self):
            return PSParser.RULE_finite_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinite_set" ):
                listener.enterFinite_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinite_set" ):
                listener.exitFinite_set(self)




    def finite_set(self):

        localctx = PSParser.Finite_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_finite_set)
        try:
            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.match(PSParser.L_BRACE)
                self.state = 922
                self.semicolon_elements()
                self.state = 923
                self.match(PSParser.R_BRACE)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 925
                self.match(PSParser.L_BRACE_VISUAL)
                self.state = 926
                self.semicolon_elements()
                self.state = 927
                self.match(PSParser.R_BRACE_VISUAL)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 3)
                self.state = 929
                self.match(PSParser.BOXED_CMD)
                self.state = 930
                self.match(PSParser.L_BRACE)
                self.state = 931
                self.semicolon_elements()
                self.state = 932
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_elements_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr_list(self):
            return self.getTypedRuleContext(PSParser.Atom_expr_listContext,0)


        def semicolon_elements_no_relation(self):
            return self.getTypedRuleContext(PSParser.Semicolon_elements_no_relationContext,0)


        def IN(self):
            return self.getToken(PSParser.IN, 0)

        def ASSIGNMENT(self):
            return self.getToken(PSParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return PSParser.RULE_set_elements_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_elements_relation" ):
                listener.enterSet_elements_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_elements_relation" ):
                listener.exitSet_elements_relation(self)




    def set_elements_relation(self):

        localctx = PSParser.Set_elements_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_set_elements_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.atom_expr_list()
            self.state = 937
            _la = self._input.LA(1)
            if not(_la==162 or _la==163):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 938
            self.semicolon_elements_no_relation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def semicolon_elements(self):
            return self.getTypedRuleContext(PSParser.Semicolon_elementsContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_set_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_elements" ):
                listener.enterSet_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_elements" ):
                listener.exitSet_elements(self)




    def set_elements(self):

        localctx = PSParser.Set_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_set_elements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.semicolon_elements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Semicolon_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Comma_elementsContext)
            else:
                return self.getTypedRuleContext(PSParser.Comma_elementsContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.SEMICOLON)
            else:
                return self.getToken(PSParser.SEMICOLON, i)

        def getRuleIndex(self):
            return PSParser.RULE_semicolon_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemicolon_elements" ):
                listener.enterSemicolon_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemicolon_elements" ):
                listener.exitSemicolon_elements(self)




    def semicolon_elements(self):

        localctx = PSParser.Semicolon_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_semicolon_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.comma_elements()
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==151:
                self.state = 943
                self.match(PSParser.SEMICOLON)
                self.state = 944
                self.comma_elements()
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Semicolon_elements_no_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comma_elements_no_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Comma_elements_no_relationContext)
            else:
                return self.getTypedRuleContext(PSParser.Comma_elements_no_relationContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.SEMICOLON)
            else:
                return self.getToken(PSParser.SEMICOLON, i)

        def getRuleIndex(self):
            return PSParser.RULE_semicolon_elements_no_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemicolon_elements_no_relation" ):
                listener.enterSemicolon_elements_no_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemicolon_elements_no_relation" ):
                listener.exitSemicolon_elements_no_relation(self)




    def semicolon_elements_no_relation(self):

        localctx = PSParser.Semicolon_elements_no_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_semicolon_elements_no_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.comma_elements_no_relation()
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==151:
                self.state = 951
                self.match(PSParser.SEMICOLON)
                self.state = 952
                self.comma_elements_no_relation()
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ElementContext)
            else:
                return self.getTypedRuleContext(PSParser.ElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_comma_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_elements" ):
                listener.enterComma_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_elements" ):
                listener.exitComma_elements(self)




    def comma_elements(self):

        localctx = PSParser.Comma_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_comma_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.element()
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==152:
                self.state = 959
                self.match(PSParser.COMMA)
                self.state = 960
                self.element()
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comma_elements_no_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_no_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.Element_no_relationContext)
            else:
                return self.getTypedRuleContext(PSParser.Element_no_relationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PSParser.COMMA)
            else:
                return self.getToken(PSParser.COMMA, i)

        def getRuleIndex(self):
            return PSParser.RULE_comma_elements_no_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComma_elements_no_relation" ):
                listener.enterComma_elements_no_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComma_elements_no_relation" ):
                listener.exitComma_elements_no_relation(self)




    def comma_elements_no_relation(self):

        localctx = PSParser.Comma_elements_no_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_comma_elements_no_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.element_no_relation()
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==152:
                self.state = 967
                self.match(PSParser.COMMA)
                self.state = 968
                self.element_no_relation()
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_no_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plus_minus_expr(self):
            return self.getTypedRuleContext(PSParser.Plus_minus_exprContext,0)


        def set_atom(self):
            return self.getTypedRuleContext(PSParser.Set_atomContext,0)


        def expr(self):
            return self.getTypedRuleContext(PSParser.ExprContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_element_no_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_no_relation" ):
                listener.enterElement_no_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_no_relation" ):
                listener.exitElement_no_relation(self)




    def element_no_relation(self):

        localctx = PSParser.Element_no_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_element_no_relation)
        try:
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.plus_minus_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.set_atom()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 976
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plus_minus_expr(self):
            return self.getTypedRuleContext(PSParser.Plus_minus_exprContext,0)


        def set_atom(self):
            return self.getTypedRuleContext(PSParser.Set_atomContext,0)


        def relation(self):
            return self.getTypedRuleContext(PSParser.RelationContext,0)


        def getRuleIndex(self):
            return PSParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = PSParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_element)
        try:
            self.state = 982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self.plus_minus_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.set_atom()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 981
                self.relation(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plus_minus_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PSParser.ExprContext)
            else:
                return self.getTypedRuleContext(PSParser.ExprContext,i)


        def PLUS_MINUS(self):
            return self.getToken(PSParser.PLUS_MINUS, 0)

        def getRuleIndex(self):
            return PSParser.RULE_plus_minus_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlus_minus_expr" ):
                listener.enterPlus_minus_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlus_minus_expr" ):
                listener.exitPlus_minus_expr(self)




    def plus_minus_expr(self):

        localctx = PSParser.Plus_minus_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_plus_minus_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.expr()
            self.state = 985
            self.match(PSParser.PLUS_MINUS)
            self.state = 986
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_NATURALS(self):
            return self.getToken(PSParser.SET_NATURALS, 0)

        def SET_INTEGERS(self):
            return self.getToken(PSParser.SET_INTEGERS, 0)

        def SET_RATIONALS(self):
            return self.getToken(PSParser.SET_RATIONALS, 0)

        def SET_REALS(self):
            return self.getToken(PSParser.SET_REALS, 0)

        def SET_COMPLEX(self):
            return self.getToken(PSParser.SET_COMPLEX, 0)

        def SET_PRIMES(self):
            return self.getToken(PSParser.SET_PRIMES, 0)

        def SET_EMPTY(self):
            return self.getToken(PSParser.SET_EMPTY, 0)

        def L_BRACE(self):
            return self.getToken(PSParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(PSParser.R_BRACE, 0)

        def getRuleIndex(self):
            return PSParser.RULE_literal_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_set" ):
                listener.enterLiteral_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_set" ):
                listener.exitLiteral_set(self)




    def literal_set(self):

        localctx = PSParser.Literal_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_literal_set)
        try:
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177]:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.match(PSParser.SET_NATURALS)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 2)
                self.state = 989
                self.match(PSParser.SET_INTEGERS)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 3)
                self.state = 990
                self.match(PSParser.SET_RATIONALS)
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 4)
                self.state = 991
                self.match(PSParser.SET_REALS)
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 5)
                self.state = 992
                self.match(PSParser.SET_COMPLEX)
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 6)
                self.state = 993
                self.match(PSParser.SET_PRIMES)
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 7)
                self.state = 994
                self.match(PSParser.SET_EMPTY)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 8)
                self.state = 995
                self.match(PSParser.L_BRACE)
                self.state = 996
                self.match(PSParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Just_eContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXP_E(self):
            return self.getToken(PSParser.EXP_E, 0)

        def getRuleIndex(self):
            return PSParser.RULE_just_e

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJust_e" ):
                listener.enterJust_e(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJust_e" ):
                listener.exitJust_e(self)




    def just_e(self):

        localctx = PSParser.Just_eContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_just_e)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(PSParser.EXP_E)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.relation_sempred
        self._predicates[15] = self.additive_sempred
        self._predicates[16] = self.mp_sempred
        self._predicates[17] = self.mp_nofunc_sempred
        self._predicates[26] = self.exp_sempred
        self._predicates[27] = self.exp_nofunc_sempred
        self._predicates[62] = self.set_relation_sempred
        self._predicates[63] = self.minus_expr_sempred
        self._predicates[64] = self.union_expr_sempred
        self._predicates[65] = self.intersection_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def mp_sempred(self, localctx:MpContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def exp_sempred(self, localctx:ExpContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def set_relation_sempred(self, localctx:Set_relationContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

    def minus_expr_sempred(self, localctx:Minus_exprContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def union_expr_sempred(self, localctx:Union_exprContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def intersection_expr_sempred(self, localctx:Intersection_exprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         




