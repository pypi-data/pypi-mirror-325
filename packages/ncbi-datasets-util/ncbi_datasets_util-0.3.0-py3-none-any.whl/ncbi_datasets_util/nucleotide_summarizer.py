# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_nucleotide_summarizer.ipynb.

# %% auto 0
__all__ = ['get_nucleotide_stats', 'cli']

# %% ../nbs/05_nucleotide_summarizer.ipynb 3
# standard libs
import os
import re

# Common to template
# add into settings.ini, requirements, package name is python-dotenv, for conda build ensure `conda config --add channels conda-forge`
import dotenv  # for loading config from .env files, https://pypi.org/project/python-dotenv/
import envyaml  # Allows to loads env vars into a yaml file, https://github.com/thesimj/envyaml
import fastcore  # To add functionality related to nbdev development, https://github.com/fastai/fastcore/
from fastcore import (
    test,
)
from fastcore.script import (
    call_parse,
)  # for @call_parse, https://fastcore.fast.ai/script
import json  # for nicely printing json and yaml

# import functions from core module (optional, but most likely needed).
from ncbi_datasets_util import (
    core,
)

# Project specific libraries

import pandas as pd

# %% ../nbs/05_nucleotide_summarizer.ipynb 6
def get_nucleotide_stats(fasta_file: str) -> list:
    stats_list = []
    fasta = core.Fasta.from_file(fasta_file)
    for entry in fasta.entries:
        accession = entry.name.split()[0]
        entry_stats = {
            "accession": accession,
            "full_name": entry.name,
            "length": len(entry),
        }
        entry_stats.update(entry.iupac_counts)
        stats_list.append(entry_stats)
    return stats_list

# %% ../nbs/05_nucleotide_summarizer.ipynb 9
from fastcore.script import call_parse


@call_parse
def cli(
    fasta_file: str = None,  # Taxonomy name
    output_file: str = None,  # An alternative name
    config=None,
) -> None:
    """
    This will print Hello World! with your name
    """
    # config = core.get_config(config_file)  # Set env vars and get config variables

    print(f"Parsing all entries in {fasta_file}")
    stats = get_nucleotide_stats(fasta_file)
    stats_df = pd.DataFrame.from_records(stats)
    stats_df.to_csv(output_file, sep="\t", index=False)
    print(f"Data summary and QC stats printed to {output_file}")
