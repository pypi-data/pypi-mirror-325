# coding: utf-8

"""
    IONOS Cloud - DNS API

    Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.   # noqa: E501

    The version of the OpenAPI document: 1.17.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_dns.configuration import Configuration


class QuotaDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'zones': 'int',

        'secondary_zones': 'int',

        'records': 'int',

        'reverse_records': 'int',
    }

    attribute_map = {

        'zones': 'zones',

        'secondary_zones': 'secondaryZones',

        'records': 'records',

        'reverse_records': 'reverseRecords',
    }

    def __init__(self, zones=0, secondary_zones=0, records=0, reverse_records=0, local_vars_configuration=None):  # noqa: E501
        """QuotaDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._zones = None
        self._secondary_zones = None
        self._records = None
        self._reverse_records = None
        self.discriminator = None

        self.zones = zones
        self.secondary_zones = secondary_zones
        self.records = records
        self.reverse_records = reverse_records


    @property
    def zones(self):
        """Gets the zones of this QuotaDetail.  # noqa: E501

        count of the number of zones  # noqa: E501

        :return: The zones of this QuotaDetail.  # noqa: E501
        :rtype: int
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this QuotaDetail.

        count of the number of zones  # noqa: E501

        :param zones: The zones of this QuotaDetail.  # noqa: E501
        :type zones: int
        """
        if self.local_vars_configuration.client_side_validation and zones is None:  # noqa: E501
            raise ValueError("Invalid value for `zones`, must not be `None`")  # noqa: E501

        self._zones = zones

    @property
    def secondary_zones(self):
        """Gets the secondary_zones of this QuotaDetail.  # noqa: E501

        count of the number of secondary zones  # noqa: E501

        :return: The secondary_zones of this QuotaDetail.  # noqa: E501
        :rtype: int
        """
        return self._secondary_zones

    @secondary_zones.setter
    def secondary_zones(self, secondary_zones):
        """Sets the secondary_zones of this QuotaDetail.

        count of the number of secondary zones  # noqa: E501

        :param secondary_zones: The secondary_zones of this QuotaDetail.  # noqa: E501
        :type secondary_zones: int
        """
        if self.local_vars_configuration.client_side_validation and secondary_zones is None:  # noqa: E501
            raise ValueError("Invalid value for `secondary_zones`, must not be `None`")  # noqa: E501

        self._secondary_zones = secondary_zones

    @property
    def records(self):
        """Gets the records of this QuotaDetail.  # noqa: E501

        count of the number of records  # noqa: E501

        :return: The records of this QuotaDetail.  # noqa: E501
        :rtype: int
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this QuotaDetail.

        count of the number of records  # noqa: E501

        :param records: The records of this QuotaDetail.  # noqa: E501
        :type records: int
        """
        if self.local_vars_configuration.client_side_validation and records is None:  # noqa: E501
            raise ValueError("Invalid value for `records`, must not be `None`")  # noqa: E501

        self._records = records

    @property
    def reverse_records(self):
        """Gets the reverse_records of this QuotaDetail.  # noqa: E501

        count of the number of reverse DNS records  # noqa: E501

        :return: The reverse_records of this QuotaDetail.  # noqa: E501
        :rtype: int
        """
        return self._reverse_records

    @reverse_records.setter
    def reverse_records(self, reverse_records):
        """Sets the reverse_records of this QuotaDetail.

        count of the number of reverse DNS records  # noqa: E501

        :param reverse_records: The reverse_records of this QuotaDetail.  # noqa: E501
        :type reverse_records: int
        """
        if self.local_vars_configuration.client_side_validation and reverse_records is None:  # noqa: E501
            raise ValueError("Invalid value for `reverse_records`, must not be `None`")  # noqa: E501

        self._reverse_records = reverse_records
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuotaDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuotaDetail):
            return True

        return self.to_dict() != other.to_dict()
