# coding: utf-8

"""
    IONOS Cloud - DNS API

    Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.   # noqa: E501

    The version of the OpenAPI document: 1.17.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_dns.configuration import Configuration


class KeyData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'flags': 'int',

        'pub_key': 'str',
    }

    attribute_map = {

        'flags': 'flags',

        'pub_key': 'pubKey',
    }

    def __init__(self, flags=None, pub_key=None, local_vars_configuration=None):  # noqa: E501
        """KeyData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._flags = None
        self._pub_key = None
        self.discriminator = None

        if flags is not None:
            self.flags = flags
        if pub_key is not None:
            self.pub_key = pub_key


    @property
    def flags(self):
        """Gets the flags of this KeyData.  # noqa: E501

        Represents the key's metadata and usage information.  # noqa: E501

        :return: The flags of this KeyData.  # noqa: E501
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this KeyData.

        Represents the key's metadata and usage information.  # noqa: E501

        :param flags: The flags of this KeyData.  # noqa: E501
        :type flags: int
        """

        self._flags = flags

    @property
    def pub_key(self):
        """Gets the pub_key of this KeyData.  # noqa: E501

        Represents the public key data in Base64 encoding.  # noqa: E501

        :return: The pub_key of this KeyData.  # noqa: E501
        :rtype: str
        """
        return self._pub_key

    @pub_key.setter
    def pub_key(self, pub_key):
        """Sets the pub_key of this KeyData.

        Represents the public key data in Base64 encoding.  # noqa: E501

        :param pub_key: The pub_key of this KeyData.  # noqa: E501
        :type pub_key: str
        """

        self._pub_key = pub_key
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeyData):
            return True

        return self.to_dict() != other.to_dict()
