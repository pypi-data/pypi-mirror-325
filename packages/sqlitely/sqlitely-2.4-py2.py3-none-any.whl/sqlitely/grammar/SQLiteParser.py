# Generated from SQLite.g4 by ANTLR 4.13.0
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    return [
        4,1,192,2088,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,1,0,1,0,3,0,203,8,0,1,0,1,0,1,1,1,1,1,2,5,2,210,
        8,2,10,2,12,2,213,9,2,1,2,1,2,4,2,217,8,2,11,2,12,2,218,1,2,5,2,
        222,8,2,10,2,12,2,225,9,2,1,2,5,2,228,8,2,10,2,12,2,231,9,2,1,3,
        1,3,1,3,3,3,236,8,3,3,3,238,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,3,3,270,8,3,1,4,1,4,1,4,1,4,1,4,3,4,277,
        8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,285,8,4,1,4,1,4,1,4,1,4,1,4,1,4,
        3,4,293,8,4,1,4,1,4,1,4,3,4,298,8,4,1,4,3,4,301,8,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,3,5,310,8,5,1,6,1,6,3,6,314,8,6,1,6,1,6,1,6,1,6,
        1,7,1,7,3,7,322,8,7,1,7,1,7,3,7,326,8,7,3,7,328,8,7,1,8,1,8,1,8,
        3,8,333,8,8,3,8,335,8,8,1,9,3,9,338,8,9,1,9,1,9,1,9,3,9,343,8,9,
        1,9,1,9,3,9,347,8,9,1,9,4,9,350,8,9,11,9,12,9,351,1,9,1,9,1,9,1,
        9,1,9,5,9,359,8,9,10,9,12,9,362,9,9,3,9,364,8,9,1,9,1,9,1,9,1,9,
        3,9,370,8,9,3,9,372,8,9,1,10,1,10,3,10,376,8,10,1,10,1,10,1,10,1,
        10,3,10,382,8,10,1,10,1,10,1,10,3,10,387,8,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,5,10,396,8,10,10,10,12,10,399,9,10,1,10,1,10,1,10,
        3,10,404,8,10,1,11,1,11,3,11,408,8,11,1,11,1,11,1,11,1,11,3,11,414,
        8,11,1,11,1,11,1,11,3,11,419,8,11,1,11,1,11,1,11,1,11,1,11,5,11,
        426,8,11,10,11,12,11,429,9,11,1,11,1,11,5,11,433,8,11,10,11,12,11,
        436,9,11,1,11,1,11,1,11,1,11,5,11,442,8,11,10,11,12,11,445,9,11,
        3,11,447,8,11,1,11,1,11,3,11,451,8,11,1,12,1,12,3,12,455,8,12,1,
        12,1,12,1,12,1,12,3,12,461,8,12,1,12,1,12,1,12,3,12,466,8,12,1,12,
        1,12,1,12,1,12,1,12,3,12,473,8,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,5,12,482,8,12,10,12,12,12,485,9,12,3,12,487,8,12,3,12,489,8,
        12,1,12,1,12,1,12,1,12,3,12,495,8,12,1,12,1,12,1,12,1,12,3,12,501,
        8,12,1,12,1,12,3,12,505,8,12,1,12,1,12,1,12,1,12,1,12,3,12,512,8,
        12,1,12,1,12,4,12,516,8,12,11,12,12,12,517,1,12,1,12,1,13,1,13,3,
        13,524,8,13,1,13,1,13,1,13,1,13,3,13,530,8,13,1,13,1,13,1,13,3,13,
        535,8,13,1,13,1,13,1,13,1,13,1,13,5,13,542,8,13,10,13,12,13,545,
        9,13,1,13,1,13,3,13,549,8,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,3,14,560,8,14,1,14,1,14,1,14,3,14,565,8,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,5,14,574,8,14,10,14,12,14,577,9,14,1,14,1,
        14,3,14,581,8,14,1,15,3,15,584,8,15,1,15,1,15,1,15,1,15,1,15,3,15,
        591,8,15,1,15,3,15,594,8,15,1,16,3,16,597,8,16,1,16,1,16,1,16,1,
        16,1,16,3,16,604,8,16,1,16,3,16,607,8,16,1,16,1,16,1,16,1,16,1,16,
        5,16,614,8,16,10,16,12,16,617,9,16,3,16,619,8,16,1,16,1,16,1,16,
        1,16,3,16,625,8,16,3,16,627,8,16,1,17,1,17,3,17,631,8,17,1,17,1,
        17,1,18,1,18,1,18,1,18,3,18,639,8,18,1,18,1,18,1,18,3,18,644,8,18,
        1,18,1,18,1,19,1,19,1,19,1,19,3,19,652,8,19,1,19,1,19,1,19,3,19,
        657,8,19,1,19,1,19,1,20,1,20,1,20,1,20,3,20,665,8,20,1,20,1,20,1,
        20,3,20,670,8,20,1,20,1,20,1,21,1,21,1,21,1,21,3,21,678,8,21,1,21,
        1,21,1,21,3,21,683,8,21,1,21,1,21,1,22,3,22,688,8,22,1,22,1,22,1,
        22,1,22,5,22,694,8,22,10,22,12,22,697,9,22,1,22,1,22,1,22,1,22,1,
        22,5,22,704,8,22,10,22,12,22,707,9,22,3,22,709,8,22,1,22,1,22,1,
        22,1,22,3,22,715,8,22,3,22,717,8,22,1,23,3,23,720,8,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,3,23,739,8,23,1,23,1,23,1,23,1,23,3,23,745,8,23,1,23,1,
        23,1,23,3,23,750,8,23,1,23,1,23,1,23,1,23,5,23,756,8,23,10,23,12,
        23,759,9,23,1,23,1,23,3,23,763,8,23,1,23,1,23,1,23,1,23,1,23,5,23,
        770,8,23,10,23,12,23,773,9,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,
        781,8,23,10,23,12,23,784,9,23,1,23,1,23,5,23,788,8,23,10,23,12,23,
        791,9,23,1,23,3,23,794,8,23,1,23,1,23,3,23,798,8,23,1,23,1,23,3,
        23,802,8,23,1,23,3,23,805,8,23,1,24,1,24,1,24,1,24,3,24,811,8,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,820,8,24,1,25,1,25,1,25,
        1,25,1,25,3,25,827,8,25,1,25,1,25,3,25,831,8,25,3,25,833,8,25,1,
        26,1,26,3,26,837,8,26,1,26,1,26,1,27,1,27,1,27,3,27,844,8,27,3,27,
        846,8,27,1,27,1,27,3,27,850,8,27,1,27,3,27,853,8,27,1,28,1,28,1,
        28,1,29,3,29,859,8,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,867,8,29,
        10,29,12,29,870,9,29,3,29,872,8,29,1,29,1,29,1,29,1,29,3,29,878,
        8,29,3,29,880,8,29,1,30,3,30,883,8,30,1,30,1,30,1,30,1,30,5,30,889,
        8,30,10,30,12,30,892,9,30,1,30,1,30,1,30,1,30,1,30,5,30,899,8,30,
        10,30,12,30,902,9,30,3,30,904,8,30,1,30,1,30,1,30,1,30,3,30,910,
        8,30,3,30,912,8,30,1,31,3,31,915,8,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,3,31,928,8,31,1,31,1,31,1,31,1,31,3,
        31,934,8,31,1,31,1,31,1,31,1,31,1,31,3,31,941,8,31,1,31,1,31,1,31,
        5,31,946,8,31,10,31,12,31,949,9,31,1,31,1,31,1,31,1,31,5,31,955,
        8,31,10,31,12,31,958,9,31,1,31,3,31,961,8,31,3,31,963,8,31,1,31,
        1,31,3,31,967,8,31,1,31,3,31,970,8,31,1,32,3,32,973,8,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,986,8,32,1,
        32,1,32,1,32,1,32,3,32,992,8,32,1,32,1,32,1,32,1,32,1,32,3,32,999,
        8,32,1,32,1,32,1,32,5,32,1004,8,32,10,32,12,32,1007,9,32,1,32,1,
        32,1,32,1,32,5,32,1013,8,32,10,32,12,32,1016,9,32,1,32,3,32,1019,
        8,32,3,32,1021,8,32,1,32,1,32,3,32,1025,8,32,1,32,3,32,1028,8,32,
        1,32,1,32,1,32,1,32,1,32,5,32,1035,8,32,10,32,12,32,1038,9,32,3,
        32,1040,8,32,1,32,1,32,1,32,1,32,3,32,1046,8,32,3,32,1048,8,32,1,
        33,1,33,1,33,3,33,1053,8,33,1,34,1,34,3,34,1057,8,34,1,34,5,34,1060,
        8,34,10,34,12,34,1063,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,3,35,1076,8,35,1,36,1,36,1,36,1,36,5,36,1082,8,
        36,10,36,12,36,1085,9,36,1,36,1,36,1,36,5,36,1090,8,36,10,36,12,
        36,1093,9,36,1,36,3,36,1096,8,36,1,36,4,36,1099,8,36,11,36,12,36,
        1100,3,36,1103,8,36,1,37,1,37,1,38,1,38,3,38,1109,8,38,1,38,1,38,
        1,38,3,38,1114,8,38,1,38,1,38,3,38,1118,8,38,1,38,3,38,1121,8,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,3,38,1139,8,38,1,38,1,38,1,38,1,38,3,38,1145,8,38,
        1,39,1,39,1,39,1,39,5,39,1151,8,39,10,39,12,39,1154,9,39,1,39,1,
        39,1,39,5,39,1159,8,39,10,39,12,39,1162,9,39,1,39,3,39,1165,8,39,
        1,39,3,39,1168,8,39,1,40,1,40,1,40,3,40,1173,8,40,1,41,1,41,1,41,
        1,41,1,41,1,41,3,41,1181,8,41,1,41,1,41,1,41,3,41,1186,8,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,3,41,1195,8,41,1,41,1,41,3,41,1199,
        8,41,1,41,3,41,1202,8,41,1,41,1,41,1,41,1,41,5,41,1208,8,41,10,41,
        12,41,1211,9,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,5,41,1229,8,41,10,41,12,41,1232,9,
        41,3,41,1234,8,41,1,41,1,41,1,41,3,41,1239,8,41,1,41,3,41,1242,8,
        41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1250,8,41,1,41,1,41,1,41,1,
        41,1,41,4,41,1257,8,41,11,41,12,41,1258,1,41,1,41,3,41,1263,8,41,
        1,41,1,41,1,41,3,41,1268,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1301,
        8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1313,
        8,41,1,41,1,41,3,41,1317,8,41,1,41,1,41,1,41,3,41,1322,8,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1334,8,41,1,41,
        1,41,1,41,1,41,3,41,1340,8,41,1,41,1,41,1,41,1,41,1,41,3,41,1347,
        8,41,1,41,1,41,3,41,1351,8,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,
        1359,8,41,10,41,12,41,1362,9,41,3,41,1364,8,41,1,41,1,41,1,41,1,
        41,3,41,1370,8,41,1,41,3,41,1373,8,41,5,41,1375,8,41,10,41,12,41,
        1378,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,
        1,43,5,43,1392,8,43,10,43,12,43,1395,9,43,1,43,1,43,3,43,1399,8,
        43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1411,8,
        43,1,43,1,43,3,43,1415,8,43,5,43,1417,8,43,10,43,12,43,1420,9,43,
        1,43,3,43,1423,8,43,1,43,1,43,1,43,1,43,1,43,3,43,1430,8,43,3,43,
        1432,8,43,1,44,3,44,1435,8,44,1,44,1,44,1,44,5,44,1440,8,44,10,44,
        12,44,1443,9,44,1,44,1,44,1,44,1,44,1,44,5,44,1450,8,44,10,44,12,
        44,1453,9,44,3,44,1455,8,44,1,44,3,44,1458,8,44,1,45,1,45,3,45,1462,
        8,45,1,45,1,45,1,45,1,45,1,45,3,45,1469,8,45,1,46,1,46,1,46,3,46,
        1474,8,46,1,47,1,47,1,47,1,47,3,47,1480,8,47,1,47,3,47,1483,8,47,
        3,47,1485,8,47,1,47,1,47,1,47,1,47,3,47,1491,8,47,1,47,3,47,1494,
        8,47,3,47,1496,8,47,5,47,1498,8,47,10,47,12,47,1501,9,47,1,48,1,
        48,3,48,1505,8,48,1,48,1,48,1,48,1,48,1,48,5,48,1512,8,48,10,48,
        12,48,1515,9,48,3,48,1517,8,48,1,48,1,48,1,48,1,48,1,48,5,48,1524,
        8,48,10,48,12,48,1527,9,48,3,48,1529,8,48,1,48,3,48,1532,8,48,1,
        48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1544,8,49,3,
        49,1546,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1555,8,50,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1564,8,51,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1576,8,52,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1588,8,53,1,54,1,54,1,54,1,
        54,1,54,1,54,3,54,1596,8,54,1,54,1,54,1,55,1,55,3,55,1602,8,55,1,
        55,1,55,3,55,1606,8,55,1,55,3,55,1609,8,55,1,56,1,56,3,56,1613,8,
        56,1,56,1,56,1,56,3,56,1618,8,56,1,56,1,56,1,56,1,56,5,56,1624,8,
        56,10,56,12,56,1627,9,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,5,56,1643,8,56,10,56,12,56,1646,9,
        56,1,56,1,56,1,56,3,56,1651,8,56,1,57,1,57,1,57,3,57,1656,8,57,1,
        58,1,58,1,58,1,58,1,58,1,58,5,58,1664,8,58,10,58,12,58,1667,9,58,
        1,58,1,58,1,58,3,58,1672,8,58,3,58,1674,8,58,1,58,1,58,1,58,1,58,
        1,58,1,58,3,58,1682,8,58,1,58,1,58,1,58,1,58,1,58,3,58,1689,8,58,
        1,58,1,58,1,58,5,58,1694,8,58,10,58,12,58,1697,9,58,1,58,1,58,3,
        58,1701,8,58,3,58,1703,8,58,4,58,1705,8,58,11,58,12,58,1706,1,59,
        1,59,3,59,1711,8,59,1,59,1,59,1,59,5,59,1716,8,59,10,59,12,59,1719,
        9,59,1,60,1,60,1,60,3,60,1724,8,60,1,60,1,60,1,60,1,60,1,60,1,60,
        3,60,1732,8,60,1,61,1,61,1,61,3,61,1737,8,61,1,61,3,61,1740,8,61,
        1,61,1,61,3,61,1744,8,61,1,62,1,62,1,62,3,62,1749,8,62,1,63,1,63,
        1,63,1,63,1,63,5,63,1756,8,63,10,63,12,63,1759,9,63,1,63,1,63,3,
        63,1763,8,63,1,63,1,63,3,63,1767,8,63,1,63,3,63,1770,8,63,1,63,1,
        63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1783,8,64,1,
        64,3,64,1786,8,64,3,64,1788,8,64,1,65,1,65,1,65,3,65,1793,8,65,1,
        65,1,65,3,65,1797,8,65,1,65,3,65,1800,8,65,1,65,1,65,1,65,1,65,1,
        65,3,65,1807,8,65,1,65,1,65,1,65,3,65,1812,8,65,1,65,1,65,1,65,1,
        65,1,65,5,65,1819,8,65,10,65,12,65,1822,9,65,3,65,1824,8,65,1,65,
        1,65,3,65,1828,8,65,1,65,3,65,1831,8,65,1,65,1,65,1,65,1,65,5,65,
        1837,8,65,10,65,12,65,1840,9,65,1,65,3,65,1843,8,65,1,65,1,65,3,
        65,1847,8,65,1,65,3,65,1850,8,65,1,65,1,65,1,65,1,65,3,65,1856,8,
        65,1,65,3,65,1859,8,65,3,65,1861,8,65,1,66,1,66,1,66,1,66,1,66,5,
        66,1868,8,66,10,66,12,66,1871,9,66,1,67,1,67,3,67,1875,8,67,1,67,
        1,67,3,67,1879,8,67,1,67,1,67,3,67,1883,8,67,1,67,3,67,1886,8,67,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,1895,8,68,10,68,12,68,1898,
        9,68,1,68,1,68,3,68,1902,8,68,1,69,1,69,3,69,1906,8,69,1,69,1,69,
        1,69,5,69,1911,8,69,10,69,12,69,1914,9,69,1,69,1,69,1,69,1,69,5,
        69,1920,8,69,10,69,12,69,1923,9,69,1,69,3,69,1926,8,69,3,69,1928,
        8,69,1,69,1,69,3,69,1932,8,69,1,69,1,69,1,69,1,69,1,69,5,69,1939,
        8,69,10,69,12,69,1942,9,69,1,69,1,69,3,69,1946,8,69,3,69,1948,8,
        69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,69,1959,8,69,10,
        69,12,69,1962,9,69,3,69,1964,8,69,1,69,1,69,1,69,1,69,1,69,5,69,
        1971,8,69,10,69,12,69,1974,9,69,1,69,1,69,1,69,1,69,1,69,1,69,5,
        69,1982,8,69,10,69,12,69,1985,9,69,1,69,1,69,5,69,1989,8,69,10,69,
        12,69,1992,9,69,3,69,1994,8,69,1,70,1,70,1,70,1,70,1,70,3,70,2001,
        8,70,1,71,3,71,2004,8,71,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,
        1,75,1,75,3,75,2016,8,75,1,76,1,76,1,76,3,76,2021,8,76,1,77,1,77,
        1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,
        1,84,1,85,1,85,1,85,1,85,5,85,2043,8,85,10,85,12,85,2046,9,85,1,
        85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,90,1,90,1,91,1,
        91,1,92,1,92,1,93,1,93,1,94,1,94,1,94,3,94,2069,8,94,1,95,1,95,1,
        96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,
        99,2086,8,99,1,99,1,427,1,82,100,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,0,25,3,0,
        66,66,79,79,97,97,2,0,54,54,75,75,2,0,11,11,125,125,1,0,157,158,
        1,0,1,1,1,0,4,4,11,0,9,9,11,11,51,52,56,56,64,64,87,87,119,119,122,
        122,136,136,141,141,166,166,2,0,41,41,68,68,5,0,31,31,82,82,96,96,
        146,146,150,150,2,0,13,13,18,19,1,0,14,15,1,0,20,23,1,0,24,27,1,
        0,5,6,4,0,91,91,113,113,115,115,142,142,2,0,67,67,167,167,2,0,172,
        172,179,179,3,0,93,93,139,139,152,152,3,0,31,31,82,82,150,150,2,
        0,84,84,111,111,3,0,89,89,112,112,149,149,2,0,35,35,70,70,5,0,60,
        62,122,122,181,183,185,185,188,188,2,0,14,16,119,119,1,0,31,182,
        2421,0,202,1,0,0,0,2,206,1,0,0,0,4,211,1,0,0,0,6,237,1,0,0,0,8,271,
        1,0,0,0,10,302,1,0,0,0,12,311,1,0,0,0,14,319,1,0,0,0,16,329,1,0,
        0,0,18,337,1,0,0,0,20,373,1,0,0,0,22,405,1,0,0,0,24,452,1,0,0,0,
        26,521,1,0,0,0,28,553,1,0,0,0,30,583,1,0,0,0,32,596,1,0,0,0,34,628,
        1,0,0,0,36,634,1,0,0,0,38,647,1,0,0,0,40,660,1,0,0,0,42,673,1,0,
        0,0,44,687,1,0,0,0,46,719,1,0,0,0,48,806,1,0,0,0,50,821,1,0,0,0,
        52,834,1,0,0,0,54,840,1,0,0,0,56,854,1,0,0,0,58,858,1,0,0,0,60,882,
        1,0,0,0,62,914,1,0,0,0,64,972,1,0,0,0,66,1049,1,0,0,0,68,1054,1,
        0,0,0,70,1064,1,0,0,0,72,1102,1,0,0,0,74,1104,1,0,0,0,76,1108,1,
        0,0,0,78,1167,1,0,0,0,80,1172,1,0,0,0,82,1267,1,0,0,0,84,1379,1,
        0,0,0,86,1385,1,0,0,0,88,1457,1,0,0,0,90,1461,1,0,0,0,92,1470,1,
        0,0,0,94,1475,1,0,0,0,96,1502,1,0,0,0,98,1535,1,0,0,0,100,1547,1,
        0,0,0,102,1563,1,0,0,0,104,1575,1,0,0,0,106,1587,1,0,0,0,108,1589,
        1,0,0,0,110,1601,1,0,0,0,112,1612,1,0,0,0,114,1655,1,0,0,0,116,1704,
        1,0,0,0,118,1708,1,0,0,0,120,1723,1,0,0,0,122,1733,1,0,0,0,124,1748,
        1,0,0,0,126,1750,1,0,0,0,128,1787,1,0,0,0,130,1860,1,0,0,0,132,1862,
        1,0,0,0,134,1885,1,0,0,0,136,1901,1,0,0,0,138,1993,1,0,0,0,140,2000,
        1,0,0,0,142,2003,1,0,0,0,144,2007,1,0,0,0,146,2009,1,0,0,0,148,2011,
        1,0,0,0,150,2015,1,0,0,0,152,2020,1,0,0,0,154,2022,1,0,0,0,156,2024,
        1,0,0,0,158,2026,1,0,0,0,160,2028,1,0,0,0,162,2030,1,0,0,0,164,2032,
        1,0,0,0,166,2034,1,0,0,0,168,2036,1,0,0,0,170,2038,1,0,0,0,172,2049,
        1,0,0,0,174,2051,1,0,0,0,176,2053,1,0,0,0,178,2055,1,0,0,0,180,2057,
        1,0,0,0,182,2059,1,0,0,0,184,2061,1,0,0,0,186,2063,1,0,0,0,188,2068,
        1,0,0,0,190,2070,1,0,0,0,192,2072,1,0,0,0,194,2074,1,0,0,0,196,2076,
        1,0,0,0,198,2085,1,0,0,0,200,203,3,4,2,0,201,203,3,2,1,0,202,200,
        1,0,0,0,202,201,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,
        5,0,0,1,205,1,1,0,0,0,206,207,5,192,0,0,207,3,1,0,0,0,208,210,5,
        7,0,0,209,208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,
        0,0,0,212,214,1,0,0,0,213,211,1,0,0,0,214,223,3,6,3,0,215,217,5,
        7,0,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,
        0,0,0,219,220,1,0,0,0,220,222,3,6,3,0,221,216,1,0,0,0,222,225,1,
        0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,229,1,0,0,0,225,223,1,
        0,0,0,226,228,5,7,0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,
        0,0,0,229,230,1,0,0,0,230,5,1,0,0,0,231,229,1,0,0,0,232,235,5,81,
        0,0,233,234,5,137,0,0,234,236,5,133,0,0,235,233,1,0,0,0,235,236,
        1,0,0,0,236,238,1,0,0,0,237,232,1,0,0,0,237,238,1,0,0,0,238,269,
        1,0,0,0,239,270,3,8,4,0,240,270,3,10,5,0,241,270,3,12,6,0,242,270,
        3,14,7,0,243,270,3,16,8,0,244,270,3,18,9,0,245,270,3,20,10,0,246,
        270,3,22,11,0,247,270,3,24,12,0,248,270,3,26,13,0,249,270,3,28,14,
        0,250,270,3,30,15,0,251,270,3,32,16,0,252,270,3,34,17,0,253,270,
        3,36,18,0,254,270,3,38,19,0,255,270,3,40,20,0,256,270,3,42,21,0,
        257,270,3,44,22,0,258,270,3,46,23,0,259,270,3,48,24,0,260,270,3,
        50,25,0,261,270,3,52,26,0,262,270,3,54,27,0,263,270,3,56,28,0,264,
        270,3,58,29,0,265,270,3,60,30,0,266,270,3,62,31,0,267,270,3,64,32,
        0,268,270,3,66,33,0,269,239,1,0,0,0,269,240,1,0,0,0,269,241,1,0,
        0,0,269,242,1,0,0,0,269,243,1,0,0,0,269,244,1,0,0,0,269,245,1,0,
        0,0,269,246,1,0,0,0,269,247,1,0,0,0,269,248,1,0,0,0,269,249,1,0,
        0,0,269,250,1,0,0,0,269,251,1,0,0,0,269,252,1,0,0,0,269,253,1,0,
        0,0,269,254,1,0,0,0,269,255,1,0,0,0,269,256,1,0,0,0,269,257,1,0,
        0,0,269,258,1,0,0,0,269,259,1,0,0,0,269,260,1,0,0,0,269,261,1,0,
        0,0,269,262,1,0,0,0,269,263,1,0,0,0,269,264,1,0,0,0,269,265,1,0,
        0,0,269,266,1,0,0,0,269,267,1,0,0,0,269,268,1,0,0,0,270,7,1,0,0,
        0,271,272,5,36,0,0,272,276,5,156,0,0,273,274,3,160,80,0,274,275,
        5,8,0,0,275,277,1,0,0,0,276,273,1,0,0,0,276,277,1,0,0,0,277,278,
        1,0,0,0,278,300,3,164,82,0,279,280,5,145,0,0,280,281,5,161,0,0,281,
        301,3,164,82,0,282,284,5,145,0,0,283,285,5,53,0,0,284,283,1,0,0,
        0,284,285,1,0,0,0,285,286,1,0,0,0,286,287,3,168,84,0,287,288,5,161,
        0,0,288,289,3,168,84,0,289,301,1,0,0,0,290,292,5,33,0,0,291,293,
        5,53,0,0,292,291,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,301,
        3,68,34,0,295,297,5,72,0,0,296,298,5,53,0,0,297,296,1,0,0,0,297,
        298,1,0,0,0,298,299,1,0,0,0,299,301,3,68,34,0,300,279,1,0,0,0,300,
        282,1,0,0,0,300,290,1,0,0,0,300,295,1,0,0,0,301,9,1,0,0,0,302,309,
        5,38,0,0,303,310,3,160,80,0,304,310,3,166,83,0,305,306,3,160,80,
        0,306,307,5,8,0,0,307,308,3,166,83,0,308,310,1,0,0,0,309,303,1,0,
        0,0,309,304,1,0,0,0,309,305,1,0,0,0,309,310,1,0,0,0,310,11,1,0,0,
        0,311,313,5,42,0,0,312,314,5,63,0,0,313,312,1,0,0,0,313,314,1,0,
        0,0,314,315,1,0,0,0,315,316,3,82,41,0,316,317,5,40,0,0,317,318,3,
        160,80,0,318,13,1,0,0,0,319,321,5,45,0,0,320,322,7,0,0,0,321,320,
        1,0,0,0,321,322,1,0,0,0,322,327,1,0,0,0,323,325,5,162,0,0,324,326,
        3,190,95,0,325,324,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,323,
        1,0,0,0,327,328,1,0,0,0,328,15,1,0,0,0,329,334,7,1,0,0,330,332,5,
        162,0,0,331,333,3,190,95,0,332,331,1,0,0,0,332,333,1,0,0,0,333,335,
        1,0,0,0,334,330,1,0,0,0,334,335,1,0,0,0,335,17,1,0,0,0,336,338,3,
        118,59,0,337,336,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,349,
        3,138,69,0,340,342,5,165,0,0,341,343,5,35,0,0,342,341,1,0,0,0,342,
        343,1,0,0,0,343,347,1,0,0,0,344,347,5,105,0,0,345,347,5,77,0,0,346,
        340,1,0,0,0,346,344,1,0,0,0,346,345,1,0,0,0,347,348,1,0,0,0,348,
        350,3,138,69,0,349,346,1,0,0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,
        352,1,0,0,0,352,363,1,0,0,0,353,354,5,128,0,0,354,355,5,47,0,0,355,
        360,3,122,61,0,356,357,5,11,0,0,357,359,3,122,61,0,358,356,1,0,0,
        0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,364,1,0,0,
        0,362,360,1,0,0,0,363,353,1,0,0,0,363,364,1,0,0,0,364,371,1,0,0,
        0,365,366,5,114,0,0,366,369,3,82,41,0,367,368,7,2,0,0,368,370,3,
        82,41,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,365,
        1,0,0,0,371,372,1,0,0,0,372,19,1,0,0,0,373,375,5,57,0,0,374,376,
        5,166,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,381,
        5,99,0,0,378,379,5,95,0,0,379,380,5,119,0,0,380,382,5,80,0,0,381,
        378,1,0,0,0,381,382,1,0,0,0,382,386,1,0,0,0,383,384,3,160,80,0,384,
        385,5,8,0,0,385,387,1,0,0,0,386,383,1,0,0,0,386,387,1,0,0,0,387,
        388,1,0,0,0,388,389,3,176,88,0,389,390,5,126,0,0,390,391,3,164,82,
        0,391,392,5,9,0,0,392,397,3,110,55,0,393,394,5,11,0,0,394,396,3,
        110,55,0,395,393,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,
        1,0,0,0,398,400,1,0,0,0,399,397,1,0,0,0,400,403,5,10,0,0,401,402,
        5,174,0,0,402,404,3,82,41,0,403,401,1,0,0,0,403,404,1,0,0,0,404,
        21,1,0,0,0,405,407,5,57,0,0,406,408,7,3,0,0,407,406,1,0,0,0,407,
        408,1,0,0,0,408,409,1,0,0,0,409,413,5,156,0,0,410,411,5,95,0,0,411,
        412,5,119,0,0,412,414,5,80,0,0,413,410,1,0,0,0,413,414,1,0,0,0,414,
        418,1,0,0,0,415,416,3,160,80,0,416,417,5,8,0,0,417,419,1,0,0,0,418,
        415,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,450,3,164,82,0,421,
        422,5,9,0,0,422,427,3,68,34,0,423,424,5,11,0,0,424,426,3,68,34,0,
        425,423,1,0,0,0,426,429,1,0,0,0,427,428,1,0,0,0,427,425,1,0,0,0,
        428,434,1,0,0,0,429,427,1,0,0,0,430,431,5,11,0,0,431,433,3,112,56,
        0,432,430,1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,
        0,435,437,1,0,0,0,436,434,1,0,0,0,437,446,5,10,0,0,438,443,3,114,
        57,0,439,440,5,11,0,0,440,442,3,114,57,0,441,439,1,0,0,0,442,445,
        1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,447,1,0,0,0,445,443,
        1,0,0,0,446,438,1,0,0,0,446,447,1,0,0,0,447,451,1,0,0,0,448,449,
        5,40,0,0,449,451,3,60,30,0,450,421,1,0,0,0,450,448,1,0,0,0,451,23,
        1,0,0,0,452,454,5,57,0,0,453,455,7,3,0,0,454,453,1,0,0,0,454,455,
        1,0,0,0,455,456,1,0,0,0,456,460,5,163,0,0,457,458,5,95,0,0,458,459,
        5,119,0,0,459,461,5,80,0,0,460,457,1,0,0,0,460,461,1,0,0,0,461,465,
        1,0,0,0,462,463,3,160,80,0,463,464,5,8,0,0,464,466,1,0,0,0,465,462,
        1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,472,3,178,89,0,468,473,
        5,44,0,0,469,473,5,34,0,0,470,471,5,104,0,0,471,473,5,124,0,0,472,
        468,1,0,0,0,472,469,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,
        488,1,0,0,0,474,489,5,67,0,0,475,489,5,103,0,0,476,486,5,167,0,0,
        477,478,5,124,0,0,478,483,3,168,84,0,479,480,5,11,0,0,480,482,3,
        168,84,0,481,479,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,
        1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,486,477,1,0,0,0,486,487,
        1,0,0,0,487,489,1,0,0,0,488,474,1,0,0,0,488,475,1,0,0,0,488,476,
        1,0,0,0,489,490,1,0,0,0,490,494,5,126,0,0,491,492,3,160,80,0,492,
        493,5,8,0,0,493,495,1,0,0,0,494,491,1,0,0,0,494,495,1,0,0,0,495,
        496,1,0,0,0,496,500,3,164,82,0,497,498,5,86,0,0,498,499,5,73,0,0,
        499,501,5,151,0,0,500,497,1,0,0,0,500,501,1,0,0,0,501,504,1,0,0,
        0,502,503,5,173,0,0,503,505,3,82,41,0,504,502,1,0,0,0,504,505,1,
        0,0,0,505,506,1,0,0,0,506,515,5,45,0,0,507,512,3,62,31,0,508,512,
        3,46,23,0,509,512,3,30,15,0,510,512,3,60,30,0,511,507,1,0,0,0,511,
        508,1,0,0,0,511,509,1,0,0,0,511,510,1,0,0,0,512,513,1,0,0,0,513,
        514,5,7,0,0,514,516,1,0,0,0,515,511,1,0,0,0,516,517,1,0,0,0,517,
        515,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,5,75,0,0,520,
        25,1,0,0,0,521,523,5,57,0,0,522,524,7,3,0,0,523,522,1,0,0,0,523,
        524,1,0,0,0,524,525,1,0,0,0,525,529,5,171,0,0,526,527,5,95,0,0,527,
        528,5,119,0,0,528,530,5,80,0,0,529,526,1,0,0,0,529,530,1,0,0,0,530,
        534,1,0,0,0,531,532,3,160,80,0,532,533,5,8,0,0,533,535,1,0,0,0,534,
        531,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,548,3,180,90,0,537,
        538,5,9,0,0,538,543,3,168,84,0,539,540,5,11,0,0,540,542,3,168,84,
        0,541,539,1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,
        0,544,546,1,0,0,0,545,543,1,0,0,0,546,547,5,10,0,0,547,549,1,0,0,
        0,548,537,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,551,5,40,0,
        0,551,552,3,60,30,0,552,27,1,0,0,0,553,554,5,57,0,0,554,555,5,172,
        0,0,555,559,5,156,0,0,556,557,5,95,0,0,557,558,5,119,0,0,558,560,
        5,80,0,0,559,556,1,0,0,0,559,560,1,0,0,0,560,564,1,0,0,0,561,562,
        3,160,80,0,562,563,5,8,0,0,563,565,1,0,0,0,564,561,1,0,0,0,564,565,
        1,0,0,0,565,566,1,0,0,0,566,567,3,164,82,0,567,568,5,168,0,0,568,
        580,3,182,91,0,569,570,5,9,0,0,570,575,3,150,75,0,571,572,5,11,0,
        0,572,574,3,150,75,0,573,571,1,0,0,0,574,577,1,0,0,0,575,573,1,0,
        0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,5,10,
        0,0,579,581,1,0,0,0,580,569,1,0,0,0,580,581,1,0,0,0,581,29,1,0,0,
        0,582,584,3,118,59,0,583,582,1,0,0,0,583,584,1,0,0,0,584,585,1,0,
        0,0,585,586,5,67,0,0,586,587,5,88,0,0,587,590,3,120,60,0,588,589,
        5,174,0,0,589,591,3,82,41,0,590,588,1,0,0,0,590,591,1,0,0,0,591,
        593,1,0,0,0,592,594,3,94,47,0,593,592,1,0,0,0,593,594,1,0,0,0,594,
        31,1,0,0,0,595,597,3,118,59,0,596,595,1,0,0,0,596,597,1,0,0,0,597,
        598,1,0,0,0,598,599,5,67,0,0,599,600,5,88,0,0,600,603,3,120,60,0,
        601,602,5,174,0,0,602,604,3,82,41,0,603,601,1,0,0,0,603,604,1,0,
        0,0,604,606,1,0,0,0,605,607,3,94,47,0,606,605,1,0,0,0,606,607,1,
        0,0,0,607,626,1,0,0,0,608,609,5,128,0,0,609,610,5,47,0,0,610,615,
        3,122,61,0,611,612,5,11,0,0,612,614,3,122,61,0,613,611,1,0,0,0,614,
        617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,619,1,0,0,0,617,
        615,1,0,0,0,618,608,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,
        621,5,114,0,0,621,624,3,82,41,0,622,623,7,2,0,0,623,625,3,82,41,
        0,624,622,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,618,1,0,0,
        0,626,627,1,0,0,0,627,33,1,0,0,0,628,630,5,69,0,0,629,631,5,63,0,
        0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,633,3,160,
        80,0,633,35,1,0,0,0,634,635,5,72,0,0,635,638,5,99,0,0,636,637,5,
        95,0,0,637,639,5,80,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,643,
        1,0,0,0,640,641,3,160,80,0,641,642,5,8,0,0,642,644,1,0,0,0,643,640,
        1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,646,3,176,88,0,646,37,
        1,0,0,0,647,648,5,72,0,0,648,651,5,156,0,0,649,650,5,95,0,0,650,
        652,5,80,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,656,1,0,0,0,653,
        654,3,160,80,0,654,655,5,8,0,0,655,657,1,0,0,0,656,653,1,0,0,0,656,
        657,1,0,0,0,657,658,1,0,0,0,658,659,3,164,82,0,659,39,1,0,0,0,660,
        661,5,72,0,0,661,664,5,163,0,0,662,663,5,95,0,0,663,665,5,80,0,0,
        664,662,1,0,0,0,664,665,1,0,0,0,665,669,1,0,0,0,666,667,3,160,80,
        0,667,668,5,8,0,0,668,670,1,0,0,0,669,666,1,0,0,0,669,670,1,0,0,
        0,670,671,1,0,0,0,671,672,3,178,89,0,672,41,1,0,0,0,673,674,5,72,
        0,0,674,677,5,171,0,0,675,676,5,95,0,0,676,678,5,80,0,0,677,675,
        1,0,0,0,677,678,1,0,0,0,678,682,1,0,0,0,679,680,3,160,80,0,680,681,
        5,8,0,0,681,683,1,0,0,0,682,679,1,0,0,0,682,683,1,0,0,0,683,684,
        1,0,0,0,684,685,3,180,90,0,685,43,1,0,0,0,686,688,3,118,59,0,687,
        686,1,0,0,0,687,688,1,0,0,0,688,689,1,0,0,0,689,695,3,138,69,0,690,
        691,3,140,70,0,691,692,3,138,69,0,692,694,1,0,0,0,693,690,1,0,0,
        0,694,697,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,708,1,0,0,
        0,697,695,1,0,0,0,698,699,5,128,0,0,699,700,5,47,0,0,700,705,3,122,
        61,0,701,702,5,11,0,0,702,704,3,122,61,0,703,701,1,0,0,0,704,707,
        1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,709,1,0,0,0,707,705,
        1,0,0,0,708,698,1,0,0,0,708,709,1,0,0,0,709,716,1,0,0,0,710,711,
        5,114,0,0,711,714,3,82,41,0,712,713,7,2,0,0,713,715,3,82,41,0,714,
        712,1,0,0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,710,1,0,0,0,716,
        717,1,0,0,0,717,45,1,0,0,0,718,720,3,118,59,0,719,718,1,0,0,0,719,
        720,1,0,0,0,720,738,1,0,0,0,721,739,5,103,0,0,722,739,5,146,0,0,
        723,724,5,103,0,0,724,725,5,127,0,0,725,739,5,146,0,0,726,727,5,
        103,0,0,727,728,5,127,0,0,728,739,5,150,0,0,729,730,5,103,0,0,730,
        731,5,127,0,0,731,739,5,31,0,0,732,733,5,103,0,0,733,734,5,127,0,
        0,734,739,5,82,0,0,735,736,5,103,0,0,736,737,5,127,0,0,737,739,5,
        96,0,0,738,721,1,0,0,0,738,722,1,0,0,0,738,723,1,0,0,0,738,726,1,
        0,0,0,738,729,1,0,0,0,738,732,1,0,0,0,738,735,1,0,0,0,739,740,1,
        0,0,0,740,744,5,106,0,0,741,742,3,160,80,0,742,743,5,8,0,0,743,745,
        1,0,0,0,744,741,1,0,0,0,744,745,1,0,0,0,745,746,1,0,0,0,746,749,
        3,164,82,0,747,748,5,40,0,0,748,750,3,188,94,0,749,747,1,0,0,0,749,
        750,1,0,0,0,750,762,1,0,0,0,751,752,5,9,0,0,752,757,3,168,84,0,753,
        754,5,11,0,0,754,756,3,168,84,0,755,753,1,0,0,0,756,759,1,0,0,0,
        757,755,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,757,1,0,0,0,
        760,761,5,10,0,0,761,763,1,0,0,0,762,751,1,0,0,0,762,763,1,0,0,0,
        763,801,1,0,0,0,764,765,5,170,0,0,765,766,5,9,0,0,766,771,3,82,41,
        0,767,768,5,11,0,0,768,770,3,82,41,0,769,767,1,0,0,0,770,773,1,0,
        0,0,771,769,1,0,0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,771,1,0,
        0,0,774,789,5,10,0,0,775,776,5,11,0,0,776,777,5,9,0,0,777,782,3,
        82,41,0,778,779,5,11,0,0,779,781,3,82,41,0,780,778,1,0,0,0,781,784,
        1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,782,
        1,0,0,0,785,786,5,10,0,0,786,788,1,0,0,0,787,775,1,0,0,0,788,791,
        1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,793,1,0,0,0,791,789,
        1,0,0,0,792,794,3,116,58,0,793,792,1,0,0,0,793,794,1,0,0,0,794,802,
        1,0,0,0,795,797,3,60,30,0,796,798,3,116,58,0,797,796,1,0,0,0,797,
        798,1,0,0,0,798,802,1,0,0,0,799,800,5,64,0,0,800,802,5,170,0,0,801,
        764,1,0,0,0,801,795,1,0,0,0,801,799,1,0,0,0,802,804,1,0,0,0,803,
        805,3,94,47,0,804,803,1,0,0,0,804,805,1,0,0,0,805,47,1,0,0,0,806,
        810,5,134,0,0,807,808,3,160,80,0,808,809,5,8,0,0,809,811,1,0,0,0,
        810,807,1,0,0,0,810,811,1,0,0,0,811,812,1,0,0,0,812,819,3,184,92,
        0,813,814,5,12,0,0,814,820,3,124,62,0,815,816,5,9,0,0,816,817,3,
        124,62,0,817,818,5,10,0,0,818,820,1,0,0,0,819,813,1,0,0,0,819,815,
        1,0,0,0,819,820,1,0,0,0,820,49,1,0,0,0,821,832,5,143,0,0,822,833,
        3,172,86,0,823,824,3,160,80,0,824,825,5,8,0,0,825,827,1,0,0,0,826,
        823,1,0,0,0,826,827,1,0,0,0,827,830,1,0,0,0,828,831,3,164,82,0,829,
        831,3,176,88,0,830,828,1,0,0,0,830,829,1,0,0,0,831,833,1,0,0,0,832,
        822,1,0,0,0,832,826,1,0,0,0,832,833,1,0,0,0,833,51,1,0,0,0,834,836,
        5,144,0,0,835,837,5,153,0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,
        838,1,0,0,0,838,839,3,186,93,0,839,53,1,0,0,0,840,845,5,150,0,0,
        841,843,5,162,0,0,842,844,3,190,95,0,843,842,1,0,0,0,843,844,1,0,
        0,0,844,846,1,0,0,0,845,841,1,0,0,0,845,846,1,0,0,0,846,852,1,0,
        0,0,847,849,5,161,0,0,848,850,5,153,0,0,849,848,1,0,0,0,849,850,
        1,0,0,0,850,851,1,0,0,0,851,853,3,186,93,0,852,847,1,0,0,0,852,853,
        1,0,0,0,853,55,1,0,0,0,854,855,5,153,0,0,855,856,3,186,93,0,856,
        57,1,0,0,0,857,859,3,118,59,0,858,857,1,0,0,0,858,859,1,0,0,0,859,
        860,1,0,0,0,860,871,3,138,69,0,861,862,5,128,0,0,862,863,5,47,0,
        0,863,868,3,122,61,0,864,865,5,11,0,0,865,867,3,122,61,0,866,864,
        1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,872,
        1,0,0,0,870,868,1,0,0,0,871,861,1,0,0,0,871,872,1,0,0,0,872,879,
        1,0,0,0,873,874,5,114,0,0,874,877,3,82,41,0,875,876,7,2,0,0,876,
        878,3,82,41,0,877,875,1,0,0,0,877,878,1,0,0,0,878,880,1,0,0,0,879,
        873,1,0,0,0,879,880,1,0,0,0,880,59,1,0,0,0,881,883,3,118,59,0,882,
        881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,890,3,138,69,0,885,
        886,3,140,70,0,886,887,3,138,69,0,887,889,1,0,0,0,888,885,1,0,0,
        0,889,892,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,903,1,0,0,
        0,892,890,1,0,0,0,893,894,5,128,0,0,894,895,5,47,0,0,895,900,3,122,
        61,0,896,897,5,11,0,0,897,899,3,122,61,0,898,896,1,0,0,0,899,902,
        1,0,0,0,900,898,1,0,0,0,900,901,1,0,0,0,901,904,1,0,0,0,902,900,
        1,0,0,0,903,893,1,0,0,0,903,904,1,0,0,0,904,911,1,0,0,0,905,906,
        5,114,0,0,906,909,3,82,41,0,907,908,7,2,0,0,908,910,3,82,41,0,909,
        907,1,0,0,0,909,910,1,0,0,0,910,912,1,0,0,0,911,905,1,0,0,0,911,
        912,1,0,0,0,912,61,1,0,0,0,913,915,3,118,59,0,914,913,1,0,0,0,914,
        915,1,0,0,0,915,916,1,0,0,0,916,927,5,167,0,0,917,918,5,127,0,0,
        918,928,5,150,0,0,919,920,5,127,0,0,920,928,5,31,0,0,921,922,5,127,
        0,0,922,928,5,146,0,0,923,924,5,127,0,0,924,928,5,82,0,0,925,926,
        5,127,0,0,926,928,5,96,0,0,927,917,1,0,0,0,927,919,1,0,0,0,927,921,
        1,0,0,0,927,923,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,929,
        1,0,0,0,929,930,3,120,60,0,930,933,5,155,0,0,931,934,3,168,84,0,
        932,934,3,170,85,0,933,931,1,0,0,0,933,932,1,0,0,0,934,935,1,0,0,
        0,935,936,5,12,0,0,936,947,3,82,41,0,937,940,5,11,0,0,938,941,3,
        168,84,0,939,941,3,170,85,0,940,938,1,0,0,0,940,939,1,0,0,0,941,
        942,1,0,0,0,942,943,5,12,0,0,943,944,3,82,41,0,944,946,1,0,0,0,945,
        937,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,
        962,1,0,0,0,949,947,1,0,0,0,950,960,5,88,0,0,951,956,3,130,65,0,
        952,953,5,11,0,0,953,955,3,130,65,0,954,952,1,0,0,0,955,958,1,0,
        0,0,956,954,1,0,0,0,956,957,1,0,0,0,957,961,1,0,0,0,958,956,1,0,
        0,0,959,961,3,132,66,0,960,951,1,0,0,0,960,959,1,0,0,0,961,963,1,
        0,0,0,962,950,1,0,0,0,962,963,1,0,0,0,963,966,1,0,0,0,964,965,5,
        174,0,0,965,967,3,82,41,0,966,964,1,0,0,0,966,967,1,0,0,0,967,969,
        1,0,0,0,968,970,3,94,47,0,969,968,1,0,0,0,969,970,1,0,0,0,970,63,
        1,0,0,0,971,973,3,118,59,0,972,971,1,0,0,0,972,973,1,0,0,0,973,974,
        1,0,0,0,974,985,5,167,0,0,975,976,5,127,0,0,976,986,5,150,0,0,977,
        978,5,127,0,0,978,986,5,31,0,0,979,980,5,127,0,0,980,986,5,146,0,
        0,981,982,5,127,0,0,982,986,5,82,0,0,983,984,5,127,0,0,984,986,5,
        96,0,0,985,975,1,0,0,0,985,977,1,0,0,0,985,979,1,0,0,0,985,981,1,
        0,0,0,985,983,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,988,3,
        120,60,0,988,991,5,155,0,0,989,992,3,168,84,0,990,992,3,170,85,0,
        991,989,1,0,0,0,991,990,1,0,0,0,992,993,1,0,0,0,993,994,5,12,0,0,
        994,1005,3,82,41,0,995,998,5,11,0,0,996,999,3,168,84,0,997,999,3,
        170,85,0,998,996,1,0,0,0,998,997,1,0,0,0,999,1000,1,0,0,0,1000,1001,
        5,12,0,0,1001,1002,3,82,41,0,1002,1004,1,0,0,0,1003,995,1,0,0,0,
        1004,1007,1,0,0,0,1005,1003,1,0,0,0,1005,1006,1,0,0,0,1006,1020,
        1,0,0,0,1007,1005,1,0,0,0,1008,1018,5,88,0,0,1009,1014,3,130,65,
        0,1010,1011,5,11,0,0,1011,1013,3,130,65,0,1012,1010,1,0,0,0,1013,
        1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,1019,1,0,0,
        0,1016,1014,1,0,0,0,1017,1019,3,132,66,0,1018,1009,1,0,0,0,1018,
        1017,1,0,0,0,1019,1021,1,0,0,0,1020,1008,1,0,0,0,1020,1021,1,0,0,
        0,1021,1024,1,0,0,0,1022,1023,5,174,0,0,1023,1025,3,82,41,0,1024,
        1022,1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1028,3,94,
        47,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1047,1,0,0,0,1029,
        1030,5,128,0,0,1030,1031,5,47,0,0,1031,1036,3,122,61,0,1032,1033,
        5,11,0,0,1033,1035,3,122,61,0,1034,1032,1,0,0,0,1035,1038,1,0,0,
        0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1040,1,0,0,0,1038,1036,
        1,0,0,0,1039,1029,1,0,0,0,1039,1040,1,0,0,0,1040,1041,1,0,0,0,1041,
        1042,5,114,0,0,1042,1045,3,82,41,0,1043,1044,7,2,0,0,1044,1046,3,
        82,41,0,1045,1043,1,0,0,0,1045,1046,1,0,0,0,1046,1048,1,0,0,0,1047,
        1039,1,0,0,0,1047,1048,1,0,0,0,1048,65,1,0,0,0,1049,1052,5,169,0,
        0,1050,1051,5,106,0,0,1051,1053,3,196,98,0,1052,1050,1,0,0,0,1052,
        1053,1,0,0,0,1053,67,1,0,0,0,1054,1056,3,168,84,0,1055,1057,3,70,
        35,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,1061,1,0,0,0,1058,
        1060,3,76,38,0,1059,1058,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,
        0,0,1061,1062,1,0,0,0,1062,69,1,0,0,0,1063,1061,1,0,0,0,1064,1075,
        3,72,36,0,1065,1066,5,9,0,0,1066,1067,3,142,71,0,1067,1068,5,10,
        0,0,1068,1076,1,0,0,0,1069,1070,5,9,0,0,1070,1071,3,142,71,0,1071,
        1072,5,11,0,0,1072,1073,3,142,71,0,1073,1074,5,10,0,0,1074,1076,
        1,0,0,0,1075,1065,1,0,0,0,1075,1069,1,0,0,0,1075,1076,1,0,0,0,1076,
        71,1,0,0,0,1077,1096,5,183,0,0,1078,1083,5,1,0,0,1079,1082,8,4,0,
        0,1080,1082,5,2,0,0,1081,1079,1,0,0,0,1081,1080,1,0,0,0,1082,1085,
        1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,1086,1,0,0,0,1085,
        1083,1,0,0,0,1086,1096,5,1,0,0,1087,1091,5,3,0,0,1088,1090,8,5,0,
        0,1089,1088,1,0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,
        1,0,0,0,1092,1094,1,0,0,0,1093,1091,1,0,0,0,1094,1096,5,4,0,0,1095,
        1077,1,0,0,0,1095,1078,1,0,0,0,1095,1087,1,0,0,0,1096,1103,1,0,0,
        0,1097,1099,3,74,37,0,1098,1097,1,0,0,0,1099,1100,1,0,0,0,1100,1098,
        1,0,0,0,1100,1101,1,0,0,0,1101,1103,1,0,0,0,1102,1095,1,0,0,0,1102,
        1098,1,0,0,0,1103,73,1,0,0,0,1104,1105,8,6,0,0,1105,75,1,0,0,0,1106,
        1107,5,56,0,0,1107,1109,3,78,39,0,1108,1106,1,0,0,0,1108,1109,1,
        0,0,0,1109,1144,1,0,0,0,1110,1111,5,136,0,0,1111,1113,5,110,0,0,
        1112,1114,7,7,0,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,
        1,0,0,0,1115,1117,3,80,40,0,1116,1118,5,43,0,0,1117,1116,1,0,0,0,
        1117,1118,1,0,0,0,1118,1145,1,0,0,0,1119,1121,5,119,0,0,1120,1119,
        1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1123,5,122,0,0,
        1123,1145,3,80,40,0,1124,1125,5,166,0,0,1125,1145,3,80,40,0,1126,
        1127,5,51,0,0,1127,1128,5,9,0,0,1128,1129,3,82,41,0,1129,1130,5,
        10,0,0,1130,1145,1,0,0,0,1131,1138,5,64,0,0,1132,1139,3,142,71,0,
        1133,1139,3,144,72,0,1134,1135,5,9,0,0,1135,1136,3,82,41,0,1136,
        1137,5,10,0,0,1137,1139,1,0,0,0,1138,1132,1,0,0,0,1138,1133,1,0,
        0,0,1138,1134,1,0,0,0,1139,1145,1,0,0,0,1140,1141,5,52,0,0,1141,
        1145,3,172,86,0,1142,1145,3,86,43,0,1143,1145,3,90,45,0,1144,1110,
        1,0,0,0,1144,1120,1,0,0,0,1144,1124,1,0,0,0,1144,1126,1,0,0,0,1144,
        1131,1,0,0,0,1144,1140,1,0,0,0,1144,1142,1,0,0,0,1144,1143,1,0,0,
        0,1145,77,1,0,0,0,1146,1165,5,183,0,0,1147,1152,5,1,0,0,1148,1151,
        8,4,0,0,1149,1151,5,2,0,0,1150,1148,1,0,0,0,1150,1149,1,0,0,0,1151,
        1154,1,0,0,0,1152,1150,1,0,0,0,1152,1153,1,0,0,0,1153,1155,1,0,0,
        0,1154,1152,1,0,0,0,1155,1165,5,1,0,0,1156,1160,5,3,0,0,1157,1159,
        8,5,0,0,1158,1157,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,
        1161,1,0,0,0,1161,1163,1,0,0,0,1162,1160,1,0,0,0,1163,1165,5,4,0,
        0,1164,1146,1,0,0,0,1164,1147,1,0,0,0,1164,1156,1,0,0,0,1165,1168,
        1,0,0,0,1166,1168,3,74,37,0,1167,1164,1,0,0,0,1167,1166,1,0,0,0,
        1168,79,1,0,0,0,1169,1170,5,126,0,0,1170,1171,5,55,0,0,1171,1173,
        7,8,0,0,1172,1169,1,0,0,0,1172,1173,1,0,0,0,1173,81,1,0,0,0,1174,
        1175,6,41,-1,0,1175,1268,3,144,72,0,1176,1268,5,187,0,0,1177,1178,
        3,160,80,0,1178,1179,5,8,0,0,1179,1181,1,0,0,0,1180,1177,1,0,0,0,
        1180,1181,1,0,0,0,1181,1182,1,0,0,0,1182,1183,3,164,82,0,1183,1184,
        5,8,0,0,1184,1186,1,0,0,0,1185,1180,1,0,0,0,1185,1186,1,0,0,0,1186,
        1187,1,0,0,0,1187,1268,3,168,84,0,1188,1189,3,146,73,0,1189,1190,
        3,82,41,23,1190,1268,1,0,0,0,1191,1192,3,158,79,0,1192,1194,5,9,
        0,0,1193,1195,3,88,44,0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,1195,
        1196,1,0,0,0,1196,1198,5,10,0,0,1197,1199,3,84,42,0,1198,1197,1,
        0,0,0,1198,1199,1,0,0,0,1199,1201,1,0,0,0,1200,1202,3,92,46,0,1201,
        1200,1,0,0,0,1201,1202,1,0,0,0,1202,1268,1,0,0,0,1203,1204,5,9,0,
        0,1204,1209,3,82,41,0,1205,1206,5,11,0,0,1206,1208,3,82,41,0,1207,
        1205,1,0,0,0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,1209,1210,1,0,0,
        0,1210,1212,1,0,0,0,1211,1209,1,0,0,0,1212,1213,5,10,0,0,1213,1268,
        1,0,0,0,1214,1215,5,50,0,0,1215,1216,5,9,0,0,1216,1217,3,82,41,0,
        1217,1218,5,40,0,0,1218,1219,3,70,35,0,1219,1220,5,10,0,0,1220,1268,
        1,0,0,0,1221,1222,3,160,80,0,1222,1223,5,8,0,0,1223,1224,3,162,81,
        0,1224,1233,5,9,0,0,1225,1230,3,82,41,0,1226,1227,5,11,0,0,1227,
        1229,3,82,41,0,1228,1226,1,0,0,0,1229,1232,1,0,0,0,1230,1228,1,0,
        0,0,1230,1231,1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,0,0,0,1233,1225,
        1,0,0,0,1233,1234,1,0,0,0,1234,1235,1,0,0,0,1235,1236,5,10,0,0,1236,
        1268,1,0,0,0,1237,1239,5,119,0,0,1238,1237,1,0,0,0,1238,1239,1,0,
        0,0,1239,1240,1,0,0,0,1240,1242,5,80,0,0,1241,1238,1,0,0,0,1241,
        1242,1,0,0,0,1242,1243,1,0,0,0,1243,1244,5,9,0,0,1244,1245,3,60,
        30,0,1245,1246,5,10,0,0,1246,1268,1,0,0,0,1247,1249,5,49,0,0,1248,
        1250,3,82,41,0,1249,1248,1,0,0,0,1249,1250,1,0,0,0,1250,1256,1,0,
        0,0,1251,1252,5,173,0,0,1252,1253,3,82,41,0,1253,1254,5,159,0,0,
        1254,1255,3,82,41,0,1255,1257,1,0,0,0,1256,1251,1,0,0,0,1257,1258,
        1,0,0,0,1258,1256,1,0,0,0,1258,1259,1,0,0,0,1259,1262,1,0,0,0,1260,
        1261,5,74,0,0,1261,1263,3,82,41,0,1262,1260,1,0,0,0,1262,1263,1,
        0,0,0,1263,1264,1,0,0,0,1264,1265,5,75,0,0,1265,1268,1,0,0,0,1266,
        1268,3,108,54,0,1267,1174,1,0,0,0,1267,1176,1,0,0,0,1267,1185,1,
        0,0,0,1267,1188,1,0,0,0,1267,1191,1,0,0,0,1267,1203,1,0,0,0,1267,
        1214,1,0,0,0,1267,1221,1,0,0,0,1267,1241,1,0,0,0,1267,1247,1,0,0,
        0,1267,1266,1,0,0,0,1268,1376,1,0,0,0,1269,1270,10,22,0,0,1270,1271,
        5,17,0,0,1271,1375,3,82,41,23,1272,1273,10,21,0,0,1273,1274,7,9,
        0,0,1274,1375,3,82,41,22,1275,1276,10,20,0,0,1276,1277,7,10,0,0,
        1277,1375,3,82,41,21,1278,1279,10,19,0,0,1279,1280,7,11,0,0,1280,
        1375,3,82,41,20,1281,1282,10,18,0,0,1282,1283,7,12,0,0,1283,1375,
        3,82,41,19,1284,1285,10,17,0,0,1285,1286,7,13,0,0,1286,1375,3,82,
        41,18,1287,1300,10,16,0,0,1288,1301,5,12,0,0,1289,1301,5,28,0,0,
        1290,1301,5,29,0,0,1291,1301,5,30,0,0,1292,1301,5,107,0,0,1293,1294,
        5,107,0,0,1294,1301,5,119,0,0,1295,1301,5,98,0,0,1296,1301,5,113,
        0,0,1297,1301,5,91,0,0,1298,1301,5,115,0,0,1299,1301,5,142,0,0,1300,
        1288,1,0,0,0,1300,1289,1,0,0,0,1300,1290,1,0,0,0,1300,1291,1,0,0,
        0,1300,1292,1,0,0,0,1300,1293,1,0,0,0,1300,1295,1,0,0,0,1300,1296,
        1,0,0,0,1300,1297,1,0,0,0,1300,1298,1,0,0,0,1300,1299,1,0,0,0,1301,
        1302,1,0,0,0,1302,1375,3,82,41,17,1303,1304,10,15,0,0,1304,1305,
        5,39,0,0,1305,1375,3,82,41,16,1306,1307,10,14,0,0,1307,1308,5,127,
        0,0,1308,1375,3,82,41,15,1309,1310,10,7,0,0,1310,1312,5,107,0,0,
        1311,1313,5,119,0,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1316,
        1,0,0,0,1314,1315,5,70,0,0,1315,1317,5,88,0,0,1316,1314,1,0,0,0,
        1316,1317,1,0,0,0,1317,1318,1,0,0,0,1318,1375,3,82,41,8,1319,1321,
        10,6,0,0,1320,1322,5,119,0,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,
        1322,1323,1,0,0,0,1323,1324,5,46,0,0,1324,1325,3,82,41,0,1325,1326,
        5,39,0,0,1326,1327,3,82,41,7,1327,1375,1,0,0,0,1328,1329,10,10,0,
        0,1329,1330,5,52,0,0,1330,1375,3,172,86,0,1331,1333,10,9,0,0,1332,
        1334,5,119,0,0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,1335,1,0,
        0,0,1335,1336,7,14,0,0,1336,1339,3,82,41,0,1337,1338,5,76,0,0,1338,
        1340,3,82,41,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,1375,1,0,
        0,0,1341,1346,10,8,0,0,1342,1347,5,108,0,0,1343,1347,5,121,0,0,1344,
        1345,5,119,0,0,1345,1347,5,122,0,0,1346,1342,1,0,0,0,1346,1343,1,
        0,0,0,1346,1344,1,0,0,0,1347,1375,1,0,0,0,1348,1350,10,5,0,0,1349,
        1351,5,119,0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,
        0,0,1352,1372,5,98,0,0,1353,1363,5,9,0,0,1354,1364,3,60,30,0,1355,
        1360,3,82,41,0,1356,1357,5,11,0,0,1357,1359,3,82,41,0,1358,1356,
        1,0,0,0,1359,1362,1,0,0,0,1360,1358,1,0,0,0,1360,1361,1,0,0,0,1361,
        1364,1,0,0,0,1362,1360,1,0,0,0,1363,1354,1,0,0,0,1363,1355,1,0,0,
        0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1373,5,10,0,0,1366,1367,
        3,160,80,0,1367,1368,5,8,0,0,1368,1370,1,0,0,0,1369,1366,1,0,0,0,
        1369,1370,1,0,0,0,1370,1371,1,0,0,0,1371,1373,3,164,82,0,1372,1353,
        1,0,0,0,1372,1369,1,0,0,0,1373,1375,1,0,0,0,1374,1269,1,0,0,0,1374,
        1272,1,0,0,0,1374,1275,1,0,0,0,1374,1278,1,0,0,0,1374,1281,1,0,0,
        0,1374,1284,1,0,0,0,1374,1287,1,0,0,0,1374,1303,1,0,0,0,1374,1306,
        1,0,0,0,1374,1309,1,0,0,0,1374,1319,1,0,0,0,1374,1328,1,0,0,0,1374,
        1331,1,0,0,0,1374,1341,1,0,0,0,1374,1348,1,0,0,0,1375,1378,1,0,0,
        0,1376,1374,1,0,0,0,1376,1377,1,0,0,0,1377,83,1,0,0,0,1378,1376,
        1,0,0,0,1379,1380,5,83,0,0,1380,1381,5,9,0,0,1381,1382,5,174,0,0,
        1382,1383,3,82,41,0,1383,1384,5,10,0,0,1384,85,1,0,0,0,1385,1386,
        5,141,0,0,1386,1398,3,174,87,0,1387,1388,5,9,0,0,1388,1393,3,168,
        84,0,1389,1390,5,11,0,0,1390,1392,3,168,84,0,1391,1389,1,0,0,0,1392,
        1395,1,0,0,0,1393,1391,1,0,0,0,1393,1394,1,0,0,0,1394,1396,1,0,0,
        0,1395,1393,1,0,0,0,1396,1397,5,10,0,0,1397,1399,1,0,0,0,1398,1387,
        1,0,0,0,1398,1399,1,0,0,0,1399,1418,1,0,0,0,1400,1401,5,126,0,0,
        1401,1410,7,15,0,0,1402,1403,5,155,0,0,1403,1411,5,122,0,0,1404,
        1405,5,155,0,0,1405,1411,5,64,0,0,1406,1411,5,48,0,0,1407,1411,5,
        147,0,0,1408,1409,5,118,0,0,1409,1411,5,32,0,0,1410,1402,1,0,0,0,
        1410,1404,1,0,0,0,1410,1406,1,0,0,0,1410,1407,1,0,0,0,1410,1408,
        1,0,0,0,1411,1415,1,0,0,0,1412,1413,5,115,0,0,1413,1415,3,156,78,
        0,1414,1400,1,0,0,0,1414,1412,1,0,0,0,1415,1417,1,0,0,0,1416,1414,
        1,0,0,0,1417,1420,1,0,0,0,1418,1416,1,0,0,0,1418,1419,1,0,0,0,1419,
        1431,1,0,0,0,1420,1418,1,0,0,0,1421,1423,5,119,0,0,1422,1421,1,0,
        0,0,1422,1423,1,0,0,0,1423,1424,1,0,0,0,1424,1429,5,65,0,0,1425,
        1426,5,101,0,0,1426,1430,5,66,0,0,1427,1428,5,101,0,0,1428,1430,
        5,97,0,0,1429,1425,1,0,0,0,1429,1427,1,0,0,0,1429,1430,1,0,0,0,1430,
        1432,1,0,0,0,1431,1422,1,0,0,0,1431,1432,1,0,0,0,1432,87,1,0,0,0,
        1433,1435,5,70,0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,1436,
        1,0,0,0,1436,1441,3,82,41,0,1437,1438,5,11,0,0,1438,1440,3,82,41,
        0,1439,1437,1,0,0,0,1440,1443,1,0,0,0,1441,1439,1,0,0,0,1441,1442,
        1,0,0,0,1442,1454,1,0,0,0,1443,1441,1,0,0,0,1444,1445,5,128,0,0,
        1445,1446,5,47,0,0,1446,1451,3,122,61,0,1447,1448,5,11,0,0,1448,
        1450,3,122,61,0,1449,1447,1,0,0,0,1450,1453,1,0,0,0,1451,1449,1,
        0,0,0,1451,1452,1,0,0,0,1452,1455,1,0,0,0,1453,1451,1,0,0,0,1454,
        1444,1,0,0,0,1454,1455,1,0,0,0,1455,1458,1,0,0,0,1456,1458,5,13,
        0,0,1457,1434,1,0,0,0,1457,1456,1,0,0,0,1458,89,1,0,0,0,1459,1460,
        5,90,0,0,1460,1462,5,37,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,
        1462,1463,1,0,0,0,1463,1464,5,40,0,0,1464,1465,5,9,0,0,1465,1466,
        3,82,41,0,1466,1468,5,10,0,0,1467,1469,7,16,0,0,1468,1467,1,0,0,
        0,1468,1469,1,0,0,0,1469,91,1,0,0,0,1470,1473,5,131,0,0,1471,1474,
        3,192,96,0,1472,1474,3,96,48,0,1473,1471,1,0,0,0,1473,1472,1,0,0,
        0,1474,93,1,0,0,0,1475,1484,5,148,0,0,1476,1485,5,13,0,0,1477,1482,
        3,82,41,0,1478,1480,5,40,0,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,
        1480,1481,1,0,0,0,1481,1483,3,152,76,0,1482,1479,1,0,0,0,1482,1483,
        1,0,0,0,1483,1485,1,0,0,0,1484,1476,1,0,0,0,1484,1477,1,0,0,0,1485,
        1499,1,0,0,0,1486,1495,5,11,0,0,1487,1496,5,13,0,0,1488,1493,3,82,
        41,0,1489,1491,5,40,0,0,1490,1489,1,0,0,0,1490,1491,1,0,0,0,1491,
        1492,1,0,0,0,1492,1494,3,152,76,0,1493,1490,1,0,0,0,1493,1494,1,
        0,0,0,1494,1496,1,0,0,0,1495,1487,1,0,0,0,1495,1488,1,0,0,0,1496,
        1498,1,0,0,0,1497,1486,1,0,0,0,1498,1501,1,0,0,0,1499,1497,1,0,0,
        0,1499,1500,1,0,0,0,1500,95,1,0,0,0,1501,1499,1,0,0,0,1502,1504,
        5,9,0,0,1503,1505,3,194,97,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,
        1505,1516,1,0,0,0,1506,1507,5,132,0,0,1507,1508,5,47,0,0,1508,1513,
        3,82,41,0,1509,1510,5,11,0,0,1510,1512,3,82,41,0,1511,1509,1,0,0,
        0,1512,1515,1,0,0,0,1513,1511,1,0,0,0,1513,1514,1,0,0,0,1514,1517,
        1,0,0,0,1515,1513,1,0,0,0,1516,1506,1,0,0,0,1516,1517,1,0,0,0,1517,
        1528,1,0,0,0,1518,1519,5,128,0,0,1519,1520,5,47,0,0,1520,1525,3,
        122,61,0,1521,1522,5,11,0,0,1522,1524,3,122,61,0,1523,1521,1,0,0,
        0,1524,1527,1,0,0,0,1525,1523,1,0,0,0,1525,1526,1,0,0,0,1526,1529,
        1,0,0,0,1527,1525,1,0,0,0,1528,1518,1,0,0,0,1528,1529,1,0,0,0,1529,
        1531,1,0,0,0,1530,1532,3,98,49,0,1531,1530,1,0,0,0,1531,1532,1,0,
        0,0,1532,1533,1,0,0,0,1533,1534,5,10,0,0,1534,97,1,0,0,0,1535,1545,
        3,100,50,0,1536,1543,5,78,0,0,1537,1538,5,118,0,0,1538,1544,5,129,
        0,0,1539,1540,5,59,0,0,1540,1544,5,151,0,0,1541,1544,5,92,0,0,1542,
        1544,5,160,0,0,1543,1537,1,0,0,0,1543,1539,1,0,0,0,1543,1541,1,0,
        0,0,1543,1542,1,0,0,0,1544,1546,1,0,0,0,1545,1536,1,0,0,0,1545,1546,
        1,0,0,0,1546,99,1,0,0,0,1547,1554,7,17,0,0,1548,1555,3,102,51,0,
        1549,1550,5,46,0,0,1550,1551,3,104,52,0,1551,1552,5,39,0,0,1552,
        1553,3,106,53,0,1553,1555,1,0,0,0,1554,1548,1,0,0,0,1554,1549,1,
        0,0,0,1555,101,1,0,0,0,1556,1557,3,82,41,0,1557,1558,5,135,0,0,1558,
        1564,1,0,0,0,1559,1560,5,164,0,0,1560,1564,5,135,0,0,1561,1562,5,
        59,0,0,1562,1564,5,151,0,0,1563,1556,1,0,0,0,1563,1559,1,0,0,0,1563,
        1561,1,0,0,0,1564,103,1,0,0,0,1565,1566,3,82,41,0,1566,1567,5,135,
        0,0,1567,1576,1,0,0,0,1568,1569,3,82,41,0,1569,1570,5,85,0,0,1570,
        1576,1,0,0,0,1571,1572,5,59,0,0,1572,1576,5,151,0,0,1573,1574,5,
        164,0,0,1574,1576,5,135,0,0,1575,1565,1,0,0,0,1575,1568,1,0,0,0,
        1575,1571,1,0,0,0,1575,1573,1,0,0,0,1576,105,1,0,0,0,1577,1578,3,
        82,41,0,1578,1579,5,135,0,0,1579,1588,1,0,0,0,1580,1581,3,82,41,
        0,1581,1582,5,85,0,0,1582,1588,1,0,0,0,1583,1584,5,59,0,0,1584,1588,
        5,151,0,0,1585,1586,5,164,0,0,1586,1588,5,85,0,0,1587,1577,1,0,0,
        0,1587,1580,1,0,0,0,1587,1583,1,0,0,0,1587,1585,1,0,0,0,1588,107,
        1,0,0,0,1589,1590,5,138,0,0,1590,1595,5,9,0,0,1591,1596,5,96,0,0,
        1592,1593,7,18,0,0,1593,1594,5,11,0,0,1594,1596,3,148,74,0,1595,
        1591,1,0,0,0,1595,1592,1,0,0,0,1596,1597,1,0,0,0,1597,1598,5,10,
        0,0,1598,109,1,0,0,0,1599,1602,3,168,84,0,1600,1602,3,82,41,0,1601,
        1599,1,0,0,0,1601,1600,1,0,0,0,1602,1605,1,0,0,0,1603,1604,5,52,
        0,0,1604,1606,3,172,86,0,1605,1603,1,0,0,0,1605,1606,1,0,0,0,1606,
        1608,1,0,0,0,1607,1609,7,7,0,0,1608,1607,1,0,0,0,1608,1609,1,0,0,
        0,1609,111,1,0,0,0,1610,1611,5,56,0,0,1611,1613,3,78,39,0,1612,1610,
        1,0,0,0,1612,1613,1,0,0,0,1613,1650,1,0,0,0,1614,1615,5,136,0,0,
        1615,1618,5,110,0,0,1616,1618,5,166,0,0,1617,1614,1,0,0,0,1617,1616,
        1,0,0,0,1618,1619,1,0,0,0,1619,1620,5,9,0,0,1620,1625,3,110,55,0,
        1621,1622,5,11,0,0,1622,1624,3,110,55,0,1623,1621,1,0,0,0,1624,1627,
        1,0,0,0,1625,1623,1,0,0,0,1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,
        1625,1,0,0,0,1628,1629,5,10,0,0,1629,1630,3,80,40,0,1630,1651,1,
        0,0,0,1631,1632,5,51,0,0,1632,1633,5,9,0,0,1633,1634,3,82,41,0,1634,
        1635,5,10,0,0,1635,1651,1,0,0,0,1636,1637,5,87,0,0,1637,1638,5,110,
        0,0,1638,1639,5,9,0,0,1639,1644,3,168,84,0,1640,1641,5,11,0,0,1641,
        1643,3,168,84,0,1642,1640,1,0,0,0,1643,1646,1,0,0,0,1644,1642,1,
        0,0,0,1644,1645,1,0,0,0,1645,1647,1,0,0,0,1646,1644,1,0,0,0,1647,
        1648,5,10,0,0,1648,1649,3,86,43,0,1649,1651,1,0,0,0,1650,1617,1,
        0,0,0,1650,1631,1,0,0,0,1650,1636,1,0,0,0,1651,113,1,0,0,0,1652,
        1653,5,177,0,0,1653,1656,5,178,0,0,1654,1656,5,180,0,0,1655,1652,
        1,0,0,0,1655,1654,1,0,0,0,1656,115,1,0,0,0,1657,1658,5,126,0,0,1658,
        1673,5,55,0,0,1659,1660,5,9,0,0,1660,1665,3,110,55,0,1661,1662,5,
        11,0,0,1662,1664,3,110,55,0,1663,1661,1,0,0,0,1664,1667,1,0,0,0,
        1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,1668,1,0,0,0,1667,1665,
        1,0,0,0,1668,1671,5,10,0,0,1669,1670,5,174,0,0,1670,1672,3,82,41,
        0,1671,1669,1,0,0,0,1671,1672,1,0,0,0,1672,1674,1,0,0,0,1673,1659,
        1,0,0,0,1673,1674,1,0,0,0,1674,1675,1,0,0,0,1675,1702,5,71,0,0,1676,
        1703,5,120,0,0,1677,1678,5,167,0,0,1678,1681,5,155,0,0,1679,1682,
        3,168,84,0,1680,1682,3,170,85,0,1681,1679,1,0,0,0,1681,1680,1,0,
        0,0,1682,1683,1,0,0,0,1683,1684,5,12,0,0,1684,1695,3,82,41,0,1685,
        1688,5,11,0,0,1686,1689,3,168,84,0,1687,1689,3,170,85,0,1688,1686,
        1,0,0,0,1688,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1691,5,12,0,0,1691,
        1692,3,82,41,0,1692,1694,1,0,0,0,1693,1685,1,0,0,0,1694,1697,1,0,
        0,0,1695,1693,1,0,0,0,1695,1696,1,0,0,0,1696,1700,1,0,0,0,1697,1695,
        1,0,0,0,1698,1699,5,174,0,0,1699,1701,3,82,41,0,1700,1698,1,0,0,
        0,1700,1701,1,0,0,0,1701,1703,1,0,0,0,1702,1676,1,0,0,0,1702,1677,
        1,0,0,0,1703,1705,1,0,0,0,1704,1657,1,0,0,0,1705,1706,1,0,0,0,1706,
        1704,1,0,0,0,1706,1707,1,0,0,0,1707,117,1,0,0,0,1708,1710,5,176,
        0,0,1709,1711,5,140,0,0,1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,
        1712,1,0,0,0,1712,1717,3,126,63,0,1713,1714,5,11,0,0,1714,1716,3,
        126,63,0,1715,1713,1,0,0,0,1716,1719,1,0,0,0,1717,1715,1,0,0,0,1717,
        1718,1,0,0,0,1718,119,1,0,0,0,1719,1717,1,0,0,0,1720,1721,3,160,
        80,0,1721,1722,5,8,0,0,1722,1724,1,0,0,0,1723,1720,1,0,0,0,1723,
        1724,1,0,0,0,1724,1725,1,0,0,0,1725,1731,3,164,82,0,1726,1727,5,
        100,0,0,1727,1728,5,47,0,0,1728,1732,3,176,88,0,1729,1730,5,119,
        0,0,1730,1732,5,100,0,0,1731,1726,1,0,0,0,1731,1729,1,0,0,0,1731,
        1732,1,0,0,0,1732,121,1,0,0,0,1733,1736,3,82,41,0,1734,1735,5,52,
        0,0,1735,1737,3,172,86,0,1736,1734,1,0,0,0,1736,1737,1,0,0,0,1737,
        1739,1,0,0,0,1738,1740,7,7,0,0,1739,1738,1,0,0,0,1739,1740,1,0,0,
        0,1740,1743,1,0,0,0,1741,1742,5,123,0,0,1742,1744,7,19,0,0,1743,
        1741,1,0,0,0,1743,1744,1,0,0,0,1744,123,1,0,0,0,1745,1749,3,142,
        71,0,1746,1749,3,156,78,0,1747,1749,5,183,0,0,1748,1745,1,0,0,0,
        1748,1746,1,0,0,0,1748,1747,1,0,0,0,1749,125,1,0,0,0,1750,1762,3,
        164,82,0,1751,1752,5,9,0,0,1752,1757,3,168,84,0,1753,1754,5,11,0,
        0,1754,1756,3,168,84,0,1755,1753,1,0,0,0,1756,1759,1,0,0,0,1757,
        1755,1,0,0,0,1757,1758,1,0,0,0,1758,1760,1,0,0,0,1759,1757,1,0,0,
        0,1760,1761,5,10,0,0,1761,1763,1,0,0,0,1762,1751,1,0,0,0,1762,1763,
        1,0,0,0,1763,1764,1,0,0,0,1764,1769,5,40,0,0,1765,1767,5,119,0,0,
        1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,1768,1,0,0,0,1768,1770,
        5,116,0,0,1769,1766,1,0,0,0,1769,1770,1,0,0,0,1770,1771,1,0,0,0,
        1771,1772,5,9,0,0,1772,1773,3,60,30,0,1773,1774,5,10,0,0,1774,127,
        1,0,0,0,1775,1788,5,13,0,0,1776,1777,3,164,82,0,1777,1778,5,8,0,
        0,1778,1779,5,13,0,0,1779,1788,1,0,0,0,1780,1785,3,82,41,0,1781,
        1783,5,40,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1784,1,0,
        0,0,1784,1786,3,152,76,0,1785,1782,1,0,0,0,1785,1786,1,0,0,0,1786,
        1788,1,0,0,0,1787,1775,1,0,0,0,1787,1776,1,0,0,0,1787,1780,1,0,0,
        0,1788,129,1,0,0,0,1789,1790,3,160,80,0,1790,1791,5,8,0,0,1791,1793,
        1,0,0,0,1792,1789,1,0,0,0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,1794,
        1799,3,164,82,0,1795,1797,5,40,0,0,1796,1795,1,0,0,0,1796,1797,1,
        0,0,0,1797,1798,1,0,0,0,1798,1800,3,188,94,0,1799,1796,1,0,0,0,1799,
        1800,1,0,0,0,1800,1806,1,0,0,0,1801,1802,5,100,0,0,1802,1803,5,47,
        0,0,1803,1807,3,176,88,0,1804,1805,5,119,0,0,1805,1807,5,100,0,0,
        1806,1801,1,0,0,0,1806,1804,1,0,0,0,1806,1807,1,0,0,0,1807,1861,
        1,0,0,0,1808,1809,3,160,80,0,1809,1810,5,8,0,0,1810,1812,1,0,0,0,
        1811,1808,1,0,0,0,1811,1812,1,0,0,0,1812,1813,1,0,0,0,1813,1814,
        3,162,81,0,1814,1823,5,9,0,0,1815,1820,3,82,41,0,1816,1817,5,11,
        0,0,1817,1819,3,82,41,0,1818,1816,1,0,0,0,1819,1822,1,0,0,0,1820,
        1818,1,0,0,0,1820,1821,1,0,0,0,1821,1824,1,0,0,0,1822,1820,1,0,0,
        0,1823,1815,1,0,0,0,1823,1824,1,0,0,0,1824,1825,1,0,0,0,1825,1830,
        5,10,0,0,1826,1828,5,40,0,0,1827,1826,1,0,0,0,1827,1828,1,0,0,0,
        1828,1829,1,0,0,0,1829,1831,3,188,94,0,1830,1827,1,0,0,0,1830,1831,
        1,0,0,0,1831,1861,1,0,0,0,1832,1842,5,9,0,0,1833,1838,3,130,65,0,
        1834,1835,5,11,0,0,1835,1837,3,130,65,0,1836,1834,1,0,0,0,1837,1840,
        1,0,0,0,1838,1836,1,0,0,0,1838,1839,1,0,0,0,1839,1843,1,0,0,0,1840,
        1838,1,0,0,0,1841,1843,3,132,66,0,1842,1833,1,0,0,0,1842,1841,1,
        0,0,0,1843,1844,1,0,0,0,1844,1849,5,10,0,0,1845,1847,5,40,0,0,1846,
        1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1850,3,188,
        94,0,1849,1846,1,0,0,0,1849,1850,1,0,0,0,1850,1861,1,0,0,0,1851,
        1852,5,9,0,0,1852,1853,3,60,30,0,1853,1858,5,10,0,0,1854,1856,5,
        40,0,0,1855,1854,1,0,0,0,1855,1856,1,0,0,0,1856,1857,1,0,0,0,1857,
        1859,3,188,94,0,1858,1855,1,0,0,0,1858,1859,1,0,0,0,1859,1861,1,
        0,0,0,1860,1792,1,0,0,0,1860,1811,1,0,0,0,1860,1832,1,0,0,0,1860,
        1851,1,0,0,0,1861,131,1,0,0,0,1862,1869,3,130,65,0,1863,1864,3,134,
        67,0,1864,1865,3,130,65,0,1865,1866,3,136,68,0,1866,1868,1,0,0,0,
        1867,1863,1,0,0,0,1868,1871,1,0,0,0,1869,1867,1,0,0,0,1869,1870,
        1,0,0,0,1870,133,1,0,0,0,1871,1869,1,0,0,0,1872,1886,5,11,0,0,1873,
        1875,5,117,0,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,1882,1,0,
        0,0,1876,1878,7,20,0,0,1877,1879,5,130,0,0,1878,1877,1,0,0,0,1878,
        1879,1,0,0,0,1879,1883,1,0,0,0,1880,1883,5,102,0,0,1881,1883,5,58,
        0,0,1882,1876,1,0,0,0,1882,1880,1,0,0,0,1882,1881,1,0,0,0,1882,1883,
        1,0,0,0,1883,1884,1,0,0,0,1884,1886,5,109,0,0,1885,1872,1,0,0,0,
        1885,1874,1,0,0,0,1886,135,1,0,0,0,1887,1888,5,126,0,0,1888,1902,
        3,82,41,0,1889,1890,5,168,0,0,1890,1891,5,9,0,0,1891,1896,3,168,
        84,0,1892,1893,5,11,0,0,1893,1895,3,168,84,0,1894,1892,1,0,0,0,1895,
        1898,1,0,0,0,1896,1894,1,0,0,0,1896,1897,1,0,0,0,1897,1899,1,0,0,
        0,1898,1896,1,0,0,0,1899,1900,5,10,0,0,1900,1902,1,0,0,0,1901,1887,
        1,0,0,0,1901,1889,1,0,0,0,1901,1902,1,0,0,0,1902,137,1,0,0,0,1903,
        1905,5,154,0,0,1904,1906,7,21,0,0,1905,1904,1,0,0,0,1905,1906,1,
        0,0,0,1906,1907,1,0,0,0,1907,1912,3,128,64,0,1908,1909,5,11,0,0,
        1909,1911,3,128,64,0,1910,1908,1,0,0,0,1911,1914,1,0,0,0,1912,1910,
        1,0,0,0,1912,1913,1,0,0,0,1913,1927,1,0,0,0,1914,1912,1,0,0,0,1915,
        1925,5,88,0,0,1916,1921,3,130,65,0,1917,1918,5,11,0,0,1918,1920,
        3,130,65,0,1919,1917,1,0,0,0,1920,1923,1,0,0,0,1921,1919,1,0,0,0,
        1921,1922,1,0,0,0,1922,1926,1,0,0,0,1923,1921,1,0,0,0,1924,1926,
        3,132,66,0,1925,1916,1,0,0,0,1925,1924,1,0,0,0,1926,1928,1,0,0,0,
        1927,1915,1,0,0,0,1927,1928,1,0,0,0,1928,1931,1,0,0,0,1929,1930,
        5,174,0,0,1930,1932,3,82,41,0,1931,1929,1,0,0,0,1931,1932,1,0,0,
        0,1932,1947,1,0,0,0,1933,1934,5,92,0,0,1934,1935,5,47,0,0,1935,1940,
        3,82,41,0,1936,1937,5,11,0,0,1937,1939,3,82,41,0,1938,1936,1,0,0,
        0,1939,1942,1,0,0,0,1940,1938,1,0,0,0,1940,1941,1,0,0,0,1941,1945,
        1,0,0,0,1942,1940,1,0,0,0,1943,1944,5,94,0,0,1944,1946,3,82,41,0,
        1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,1948,1,0,0,0,1947,1933,
        1,0,0,0,1947,1948,1,0,0,0,1948,1963,1,0,0,0,1949,1950,5,175,0,0,
        1950,1951,3,192,96,0,1951,1952,5,40,0,0,1952,1960,3,96,48,0,1953,
        1954,5,11,0,0,1954,1955,3,192,96,0,1955,1956,5,40,0,0,1956,1957,
        3,96,48,0,1957,1959,1,0,0,0,1958,1953,1,0,0,0,1959,1962,1,0,0,0,
        1960,1958,1,0,0,0,1960,1961,1,0,0,0,1961,1964,1,0,0,0,1962,1960,
        1,0,0,0,1963,1949,1,0,0,0,1963,1964,1,0,0,0,1964,1994,1,0,0,0,1965,
        1966,5,170,0,0,1966,1967,5,9,0,0,1967,1972,3,82,41,0,1968,1969,5,
        11,0,0,1969,1971,3,82,41,0,1970,1968,1,0,0,0,1971,1974,1,0,0,0,1972,
        1970,1,0,0,0,1972,1973,1,0,0,0,1973,1975,1,0,0,0,1974,1972,1,0,0,
        0,1975,1990,5,10,0,0,1976,1977,5,11,0,0,1977,1978,5,9,0,0,1978,1983,
        3,82,41,0,1979,1980,5,11,0,0,1980,1982,3,82,41,0,1981,1979,1,0,0,
        0,1982,1985,1,0,0,0,1983,1981,1,0,0,0,1983,1984,1,0,0,0,1984,1986,
        1,0,0,0,1985,1983,1,0,0,0,1986,1987,5,10,0,0,1987,1989,1,0,0,0,1988,
        1976,1,0,0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,
        0,1991,1994,1,0,0,0,1992,1990,1,0,0,0,1993,1903,1,0,0,0,1993,1965,
        1,0,0,0,1994,139,1,0,0,0,1995,2001,5,165,0,0,1996,1997,5,165,0,0,
        1997,2001,5,35,0,0,1998,2001,5,105,0,0,1999,2001,5,77,0,0,2000,1995,
        1,0,0,0,2000,1996,1,0,0,0,2000,1998,1,0,0,0,2000,1999,1,0,0,0,2001,
        141,1,0,0,0,2002,2004,7,10,0,0,2003,2002,1,0,0,0,2003,2004,1,0,0,
        0,2004,2005,1,0,0,0,2005,2006,5,185,0,0,2006,143,1,0,0,0,2007,2008,
        7,22,0,0,2008,145,1,0,0,0,2009,2010,7,23,0,0,2010,147,1,0,0,0,2011,
        2012,5,183,0,0,2012,149,1,0,0,0,2013,2016,3,68,34,0,2014,2016,3,
        82,41,0,2015,2013,1,0,0,0,2015,2014,1,0,0,0,2016,151,1,0,0,0,2017,
        2021,5,184,0,0,2018,2021,3,154,77,0,2019,2021,5,183,0,0,2020,2017,
        1,0,0,0,2020,2018,1,0,0,0,2020,2019,1,0,0,0,2021,153,1,0,0,0,2022,
        2023,7,24,0,0,2023,155,1,0,0,0,2024,2025,3,198,99,0,2025,157,1,0,
        0,0,2026,2027,3,198,99,0,2027,159,1,0,0,0,2028,2029,3,198,99,0,2029,
        161,1,0,0,0,2030,2031,3,198,99,0,2031,163,1,0,0,0,2032,2033,3,198,
        99,0,2033,165,1,0,0,0,2034,2035,3,198,99,0,2035,167,1,0,0,0,2036,
        2037,3,198,99,0,2037,169,1,0,0,0,2038,2039,5,9,0,0,2039,2044,3,168,
        84,0,2040,2041,5,11,0,0,2041,2043,3,168,84,0,2042,2040,1,0,0,0,2043,
        2046,1,0,0,0,2044,2042,1,0,0,0,2044,2045,1,0,0,0,2045,2047,1,0,0,
        0,2046,2044,1,0,0,0,2047,2048,5,10,0,0,2048,171,1,0,0,0,2049,2050,
        3,198,99,0,2050,173,1,0,0,0,2051,2052,3,198,99,0,2052,175,1,0,0,
        0,2053,2054,3,198,99,0,2054,177,1,0,0,0,2055,2056,3,198,99,0,2056,
        179,1,0,0,0,2057,2058,3,198,99,0,2058,181,1,0,0,0,2059,2060,3,198,
        99,0,2060,183,1,0,0,0,2061,2062,3,198,99,0,2062,185,1,0,0,0,2063,
        2064,3,198,99,0,2064,187,1,0,0,0,2065,2069,5,184,0,0,2066,2069,3,
        154,77,0,2067,2069,5,183,0,0,2068,2065,1,0,0,0,2068,2066,1,0,0,0,
        2068,2067,1,0,0,0,2069,189,1,0,0,0,2070,2071,3,198,99,0,2071,191,
        1,0,0,0,2072,2073,3,198,99,0,2073,193,1,0,0,0,2074,2075,3,198,99,
        0,2075,195,1,0,0,0,2076,2077,3,198,99,0,2077,197,1,0,0,0,2078,2086,
        5,184,0,0,2079,2086,3,154,77,0,2080,2086,5,183,0,0,2081,2082,5,9,
        0,0,2082,2083,3,198,99,0,2083,2084,5,10,0,0,2084,2086,1,0,0,0,2085,
        2078,1,0,0,0,2085,2079,1,0,0,0,2085,2080,1,0,0,0,2085,2081,1,0,0,
        0,2086,199,1,0,0,0,309,202,211,218,223,229,235,237,269,276,284,292,
        297,300,309,313,321,325,327,332,334,337,342,346,351,360,363,369,
        371,375,381,386,397,403,407,413,418,427,434,443,446,450,454,460,
        465,472,483,486,488,494,500,504,511,517,523,529,534,543,548,559,
        564,575,580,583,590,593,596,603,606,615,618,624,626,630,638,643,
        651,656,664,669,677,682,687,695,705,708,714,716,719,738,744,749,
        757,762,771,782,789,793,797,801,804,810,819,826,830,832,836,843,
        845,849,852,858,868,871,877,879,882,890,900,903,909,911,914,927,
        933,940,947,956,960,962,966,969,972,985,991,998,1005,1014,1018,1020,
        1024,1027,1036,1039,1045,1047,1052,1056,1061,1075,1081,1083,1091,
        1095,1100,1102,1108,1113,1117,1120,1138,1144,1150,1152,1160,1164,
        1167,1172,1180,1185,1194,1198,1201,1209,1230,1233,1238,1241,1249,
        1258,1262,1267,1300,1312,1316,1321,1333,1339,1346,1350,1360,1363,
        1369,1372,1374,1376,1393,1398,1410,1414,1418,1422,1429,1431,1434,
        1441,1451,1454,1457,1461,1468,1473,1479,1482,1484,1490,1493,1495,
        1499,1504,1513,1516,1525,1528,1531,1543,1545,1554,1563,1575,1587,
        1595,1601,1605,1608,1612,1617,1625,1644,1650,1655,1665,1671,1673,
        1681,1688,1695,1700,1702,1706,1710,1717,1723,1731,1736,1739,1743,
        1748,1757,1762,1766,1769,1782,1785,1787,1792,1796,1799,1806,1811,
        1820,1823,1827,1830,1838,1842,1846,1849,1855,1858,1860,1869,1874,
        1878,1882,1885,1896,1901,1905,1912,1921,1925,1927,1931,1940,1945,
        1947,1960,1963,1972,1983,1990,1993,2000,2003,2015,2020,2044,2068,
        2085
    ]

class SQLiteParser ( Parser ):

    grammarFileName = "SQLite.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'`'", u"'``'", u"'['", u"']'", u"'->'", 
                     u"'->>'", u"';'", u"'.'", u"'('", u"')'", u"','", u"'='", 
                     u"'*'", u"'+'", u"'-'", u"'~'", u"'||'", u"'/'", u"'%'", 
                     u"'<<'", u"'>>'", u"'&'", u"'|'", u"'<'", u"'<='", 
                     u"'>'", u"'>='", u"'=='", u"'!='", u"'<>'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"SCOL", 
                      u"DOT", u"OPEN_PAR", u"CLOSE_PAR", u"COMMA", u"ASSIGN", 
                      u"STAR", u"PLUS", u"MINUS", u"TILDE", u"PIPE2", u"DIV", 
                      u"MOD", u"LT2", u"GT2", u"AMP", u"PIPE", u"LT", u"LT_EQ", 
                      u"GT", u"GT_EQ", u"EQ", u"NOT_EQ1", u"NOT_EQ2", u"K_ABORT", 
                      u"K_ACTION", u"K_ADD", u"K_AFTER", u"K_ALL", u"K_ALTER", 
                      u"K_ALWAYS", u"K_ANALYZE", u"K_AND", u"K_AS", u"K_ASC", 
                      u"K_ATTACH", u"K_AUTOINCREMENT", u"K_BEFORE", u"K_BEGIN", 
                      u"K_BETWEEN", u"K_BY", u"K_CASCADE", u"K_CASE", u"K_CAST", 
                      u"K_CHECK", u"K_COLLATE", u"K_COLUMN", u"K_COMMIT", 
                      u"K_CONFLICT", u"K_CONSTRAINT", u"K_CREATE", u"K_CROSS", 
                      u"K_CURRENT", u"K_CURRENT_DATE", u"K_CURRENT_TIME", 
                      u"K_CURRENT_TIMESTAMP", u"K_DATABASE", u"K_DEFAULT", 
                      u"K_DEFERRABLE", u"K_DEFERRED", u"K_DELETE", u"K_DESC", 
                      u"K_DETACH", u"K_DISTINCT", u"K_DO", u"K_DROP", u"K_EACH", 
                      u"K_ELSE", u"K_END", u"K_ESCAPE", u"K_EXCEPT", u"K_EXCLUDE", 
                      u"K_EXCLUSIVE", u"K_EXISTS", u"K_EXPLAIN", u"K_FAIL", 
                      u"K_FILTER", u"K_FIRST", u"K_FOLLOWING", u"K_FOR", 
                      u"K_FOREIGN", u"K_FROM", u"K_FULL", u"K_GENERATED", 
                      u"K_GLOB", u"K_GROUP", u"K_GROUPS", u"K_HAVING", u"K_IF", 
                      u"K_IGNORE", u"K_IMMEDIATE", u"K_IN", u"K_INDEX", 
                      u"K_INDEXED", u"K_INITIALLY", u"K_INNER", u"K_INSERT", 
                      u"K_INSTEAD", u"K_INTERSECT", u"K_INTO", u"K_IS", 
                      u"K_ISNULL", u"K_JOIN", u"K_KEY", u"K_LAST", u"K_LEFT", 
                      u"K_LIKE", u"K_LIMIT", u"K_MATCH", u"K_MATERIALIZED", 
                      u"K_NATURAL", u"K_NO", u"K_NOT", u"K_NOTHING", u"K_NOTNULL", 
                      u"K_NULL", u"K_NULLS", u"K_OF", u"K_OFFSET", u"K_ON", 
                      u"K_OR", u"K_ORDER", u"K_OTHERS", u"K_OUTER", u"K_OVER", 
                      u"K_PARTITION", u"K_PLAN", u"K_PRAGMA", u"K_PRECEDING", 
                      u"K_PRIMARY", u"K_QUERY", u"K_RAISE", u"K_RANGE", 
                      u"K_RECURSIVE", u"K_REFERENCES", u"K_REGEXP", u"K_REINDEX", 
                      u"K_RELEASE", u"K_RENAME", u"K_REPLACE", u"K_RESTRICT", 
                      u"K_RETURNING", u"K_RIGHT", u"K_ROLLBACK", u"K_ROW", 
                      u"K_ROWS", u"K_SAVEPOINT", u"K_SELECT", u"K_SET", 
                      u"K_TABLE", u"K_TEMP", u"K_TEMPORARY", u"K_THEN", 
                      u"K_TIES", u"K_TO", u"K_TRANSACTION", u"K_TRIGGER", 
                      u"K_UNBOUNDED", u"K_UNION", u"K_UNIQUE", u"K_UPDATE", 
                      u"K_USING", u"K_VACUUM", u"K_VALUES", u"K_VIEW", u"K_VIRTUAL", 
                      u"K_WHEN", u"K_WHERE", u"K_WINDOW", u"K_WITH", u"K_WITHOUT", 
                      u"C_ROWID", u"C_STORED", u"C_STRICT", u"C_TRUE", u"C_FALSE", 
                      u"STRING_LITERAL", u"IDENTIFIER", u"NUMERIC_LITERAL", 
                      u"NUMBER", u"BIND_PARAMETER", u"BLOB_LITERAL", u"SINGLE_LINE_COMMENT", 
                      u"MULTILINE_COMMENT", u"SPACES", u"UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_alter_table_stmt = 4
    RULE_analyze_stmt = 5
    RULE_attach_stmt = 6
    RULE_begin_stmt = 7
    RULE_commit_stmt = 8
    RULE_compound_select_stmt = 9
    RULE_create_index_stmt = 10
    RULE_create_table_stmt = 11
    RULE_create_trigger_stmt = 12
    RULE_create_view_stmt = 13
    RULE_create_virtual_table_stmt = 14
    RULE_delete_stmt = 15
    RULE_delete_stmt_limited = 16
    RULE_detach_stmt = 17
    RULE_drop_index_stmt = 18
    RULE_drop_table_stmt = 19
    RULE_drop_trigger_stmt = 20
    RULE_drop_view_stmt = 21
    RULE_factored_select_stmt = 22
    RULE_insert_stmt = 23
    RULE_pragma_stmt = 24
    RULE_reindex_stmt = 25
    RULE_release_stmt = 26
    RULE_rollback_stmt = 27
    RULE_savepoint_stmt = 28
    RULE_simple_select_stmt = 29
    RULE_select_stmt = 30
    RULE_update_stmt = 31
    RULE_update_stmt_limited = 32
    RULE_vacuum_stmt = 33
    RULE_column_def = 34
    RULE_type_name = 35
    RULE_type_name_text = 36
    RULE_type_or_constraint_name_word = 37
    RULE_column_constraint = 38
    RULE_constraint_name = 39
    RULE_conflict_clause = 40
    RULE_expr = 41
    RULE_filter_clause = 42
    RULE_foreign_key_clause = 43
    RULE_function_arguments = 44
    RULE_generated_clause = 45
    RULE_over_clause = 46
    RULE_returning_clause = 47
    RULE_window_defn = 48
    RULE_frame_spec = 49
    RULE_frame_clause = 50
    RULE_frame_single = 51
    RULE_frame_left = 52
    RULE_frame_right = 53
    RULE_raise_function = 54
    RULE_indexed_column = 55
    RULE_table_constraint = 56
    RULE_table_option = 57
    RULE_upsert_clause = 58
    RULE_with_clause = 59
    RULE_qualified_table_name = 60
    RULE_ordering_term = 61
    RULE_pragma_value = 62
    RULE_common_table_expression = 63
    RULE_result_column = 64
    RULE_table_or_subquery = 65
    RULE_join_clause = 66
    RULE_join_operator = 67
    RULE_join_constraint = 68
    RULE_select_core = 69
    RULE_compound_operator = 70
    RULE_signed_number = 71
    RULE_literal_value = 72
    RULE_unary_operator = 73
    RULE_error_message = 74
    RULE_module_argument = 75
    RULE_column_alias = 76
    RULE_keyword = 77
    RULE_name = 78
    RULE_function_name = 79
    RULE_schema_name = 80
    RULE_table_function_name = 81
    RULE_table_name = 82
    RULE_table_or_index_name = 83
    RULE_column_name = 84
    RULE_column_name_list = 85
    RULE_collation_name = 86
    RULE_foreign_table = 87
    RULE_index_name = 88
    RULE_trigger_name = 89
    RULE_view_name = 90
    RULE_module_name = 91
    RULE_pragma_name = 92
    RULE_savepoint_name = 93
    RULE_table_alias = 94
    RULE_transaction_name = 95
    RULE_window_name = 96
    RULE_base_window_name = 97
    RULE_filename = 98
    RULE_any_name = 99

    ruleNames =  [ u"parse", u"error", u"sql_stmt_list", u"sql_stmt", u"alter_table_stmt", 
                   u"analyze_stmt", u"attach_stmt", u"begin_stmt", u"commit_stmt", 
                   u"compound_select_stmt", u"create_index_stmt", u"create_table_stmt", 
                   u"create_trigger_stmt", u"create_view_stmt", u"create_virtual_table_stmt", 
                   u"delete_stmt", u"delete_stmt_limited", u"detach_stmt", 
                   u"drop_index_stmt", u"drop_table_stmt", u"drop_trigger_stmt", 
                   u"drop_view_stmt", u"factored_select_stmt", u"insert_stmt", 
                   u"pragma_stmt", u"reindex_stmt", u"release_stmt", u"rollback_stmt", 
                   u"savepoint_stmt", u"simple_select_stmt", u"select_stmt", 
                   u"update_stmt", u"update_stmt_limited", u"vacuum_stmt", 
                   u"column_def", u"type_name", u"type_name_text", u"type_or_constraint_name_word", 
                   u"column_constraint", u"constraint_name", u"conflict_clause", 
                   u"expr", u"filter_clause", u"foreign_key_clause", u"function_arguments", 
                   u"generated_clause", u"over_clause", u"returning_clause", 
                   u"window_defn", u"frame_spec", u"frame_clause", u"frame_single", 
                   u"frame_left", u"frame_right", u"raise_function", u"indexed_column", 
                   u"table_constraint", u"table_option", u"upsert_clause", 
                   u"with_clause", u"qualified_table_name", u"ordering_term", 
                   u"pragma_value", u"common_table_expression", u"result_column", 
                   u"table_or_subquery", u"join_clause", u"join_operator", 
                   u"join_constraint", u"select_core", u"compound_operator", 
                   u"signed_number", u"literal_value", u"unary_operator", 
                   u"error_message", u"module_argument", u"column_alias", 
                   u"keyword", u"name", u"function_name", u"schema_name", 
                   u"table_function_name", u"table_name", u"table_or_index_name", 
                   u"column_name", u"column_name_list", u"collation_name", 
                   u"foreign_table", u"index_name", u"trigger_name", u"view_name", 
                   u"module_name", u"pragma_name", u"savepoint_name", u"table_alias", 
                   u"transaction_name", u"window_name", u"base_window_name", 
                   u"filename", u"any_name" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    SCOL=7
    DOT=8
    OPEN_PAR=9
    CLOSE_PAR=10
    COMMA=11
    ASSIGN=12
    STAR=13
    PLUS=14
    MINUS=15
    TILDE=16
    PIPE2=17
    DIV=18
    MOD=19
    LT2=20
    GT2=21
    AMP=22
    PIPE=23
    LT=24
    LT_EQ=25
    GT=26
    GT_EQ=27
    EQ=28
    NOT_EQ1=29
    NOT_EQ2=30
    K_ABORT=31
    K_ACTION=32
    K_ADD=33
    K_AFTER=34
    K_ALL=35
    K_ALTER=36
    K_ALWAYS=37
    K_ANALYZE=38
    K_AND=39
    K_AS=40
    K_ASC=41
    K_ATTACH=42
    K_AUTOINCREMENT=43
    K_BEFORE=44
    K_BEGIN=45
    K_BETWEEN=46
    K_BY=47
    K_CASCADE=48
    K_CASE=49
    K_CAST=50
    K_CHECK=51
    K_COLLATE=52
    K_COLUMN=53
    K_COMMIT=54
    K_CONFLICT=55
    K_CONSTRAINT=56
    K_CREATE=57
    K_CROSS=58
    K_CURRENT=59
    K_CURRENT_DATE=60
    K_CURRENT_TIME=61
    K_CURRENT_TIMESTAMP=62
    K_DATABASE=63
    K_DEFAULT=64
    K_DEFERRABLE=65
    K_DEFERRED=66
    K_DELETE=67
    K_DESC=68
    K_DETACH=69
    K_DISTINCT=70
    K_DO=71
    K_DROP=72
    K_EACH=73
    K_ELSE=74
    K_END=75
    K_ESCAPE=76
    K_EXCEPT=77
    K_EXCLUDE=78
    K_EXCLUSIVE=79
    K_EXISTS=80
    K_EXPLAIN=81
    K_FAIL=82
    K_FILTER=83
    K_FIRST=84
    K_FOLLOWING=85
    K_FOR=86
    K_FOREIGN=87
    K_FROM=88
    K_FULL=89
    K_GENERATED=90
    K_GLOB=91
    K_GROUP=92
    K_GROUPS=93
    K_HAVING=94
    K_IF=95
    K_IGNORE=96
    K_IMMEDIATE=97
    K_IN=98
    K_INDEX=99
    K_INDEXED=100
    K_INITIALLY=101
    K_INNER=102
    K_INSERT=103
    K_INSTEAD=104
    K_INTERSECT=105
    K_INTO=106
    K_IS=107
    K_ISNULL=108
    K_JOIN=109
    K_KEY=110
    K_LAST=111
    K_LEFT=112
    K_LIKE=113
    K_LIMIT=114
    K_MATCH=115
    K_MATERIALIZED=116
    K_NATURAL=117
    K_NO=118
    K_NOT=119
    K_NOTHING=120
    K_NOTNULL=121
    K_NULL=122
    K_NULLS=123
    K_OF=124
    K_OFFSET=125
    K_ON=126
    K_OR=127
    K_ORDER=128
    K_OTHERS=129
    K_OUTER=130
    K_OVER=131
    K_PARTITION=132
    K_PLAN=133
    K_PRAGMA=134
    K_PRECEDING=135
    K_PRIMARY=136
    K_QUERY=137
    K_RAISE=138
    K_RANGE=139
    K_RECURSIVE=140
    K_REFERENCES=141
    K_REGEXP=142
    K_REINDEX=143
    K_RELEASE=144
    K_RENAME=145
    K_REPLACE=146
    K_RESTRICT=147
    K_RETURNING=148
    K_RIGHT=149
    K_ROLLBACK=150
    K_ROW=151
    K_ROWS=152
    K_SAVEPOINT=153
    K_SELECT=154
    K_SET=155
    K_TABLE=156
    K_TEMP=157
    K_TEMPORARY=158
    K_THEN=159
    K_TIES=160
    K_TO=161
    K_TRANSACTION=162
    K_TRIGGER=163
    K_UNBOUNDED=164
    K_UNION=165
    K_UNIQUE=166
    K_UPDATE=167
    K_USING=168
    K_VACUUM=169
    K_VALUES=170
    K_VIEW=171
    K_VIRTUAL=172
    K_WHEN=173
    K_WHERE=174
    K_WINDOW=175
    K_WITH=176
    K_WITHOUT=177
    C_ROWID=178
    C_STORED=179
    C_STRICT=180
    C_TRUE=181
    C_FALSE=182
    STRING_LITERAL=183
    IDENTIFIER=184
    NUMERIC_LITERAL=185
    NUMBER=186
    BIND_PARAMETER=187
    BLOB_LITERAL=188
    SINGLE_LINE_COMMENT=189
    MULTILINE_COMMENT=190
    SPACES=191
    UNEXPECTED_CHAR=192

    def __init__(self, input, output=sys.stdout):
        super(SQLiteParser, self).__init__(input, output=output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ParseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self):
            return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,0)


        def error(self):
            return self.getTypedRuleContext(SQLiteParser.ErrorContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener):
            if hasattr(listener, "enterParse"):
                listener.enterParse(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParse"):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 36, 38, 42, 45, 54, 57, 67, 69, 72, 75, 81, 103, 134, 143, 144, 146, 150, 153, 154, 167, 169, 170, 176]:
                self.state = 200
                self.sql_stmt_list()
                pass
            elif token in [192]:
                self.state = 201
                self.error()
                pass
            elif token in [-1]:
                pass
            else:
                pass
            self.state = 204
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ErrorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNEXPECTED_CHAR(self):
            return self.getToken(SQLiteParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error

        def enterRule(self, listener):
            if hasattr(listener, "enterError"):
                listener.enterError(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError"):
                listener.exitError(self)




    def error(self):

        localctx = SQLiteParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(SQLiteParser.UNEXPECTED_CHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Sql_stmt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt_list"):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt_list"):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 208
                self.match(SQLiteParser.SCOL)
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 214
            self.sql_stmt()
            self.state = 223
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 216 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 215
                        self.match(SQLiteParser.SCOL)
                        self.state = 218 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==7):
                            break

                    self.state = 220
                    self.sql_stmt() 
                self.state = 225
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 226
                self.match(SQLiteParser.SCOL)
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Sql_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def compound_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Compound_select_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_index_stmtContext,0)


        def drop_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_table_stmtContext,0)


        def drop_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_trigger_stmtContext,0)


        def drop_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_view_stmtContext,0)


        def factored_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Factored_select_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def simple_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt"):
                listener.enterSql_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt"):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 232
                self.match(SQLiteParser.K_EXPLAIN)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 233
                    self.match(SQLiteParser.K_QUERY)
                    self.state = 234
                    self.match(SQLiteParser.K_PLAN)




            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 239
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 240
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 241
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 242
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 243
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 244
                self.compound_select_stmt()
                pass

            elif la_ == 7:
                self.state = 245
                self.create_index_stmt()
                pass

            elif la_ == 8:
                self.state = 246
                self.create_table_stmt()
                pass

            elif la_ == 9:
                self.state = 247
                self.create_trigger_stmt()
                pass

            elif la_ == 10:
                self.state = 248
                self.create_view_stmt()
                pass

            elif la_ == 11:
                self.state = 249
                self.create_virtual_table_stmt()
                pass

            elif la_ == 12:
                self.state = 250
                self.delete_stmt()
                pass

            elif la_ == 13:
                self.state = 251
                self.delete_stmt_limited()
                pass

            elif la_ == 14:
                self.state = 252
                self.detach_stmt()
                pass

            elif la_ == 15:
                self.state = 253
                self.drop_index_stmt()
                pass

            elif la_ == 16:
                self.state = 254
                self.drop_table_stmt()
                pass

            elif la_ == 17:
                self.state = 255
                self.drop_trigger_stmt()
                pass

            elif la_ == 18:
                self.state = 256
                self.drop_view_stmt()
                pass

            elif la_ == 19:
                self.state = 257
                self.factored_select_stmt()
                pass

            elif la_ == 20:
                self.state = 258
                self.insert_stmt()
                pass

            elif la_ == 21:
                self.state = 259
                self.pragma_stmt()
                pass

            elif la_ == 22:
                self.state = 260
                self.reindex_stmt()
                pass

            elif la_ == 23:
                self.state = 261
                self.release_stmt()
                pass

            elif la_ == 24:
                self.state = 262
                self.rollback_stmt()
                pass

            elif la_ == 25:
                self.state = 263
                self.savepoint_stmt()
                pass

            elif la_ == 26:
                self.state = 264
                self.simple_select_stmt()
                pass

            elif la_ == 27:
                self.state = 265
                self.select_stmt()
                pass

            elif la_ == 28:
                self.state = 266
                self.update_stmt()
                pass

            elif la_ == 29:
                self.state = 267
                self.update_stmt_limited()
                pass

            elif la_ == 30:
                self.state = 268
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Alter_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.new_table_name = None # Table_nameContext
            self.old_column_name = None # Column_nameContext
            self.new_column_name = None # Column_nameContext

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_nameContext,i)


        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAlter_table_stmt"):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlter_table_stmt"):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(SQLiteParser.K_ALTER)
            self.state = 272
            self.match(SQLiteParser.K_TABLE)
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 273
                self.schema_name()
                self.state = 274
                self.match(SQLiteParser.DOT)


            self.state = 278
            self.table_name()
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 279
                self.match(SQLiteParser.K_RENAME)
                self.state = 280
                self.match(SQLiteParser.K_TO)
                self.state = 281
                localctx.new_table_name = self.table_name()
                pass

            elif la_ == 2:
                self.state = 282
                self.match(SQLiteParser.K_RENAME)
                self.state = 284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 283
                    self.match(SQLiteParser.K_COLUMN)


                self.state = 286
                localctx.old_column_name = self.column_name()
                self.state = 287
                self.match(SQLiteParser.K_TO)
                self.state = 288
                localctx.new_column_name = self.column_name()
                pass

            elif la_ == 3:
                self.state = 290
                self.match(SQLiteParser.K_ADD)
                self.state = 292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 291
                    self.match(SQLiteParser.K_COLUMN)


                self.state = 294
                self.column_def()
                pass

            elif la_ == 4:
                self.state = 295
                self.match(SQLiteParser.K_DROP)
                self.state = 297
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 296
                    self.match(SQLiteParser.K_COLUMN)


                self.state = 299
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Analyze_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAnalyze_stmt"):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnalyze_stmt"):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(SQLiteParser.K_ANALYZE)
            self.state = 309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 303
                self.schema_name()

            elif la_ == 2:
                self.state = 304
                self.table_or_index_name()

            elif la_ == 3:
                self.state = 305
                self.schema_name()
                self.state = 306
                self.match(SQLiteParser.DOT)
                self.state = 307
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Attach_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAttach_stmt"):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttach_stmt"):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(SQLiteParser.K_ATTACH)
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 312
                self.match(SQLiteParser.K_DATABASE)


            self.state = 315
            self.expr(0)
            self.state = 316
            self.match(SQLiteParser.K_AS)
            self.state = 317
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Begin_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterBegin_stmt"):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBegin_stmt"):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(SQLiteParser.K_BEGIN)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2147491841) != 0):
                self.state = 320
                _la = self._input.LA(1)
                if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2147491841) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==162:
                self.state = 323
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2147483136) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 144115188075855871) != 0):
                    self.state = 324
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Commit_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCommit_stmt"):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommit_stmt"):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            _la = self._input.LA(1)
            if not(_la==54 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==162:
                self.state = 330
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2147483136) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 144115188075855871) != 0):
                    self.state = 331
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Compound_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_UNION(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UNION)
            else:
                return self.getToken(SQLiteParser.K_UNION, i)

        def K_INTERSECT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_INTERSECT)
            else:
                return self.getToken(SQLiteParser.K_INTERSECT, i)

        def K_EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_EXCEPT)
            else:
                return self.getToken(SQLiteParser.K_EXCEPT, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ALL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ALL)
            else:
                return self.getToken(SQLiteParser.K_ALL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCompound_select_stmt"):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompound_select_stmt"):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 336
                self.with_clause()


            self.state = 339
            self.select_core()
            self.state = 349 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [165]:
                    self.state = 340
                    self.match(SQLiteParser.K_UNION)
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==35:
                        self.state = 341
                        self.match(SQLiteParser.K_ALL)


                    pass
                elif token in [105]:
                    self.state = 344
                    self.match(SQLiteParser.K_INTERSECT)
                    pass
                elif token in [77]:
                    self.state = 345
                    self.match(SQLiteParser.K_EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 348
                self.select_core()
                self.state = 351 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==77 or _la==105 or _la==165):
                    break

            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 353
                self.match(SQLiteParser.K_ORDER)
                self.state = 354
                self.match(SQLiteParser.K_BY)
                self.state = 355
                self.ordering_term()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 356
                    self.match(SQLiteParser.COMMA)
                    self.state = 357
                    self.ordering_term()
                    self.state = 362
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 365
                self.match(SQLiteParser.K_LIMIT)
                self.state = 366
                self.expr(0)
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11 or _la==125:
                    self.state = 367
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==125):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 368
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_index_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_index_stmt"):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_index_stmt"):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(SQLiteParser.K_CREATE)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==166:
                self.state = 374
                self.match(SQLiteParser.K_UNIQUE)


            self.state = 377
            self.match(SQLiteParser.K_INDEX)
            self.state = 381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 378
                self.match(SQLiteParser.K_IF)
                self.state = 379
                self.match(SQLiteParser.K_NOT)
                self.state = 380
                self.match(SQLiteParser.K_EXISTS)


            self.state = 386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 383
                self.schema_name()
                self.state = 384
                self.match(SQLiteParser.DOT)


            self.state = 388
            self.index_name()
            self.state = 389
            self.match(SQLiteParser.K_ON)
            self.state = 390
            self.table_name()
            self.state = 391
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 392
            self.indexed_column()
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 393
                self.match(SQLiteParser.COMMA)
                self.state = 394
                self.indexed_column()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 400
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==174:
                self.state = 401
                self.match(SQLiteParser.K_WHERE)
                self.state = 402
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def table_option(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_optionContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_table_stmt"):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_table_stmt"):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(SQLiteParser.K_CREATE)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157 or _la==158:
                self.state = 406
                _la = self._input.LA(1)
                if not(_la==157 or _la==158):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 409
            self.match(SQLiteParser.K_TABLE)
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 410
                self.match(SQLiteParser.K_IF)
                self.state = 411
                self.match(SQLiteParser.K_NOT)
                self.state = 412
                self.match(SQLiteParser.K_EXISTS)


            self.state = 418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 415
                self.schema_name()
                self.state = 416
                self.match(SQLiteParser.DOT)


            self.state = 420
            self.table_name()
            self.state = 450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 421
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 422
                self.column_def()
                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 423
                        self.match(SQLiteParser.COMMA)
                        self.state = 424
                        self.column_def() 
                    self.state = 429
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 430
                    self.match(SQLiteParser.COMMA)
                    self.state = 431
                    self.table_constraint()
                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 437
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177 or _la==180:
                    self.state = 438
                    self.table_option()
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 439
                        self.match(SQLiteParser.COMMA)
                        self.state = 440
                        self.table_option()
                        self.state = 445
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [40]:
                self.state = 448
                self.match(SQLiteParser.K_AS)
                self.state = 449
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_trigger_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def schema_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Schema_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,i)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_OF(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_OF)
            else:
                return self.getToken(SQLiteParser.K_OF, i)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def update_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_trigger_stmt"):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_trigger_stmt"):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(SQLiteParser.K_CREATE)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157 or _la==158:
                self.state = 453
                _la = self._input.LA(1)
                if not(_la==157 or _la==158):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 456
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 457
                self.match(SQLiteParser.K_IF)
                self.state = 458
                self.match(SQLiteParser.K_NOT)
                self.state = 459
                self.match(SQLiteParser.K_EXISTS)


            self.state = 465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 462
                self.schema_name()
                self.state = 463
                self.match(SQLiteParser.DOT)


            self.state = 467
            self.trigger_name()
            self.state = 472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 468
                self.match(SQLiteParser.K_BEFORE)
                pass
            elif token in [34]:
                self.state = 469
                self.match(SQLiteParser.K_AFTER)
                pass
            elif token in [104]:
                self.state = 470
                self.match(SQLiteParser.K_INSTEAD)
                self.state = 471
                self.match(SQLiteParser.K_OF)
                pass
            elif token in [67, 103, 167]:
                pass
            else:
                pass
            self.state = 488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.state = 474
                self.match(SQLiteParser.K_DELETE)
                pass
            elif token in [103]:
                self.state = 475
                self.match(SQLiteParser.K_INSERT)
                pass
            elif token in [167]:
                self.state = 476
                self.match(SQLiteParser.K_UPDATE)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 477
                    self.match(SQLiteParser.K_OF)
                    self.state = 478
                    self.column_name()
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 479
                        self.match(SQLiteParser.COMMA)
                        self.state = 480
                        self.column_name()
                        self.state = 485
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 490
            self.match(SQLiteParser.K_ON)
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 491
                self.schema_name()
                self.state = 492
                self.match(SQLiteParser.DOT)


            self.state = 496
            self.table_name()
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 497
                self.match(SQLiteParser.K_FOR)
                self.state = 498
                self.match(SQLiteParser.K_EACH)
                self.state = 499
                self.match(SQLiteParser.K_ROW)


            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==173:
                self.state = 502
                self.match(SQLiteParser.K_WHEN)
                self.state = 503
                self.expr(0)


            self.state = 506
            self.match(SQLiteParser.K_BEGIN)
            self.state = 515 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 511
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 507
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 508
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 509
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 510
                    self.select_stmt()
                    pass


                self.state = 513
                self.match(SQLiteParser.SCOL)
                self.state = 517 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==67 or _la==103 or ((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & 1092616449) != 0)):
                    break

            self.state = 519
            self.match(SQLiteParser.K_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_view_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_view_stmt"):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_view_stmt"):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(SQLiteParser.K_CREATE)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157 or _la==158:
                self.state = 522
                _la = self._input.LA(1)
                if not(_la==157 or _la==158):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 525
            self.match(SQLiteParser.K_VIEW)
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 526
                self.match(SQLiteParser.K_IF)
                self.state = 527
                self.match(SQLiteParser.K_NOT)
                self.state = 528
                self.match(SQLiteParser.K_EXISTS)


            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 531
                self.schema_name()
                self.state = 532
                self.match(SQLiteParser.DOT)


            self.state = 536
            self.view_name()
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 537
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 538
                self.column_name()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 539
                    self.match(SQLiteParser.COMMA)
                    self.state = 540
                    self.column_name()
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 546
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 550
            self.match(SQLiteParser.K_AS)
            self.state = 551
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_virtual_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_virtual_table_stmt"):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_virtual_table_stmt"):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(SQLiteParser.K_CREATE)
            self.state = 554
            self.match(SQLiteParser.K_VIRTUAL)
            self.state = 555
            self.match(SQLiteParser.K_TABLE)
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 556
                self.match(SQLiteParser.K_IF)
                self.state = 557
                self.match(SQLiteParser.K_NOT)
                self.state = 558
                self.match(SQLiteParser.K_EXISTS)


            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 561
                self.schema_name()
                self.state = 562
                self.match(SQLiteParser.DOT)


            self.state = 566
            self.table_name()
            self.state = 567
            self.match(SQLiteParser.K_USING)
            self.state = 568
            self.module_name()
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 569
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 570
                self.module_argument()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 571
                    self.match(SQLiteParser.COMMA)
                    self.state = 572
                    self.module_argument()
                    self.state = 577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 578
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Delete_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDelete_stmt"):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelete_stmt"):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 582
                self.with_clause()


            self.state = 585
            self.match(SQLiteParser.K_DELETE)
            self.state = 586
            self.match(SQLiteParser.K_FROM)
            self.state = 587
            self.qualified_table_name()
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==174:
                self.state = 588
                self.match(SQLiteParser.K_WHERE)
                self.state = 589
                self.expr(0)


            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 592
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Delete_stmt_limitedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener):
            if hasattr(listener, "enterDelete_stmt_limited"):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelete_stmt_limited"):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 595
                self.with_clause()


            self.state = 598
            self.match(SQLiteParser.K_DELETE)
            self.state = 599
            self.match(SQLiteParser.K_FROM)
            self.state = 600
            self.qualified_table_name()
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==174:
                self.state = 601
                self.match(SQLiteParser.K_WHERE)
                self.state = 602
                self.expr(0)


            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 605
                self.returning_clause()


            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==128:
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 608
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 609
                    self.match(SQLiteParser.K_BY)
                    self.state = 610
                    self.ordering_term()
                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 611
                        self.match(SQLiteParser.COMMA)
                        self.state = 612
                        self.ordering_term()
                        self.state = 617
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 620
                self.match(SQLiteParser.K_LIMIT)
                self.state = 621
                self.expr(0)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11 or _la==125:
                    self.state = 622
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==125):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 623
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Detach_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDetach_stmt"):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDetach_stmt"):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(SQLiteParser.K_DETACH)
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 629
                self.match(SQLiteParser.K_DATABASE)


            self.state = 632
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_index_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_index_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_index_stmt"):
                listener.enterDrop_index_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_index_stmt"):
                listener.exitDrop_index_stmt(self)




    def drop_index_stmt(self):

        localctx = SQLiteParser.Drop_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_drop_index_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(SQLiteParser.K_DROP)
            self.state = 635
            self.match(SQLiteParser.K_INDEX)
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 636
                self.match(SQLiteParser.K_IF)
                self.state = 637
                self.match(SQLiteParser.K_EXISTS)


            self.state = 643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 640
                self.schema_name()
                self.state = 641
                self.match(SQLiteParser.DOT)


            self.state = 645
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_table_stmt"):
                listener.enterDrop_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_table_stmt"):
                listener.exitDrop_table_stmt(self)




    def drop_table_stmt(self):

        localctx = SQLiteParser.Drop_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_drop_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(SQLiteParser.K_DROP)
            self.state = 648
            self.match(SQLiteParser.K_TABLE)
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 649
                self.match(SQLiteParser.K_IF)
                self.state = 650
                self.match(SQLiteParser.K_EXISTS)


            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 653
                self.schema_name()
                self.state = 654
                self.match(SQLiteParser.DOT)


            self.state = 658
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_trigger_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_trigger_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_trigger_stmt"):
                listener.enterDrop_trigger_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_trigger_stmt"):
                listener.exitDrop_trigger_stmt(self)




    def drop_trigger_stmt(self):

        localctx = SQLiteParser.Drop_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_drop_trigger_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(SQLiteParser.K_DROP)
            self.state = 661
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 662
                self.match(SQLiteParser.K_IF)
                self.state = 663
                self.match(SQLiteParser.K_EXISTS)


            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 666
                self.schema_name()
                self.state = 667
                self.match(SQLiteParser.DOT)


            self.state = 671
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_view_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_view_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_view_stmt"):
                listener.enterDrop_view_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_view_stmt"):
                listener.exitDrop_view_stmt(self)




    def drop_view_stmt(self):

        localctx = SQLiteParser.Drop_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_drop_view_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(SQLiteParser.K_DROP)
            self.state = 674
            self.match(SQLiteParser.K_VIEW)
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 675
                self.match(SQLiteParser.K_IF)
                self.state = 676
                self.match(SQLiteParser.K_EXISTS)


            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 679
                self.schema_name()
                self.state = 680
                self.match(SQLiteParser.DOT)


            self.state = 684
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Factored_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def compound_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterFactored_select_stmt"):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFactored_select_stmt"):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_factored_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 686
                self.with_clause()


            self.state = 689
            self.select_core()
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77 or _la==105 or _la==165:
                self.state = 690
                self.compound_operator()
                self.state = 691
                self.select_core()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 698
                self.match(SQLiteParser.K_ORDER)
                self.state = 699
                self.match(SQLiteParser.K_BY)
                self.state = 700
                self.ordering_term()
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 701
                    self.match(SQLiteParser.COMMA)
                    self.state = 702
                    self.ordering_term()
                    self.state = 707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 710
                self.match(SQLiteParser.K_LIMIT)
                self.state = 711
                self.expr(0)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11 or _la==125:
                    self.state = 712
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==125):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 713
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Insert_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def upsert_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Upsert_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterInsert_stmt"):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInsert_stmt"):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 718
                self.with_clause()


            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 721
                self.match(SQLiteParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 722
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 723
                self.match(SQLiteParser.K_INSERT)
                self.state = 724
                self.match(SQLiteParser.K_OR)
                self.state = 725
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 726
                self.match(SQLiteParser.K_INSERT)
                self.state = 727
                self.match(SQLiteParser.K_OR)
                self.state = 728
                self.match(SQLiteParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 729
                self.match(SQLiteParser.K_INSERT)
                self.state = 730
                self.match(SQLiteParser.K_OR)
                self.state = 731
                self.match(SQLiteParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 732
                self.match(SQLiteParser.K_INSERT)
                self.state = 733
                self.match(SQLiteParser.K_OR)
                self.state = 734
                self.match(SQLiteParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 735
                self.match(SQLiteParser.K_INSERT)
                self.state = 736
                self.match(SQLiteParser.K_OR)
                self.state = 737
                self.match(SQLiteParser.K_IGNORE)
                pass


            self.state = 740
            self.match(SQLiteParser.K_INTO)
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 741
                self.schema_name()
                self.state = 742
                self.match(SQLiteParser.DOT)


            self.state = 746
            self.table_name()
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 747
                self.match(SQLiteParser.K_AS)
                self.state = 748
                self.table_alias()


            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 751
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 752
                self.column_name()
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 753
                    self.match(SQLiteParser.COMMA)
                    self.state = 754
                    self.column_name()
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 760
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 764
                self.match(SQLiteParser.K_VALUES)
                self.state = 765
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 766
                self.expr(0)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 767
                    self.match(SQLiteParser.COMMA)
                    self.state = 768
                    self.expr(0)
                    self.state = 773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 774
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 775
                    self.match(SQLiteParser.COMMA)
                    self.state = 776
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 777
                    self.expr(0)
                    self.state = 782
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 778
                        self.match(SQLiteParser.COMMA)
                        self.state = 779
                        self.expr(0)
                        self.state = 784
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 785
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 792
                    self.upsert_clause()


                pass

            elif la_ == 2:
                self.state = 795
                self.select_stmt()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 796
                    self.upsert_clause()


                pass

            elif la_ == 3:
                self.state = 799
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 800
                self.match(SQLiteParser.K_VALUES)
                pass


            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 803
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_stmt"):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_stmt"):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(SQLiteParser.K_PRAGMA)
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 807
                self.schema_name()
                self.state = 808
                self.match(SQLiteParser.DOT)


            self.state = 812
            self.pragma_name()
            self.state = 819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.state = 813
                self.match(SQLiteParser.ASSIGN)
                self.state = 814
                self.pragma_value()
                pass
            elif token in [9]:
                self.state = 815
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 816
                self.pragma_value()
                self.state = 817
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [-1, 7]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Reindex_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterReindex_stmt"):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReindex_stmt"):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(SQLiteParser.K_REINDEX)
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 822
                self.collation_name()

            elif la_ == 2:
                self.state = 826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 823
                    self.schema_name()
                    self.state = 824
                    self.match(SQLiteParser.DOT)


                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 828
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 829
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Release_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterRelease_stmt"):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelease_stmt"):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(SQLiteParser.K_RELEASE)
            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 835
                self.match(SQLiteParser.K_SAVEPOINT)


            self.state = 838
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Rollback_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterRollback_stmt"):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRollback_stmt"):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(SQLiteParser.K_ROLLBACK)
            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==162:
                self.state = 841
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 843
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 842
                    self.transaction_name()




            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==161:
                self.state = 847
                self.match(SQLiteParser.K_TO)
                self.state = 849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 848
                    self.match(SQLiteParser.K_SAVEPOINT)


                self.state = 851
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Savepoint_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepoint_stmt"):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepoint_stmt"):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(SQLiteParser.K_SAVEPOINT)
            self.state = 855
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Simple_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSimple_select_stmt"):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimple_select_stmt"):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 857
                self.with_clause()


            self.state = 860
            self.select_core()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 861
                self.match(SQLiteParser.K_ORDER)
                self.state = 862
                self.match(SQLiteParser.K_BY)
                self.state = 863
                self.ordering_term()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 864
                    self.match(SQLiteParser.COMMA)
                    self.state = 865
                    self.ordering_term()
                    self.state = 870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 873
                self.match(SQLiteParser.K_LIMIT)
                self.state = 874
                self.expr(0)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11 or _la==125:
                    self.state = 875
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==125):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 876
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def compound_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_stmt"):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_stmt"):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 881
                self.with_clause()


            self.state = 884
            self.select_core()
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77 or _la==105 or _la==165:
                self.state = 885
                self.compound_operator()
                self.state = 886
                self.select_core()
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 893
                self.match(SQLiteParser.K_ORDER)
                self.state = 894
                self.match(SQLiteParser.K_BY)
                self.state = 895
                self.ordering_term()
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 896
                    self.match(SQLiteParser.COMMA)
                    self.state = 897
                    self.ordering_term()
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 905
                self.match(SQLiteParser.K_LIMIT)
                self.state = 906
                self.expr(0)
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11 or _la==125:
                    self.state = 907
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==125):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 908
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Update_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def ASSIGN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdate_stmt"):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdate_stmt"):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 913
                self.with_clause()


            self.state = 916
            self.match(SQLiteParser.K_UPDATE)
            self.state = 927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 917
                self.match(SQLiteParser.K_OR)
                self.state = 918
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 919
                self.match(SQLiteParser.K_OR)
                self.state = 920
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 921
                self.match(SQLiteParser.K_OR)
                self.state = 922
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 923
                self.match(SQLiteParser.K_OR)
                self.state = 924
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 925
                self.match(SQLiteParser.K_OR)
                self.state = 926
                self.match(SQLiteParser.K_IGNORE)


            self.state = 929
            self.qualified_table_name()
            self.state = 930
            self.match(SQLiteParser.K_SET)
            self.state = 933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 931
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 932
                self.column_name_list()
                pass


            self.state = 935
            self.match(SQLiteParser.ASSIGN)
            self.state = 936
            self.expr(0)
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 937
                self.match(SQLiteParser.COMMA)
                self.state = 940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 938
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 939
                    self.column_name_list()
                    pass


                self.state = 942
                self.match(SQLiteParser.ASSIGN)
                self.state = 943
                self.expr(0)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 950
                self.match(SQLiteParser.K_FROM)
                self.state = 960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 951
                    self.table_or_subquery()
                    self.state = 956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 952
                        self.match(SQLiteParser.COMMA)
                        self.state = 953
                        self.table_or_subquery()
                        self.state = 958
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 959
                    self.join_clause()
                    pass




            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==174:
                self.state = 964
                self.match(SQLiteParser.K_WHERE)
                self.state = 965
                self.expr(0)


            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 968
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Update_stmt_limitedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def ASSIGN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdate_stmt_limited"):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdate_stmt_limited"):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 971
                self.with_clause()


            self.state = 974
            self.match(SQLiteParser.K_UPDATE)
            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 975
                self.match(SQLiteParser.K_OR)
                self.state = 976
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 977
                self.match(SQLiteParser.K_OR)
                self.state = 978
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 979
                self.match(SQLiteParser.K_OR)
                self.state = 980
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 981
                self.match(SQLiteParser.K_OR)
                self.state = 982
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 983
                self.match(SQLiteParser.K_OR)
                self.state = 984
                self.match(SQLiteParser.K_IGNORE)


            self.state = 987
            self.qualified_table_name()
            self.state = 988
            self.match(SQLiteParser.K_SET)
            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 989
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 990
                self.column_name_list()
                pass


            self.state = 993
            self.match(SQLiteParser.ASSIGN)
            self.state = 994
            self.expr(0)
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 995
                self.match(SQLiteParser.COMMA)
                self.state = 998
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 996
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 997
                    self.column_name_list()
                    pass


                self.state = 1000
                self.match(SQLiteParser.ASSIGN)
                self.state = 1001
                self.expr(0)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1008
                self.match(SQLiteParser.K_FROM)
                self.state = 1018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1009
                    self.table_or_subquery()
                    self.state = 1014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1010
                        self.match(SQLiteParser.COMMA)
                        self.state = 1011
                        self.table_or_subquery()
                        self.state = 1016
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1017
                    self.join_clause()
                    pass




            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==174:
                self.state = 1022
                self.match(SQLiteParser.K_WHERE)
                self.state = 1023
                self.expr(0)


            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1026
                self.returning_clause()


            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==128:
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 1029
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 1030
                    self.match(SQLiteParser.K_BY)
                    self.state = 1031
                    self.ordering_term()
                    self.state = 1036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1032
                        self.match(SQLiteParser.COMMA)
                        self.state = 1033
                        self.ordering_term()
                        self.state = 1038
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1041
                self.match(SQLiteParser.K_LIMIT)
                self.state = 1042
                self.expr(0)
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11 or _la==125:
                    self.state = 1043
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==125):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1044
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Vacuum_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def filename(self):
            return self.getTypedRuleContext(SQLiteParser.FilenameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterVacuum_stmt"):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVacuum_stmt"):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_vacuum_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(SQLiteParser.K_VACUUM)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 1050
                self.match(SQLiteParser.K_INTO)
                self.state = 1051
                self.filename()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_defContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_def"):
                listener.enterColumn_def(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_def"):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.column_name()
            self.state = 1056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1055
                self.type_name()


            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 1125899923691521) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 140737492680713) != 0):
                self.state = 1058
                self.column_constraint()
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Type_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_name_text(self):
            return self.getTypedRuleContext(SQLiteParser.Type_name_textContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener):
            if hasattr(listener, "enterType_name"):
                listener.enterType_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_name"):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.type_name_text()
            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1065
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1066
                self.signed_number()
                self.state = 1067
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 1069
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1070
                self.signed_number()
                self.state = 1071
                self.match(SQLiteParser.COMMA)
                self.state = 1072
                self.signed_number()
                self.state = 1073
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_textContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Type_name_textContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def type_or_constraint_name_word(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Type_or_constraint_name_wordContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Type_or_constraint_name_wordContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name_text

        def enterRule(self, listener):
            if hasattr(listener, "enterType_name_text"):
                listener.enterType_name_text(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_name_text"):
                listener.exitType_name_text(self)




    def type_name_text(self):

        localctx = SQLiteParser.Type_name_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_type_name_text)
        self._la = 0 # Token type
        try:
            self.state = 1102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1095
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [183]:
                    self.state = 1077
                    self.match(SQLiteParser.STRING_LITERAL)
                    pass
                elif token in [1]:
                    self.state = 1078
                    self.match(SQLiteParser.T__0)
                    self.state = 1083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 9223372036854775807) != 0):
                        self.state = 1081
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                        if la_ == 1:
                            self.state = 1079
                            _la = self._input.LA(1)
                            if _la <= 0 or _la==1:
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 2:
                            self.state = 1080
                            self.match(SQLiteParser.T__1)
                            pass


                        self.state = 1085
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1086
                    self.match(SQLiteParser.T__0)
                    pass
                elif token in [3]:
                    self.state = 1087
                    self.match(SQLiteParser.T__2)
                    self.state = 1091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -9) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -1) != 0):
                        self.state = 1088
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==4:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1093
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1094
                    self.match(SQLiteParser.T__3)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1097
                        self.type_or_constraint_name_word()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1100 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_or_constraint_name_wordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Type_or_constraint_name_wordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_or_constraint_name_word

        def enterRule(self, listener):
            if hasattr(listener, "enterType_or_constraint_name_word"):
                listener.enterType_or_constraint_name_word(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_or_constraint_name_word"):
                listener.exitType_or_constraint_name_word(self)




    def type_or_constraint_name_word(self):

        localctx = SQLiteParser.Type_or_constraint_name_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_type_or_constraint_name_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & 78812993478986240) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 324259173179064321) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 1073741857) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def generated_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Generated_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Constraint_nameContext,0)


        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_constraint"):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_constraint"):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 1106
                self.match(SQLiteParser.K_CONSTRAINT)
                self.state = 1107
                self.constraint_name()


            self.state = 1144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.state = 1110
                self.match(SQLiteParser.K_PRIMARY)
                self.state = 1111
                self.match(SQLiteParser.K_KEY)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==68:
                    self.state = 1112
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==68):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1115
                self.conflict_clause()
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 1116
                    self.match(SQLiteParser.K_AUTOINCREMENT)


                pass
            elif token in [119, 122]:
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1119
                    self.match(SQLiteParser.K_NOT)


                self.state = 1122
                self.match(SQLiteParser.K_NULL)
                self.state = 1123
                self.conflict_clause()
                pass
            elif token in [166]:
                self.state = 1124
                self.match(SQLiteParser.K_UNIQUE)
                self.state = 1125
                self.conflict_clause()
                pass
            elif token in [51]:
                self.state = 1126
                self.match(SQLiteParser.K_CHECK)
                self.state = 1127
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1128
                self.expr(0)
                self.state = 1129
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [64]:
                self.state = 1131
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 1138
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1132
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 1133
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 1134
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1135
                    self.expr(0)
                    self.state = 1136
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [52]:
                self.state = 1140
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1141
                self.collation_name()
                pass
            elif token in [141]:
                self.state = 1142
                self.foreign_key_clause()
                pass
            elif token in [40, 90]:
                self.state = 1143
                self.generated_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Constraint_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def type_or_constraint_name_word(self):
            return self.getTypedRuleContext(SQLiteParser.Type_or_constraint_name_wordContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_constraint_name

        def enterRule(self, listener):
            if hasattr(listener, "enterConstraint_name"):
                listener.enterConstraint_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstraint_name"):
                listener.exitConstraint_name(self)




    def constraint_name(self):

        localctx = SQLiteParser.Constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_constraint_name)
        self._la = 0 # Token type
        try:
            self.state = 1167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [183]:
                    self.state = 1146
                    self.match(SQLiteParser.STRING_LITERAL)
                    pass
                elif token in [1]:
                    self.state = 1147
                    self.match(SQLiteParser.T__0)
                    self.state = 1152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 9223372036854775807) != 0):
                        self.state = 1150
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                        if la_ == 1:
                            self.state = 1148
                            _la = self._input.LA(1)
                            if _la <= 0 or _la==1:
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 2:
                            self.state = 1149
                            self.match(SQLiteParser.T__1)
                            pass


                        self.state = 1154
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1155
                    self.match(SQLiteParser.T__0)
                    pass
                elif token in [3]:
                    self.state = 1156
                    self.match(SQLiteParser.T__2)
                    self.state = 1160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -9) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -1) != 0):
                        self.state = 1157
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==4:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1162
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1163
                    self.match(SQLiteParser.T__3)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1166
                self.type_or_constraint_name_word()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Conflict_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterConflict_clause"):
                listener.enterConflict_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConflict_clause"):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 1169
                self.match(SQLiteParser.K_ON)
                self.state = 1170
                self.match(SQLiteParser.K_CONFLICT)
                self.state = 1171
                _la = self._input.LA(1)
                if not(_la==31 or _la==82 or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 19140298416324609) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def function_arguments(self):
            return self.getTypedRuleContext(SQLiteParser.Function_argumentsContext,0)


        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Over_clauseContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_WHEN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_WHEN)
            else:
                return self.getToken(SQLiteParser.K_WHEN, i)

        def K_THEN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_THEN)
            else:
                return self.getToken(SQLiteParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1175
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 1176
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 1185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1180
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                    if la_ == 1:
                        self.state = 1177
                        self.schema_name()
                        self.state = 1178
                        self.match(SQLiteParser.DOT)


                    self.state = 1182
                    self.table_name()
                    self.state = 1183
                    self.match(SQLiteParser.DOT)


                self.state = 1187
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 1188
                self.unary_operator()
                self.state = 1189
                self.expr(23)
                pass

            elif la_ == 5:
                self.state = 1191
                self.function_name()
                self.state = 1192
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2147360256) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2017612633061982207) != 0):
                    self.state = 1193
                    self.function_arguments()


                self.state = 1196
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1197
                    self.filter_clause()


                self.state = 1201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1200
                    self.over_clause()


                pass

            elif la_ == 6:
                self.state = 1203
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1204
                self.expr(0)
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1205
                    self.match(SQLiteParser.COMMA)
                    self.state = 1206
                    self.expr(0)
                    self.state = 1211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1212
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 1214
                self.match(SQLiteParser.K_CAST)
                self.state = 1215
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1216
                self.expr(0)
                self.state = 1217
                self.match(SQLiteParser.K_AS)
                self.state = 1218
                self.type_name()
                self.state = 1219
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 1221
                self.schema_name()
                self.state = 1222
                self.match(SQLiteParser.DOT)
                self.state = 1223
                self.table_function_name()
                self.state = 1224
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2147368448) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2017612633061982207) != 0):
                    self.state = 1225
                    self.expr(0)
                    self.state = 1230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1226
                        self.match(SQLiteParser.COMMA)
                        self.state = 1227
                        self.expr(0)
                        self.state = 1232
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1235
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==119:
                    self.state = 1238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==119:
                        self.state = 1237
                        self.match(SQLiteParser.K_NOT)


                    self.state = 1240
                    self.match(SQLiteParser.K_EXISTS)


                self.state = 1243
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1244
                self.select_stmt()
                self.state = 1245
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.state = 1247
                self.match(SQLiteParser.K_CASE)
                self.state = 1249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1248
                    self.expr(0)


                self.state = 1256 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1251
                    self.match(SQLiteParser.K_WHEN)
                    self.state = 1252
                    self.expr(0)
                    self.state = 1253
                    self.match(SQLiteParser.K_THEN)
                    self.state = 1254
                    self.expr(0)
                    self.state = 1258 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==173):
                        break

                self.state = 1262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 1260
                    self.match(SQLiteParser.K_ELSE)
                    self.state = 1261
                    self.expr(0)


                self.state = 1264
                self.match(SQLiteParser.K_END)
                pass

            elif la_ == 11:
                self.state = 1266
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1374
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1269
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1270
                        self.match(SQLiteParser.PIPE2)
                        self.state = 1271
                        self.expr(23)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1272
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1273
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 794624) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1274
                        self.expr(22)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1275
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1276
                        _la = self._input.LA(1)
                        if not(_la==14 or _la==15):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1277
                        self.expr(21)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1278
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1279
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15728640) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1280
                        self.expr(20)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1281
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1282
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 251658240) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1283
                        self.expr(19)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1284
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1285
                        _la = self._input.LA(1)
                        if not(_la==5 or _la==6):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1286
                        self.expr(18)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1287
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1300
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                        if la_ == 1:
                            self.state = 1288
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 1289
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 1290
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 1291
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 1292
                            self.match(SQLiteParser.K_IS)
                            pass

                        elif la_ == 6:
                            self.state = 1293
                            self.match(SQLiteParser.K_IS)
                            self.state = 1294
                            self.match(SQLiteParser.K_NOT)
                            pass

                        elif la_ == 7:
                            self.state = 1295
                            self.match(SQLiteParser.K_IN)
                            pass

                        elif la_ == 8:
                            self.state = 1296
                            self.match(SQLiteParser.K_LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 1297
                            self.match(SQLiteParser.K_GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 1298
                            self.match(SQLiteParser.K_MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 1299
                            self.match(SQLiteParser.K_REGEXP)
                            pass


                        self.state = 1302
                        self.expr(17)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1303
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1304
                        self.match(SQLiteParser.K_AND)
                        self.state = 1305
                        self.expr(16)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1306
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1307
                        self.match(SQLiteParser.K_OR)
                        self.state = 1308
                        self.expr(15)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1309
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1310
                        self.match(SQLiteParser.K_IS)
                        self.state = 1312
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                        if la_ == 1:
                            self.state = 1311
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1316
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                        if la_ == 1:
                            self.state = 1314
                            self.match(SQLiteParser.K_DISTINCT)
                            self.state = 1315
                            self.match(SQLiteParser.K_FROM)


                        self.state = 1318
                        self.expr(8)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1319
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==119:
                            self.state = 1320
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1323
                        self.match(SQLiteParser.K_BETWEEN)
                        self.state = 1324
                        self.expr(0)
                        self.state = 1325
                        self.match(SQLiteParser.K_AND)
                        self.state = 1326
                        self.expr(7)
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1328
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1329
                        self.match(SQLiteParser.K_COLLATE)
                        self.state = 1330
                        self.collation_name()
                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1331
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1333
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==119:
                            self.state = 1332
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1335
                        _la = self._input.LA(1)
                        if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 2251799834656769) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1336
                        self.expr(0)
                        self.state = 1339
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                        if la_ == 1:
                            self.state = 1337
                            self.match(SQLiteParser.K_ESCAPE)
                            self.state = 1338
                            self.expr(0)


                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1341
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1346
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [108]:
                            self.state = 1342
                            self.match(SQLiteParser.K_ISNULL)
                            pass
                        elif token in [121]:
                            self.state = 1343
                            self.match(SQLiteParser.K_NOTNULL)
                            pass
                        elif token in [119]:
                            self.state = 1344
                            self.match(SQLiteParser.K_NOT)
                            self.state = 1345
                            self.match(SQLiteParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 15:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1348
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1350
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==119:
                            self.state = 1349
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1352
                        self.match(SQLiteParser.K_IN)
                        self.state = 1372
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                        if la_ == 1:
                            self.state = 1353
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1363
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                            if la_ == 1:
                                self.state = 1354
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1355
                                self.expr(0)
                                self.state = 1360
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==11:
                                    self.state = 1356
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1357
                                    self.expr(0)
                                    self.state = 1362
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1365
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1369
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                            if la_ == 1:
                                self.state = 1366
                                self.schema_name()
                                self.state = 1367
                                self.match(SQLiteParser.DOT)


                            self.state = 1371
                            self.table_name()
                            pass


                        pass

             
                self.state = 1378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Filter_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Filter_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_FILTER(self):
            return self.getToken(SQLiteParser.K_FILTER, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_filter_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterFilter_clause"):
                listener.enterFilter_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFilter_clause"):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = SQLiteParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(SQLiteParser.K_FILTER)
            self.state = 1380
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1381
            self.match(SQLiteParser.K_WHERE)
            self.state = 1382
            self.expr(0)
            self.state = 1383
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Foreign_key_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_ON(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ON)
            else:
                return self.getToken(SQLiteParser.K_ON, i)

        def K_MATCH(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_MATCH)
            else:
                return self.getToken(SQLiteParser.K_MATCH, i)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_DELETE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DELETE)
            else:
                return self.getToken(SQLiteParser.K_DELETE, i)

        def K_UPDATE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UPDATE)
            else:
                return self.getToken(SQLiteParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_SET(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_SET)
            else:
                return self.getToken(SQLiteParser.K_SET, i)

        def K_NULL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NULL)
            else:
                return self.getToken(SQLiteParser.K_NULL, i)

        def K_DEFAULT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DEFAULT)
            else:
                return self.getToken(SQLiteParser.K_DEFAULT, i)

        def K_CASCADE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_CASCADE)
            else:
                return self.getToken(SQLiteParser.K_CASCADE, i)

        def K_RESTRICT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_RESTRICT)
            else:
                return self.getToken(SQLiteParser.K_RESTRICT, i)

        def K_NO(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NO)
            else:
                return self.getToken(SQLiteParser.K_NO, i)

        def K_ACTION(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ACTION)
            else:
                return self.getToken(SQLiteParser.K_ACTION, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_key_clause"):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_key_clause"):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(SQLiteParser.K_REFERENCES)
            self.state = 1386
            self.foreign_table()
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1387
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1388
                self.column_name()
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1389
                    self.match(SQLiteParser.COMMA)
                    self.state = 1390
                    self.column_name()
                    self.state = 1395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1396
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115 or _la==126:
                self.state = 1414
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [126]:
                    self.state = 1400
                    self.match(SQLiteParser.K_ON)
                    self.state = 1401
                    _la = self._input.LA(1)
                    if not(_la==67 or _la==167):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1410
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                    if la_ == 1:
                        self.state = 1402
                        self.match(SQLiteParser.K_SET)
                        self.state = 1403
                        self.match(SQLiteParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 1404
                        self.match(SQLiteParser.K_SET)
                        self.state = 1405
                        self.match(SQLiteParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 1406
                        self.match(SQLiteParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 1407
                        self.match(SQLiteParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 1408
                        self.match(SQLiteParser.K_NO)
                        self.state = 1409
                        self.match(SQLiteParser.K_ACTION)
                        pass


                    pass
                elif token in [115]:
                    self.state = 1412
                    self.match(SQLiteParser.K_MATCH)
                    self.state = 1413
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1421
                    self.match(SQLiteParser.K_NOT)


                self.state = 1424
                self.match(SQLiteParser.K_DEFERRABLE)
                self.state = 1429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1425
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1426
                    self.match(SQLiteParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 1427
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1428
                    self.match(SQLiteParser.K_IMMEDIATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Function_argumentsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_function_arguments

        def enterRule(self, listener):
            if hasattr(listener, "enterFunction_arguments"):
                listener.enterFunction_arguments(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunction_arguments"):
                listener.exitFunction_arguments(self)




    def function_arguments(self):

        localctx = SQLiteParser.Function_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_function_arguments)
        self._la = 0 # Token type
        try:
            self.state = 1457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 14, 15, 16, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1433
                    self.match(SQLiteParser.K_DISTINCT)


                self.state = 1436
                self.expr(0)
                self.state = 1441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1437
                    self.match(SQLiteParser.COMMA)
                    self.state = 1438
                    self.expr(0)
                    self.state = 1443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 1444
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 1445
                    self.match(SQLiteParser.K_BY)
                    self.state = 1446
                    self.ordering_term()
                    self.state = 1451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1447
                        self.match(SQLiteParser.COMMA)
                        self.state = 1448
                        self.ordering_term()
                        self.state = 1453
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self.match(SQLiteParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generated_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Generated_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_GENERATED(self):
            return self.getToken(SQLiteParser.K_GENERATED, 0)

        def K_ALWAYS(self):
            return self.getToken(SQLiteParser.K_ALWAYS, 0)

        def C_STORED(self):
            return self.getToken(SQLiteParser.C_STORED, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_generated_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterGenerated_clause"):
                listener.enterGenerated_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGenerated_clause"):
                listener.exitGenerated_clause(self)




    def generated_clause(self):

        localctx = SQLiteParser.Generated_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_generated_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1459
                self.match(SQLiteParser.K_GENERATED)
                self.state = 1460
                self.match(SQLiteParser.K_ALWAYS)


            self.state = 1463
            self.match(SQLiteParser.K_AS)
            self.state = 1464
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1465
            self.expr(0)
            self.state = 1466
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172 or _la==179:
                self.state = 1467
                _la = self._input.LA(1)
                if not(_la==172 or _la==179):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Over_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_OVER(self):
            return self.getToken(SQLiteParser.K_OVER, 0)

        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def window_defn(self):
            return self.getTypedRuleContext(SQLiteParser.Window_defnContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_over_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterOver_clause"):
                listener.enterOver_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOver_clause"):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = SQLiteParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_over_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self.match(SQLiteParser.K_OVER)
            self.state = 1473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1471
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 1472
                self.window_defn()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Returning_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RETURNING(self):
            return self.getToken(SQLiteParser.K_RETURNING, 0)

        def STAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.STAR)
            else:
                return self.getToken(SQLiteParser.STAR, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def column_alias(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,i)


        def K_AS(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_AS)
            else:
                return self.getToken(SQLiteParser.K_AS, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_returning_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterReturning_clause"):
                listener.enterReturning_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReturning_clause"):
                listener.exitReturning_clause(self)




    def returning_clause(self):

        localctx = SQLiteParser.Returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            self.match(SQLiteParser.K_RETURNING)
            self.state = 1484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 1476
                self.match(SQLiteParser.STAR)
                pass
            elif token in [9, 14, 15, 16, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188]:
                self.state = 1477
                self.expr(0)
                self.state = 1482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1479
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                    if la_ == 1:
                        self.state = 1478
                        self.match(SQLiteParser.K_AS)


                    self.state = 1481
                    self.column_alias()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 1486
                self.match(SQLiteParser.COMMA)
                self.state = 1495
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 1487
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [9, 14, 15, 16, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188]:
                    self.state = 1488
                    self.expr(0)
                    self.state = 1493
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                    if la_ == 1:
                        self.state = 1490
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                        if la_ == 1:
                            self.state = 1489
                            self.match(SQLiteParser.K_AS)


                        self.state = 1492
                        self.column_alias()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Window_defnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def K_PARTITION(self):
            return self.getToken(SQLiteParser.K_PARTITION, 0)

        def K_BY(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_BY)
            else:
                return self.getToken(SQLiteParser.K_BY, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_defn

        def enterRule(self, listener):
            if hasattr(listener, "enterWindow_defn"):
                listener.enterWindow_defn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWindow_defn"):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = SQLiteParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1503
                self.base_window_name()


            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1506
                self.match(SQLiteParser.K_PARTITION)
                self.state = 1507
                self.match(SQLiteParser.K_BY)
                self.state = 1508
                self.expr(0)
                self.state = 1513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1509
                    self.match(SQLiteParser.COMMA)
                    self.state = 1510
                    self.expr(0)
                    self.state = 1515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 1518
                self.match(SQLiteParser.K_ORDER)
                self.state = 1519
                self.match(SQLiteParser.K_BY)
                self.state = 1520
                self.ordering_term()
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1521
                    self.match(SQLiteParser.COMMA)
                    self.state = 1522
                    self.ordering_term()
                    self.state = 1527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 576531121047601153) != 0):
                self.state = 1530
                self.frame_spec()


            self.state = 1533
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_specContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Frame_specContext, self).__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def K_EXCLUDE(self):
            return self.getToken(SQLiteParser.K_EXCLUDE, 0)

        def K_NO(self):
            return self.getToken(SQLiteParser.K_NO, 0)

        def K_OTHERS(self):
            return self.getToken(SQLiteParser.K_OTHERS, 0)

        def K_CURRENT(self):
            return self.getToken(SQLiteParser.K_CURRENT, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_TIES(self):
            return self.getToken(SQLiteParser.K_TIES, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_spec

        def enterRule(self, listener):
            if hasattr(listener, "enterFrame_spec"):
                listener.enterFrame_spec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFrame_spec"):
                listener.exitFrame_spec(self)




    def frame_spec(self):

        localctx = SQLiteParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_frame_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.frame_clause()
            self.state = 1545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 1536
                self.match(SQLiteParser.K_EXCLUDE)
                self.state = 1543
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [118]:
                    self.state = 1537
                    self.match(SQLiteParser.K_NO)
                    self.state = 1538
                    self.match(SQLiteParser.K_OTHERS)
                    pass
                elif token in [59]:
                    self.state = 1539
                    self.match(SQLiteParser.K_CURRENT)
                    self.state = 1540
                    self.match(SQLiteParser.K_ROW)
                    pass
                elif token in [92]:
                    self.state = 1541
                    self.match(SQLiteParser.K_GROUP)
                    pass
                elif token in [160]:
                    self.state = 1542
                    self.match(SQLiteParser.K_TIES)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Frame_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RANGE(self):
            return self.getToken(SQLiteParser.K_RANGE, 0)

        def K_ROWS(self):
            return self.getToken(SQLiteParser.K_ROWS, 0)

        def K_GROUPS(self):
            return self.getToken(SQLiteParser.K_GROUPS, 0)

        def frame_single(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_singleContext,0)


        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def frame_left(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_leftContext,0)


        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def frame_right(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterFrame_clause"):
                listener.enterFrame_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFrame_clause"):
                listener.exitFrame_clause(self)




    def frame_clause(self):

        localctx = SQLiteParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 576531121047601153) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1548
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 1549
                self.match(SQLiteParser.K_BETWEEN)
                self.state = 1550
                self.frame_left()
                self.state = 1551
                self.match(SQLiteParser.K_AND)
                self.state = 1552
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_singleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Frame_singleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_PRECEDING(self):
            return self.getToken(SQLiteParser.K_PRECEDING, 0)

        def K_UNBOUNDED(self):
            return self.getToken(SQLiteParser.K_UNBOUNDED, 0)

        def K_CURRENT(self):
            return self.getToken(SQLiteParser.K_CURRENT, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_single

        def enterRule(self, listener):
            if hasattr(listener, "enterFrame_single"):
                listener.enterFrame_single(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFrame_single"):
                listener.exitFrame_single(self)




    def frame_single(self):

        localctx = SQLiteParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_frame_single)
        try:
            self.state = 1563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1556
                self.expr(0)
                self.state = 1557
                self.match(SQLiteParser.K_PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1559
                self.match(SQLiteParser.K_UNBOUNDED)
                self.state = 1560
                self.match(SQLiteParser.K_PRECEDING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1561
                self.match(SQLiteParser.K_CURRENT)
                self.state = 1562
                self.match(SQLiteParser.K_ROW)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_leftContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Frame_leftContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_PRECEDING(self):
            return self.getToken(SQLiteParser.K_PRECEDING, 0)

        def K_FOLLOWING(self):
            return self.getToken(SQLiteParser.K_FOLLOWING, 0)

        def K_CURRENT(self):
            return self.getToken(SQLiteParser.K_CURRENT, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_UNBOUNDED(self):
            return self.getToken(SQLiteParser.K_UNBOUNDED, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_left

        def enterRule(self, listener):
            if hasattr(listener, "enterFrame_left"):
                listener.enterFrame_left(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFrame_left"):
                listener.exitFrame_left(self)




    def frame_left(self):

        localctx = SQLiteParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_frame_left)
        try:
            self.state = 1575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1565
                self.expr(0)
                self.state = 1566
                self.match(SQLiteParser.K_PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1568
                self.expr(0)
                self.state = 1569
                self.match(SQLiteParser.K_FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1571
                self.match(SQLiteParser.K_CURRENT)
                self.state = 1572
                self.match(SQLiteParser.K_ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1573
                self.match(SQLiteParser.K_UNBOUNDED)
                self.state = 1574
                self.match(SQLiteParser.K_PRECEDING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_rightContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Frame_rightContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_PRECEDING(self):
            return self.getToken(SQLiteParser.K_PRECEDING, 0)

        def K_FOLLOWING(self):
            return self.getToken(SQLiteParser.K_FOLLOWING, 0)

        def K_CURRENT(self):
            return self.getToken(SQLiteParser.K_CURRENT, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_UNBOUNDED(self):
            return self.getToken(SQLiteParser.K_UNBOUNDED, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_right

        def enterRule(self, listener):
            if hasattr(listener, "enterFrame_right"):
                listener.enterFrame_right(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFrame_right"):
                listener.exitFrame_right(self)




    def frame_right(self):

        localctx = SQLiteParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_frame_right)
        try:
            self.state = 1587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1577
                self.expr(0)
                self.state = 1578
                self.match(SQLiteParser.K_PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1580
                self.expr(0)
                self.state = 1581
                self.match(SQLiteParser.K_FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1583
                self.match(SQLiteParser.K_CURRENT)
                self.state = 1584
                self.match(SQLiteParser.K_ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1585
                self.match(SQLiteParser.K_UNBOUNDED)
                self.state = 1586
                self.match(SQLiteParser.K_FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_functionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Raise_functionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener):
            if hasattr(listener, "enterRaise_function"):
                listener.enterRaise_function(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRaise_function"):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(SQLiteParser.K_RAISE)
            self.state = 1590
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.state = 1591
                self.match(SQLiteParser.K_IGNORE)
                pass
            elif token in [31, 82, 150]:
                self.state = 1592
                _la = self._input.LA(1)
                if not(_la==31 or _la==82 or _la==150):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1593
                self.match(SQLiteParser.COMMA)
                self.state = 1594
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1597
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Indexed_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexed_column"):
                listener.enterIndexed_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexed_column"):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1599
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1600
                self.expr(0)
                pass


            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1603
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1604
                self.collation_name()


            self.state = 1608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==68:
                self.state = 1607
                _la = self._input.LA(1)
                if not(_la==41 or _la==68):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Constraint_nameContext,0)


        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_constraint"):
                listener.enterTable_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_constraint"):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 1610
                self.match(SQLiteParser.K_CONSTRAINT)
                self.state = 1611
                self.constraint_name()


            self.state = 1650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136, 166]:
                self.state = 1617
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [136]:
                    self.state = 1614
                    self.match(SQLiteParser.K_PRIMARY)
                    self.state = 1615
                    self.match(SQLiteParser.K_KEY)
                    pass
                elif token in [166]:
                    self.state = 1616
                    self.match(SQLiteParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1619
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1620
                self.indexed_column()
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1621
                    self.match(SQLiteParser.COMMA)
                    self.state = 1622
                    self.indexed_column()
                    self.state = 1627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1628
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1629
                self.conflict_clause()
                pass
            elif token in [51]:
                self.state = 1631
                self.match(SQLiteParser.K_CHECK)
                self.state = 1632
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1633
                self.expr(0)
                self.state = 1634
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [87]:
                self.state = 1636
                self.match(SQLiteParser.K_FOREIGN)
                self.state = 1637
                self.match(SQLiteParser.K_KEY)
                self.state = 1638
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1639
                self.column_name()
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1640
                    self.match(SQLiteParser.COMMA)
                    self.state = 1641
                    self.column_name()
                    self.state = 1646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1647
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1648
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_optionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_optionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def C_ROWID(self):
            return self.getToken(SQLiteParser.C_ROWID, 0)

        def C_STRICT(self):
            return self.getToken(SQLiteParser.C_STRICT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_option

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_option"):
                listener.enterTable_option(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_option"):
                listener.exitTable_option(self)




    def table_option(self):

        localctx = SQLiteParser.Table_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_table_option)
        try:
            self.state = 1655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1652
                self.match(SQLiteParser.K_WITHOUT)
                self.state = 1653
                self.match(SQLiteParser.C_ROWID)
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1654
                self.match(SQLiteParser.C_STRICT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upsert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Upsert_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ON)
            else:
                return self.getToken(SQLiteParser.K_ON, i)

        def K_CONFLICT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_CONFLICT)
            else:
                return self.getToken(SQLiteParser.K_CONFLICT, i)

        def K_DO(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DO)
            else:
                return self.getToken(SQLiteParser.K_DO, i)

        def K_NOTHING(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NOTHING)
            else:
                return self.getToken(SQLiteParser.K_NOTHING, i)

        def K_UPDATE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UPDATE)
            else:
                return self.getToken(SQLiteParser.K_UPDATE, i)

        def K_SET(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_SET)
            else:
                return self.getToken(SQLiteParser.K_SET, i)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def ASSIGN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_WHERE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_WHERE)
            else:
                return self.getToken(SQLiteParser.K_WHERE, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_upsert_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterUpsert_clause"):
                listener.enterUpsert_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpsert_clause"):
                listener.exitUpsert_clause(self)




    def upsert_clause(self):

        localctx = SQLiteParser.Upsert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_upsert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1657
                self.match(SQLiteParser.K_ON)
                self.state = 1658
                self.match(SQLiteParser.K_CONFLICT)
                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 1659
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1660
                    self.indexed_column()
                    self.state = 1665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1661
                        self.match(SQLiteParser.COMMA)
                        self.state = 1662
                        self.indexed_column()
                        self.state = 1667
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1668
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==174:
                        self.state = 1669
                        self.match(SQLiteParser.K_WHERE)
                        self.state = 1670
                        self.expr(0)




                self.state = 1675
                self.match(SQLiteParser.K_DO)
                self.state = 1702
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [120]:
                    self.state = 1676
                    self.match(SQLiteParser.K_NOTHING)
                    pass
                elif token in [167]:
                    self.state = 1677
                    self.match(SQLiteParser.K_UPDATE)
                    self.state = 1678
                    self.match(SQLiteParser.K_SET)

                    self.state = 1681
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                    if la_ == 1:
                        self.state = 1679
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1680
                        self.column_name_list()
                        pass


                    self.state = 1683
                    self.match(SQLiteParser.ASSIGN)
                    self.state = 1684
                    self.expr(0)
                    self.state = 1695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1685
                        self.match(SQLiteParser.COMMA)
                        self.state = 1688
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                        if la_ == 1:
                            self.state = 1686
                            self.column_name()
                            pass

                        elif la_ == 2:
                            self.state = 1687
                            self.column_name_list()
                            pass


                        self.state = 1690
                        self.match(SQLiteParser.ASSIGN)
                        self.state = 1691
                        self.expr(0)
                        self.state = 1697
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==174:
                        self.state = 1698
                        self.match(SQLiteParser.K_WHERE)
                        self.state = 1699
                        self.expr(0)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1706 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==126):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.With_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterWith_clause"):
                listener.enterWith_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWith_clause"):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.match(SQLiteParser.K_WITH)
            self.state = 1710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 1709
                self.match(SQLiteParser.K_RECURSIVE)


            self.state = 1712
            self.common_table_expression()
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 1713
                self.match(SQLiteParser.COMMA)
                self.state = 1714
                self.common_table_expression()
                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Qualified_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterQualified_table_name"):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualified_table_name"):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1720
                self.schema_name()
                self.state = 1721
                self.match(SQLiteParser.DOT)


            self.state = 1725
            self.table_name()
            self.state = 1731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100]:
                self.state = 1726
                self.match(SQLiteParser.K_INDEXED)
                self.state = 1727
                self.match(SQLiteParser.K_BY)
                self.state = 1728
                self.index_name()
                pass
            elif token in [119]:
                self.state = 1729
                self.match(SQLiteParser.K_NOT)
                self.state = 1730
                self.match(SQLiteParser.K_INDEXED)
                pass
            elif token in [-1, 7, 114, 128, 148, 155, 174]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Ordering_termContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_NULLS(self):
            return self.getToken(SQLiteParser.K_NULLS, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def K_FIRST(self):
            return self.getToken(SQLiteParser.K_FIRST, 0)

        def K_LAST(self):
            return self.getToken(SQLiteParser.K_LAST, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener):
            if hasattr(listener, "enterOrdering_term"):
                listener.enterOrdering_term(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrdering_term"):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.expr(0)
            self.state = 1736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1734
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1735
                self.collation_name()


            self.state = 1739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==68:
                self.state = 1738
                _la = self._input.LA(1)
                if not(_la==41 or _la==68):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 1741
                self.match(SQLiteParser.K_NULLS)
                self.state = 1742
                _la = self._input.LA(1)
                if not(_la==84 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_value"):
                listener.enterPragma_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_value"):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pragma_value)
        try:
            self.state = 1748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1745
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1746
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1747
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Common_table_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def K_MATERIALIZED(self):
            return self.getToken(SQLiteParser.K_MATERIALIZED, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterCommon_table_expression"):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommon_table_expression"):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.table_name()
            self.state = 1762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1751
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1752
                self.column_name()
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1753
                    self.match(SQLiteParser.COMMA)
                    self.state = 1754
                    self.column_name()
                    self.state = 1759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1760
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1764
            self.match(SQLiteParser.K_AS)
            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116 or _la==119:
                self.state = 1766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1765
                    self.match(SQLiteParser.K_NOT)


                self.state = 1768
                self.match(SQLiteParser.K_MATERIALIZED)


            self.state = 1771
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1772
            self.select_stmt()
            self.state = 1773
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Result_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener):
            if hasattr(listener, "enterResult_column"):
                listener.enterResult_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResult_column"):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_result_column)
        try:
            self.state = 1787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1775
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1776
                self.table_name()
                self.state = 1777
                self.match(SQLiteParser.DOT)
                self.state = 1778
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1780
                self.expr(0)
                self.state = 1785
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 1782
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        self.state = 1781
                        self.match(SQLiteParser.K_AS)


                    self.state = 1784
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_or_subqueryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_subquery"):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_subquery"):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1792
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 1789
                    self.schema_name()
                    self.state = 1790
                    self.match(SQLiteParser.DOT)


                self.state = 1794
                self.table_name()
                self.state = 1799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 1796
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                    if la_ == 1:
                        self.state = 1795
                        self.match(SQLiteParser.K_AS)


                    self.state = 1798
                    self.table_alias()


                self.state = 1806
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [100]:
                    self.state = 1801
                    self.match(SQLiteParser.K_INDEXED)
                    self.state = 1802
                    self.match(SQLiteParser.K_BY)
                    self.state = 1803
                    self.index_name()
                    pass
                elif token in [119]:
                    self.state = 1804
                    self.match(SQLiteParser.K_NOT)
                    self.state = 1805
                    self.match(SQLiteParser.K_INDEXED)
                    pass
                elif token in [-1, 7, 10, 11, 58, 77, 89, 92, 102, 105, 109, 112, 114, 117, 126, 128, 148, 149, 165, 168, 174, 175]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 1808
                    self.schema_name()
                    self.state = 1809
                    self.match(SQLiteParser.DOT)


                self.state = 1813
                self.table_function_name()
                self.state = 1814
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2147368448) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2017612633061982207) != 0):
                    self.state = 1815
                    self.expr(0)
                    self.state = 1820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1816
                        self.match(SQLiteParser.COMMA)
                        self.state = 1817
                        self.expr(0)
                        self.state = 1822
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1825
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 1827
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                    if la_ == 1:
                        self.state = 1826
                        self.match(SQLiteParser.K_AS)


                    self.state = 1829
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1832
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 1833
                    self.table_or_subquery()
                    self.state = 1838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1834
                        self.match(SQLiteParser.COMMA)
                        self.state = 1835
                        self.table_or_subquery()
                        self.state = 1840
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1841
                    self.join_clause()
                    pass


                self.state = 1844
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
                if la_ == 1:
                    self.state = 1846
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                    if la_ == 1:
                        self.state = 1845
                        self.match(SQLiteParser.K_AS)


                    self.state = 1848
                    self.table_alias()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1851
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1852
                self.select_stmt()
                self.state = 1853
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                if la_ == 1:
                    self.state = 1855
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                    if la_ == 1:
                        self.state = 1854
                        self.match(SQLiteParser.K_AS)


                    self.state = 1857
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_clause"):
                listener.enterJoin_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_clause"):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1862
            self.table_or_subquery()
            self.state = 1869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==58 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 1152921504884727809) != 0):
                self.state = 1863
                self.join_operator()
                self.state = 1864
                self.table_or_subquery()
                self.state = 1865
                self.join_constraint()
                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_RIGHT(self):
            return self.getToken(SQLiteParser.K_RIGHT, 0)

        def K_FULL(self):
            return self.getToken(SQLiteParser.K_FULL, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_operator"):
                listener.enterJoin_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_operator"):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1872
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [58, 89, 102, 109, 112, 117, 149]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 1873
                    self.match(SQLiteParser.K_NATURAL)


                self.state = 1882
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [89, 112, 149]:
                    self.state = 1876
                    _la = self._input.LA(1)
                    if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 1152921504615235585) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==130:
                        self.state = 1877
                        self.match(SQLiteParser.K_OUTER)


                    pass
                elif token in [102]:
                    self.state = 1880
                    self.match(SQLiteParser.K_INNER)
                    pass
                elif token in [58]:
                    self.state = 1881
                    self.match(SQLiteParser.K_CROSS)
                    pass
                elif token in [109]:
                    pass
                else:
                    pass
                self.state = 1884
                self.match(SQLiteParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_constraint"):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_constraint"):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 1887
                self.match(SQLiteParser.K_ON)
                self.state = 1888
                self.expr(0)

            elif la_ == 2:
                self.state = 1889
                self.match(SQLiteParser.K_USING)
                self.state = 1890
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1891
                self.column_name()
                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1892
                    self.match(SQLiteParser.COMMA)
                    self.state = 1893
                    self.column_name()
                    self.state = 1898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1899
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_coreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_WINDOW(self):
            return self.getToken(SQLiteParser.K_WINDOW, 0)

        def window_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_nameContext,i)


        def K_AS(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_AS)
            else:
                return self.getToken(SQLiteParser.K_AS, i)

        def window_defn(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_defnContext,i)


        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_core"):
                listener.enterSelect_core(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_core"):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1903
                self.match(SQLiteParser.K_SELECT)
                self.state = 1905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                if la_ == 1:
                    self.state = 1904
                    _la = self._input.LA(1)
                    if not(_la==35 or _la==70):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1907
                self.result_column()
                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1908
                    self.match(SQLiteParser.COMMA)
                    self.state = 1909
                    self.result_column()
                    self.state = 1914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88:
                    self.state = 1915
                    self.match(SQLiteParser.K_FROM)
                    self.state = 1925
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                    if la_ == 1:
                        self.state = 1916
                        self.table_or_subquery()
                        self.state = 1921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==11:
                            self.state = 1917
                            self.match(SQLiteParser.COMMA)
                            self.state = 1918
                            self.table_or_subquery()
                            self.state = 1923
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1924
                        self.join_clause()
                        pass




                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174:
                    self.state = 1929
                    self.match(SQLiteParser.K_WHERE)
                    self.state = 1930
                    self.expr(0)


                self.state = 1947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1933
                    self.match(SQLiteParser.K_GROUP)
                    self.state = 1934
                    self.match(SQLiteParser.K_BY)
                    self.state = 1935
                    self.expr(0)
                    self.state = 1940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1936
                        self.match(SQLiteParser.COMMA)
                        self.state = 1937
                        self.expr(0)
                        self.state = 1942
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==94:
                        self.state = 1943
                        self.match(SQLiteParser.K_HAVING)
                        self.state = 1944
                        self.expr(0)




                self.state = 1963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==175:
                    self.state = 1949
                    self.match(SQLiteParser.K_WINDOW)
                    self.state = 1950
                    self.window_name()
                    self.state = 1951
                    self.match(SQLiteParser.K_AS)
                    self.state = 1952
                    self.window_defn()
                    self.state = 1960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1953
                        self.match(SQLiteParser.COMMA)
                        self.state = 1954
                        self.window_name()
                        self.state = 1955
                        self.match(SQLiteParser.K_AS)
                        self.state = 1956
                        self.window_defn()
                        self.state = 1962
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1965
                self.match(SQLiteParser.K_VALUES)
                self.state = 1966
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1967
                self.expr(0)
                self.state = 1972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1968
                    self.match(SQLiteParser.COMMA)
                    self.state = 1969
                    self.expr(0)
                    self.state = 1974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1975
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11:
                    self.state = 1976
                    self.match(SQLiteParser.COMMA)
                    self.state = 1977
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1978
                    self.expr(0)
                    self.state = 1983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==11:
                        self.state = 1979
                        self.match(SQLiteParser.COMMA)
                        self.state = 1980
                        self.expr(0)
                        self.state = 1985
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1986
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Compound_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterCompound_operator"):
                listener.enterCompound_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompound_operator"):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_compound_operator)
        try:
            self.state = 2000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1995
                self.match(SQLiteParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1996
                self.match(SQLiteParser.K_UNION)
                self.state = 1997
                self.match(SQLiteParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1998
                self.match(SQLiteParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1999
                self.match(SQLiteParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Signed_numberContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener):
            if hasattr(listener, "enterSigned_number"):
                listener.enterSigned_number(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSigned_number"):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 2002
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2005
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Literal_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def C_TRUE(self):
            return self.getToken(SQLiteParser.C_TRUE, 0)

        def C_FALSE(self):
            return self.getToken(SQLiteParser.C_FALSE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteral_value"):
                listener.enterLiteral_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteral_value"):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            _la = self._input.LA(1)
            if not(((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & 4611686018427387911) != 0) or ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & 151) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Unary_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterUnary_operator"):
                listener.enterUnary_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnary_operator"):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 114688) != 0) or _la==119):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Error_messageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener):
            if hasattr(listener, "enterError_message"):
                listener.enterError_message(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError_message"):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Module_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_argument"):
                listener.enterModule_argument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_argument"):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_module_argument)
        try:
            self.state = 2015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2013
                self.column_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2014
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_alias"):
                listener.enterColumn_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_alias"):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_column_alias)
        try:
            self.state = 2020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [184]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2017
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2018
                self.keyword()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2019
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.KeywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(SQLiteParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_ALWAYS(self):
            return self.getToken(SQLiteParser.K_ALWAYS, 0)

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(SQLiteParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_CURRENT(self):
            return self.getToken(SQLiteParser.K_CURRENT, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_DO(self):
            return self.getToken(SQLiteParser.K_DO, 0)

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def K_EXCLUDE(self):
            return self.getToken(SQLiteParser.K_EXCLUDE, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_FILTER(self):
            return self.getToken(SQLiteParser.K_FILTER, 0)

        def K_FIRST(self):
            return self.getToken(SQLiteParser.K_FIRST, 0)

        def K_FOLLOWING(self):
            return self.getToken(SQLiteParser.K_FOLLOWING, 0)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(SQLiteParser.K_FULL, 0)

        def K_GENERATED(self):
            return self.getToken(SQLiteParser.K_GENERATED, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_GROUPS(self):
            return self.getToken(SQLiteParser.K_GROUPS, 0)

        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def K_LAST(self):
            return self.getToken(SQLiteParser.K_LAST, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_MATERIALIZED(self):
            return self.getToken(SQLiteParser.K_MATERIALIZED, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(SQLiteParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_NOTHING(self):
            return self.getToken(SQLiteParser.K_NOTHING, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_NULLS(self):
            return self.getToken(SQLiteParser.K_NULLS, 0)

        def K_OF(self):
            return self.getToken(SQLiteParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_OTHERS(self):
            return self.getToken(SQLiteParser.K_OTHERS, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def K_OVER(self):
            return self.getToken(SQLiteParser.K_OVER, 0)

        def K_PARTITION(self):
            return self.getToken(SQLiteParser.K_PARTITION, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def K_PRECEDING(self):
            return self.getToken(SQLiteParser.K_PRECEDING, 0)

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def K_RANGE(self):
            return self.getToken(SQLiteParser.K_RANGE, 0)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(SQLiteParser.K_RESTRICT, 0)

        def K_RETURNING(self):
            return self.getToken(SQLiteParser.K_RETURNING, 0)

        def K_RIGHT(self):
            return self.getToken(SQLiteParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_ROWS(self):
            return self.getToken(SQLiteParser.K_ROWS, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(SQLiteParser.K_THEN, 0)

        def K_TIES(self):
            return self.getToken(SQLiteParser.K_TIES, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def K_UNBOUNDED(self):
            return self.getToken(SQLiteParser.K_UNBOUNDED, 0)

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_WINDOW(self):
            return self.getToken(SQLiteParser.K_WINDOW, 0)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def C_ROWID(self):
            return self.getToken(SQLiteParser.C_ROWID, 0)

        def C_STORED(self):
            return self.getToken(SQLiteParser.C_STORED, 0)

        def C_STRICT(self):
            return self.getToken(SQLiteParser.C_STRICT, 0)

        def C_TRUE(self):
            return self.getToken(SQLiteParser.C_TRUE, 0)

        def C_FALSE(self):
            return self.getToken(SQLiteParser.C_FALSE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -2147483648) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018963967) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.NameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener):
            if hasattr(listener, "enterFunction_name"):
                listener.enterFunction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunction_name"):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Schema_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_schema_name

        def enterRule(self, listener):
            if hasattr(listener, "enterSchema_name"):
                listener.enterSchema_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSchema_name"):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = SQLiteParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_function_name"):
                listener.enterTable_function_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_function_name"):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_name"):
                listener.enterTable_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_name"):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_or_index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_index_name"):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_index_name"):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_name"):
                listener.enterColumn_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_name"):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_name_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name_list

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_name_list"):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_name_list"):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = SQLiteParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 2039
            self.column_name()
            self.state = 2044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 2040
                self.match(SQLiteParser.COMMA)
                self.state = 2041
                self.column_name()
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2047
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Collation_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener):
            if hasattr(listener, "enterCollation_name"):
                listener.enterCollation_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollation_name"):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Foreign_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_table"):
                listener.enterForeign_table(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_table"):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_name"):
                listener.enterIndex_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_name"):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Trigger_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTrigger_name"):
                listener.enterTrigger_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTrigger_name"):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.View_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener):
            if hasattr(listener, "enterView_name"):
                listener.enterView_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitView_name"):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Module_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_name"):
                listener.enterModule_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_name"):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_name"):
                listener.enterPragma_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_name"):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Savepoint_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepoint_name"):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepoint_name"):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_alias"):
                listener.enterTable_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_alias"):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_table_alias)
        try:
            self.state = 2068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [184]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2065
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2066
                self.keyword()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2067
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Transaction_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTransaction_name"):
                listener.enterTransaction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransaction_name"):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Window_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_window_name

        def enterRule(self, listener):
            if hasattr(listener, "enterWindow_name"):
                listener.enterWindow_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWindow_name"):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = SQLiteParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2072
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_window_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Base_window_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_base_window_name

        def enterRule(self, listener):
            if hasattr(listener, "enterBase_window_name"):
                listener.enterBase_window_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBase_window_name"):
                listener.exitBase_window_name(self)




    def base_window_name(self):

        localctx = SQLiteParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2074
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.FilenameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_filename

        def enterRule(self, listener):
            if hasattr(listener, "enterFilename"):
                listener.enterFilename(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFilename"):
                listener.exitFilename(self)




    def filename(self):

        localctx = SQLiteParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2076
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Any_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener):
            if hasattr(listener, "enterAny_name"):
                listener.enterAny_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAny_name"):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_any_name)
        try:
            self.state = 2085
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [184]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2078
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2079
                self.keyword()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2080
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2081
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 2082
                self.any_name()
                self.state = 2083
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[41] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 5)
         




