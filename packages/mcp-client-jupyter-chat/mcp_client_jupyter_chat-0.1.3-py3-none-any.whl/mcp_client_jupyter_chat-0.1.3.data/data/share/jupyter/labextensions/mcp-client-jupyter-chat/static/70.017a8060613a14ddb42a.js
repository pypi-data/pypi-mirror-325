"use strict";(self.webpackChunkmcp_client_jupyter_chat=self.webpackChunkmcp_client_jupyter_chat||[]).push([[70],{70:(e,t,n)=>{n.r(t),n.d(t,{default:()=>M});var o=n(72),a=n.n(o),s=n(825),r=n.n(s),l=n(659),i=n.n(l),c=n(56),d=n.n(c),p=n(540),m=n.n(p),u=n(113),h=n.n(u),g=n(646),f={};f.styleTagTransform=h(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=m(),a()(g.A,f),g.A&&g.A.locals&&g.A.locals;var x=n(209),y=n(256),b=n(324),v=n(123),w=n(593),C=n(88),k=n(910),E=n(32),_=n.n(E);class L{constructor(e,t,n){this.SERVER_TOOL_SEPARATOR="__",this.messages=[],this.tools=new Map,this.mcpClients=e,this.anthropic=new(_())({apiKey:n,dangerouslyAllowBrowser:!0}),this.modelName=t}async initializeTools(){try{this.tools.clear();for(const[e,t]of this.mcpClients)try{const n=await t.listTools();this.tools.set(e,n.tools),console.log(`Initialized ${n.tools.length} tools from ${e}`)}catch(t){console.error(`Failed to initialize tools from ${e}:`,t)}if(0===this.tools.size)throw new Error("No tools available from any MCP server")}catch(e){throw console.error("Failed to initialize tools:",e),e}}async*sendMessage(e,t){if(e){let n=e;null!==t.notebookPath&&(n+=`\n Current Notebook Path: ${t.notebookPath}`),null!==t.activeCellID&&(n+=`\n Active selected cell ID: ${t.activeCellID}`),this.messages.push({role:"user",content:n})}let n=!0;try{for(;n;){let e="",t="",o="",a="";n=!1;const s=this.anthropic.messages.stream({model:this.modelName,max_tokens:4096,messages:this.messages,tools:Array.from(this.tools.entries()).flatMap((([e,t])=>t.map((t=>({name:`${e}${this.SERVER_TOOL_SEPARATOR}${t.name}`,description:t.description,input_schema:t.inputSchema}))))),system:"Before answering, explain your reasoning step-by-step."});for await(const r of s)if("content_block_start"===r.type)"tool_use"===r.content_block.type&&(o=r.content_block.name,a=r.content_block.id);else if("content_block_delta"===r.type)"text_delta"===r.delta.type?(e+=r.delta.text,yield{type:"text",text:r.delta.text}):"input_json_delta"===r.delta.type&&(t+=r.delta.partial_json);else if("message_delta"===r.type)if("tool_use"===r.delta.stop_reason){if(n=!0,""!==o){const s=[];""!==e&&(s.push({type:"text",text:e}),e="");const r=JSON.parse(t),l={type:"tool_use",id:a,name:o,input:r};s.push(l),yield{type:"tool_use",name:o,input:r},this.messages.push({role:"assistant",content:s});try{const[e,t]=o.split(this.SERVER_TOOL_SEPARATOR),n=this.mcpClients.get(e);if(!n)throw new Error(`MCP server ${e} not found`);const s=(await n.callTool({name:t,arguments:r,_meta:{}})).content.map((e=>"text"===e.type?{type:"text",text:e.text}:"image"===e.type?{type:"image",source:{type:"base64",media_type:e.mimeType,data:e.data}}:{type:"text",text:"Unsupported content type"})),l={type:"tool_result",tool_use_id:a,content:s};yield{type:"tool_result",name:o,content:JSON.stringify(s)},this.messages.push({role:"user",content:[l]})}catch(e){console.error("Error executing tool:",e);const t={type:"text",text:`Error executing tool ${o}: ${e}`};yield t,n=!1}finally{o="",a="",t="",e=""}}}else if(""!==e){const n={type:"text",text:e};this.messages.push({role:"assistant",content:[n]}),e="",t=""}const r=await s.finalMessage();console.log("Final message:",r)}}catch(e){console.error("Error processing message:",e),yield{type:"text",text:"An error occurred while processing your message."}}}getHistory(){return this.messages}clearHistory(){this.messages=[]}}const A={id:"mcp-client-jupyter-chat:plugin",description:"A JupyterLab extension for Chat with AI supporting MCP",autoStart:!0,requires:[x.ICommandPalette,v.INotebookTracker,b.IRenderMimeRegistry],optional:[w.ISettingRegistry],activate:(e,t,n,o,a)=>{console.log("JupyterLab extension mcp-client-jupyter-chat is activated!");let s=[],r=null,l=null;const i=new Map,c=document.createElement("div");c.classList.add("mcp-model-select");const d=document.createElement("select");if(d.addEventListener("change",(()=>{r=s.find((e=>e.name===d.value))||null})),a){const e=async e=>{var t;l=e.composite;const n=(null==l?void 0:l.models)||[];s=Array.isArray(n)?n:[],r=s.find((e=>e.isDefault))||s[0]||null,console.log("mcp-client-jupyter-chat settings loaded:",`models: ${s.length},`,`additional servers: ${(null===(t=null==l?void 0:l.mcpServers)||void 0===t?void 0:t.length)||0}`),d.innerHTML="",s.forEach((e=>{const t=document.createElement("option");t.value=e.name,t.textContent=e.name,"gpt-4"===e.name&&(t.textContent="GPT-4"),t.selected=e===r,d.appendChild(t)})),await v()};a.load(A.id).then((t=>{e(t),t.changed.connect(e)})).catch((e=>{console.error("Failed to load settings for mcp-client-jupyter-chat.",e)}))}const p=new y.Widget,m=document.createElement("div");m.classList.add("mcp-chat");const u=document.createElement("div");u.classList.add("mcp-chat-area");const h=document.createElement("div");h.classList.add("mcp-input-area");const g=document.createElement("div");g.classList.add("mcp-input-wrapper");const f=document.createElement("textarea");f.placeholder="Message MCP v3!...",f.classList.add("mcp-input");let x=null,b=!1;const v=async()=>{var e;if(!b){b=!0;try{for(const t of i.values())try{await(null===(e=t.transport)||void 0===e?void 0:e.close())}catch(e){console.error("Error closing client transport:",e)}i.clear();const t=new C.K({name:"jupyter-mcp-client-default",version:"0.1.0"},{capabilities:{tools:{},resources:{}}}),n=new URL("http://localhost:3002/sse"),o=new k.A(n);await t.connect(o),i.set("default",t),console.log("Successfully connected to default MCP server");const a=(null==l?void 0:l.mcpServers)||[];for(const e of a){const t=new C.K({name:`jupyter-mcp-client-${e.name}`,version:"0.1.0"},{capabilities:{tools:{},resources:{}}}),n=new k.A(new URL(e.url));try{await t.connect(n),i.set(e.name,t),console.log(`Successfully connected to MCP server: ${e.name}`)}catch(t){console.error(`Failed to connect to MCP server ${e.name}:`,t)}}if(!i.get("default"))throw new Error("Default MCP server not connected");if(!r)throw new Error("No model selected");x=new L(i,r.name,r.apiKey),await x.initializeTools()}catch(e){(e instanceof Error?e.message:String(e)).includes("CORS")&&console.warn("CORS error detected. The MCP server must be configured with these headers:\n  Access-Control-Allow-Origin: http://localhost:8888\n  Access-Control-Allow-Methods: GET\n  Access-Control-Allow-Headers: Accept, Origin\n"),i.clear(),x=null}finally{b=!1}}};v().catch(console.error),f.addEventListener("input",(()=>{f.style.height="auto";const e=Math.min(f.scrollHeight,.3*window.innerHeight);f.style.height=e+"px"}));const w=document.createElement("button");w.classList.add("mcp-send-button");const E=(e,t)=>{const n=document.createElement("div");if(n.classList.add("mcp-message"),n.classList.add(t?"user":"assistant"),"string"==typeof e){const t=o.createRenderer("text/markdown");t.renderModel({data:{"text/markdown":e},trusted:!0,metadata:{},setData:()=>{}}),n.appendChild(t.node)}else e.forEach((e=>{const t=document.createElement("div");switch(e.type){case"text":{const n=o.createRenderer("text/markdown");n.renderModel({data:{"text/markdown":e.text||""},trusted:!0,metadata:{},setData:()=>{}}),t.appendChild(n.node);break}case"tool_use":t.textContent=`[Using tool: ${e.name}]`,t.classList.add("tool-use");break;case"tool_result":{t.classList.add("tool-result"),e.is_error&&t.classList.add("error");const n=document.createElement("div");n.classList.add("tool-result-header"),n.textContent="Tool Result";const o=document.createElement("button");o.classList.add("tool-result-toggle"),o.textContent="Expand",o.onclick=()=>{const e=t.classList.toggle("expanded");o.textContent=e?"Collapse":"Expand"},n.appendChild(o),t.appendChild(n);const a=document.createElement("div");a.textContent="string"==typeof e.content?e.content:JSON.stringify(e.content,null,2),t.appendChild(a);break}}n.appendChild(t)}));u.appendChild(n),u.scrollTop=u.scrollHeight},_=async e=>{var t,a,s;if(E(e,!0),x&&0!==i.size||(E("Not connected to any MCP servers. Attempting to connect...",!1),await v(),x&&0!==i.size))try{const r=document.createElement("div");r.classList.add("mcp-message","assistant"),u.appendChild(r);let l=null;const i=null===(t=n.currentWidget)||void 0===t?void 0:t.context.path,c=null===(s=null===(a=n.currentWidget)||void 0===a?void 0:a.content.activeCell)||void 0===s?void 0:s.model.id;for await(const t of x.sendMessage(e,{notebookPath:i,activeCellID:c})){let e=document.createElement("div");switch(t.type){case"text":{l||(l=document.createElement("div"),l.classList.add("mcp-message-markdown"),r.appendChild(l));const e=(l.getAttribute("data-text")||"")+(t.text||"");l.setAttribute("data-text",e);const n=o.createRenderer("text/markdown");n.renderModel({data:{"text/markdown":e},trusted:!0,metadata:{},setData:()=>{}}),l.innerHTML="",l.appendChild(n.node);break}case"tool_use":l=null,e=document.createElement("div"),e.classList.add("tool-use"),e.textContent=`[Using tool: ${t.name}]`,r.appendChild(e);break;case"tool_result":{l=null,e=document.createElement("div"),e.classList.add("tool-result"),t.is_error&&e.classList.add("error");const o=document.createElement("div");o.classList.add("tool-result-header"),o.textContent="Tool Result";const a=document.createElement("button");a.classList.add("tool-result-toggle"),a.textContent="Expand",a.onclick=()=>{const t=e.classList.toggle("expanded");a.textContent=t?"Collapse":"Expand"},o.appendChild(a),e.appendChild(o);const s=document.createElement("pre");s.style.margin="0",s.style.whiteSpace="pre-wrap",s.textContent="string"==typeof t.content?t.content:JSON.stringify(t.content,null,2),e.appendChild(s),r.appendChild(e),n.currentWidget&&await n.currentWidget.context.revert();break}}u.scrollTop=u.scrollHeight}}catch(e){console.error("Error handling message:",e),i.clear(),x=null,E("Error communicating with MCP servers. Please ensure the servers are running and try again.",!1)}else E("Failed to connect to MCP servers. Please ensure at least the default server is running at http://localhost:3002",!1)};w.addEventListener("click",(async()=>{const e=f.value.trim();e&&(await _(e),f.value="")})),f.addEventListener("keydown",(e=>{if("Enter"===e.key&&!e.shiftKey){e.preventDefault();const t=f.value.trim();t&&(_(t),f.value="",f.style.height="auto")}}));const M=document.createElement("div");M.classList.add("mcp-input-container"),M.appendChild(f),M.appendChild(w),g.appendChild(M),c.appendChild(d),h.appendChild(g),h.appendChild(c),m.appendChild(u),m.appendChild(h),p.node.appendChild(m);const P=new y.Panel;P.id="mcp-chat",P.title.label="MCP Chat",P.title.closable=!0,P.title.caption="MCP Chat Interface",P.addWidget(p);const S="mcp:open-chat";e.commands.addCommand(S,{label:"Open MCP Chat",caption:"Open the MCP Chat interface",isEnabled:()=>!0,execute:()=>{P.isAttached||e.shell.add(P,"left",{rank:100}),e.shell.activateById(P.id)}}),t.addItem({command:S,category:"MCP"})}},M=A},475:(e,t,n)=>{n.d(t,{A:()=>l});var o=n(601),a=n.n(o),s=n(314),r=n.n(s)()(a());r.push([e.id,"/*\n  See the JupyterLab Developer Guide for useful CSS Patterns:\n  https://jupyterlab.readthedocs.io/en/stable/developer/css.html\n*/\n\n.mcp-chat {\n  background: var(--jp-layout-color1);\n  color: var(--jp-ui-font-color1);\n  height: 100%;\n}\n\n.mcp-message {\n  font-size: var(--jp-ui-font-size1);\n}\n\n.mcp-input {\n  font-size: var(--jp-ui-font-size1);\n  font-family: var(--jp-ui-font-family);\n}\n",""]);const l=r},646:(e,t,n)=>{n.d(t,{A:()=>c});var o=n(601),a=n.n(o),s=n(314),r=n.n(s),l=n(475),i=r()(a());i.i(l.A),i.push([e.id,".mcp-chat {\n  position: fixed;\n  inset: 0;\n  display: flex;\n  flex-direction: column;\n  background: #faf9f7;\n}\n\n.mcp-chat-area {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  padding-bottom: 100px;\n  background: #faf9f7;\n  scrollbar-width: thin;\n  scrollbar-color: #e6e2dd transparent;\n}\n\n.mcp-chat-area::-webkit-scrollbar {\n  width: 8px;\n}\n\n.mcp-chat-area::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.mcp-chat-area::-webkit-scrollbar-thumb {\n  background-color: #e6e2dd;\n  border-radius: 4px;\n}\n\n.mcp-message {\n  margin: 8px 0;\n  padding: 8px 12px;\n  border-radius: 12px;\n  max-width: 80%;\n  font-size: 14px;\n  line-height: 1.5;\n  word-break: break-word;\n  overflow-wrap: break-word;\n}\n\n.mcp-message-markdown {\n  margin: 0;\n  padding: 0;\n}\n\n.mcp-message.user {\n  background: #f0ece6;\n  margin-left: auto;\n  color: #444;\n}\n\n.mcp-message.assistant {\n  background: #fff;\n  margin-right: auto;\n  color: #444;\n  border: 1px solid #e6e2dd;\n}\n\n.mcp-input-area {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 2px;\n  background: #fff;\n  border-top: 1px solid #e6e2dd;\n  box-sizing: border-box;\n  box-shadow: 0 -2px 10px rgb(0 0 0 / 5%);\n  max-height: 100px;\n  z-index: 1000;\n}\n\n.mcp-input-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 100%;\n}\n\n.mcp-input-container {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 8px 12px;\n  background: #fff;\n}\n\n.mcp-input {\n  flex: 1;\n  padding: 0;\n  border: none;\n  background: transparent;\n  color: #444;\n  resize: none;\n  min-height: 24px;\n  max-height: 48px;\n  overflow-y: auto;\n  line-height: 1.4;\n  box-sizing: border-box;\n}\n\n.mcp-input:focus {\n  outline: none;\n}\n\n.mcp-send-button {\n  width: 32px;\n  height: 32px;\n  background: #f0ece6;\n  color: #444;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  margin-right: -4px;\n}\n\n.mcp-send-button::before {\n  content: '↑';\n  font-size: 18px;\n}\n\n.mcp-send-button:hover {\n  background: #e6e2dd;\n}\n\n.mcp-send-button:active {\n  background: #dcd8d3;\n}\n\n.tool-result {\n  position: relative;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 8px;\n  background: #f8f8f8;\n  border-radius: 6px;\n  margin: 8px 0;\n  font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier,\n    monospace;\n  font-size: 13px;\n  transition: max-height 0.3s ease;\n}\n\n.tool-result pre {\n  margin: 8px 0 0;\n  white-space: pre-wrap;\n  word-break: break-word;\n}\n\n.tool-result.expanded {\n  max-height: none;\n}\n\n.tool-result-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n  color: #666;\n  font-size: 0.9em;\n}\n\n.tool-result-toggle {\n  background: none;\n  border: none;\n  color: #666;\n  cursor: pointer;\n  padding: 2px 6px;\n  font-size: 0.9em;\n  border-radius: 4px;\n}\n\n.tool-result-toggle:hover {\n  background: #eee;\n}\n\n.tool-result.error {\n  background: #fff0f0;\n  border: 1px solid #ffcdd2;\n}\n\n.mcp-model-select {\n  position: relative;\n  display: inline-block;\n  background: #f7f7f7;\n  border-radius: 8px;\n  padding: 2px 4px;\n  margin-bottom: 8px;\n  width: fit-content;\n  z-index: 1001;\n}\n\n.mcp-model-select select {\n  appearance: none;\n  -webkit-appearance: none;\n  width: auto;\n  padding: 6px 28px 6px 8px;\n  border: none;\n  background: transparent;\n  color: #333;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  outline: none;\n}\n\n.mcp-model-select::after {\n  content: '▼';\n  font-size: 8px;\n  color: #666;\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  pointer-events: none;\n}\n\n.mcp-model-select select:focus {\n  outline: none;\n}\n\n.mcp-model-select select option {\n  padding: 10px;\n  font-size: 14px;\n  background: #fff;\n  color: #333;\n  font-weight: 500;\n}\n\n.mcp-model-select select option:hover,\n.mcp-model-select select option:focus {\n  background: #f7f7f7;\n}\n",""]);const c=i}}]);