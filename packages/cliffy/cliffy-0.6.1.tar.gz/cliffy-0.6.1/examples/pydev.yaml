# yaml-language-server: $schema=cliffy_schema.json

manifestVersion: v1 # optional (Default will be the latest)
name: pydev
version: 0.1.0
help: Python developer utilities

imports: |
  import sys

functions:
  - |
    def run_cmd(cmd: str):
        """Helper function to run a command."""
        try:
            result = subprocess.run(cmd, shell=True, check=True,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE)
        except subprocess.CalledProcessError as e:
            print(f"Error running command: {cmd}")
            print(f"Exit code: {e.returncode}")
            print(f"Output: {e.output.decode('utf-8').strip()}")
            sys.exit(1)

        return result.stdout.decode('utf-8').strip()
  - |
    def get_file_contents(file_name: str):
        with open(file_name, 'r') as f:
            contents = f.read()
        return contents
  - |
    def write_to_file(file_name: str, contents: str):
        with open(file_name, 'w') as f:
            f.write(contents)

commands:
  clean:
    help: Clean pycache artifacts
    run:
    - $ find . -type f -name "*.pyc" -delete
    - $ find . -type d -name "__pycache__" -delete
    - $ echo Cleaned!

  format:
    help: Format code with black
    run:
    - $ black .
    - $ echo Formatted!

  lint:
    help: Run linters on the code
    run:
    - $ flake8 .
    - $ black --check .
    - $ mypy .
    - print("Linting successful!")

  test:
    help: Run tests
    run:
    - $ pytest
    - print("Tests passed!")

  bump: 
    help: Bump the package version
    params:
    - --major: VersionPart
    - --minor: VersionPart
    - --patch: VersionPart
    run: |
      current_version = run_cmd("python setup.py --version")
      print(f"Current version: {current_version}")
      parts = current_version.split('.')
      new_version = '.'.join(parts[:-1] + [str(int(parts[-1]) + 1)])
      print(f"New version: {new_version}")
      contents = get_file_contents("setup.py")
      contents = contents.replace(current_version, new_version)
      write_to_file("setup.py", contents)
      print(f"Bumped version from {current_version} to {new_version}.")

types:
  VersionPart: int = typer.Option(..., help="Version part", min=0)