# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import BaseModel, Field, StrictStr, conlist, constr, validator

class CreateApplicationRequest(BaseModel):
    """
    A request to create an application for authenticating the source of token requests  # noqa: E501
    """
    display_name: constr(strict=True, max_length=50, min_length=1) = Field(..., alias="displayName", description="The Display Name of the application")
    client_id: constr(strict=True, max_length=50, min_length=6) = Field(..., alias="clientId", description="The OpenID Connect ClientId of the application")
    type: constr(strict=True, max_length=20, min_length=1) = Field(..., description="The Type of the application. This must be either Native or Web")
    redirect_uris: Optional[conlist(StrictStr)] = Field(None, alias="redirectUris", description="A web application's acceptable list of post-login redirect URIs")
    post_logout_redirect_uris: Optional[conlist(StrictStr)] = Field(None, alias="postLogoutRedirectUris", description="A web application's acceptable list of post-logout redirect URIs")
    __properties = ["displayName", "clientId", "type", "redirectUris", "postLogoutRedirectUris"]

    @validator('display_name')
    def display_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\s\S]*$", value):
            raise ValueError(r"must validate the regular expression /^[\s\S]*$/")
        return value

    @validator('client_id')
    def client_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z][a-zA-Z0-9-]{5,49}", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z][a-zA-Z0-9-]{5,49}/")
        return value

    @validator('type')
    def type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z]*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateApplicationRequest:
        """Create an instance of CreateApplicationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if redirect_uris (nullable) is None
        # and __fields_set__ contains the field
        if self.redirect_uris is None and "redirect_uris" in self.__fields_set__:
            _dict['redirectUris'] = None

        # set to None if post_logout_redirect_uris (nullable) is None
        # and __fields_set__ contains the field
        if self.post_logout_redirect_uris is None and "post_logout_redirect_uris" in self.__fields_set__:
            _dict['postLogoutRedirectUris'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateApplicationRequest:
        """Create an instance of CreateApplicationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateApplicationRequest.parse_obj(obj)

        _obj = CreateApplicationRequest.parse_obj({
            "display_name": obj.get("displayName"),
            "client_id": obj.get("clientId"),
            "type": obj.get("type"),
            "redirect_uris": obj.get("redirectUris"),
            "post_logout_redirect_uris": obj.get("postLogoutRedirectUris")
        })
        return _obj
