[build-system]
requires = ["poetry-core>=2,<3"]
build-backend = "poetry.core.masonry.api"

[project]
dynamic = ["classifiers"]
name = "pytest-moto-fixtures"
version = "0.0.1a3"
description = "Fixtures for testing code that interacts with AWS"
authors = [
  {name = "Eduardo Klosowski", email = "eduardo_klosowski@yahoo.com"},
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "boto3 (>=1.35,<2)",
]

[project.urls]
repository = "https://github.com/eduardoklosowski/pytest-moto-fixtures.git"
releasenotes = "https://github.com/eduardoklosowski/pytest-moto-fixtures/releases"
documentation = "http://pytest-moto-fixtures.readthedocs.io/"

[project.optional-dependencies]
pytest = [
  "moto[events,s3,sns,sqs] (>=5.0,<6)",
  "pytest (>=8.3,<9)",
]

[project.entry-points.pytest11]
moto_fixtures = "pytest_moto_fixtures.fixtures"

[tool.poetry]
requires-poetry = ">=2.0,<3"
classifiers = [
  "Development Status :: 1 - Planning",
  "Environment :: Plugins",
  "Framework :: Pytest",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Testing :: Mocking",
  "Typing :: Typed",
]

[tool.poetry.group.type.dependencies]
types-boto3 = {version = "*", extras = ["boto3", "events", "s3", "sns", "sqs"]}

[tool.poetry.group.dev.dependencies]
ruff = "^0.9"
mypy = "^1.14"
pytest = "*"
coverage = "^7.6"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^8.1"
sphinx-rtd-theme = "^3.0"

[tool.ruff]
target-version = "py310"
line-length = 119
src = ["src", "tests"]

[tool.ruff.format]
line-ending = "lf"
quote-style = "single"

[tool.ruff.lint]
select = ["ALL"]
ignore = ["S311", "COM812", "ISC001", "ARG001"]

[tool.ruff.lint.per-file-ignores]
"src/pytest_moto_fixtures/fixtures.py" = ["F401"]
"tests/*.py" = ["D", "S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.mypy]
warn_unused_configs = true
show_column_numbers = true
show_error_codes = true
sqlite_cache = true
strict = true
plugins = []
files = ["src/**/*.py", "tests/**/*.py"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if (typing\\.)?TYPE_CHECKING:",
]
