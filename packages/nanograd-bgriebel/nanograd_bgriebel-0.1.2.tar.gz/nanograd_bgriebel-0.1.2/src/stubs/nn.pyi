from nanograd_bgriebel import engine

class Module:
    def __init__(self, params: list[engine.Value]): ...
    def zero_grad(self) -> None: ...
    def get_parameters(self) -> list[engine.Value]: ...

class Neuron(Module):
    def __init__(self, nin: int, nonlinear: bool): ...
    def __call__(self, x: list[engine.Value]): ...
    def zero_grad(self) -> None: ...
    def get_parameters(self) -> list[engine.Value]: ...

class Layer(Module):
    def __init__(self, nin: int, nout: int, nonlienar: bool): ...
    def __call__(self, x: list[engine.Value]): ...
    def zero_grad(self) -> None: ...
    def get_parameters(self) -> list[engine.Value]: ...

class MultiLayerPerceptron(Module):
    def __init__(self, nin: int, nouts: list[int]): ...
    def __call__(self, x: list[engine.Value]): ...
    def zero_grad(self) -> None: ...
    def get_parameters(self) -> list[engine.Value]: ...
