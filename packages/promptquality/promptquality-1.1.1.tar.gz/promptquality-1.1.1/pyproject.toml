[tool.poetry]
name = "promptquality"
version = "1.1.1"
description = "ðŸ¦¸ Supercharge your prompts with Galileo Evaluate!"
authors = ["Galileo Technologies Inc. <team@rungalileo.io>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://www.rungalileo.io/"
# Hide the repository URL from PyPI since it's not public.
# repository = "https://github.com/rungalileo/promptquality"
documentation = "https://promptquality.docs.rungalileo.io/"
keywords = ["prompt", "nlp", "llm", "quality", "language_models", "galileo"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Pydantic",
    "License :: OSI Approved :: Apache Software License",
    "Framework :: IPython",
    "Framework :: Jupyter",
    "Framework :: Jupyter :: JupyterLab",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.31.0"
pydantic = "^2.7.4"
pydantic-settings = "^2.1.0"
tqdm = "^4.65.0"
pyjwt = "^2.10.1"
galileo-core = "^2.33.2"
pyarrow = { version = ">=18,<20", optional = true }
langchain-core = { version = "^0.3.14", optional = true }
langchain-community = { version = "^0.3.14", optional = true }


[tool.poetry.extras]
arrow = ["pyarrow"]
langchain-core = ["langchain-core"]
all = ["pyarrow", "langchain-core", "langchain-community"]


[tool.poetry.group.test.dependencies]
pytest = "^8.0"
coverage = "^7.3.4"
pytest-cov = ">=4,<7"
pytest-xdist = "^3.5.0"
requests-mock = "^1.11.0"
pytest-socket = ">=0.6,<0.8"


[tool.poetry.group.dev.dependencies]
mypy = "^1.14.1"
pre-commit = ">=3.5,<5.0"
types-requests = "^2.31.0.1"
types-tqdm = "^4.65.0.1"
pydantic = { extras = ["mypy"], version = "^2.6.1" }


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocstrings = "^0.26.0"
mkdocstrings-python = "^1.10.2"
mkdocs-material = "^9.5.24"
griffe-fieldz = "^0.2.0"
black = ">=24.4.2,<26.0.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Test.
[tool.pytest.ini_options]
pythonpath = ["./src/"]
addopts = [
    # Run tests in parallel.
    "-n",
    "auto",
    # Show local variables in tracebacks.
    "--showlocals",
    # Show extra test summary info as specified by chars.
    "-o",
    "console_output_style=progress",
    # Disable warnings.
    "--disable-warnings",
    # Show slowest 10 test durations.
    "--durations=10",
    # Disable internet access.
    "--disable-socket",
]

# Linters and formatters.
[tool.ruff]
line-length = 120
fix = true
src = ["src"]

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I", "UP", "ASYNC"]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["galileo_core"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
mypy_path = ["src"]
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

# Release.
[tool.semantic_release]
version_variables = ["src/promptquality/__init__.py:__version__"]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_source = "tag"
commit_message = "chore(release): v{version}\n\nAutomatically generated by python-semantic-release"

[tool.semantic_release.commit_parser_options]
# Release patch version on these tags,
# https://python-semantic-release.readthedocs.io/en/latest/configuration.html#commit-parser-options-dict-str-any
patch_tags = ["fix", "perf", "chore", "docs", "style", "refactor"]
