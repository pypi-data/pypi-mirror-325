[tool.poetry]
name = "anomalib-orobix"
version = "0.7.0.dev150"
description = "Orobix anomalib fork"
authors = [
    "Intel OpenVINO <help@openvino.intel.com>",
    "Lorenzo Mammana <lorenzo.mammana@orobix.com>",
    "Alessandro Polidori <alessandro.polidori@orobix.com>",
]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/orobix/quadra"
packages = [{ include = "anomalib", from = "src" }]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# SETUP CONFIGURATION.                                                        #
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
einops = "~0.6"
kornia = "0.6.5"
omegaconf = "~2.3"
freia = "~0.2"

line-profiler = "3.5.1"
jsonargparse = { version = "~4.3.0", extras = ["signatures"] }

imgaug = { version = "0.4.0", optional = true }
gradio = { version = "3.0.2", optional = true }
wandb = { version = "0.12.17", optional = true }
[tool.poetry.extras]
# We make imgaug optional as it requires opencv-python instead of the headless version
augmentation = ["imgaug"]
ui = ["gradio"]
wandb = ["wandb"]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# BLACK CONFIGURATION                                                         #
[tool.black]
line-length = 120

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# RUFF CONFIGURATION                                                          #
[tool.ruff]
# Enable pycodestyle (`E`), Pyflakes (`F`) and Isort (`I`) codes by default.
select = ["E", "F", "I"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.8.
target-version = "py38"

# Allow imports relative to the "src" and "tests" directories.
src = ["src", "tests"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
"tests/nightly/tools/benchmarking/test_benchmarking.py" = ["E402"]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# MYPY CONFIGURATION.                                                         #
[tool.mypy]
ignore_missing_imports = true
show_error_codes = true


[[tool.mypy.overrides]]
module = ["torch.*", "wandb.*"]
follow_imports = "skip"
follow_imports_for_stubs = true


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# PYTEST CONFIGURATION                                                        #
[tool.pytest.ini_options]
addopts = ["--strict-markers", "--strict-config", "--showlocals", "-ra"]
testpaths = "tests"
pythonpath = "src"


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# COVERAGE CONFIGURATION                                                      #
[tool.coverage.report]
exclude_lines = [
    "except ImportError",
    "raise ImportError",
    "except ApiException",
    "raise ApiException",
    "raise ValueError",
]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# NBQA CONFIGURATION                                                          #
[tool.nbqa.addopts]
ruff = ["--ignore=E402"]
