import multiprocessing
from _typeshed import Incomplete
from eventlet.green import threading as eventlet_threading

__all__ = ['Streamer']

class Streamer:
    def __init__(self, queue_depth: int = 2, inter_msg_time: int = 0, drop_frames: bool = True, max_image_width: int = 640, max_image_height: int = 480, **kwargs) -> None: ...
    def configure_logging(self) -> None: ...
    def setup(self): ...
    def send_data(self, image: Incomplete | None = None, text: Incomplete | None = None) -> None: ...
    def wait(self) -> None: ...
    def check_exit(self): ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def __del__(self) -> None: ...

class _TxThread(eventlet_threading.Thread):
    def __init__(self, tx_queue, inter_msg_time, max_image_width, max_image_height, jpg_quality, error_queue, socketio) -> None: ...
    def run(self) -> None: ...

class _ServerProcess(multiprocessing.Process):
    def __init__(self, ipaddr, port, tx_queue, inter_msg_time, max_image_width, max_image_height, jpg_quality, error_queue, exit_event, *args, **kwargs) -> None: ...
    def run(self) -> None: ...
