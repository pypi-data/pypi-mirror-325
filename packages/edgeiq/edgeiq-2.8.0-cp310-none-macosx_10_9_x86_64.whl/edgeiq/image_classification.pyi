import numpy as np
from _typeshed import Incomplete
from edgeiq._constants import SupportedPurposes as SupportedPurposes
from edgeiq.base_service import BaseService as BaseService
from edgeiq.engine_accelerator import Engine as Engine
from edgeiq.model_config import ModelConfig as ModelConfig
from edgeiq.processing import ClassificationProcessor as ClassificationProcessor
from edgeiq.tools import to_json_serializable as to_json_serializable

SUPPORTED_ENGINES: Incomplete

class ClassificationPrediction:
    def __init__(self, confidence: float, label: str) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def label(self) -> str: ...
    @property
    def confidence(self) -> float: ...

class ClassificationResults:
    def __init__(self, predictions: list[ClassificationPrediction], duration: float, image: np.ndarray) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def duration(self) -> float: ...
    @property
    def predictions(self) -> list[ClassificationPrediction]: ...
    @property
    def image(self) -> np.ndarray: ...

class Classification(BaseService[ClassificationProcessor, ClassificationResults]):
    def __init__(self, model_id: str, model_config: ModelConfig | None = None) -> None: ...
    def classify_image(self, image: np.ndarray, confidence_level: float = 0.3) -> ClassificationResults: ...
