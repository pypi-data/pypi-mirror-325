import numpy as np
from .zone import Zone as Zone, convert_to_zone_type as convert_to_zone_type, generate_boundary as generate_boundary, get_bbox_center as get_bbox_center, validate_dimension as validate_dimension
from edgeiq.app_config import JsonFile as JsonFile
from edgeiq.object_detection import ObjectDetectionPrediction as ObjectDetectionPrediction, ObjectDetectionResults as ObjectDetectionResults
from edgeiq.object_tracking import TrackingResults as TrackingResults
from edgeiq.tools.image_manipulation import HorizontalTextAlignment as HorizontalTextAlignment, TextAlignment as TextAlignment, VerticalTextAlignment as VerticalTextAlignment, draw_text_with_background as draw_text_with_background

def require_unique_zone_names(zones: list[Zone]): ...
def require_same_image_dimensions(zones: list[Zone], image_width: int, image_height: int): ...
def generate_zone_mask_and_overlay(zones: list[Zone], colors: list[tuple[int, int, int]], alpha: float, image_width: int, image_height: int) -> tuple[np.ndarray, np.ndarray]: ...
def generate_combined_zone_mask(zones: list[Zone], image_width: int, image_height: int) -> np.ndarray: ...

class ZoneList:
    def __init__(self, zones: list[Zone], image_width: int, image_height: int) -> None: ...
    @classmethod
    def from_config_file(cls, filepath: str) -> ZoneList: ...
    @property
    def zones(self) -> list[Zone]: ...
    @zones.setter
    def zones(self, zones: list[Zone]): ...
    @property
    def zone_names(self) -> list[str]: ...
    @property
    def image_width(self) -> int | None: ...
    @property
    def image_height(self) -> int | None: ...
    @property
    def colors(self) -> list[tuple[int, int, int]]: ...
    @colors.setter
    def colors(self, colors: list[tuple[int, int, int]]): ...
    @property
    def alpha(self) -> float: ...
    @alpha.setter
    def alpha(self, alpha: float): ...
    def update_image_dimensions(self, image_width: int | None = None, image_height: int | None = None): ...
    def get_zone_by_name(self, zone_name: str) -> Zone: ...
    def get_zones_for_prediction(self, prediction: ObjectDetectionPrediction, **kwargs) -> ZoneList: ...
    def get_zone_for_prediction(self, prediction: ObjectDetectionPrediction, **kwargs) -> Zone | None: ...
    def get_predictions_in_zone(self, results: ObjectDetectionResults, zone_name: str, **kwargs) -> ObjectDetectionResults: ...
    def get_tracked_objects_in_zone(self, results: TrackingResults, zone_name: str) -> TrackingResults: ...
    def create_sub_zone_list(self, zone_names: list[str]): ...
    def markup_image_with_zones(self, image: np.ndarray, show_labels: bool = True, show_boundaries: bool = True, fill_zones: bool = False, line_thickness: int = 2, font_size: float = 0.5, font_thickness: int = 2, text_box_padding: int = 10, text_box_corner_radius: int = 0, text_alignment: TextAlignment = ('left', 'top'), text_box_position: TextAlignment | tuple[int, int] = ('left', 'top')) -> np.ndarray: ...
