import numpy as np
from PIL import Image as Image
from _typeshed import Incomplete
from edgeiq._constants import SupportedPurposes as SupportedPurposes
from edgeiq._utils import gen_logger as gen_logger
from edgeiq.base_service import BaseService as BaseService
from edgeiq.engine_accelerator import Engine as Engine
from edgeiq.model_config import ModelConfig as ModelConfig
from edgeiq.processing import ReIdentificationProcessor as ReIdentificationProcessor
from edgeiq.tools import to_json_serializable as to_json_serializable
from torchvision.transforms import Compose as Compose, Normalize as Normalize, Resize as Resize, ToTensor as ToTensor

SUPPORTED_ENGINES: Incomplete
torch_installed: bool

class ReIdentificationPrediction:
    def __init__(self, id: int, rank: int, distance: float) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def id(self) -> int: ...
    @property
    def rank(self) -> int: ...
    @property
    def distance(self) -> float: ...

class ReIdentificationResults:
    def __init__(self, predictions: list[ReIdentificationPrediction], distance_matrix: np.ndarray | None, duration: float, image: np.ndarray | None) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def duration(self) -> float: ...
    @property
    def predictions(self) -> list[ReIdentificationPrediction]: ...
    @property
    def distance_matrix(self) -> np.ndarray | None: ...
    @property
    def image(self) -> np.ndarray | None: ...

class ReIdentification(BaseService[ReIdentificationProcessor, ReIdentificationResults]):
    def __init__(self, model_id: str, model_config: ModelConfig | None = None) -> None: ...
    def set_per_id_gallery_limit(self, count: int, drop_method: str): ...
    def extract_features(self, image: np.ndarray, flip_horizontal: bool = True) -> np.ndarray: ...
    def get_distances(self, image: np.ndarray, gallery_images: list[np.ndarray], flip_horizontal: bool = True, normalize_distance: bool = True) -> np.ndarray: ...
    def add_to_gallery(self, image: np.ndarray, id: int, flip_horizontal: bool = True): ...
    def remove_from_gallery(self, id: int): ...
    def re_id_image(self, image: np.ndarray, top_k: int = 1, normalize_distance: bool = True, flip_horizontal: bool = True) -> ReIdentificationResults: ...
