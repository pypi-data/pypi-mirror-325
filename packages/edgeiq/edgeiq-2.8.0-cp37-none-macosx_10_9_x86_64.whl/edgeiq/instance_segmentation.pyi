import numpy as np
from _typeshed import Incomplete
from edgeiq import bounding_box as bounding_box
from edgeiq._constants import SupportedPurposes as SupportedPurposes
from edgeiq.base_service import BaseService as BaseService
from edgeiq.engine_accelerator import Engine as Engine
from edgeiq.model_config import ModelConfig as ModelConfig
from edgeiq.object_detection import markup_image as markup_image
from edgeiq.processing import InstanceSegmentationProcessor as InstanceSegmentationProcessor
from edgeiq.tools import to_json_serializable as to_json_serializable
from typing import List, Optional, Tuple

SUPPORTED_ENGINES: Incomplete

class InstanceSegmentationPrediction(bounding_box.BoundingBoxPrediction):
    def __init__(self, box: bounding_box.BoundingBox, mask: np.ndarray, contours: list, hierarchy: list, confidence: float, label: str, index: int) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def label(self) -> str: ...
    @property
    def index(self) -> int: ...
    @property
    def mask(self) -> np.ndarray: ...
    @property
    def contours(self) -> list: ...
    @property
    def hierarchy(self) -> list: ...

class InstanceSegmentationResults:
    def __init__(self, predictions: List[InstanceSegmentationPrediction], duration: float, image: np.ndarray, **kwargs) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def duration(self) -> float: ...
    @property
    def predictions(self) -> List[InstanceSegmentationPrediction]: ...
    @property
    def image(self) -> np.ndarray: ...

class InstanceSegmentation(BaseService[InstanceSegmentationProcessor, InstanceSegmentationResults]):
    def __init__(self, model_id: str, model_config: Optional[ModelConfig] = ...) -> None: ...
    def segment_image(self, image: np.ndarray, confidence_level: float = ...) -> InstanceSegmentationResults: ...
    def markup_image(self, image: np.ndarray, predictions: List[InstanceSegmentationPrediction], show_labels: bool = ..., show_confidences: bool = ..., show_masks: bool = ..., colors: Optional[List[Tuple[int, int, int]]] = ..., line_thickness: int = ..., font_size: float = ..., font_thickness: int = ...) -> np.ndarray: ...
