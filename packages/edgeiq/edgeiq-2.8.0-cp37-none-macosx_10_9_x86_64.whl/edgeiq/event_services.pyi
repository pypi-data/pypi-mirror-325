from _typeshed import Incomplete
from abc import ABC
from typing import Any, Optional, Union

def generate_event_timestamp(seconds: Optional[float] = ...) -> str: ...
def generate_event_id() -> str: ...

class BaseEvent(ABC):
    event_label: Incomplete
    timestamp: Incomplete
    object_label: Incomplete
    object_id: Incomplete
    event_id: Incomplete
    camera_label: Incomplete
    zone_label: Incomplete
    data: Incomplete
    def __init__(self, event_label: str, timestamp: Optional[str] = ..., event_id: Optional[str] = ..., object_label: Optional[str] = ..., object_id: Optional[str] = ..., camera_label: Optional[str] = ..., zone_label: Optional[str] = ..., data: Optional[Any] = ...) -> None: ...
    def __eq__(self, other): ...
    def publish_event(self, **kwargs) -> None: ...

class OccurrenceEvent(BaseEvent): ...

class ValueEvent(BaseEvent):
    value: Incomplete
    def __init__(self, event_label: str, value: Union[int, float], timestamp: Optional[str] = ..., event_id: Optional[str] = ..., object_label: Optional[str] = ..., object_id: Optional[str] = ..., camera_label: Optional[str] = ..., zone_label: Optional[str] = ..., data: Optional[Any] = ...) -> None: ...
    def __eq__(self, other): ...

class StartTimedEvent(BaseEvent): ...

class EndTimedEvent(BaseEvent):
    def __init__(self, event_label: str, event_id: str, timestamp: Optional[str] = ..., object_label: Optional[str] = ..., object_id: Optional[str] = ..., camera_label: Optional[str] = ..., zone_label: Optional[str] = ..., data: Optional[Any] = ...) -> None: ...

class CompleteTimedEvent:
    start_timed_event: Incomplete
    end_timed_event: Incomplete
    def __init__(self, start_timestamp: str, end_timestamp: str, event_label: str, event_id: Optional[str] = ..., start_object_label: Optional[str] = ..., start_object_id: Optional[str] = ..., start_camera_label: Optional[str] = ..., start_zone_label: Optional[str] = ..., data: Optional[Any] = ..., end_camera_label: Optional[str] = ..., end_zone_label: Optional[str] = ..., end_object_id: Optional[str] = ..., end_object_label: Optional[str] = ...) -> None: ...
    def publish_event(self) -> None: ...
