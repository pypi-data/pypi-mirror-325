import numpy as np
from .zone import Zone as Zone, convert_to_zone_type as convert_to_zone_type, generate_boundary as generate_boundary, get_bbox_center as get_bbox_center, validate_dimension as validate_dimension
from edgeiq.app_config import JsonFile as JsonFile
from edgeiq.object_detection import ObjectDetectionPrediction as ObjectDetectionPrediction, ObjectDetectionResults as ObjectDetectionResults
from edgeiq.object_tracking import TrackingResults as TrackingResults
from edgeiq.tools.image_manipulation import HorizontalTextAlignment as HorizontalTextAlignment, TextAlignment as TextAlignment, VerticalTextAlignment as VerticalTextAlignment, draw_text_with_background as draw_text_with_background
from typing import List, Optional, Tuple, Union

def require_unique_zone_names(zones: List[Zone]): ...
def require_same_image_dimensions(zones: List[Zone], image_width: int, image_height: int): ...
def generate_zone_mask_and_overlay(zones: List[Zone], colors: List[Tuple[int, int, int]], alpha: float, image_width: int, image_height: int) -> Tuple[np.ndarray, np.ndarray]: ...
def generate_combined_zone_mask(zones: List[Zone], image_width: int, image_height: int) -> np.ndarray: ...

class ZoneList:
    def __init__(self, zones: List[Zone], image_width: int, image_height: int) -> None: ...
    @classmethod
    def from_config_file(cls, filepath: str) -> ZoneList: ...
    @property
    def zones(self) -> List[Zone]: ...
    @property
    def zone_names(self) -> List[str]: ...
    @property
    def image_width(self) -> Optional[int]: ...
    @property
    def image_height(self) -> Optional[int]: ...
    @property
    def colors(self) -> List[Tuple[int, int, int]]: ...
    @property
    def alpha(self) -> float: ...
    def update_image_dimensions(self, image_width: Optional[int] = ..., image_height: Optional[int] = ...): ...
    def get_zone_by_name(self, zone_name: str) -> Zone: ...
    def get_zones_for_prediction(self, prediction: ObjectDetectionPrediction, **kwargs) -> ZoneList: ...
    def get_zone_for_prediction(self, prediction: ObjectDetectionPrediction, **kwargs) -> Optional[Zone]: ...
    def get_predictions_in_zone(self, results: ObjectDetectionResults, zone_name: str, **kwargs) -> ObjectDetectionResults: ...
    def get_tracked_objects_in_zone(self, results: TrackingResults, zone_name: str) -> TrackingResults: ...
    def create_sub_zone_list(self, zone_names: List[str]): ...
    def markup_image_with_zones(self, image: np.ndarray, show_labels: bool = ..., show_boundaries: bool = ..., fill_zones: bool = ..., line_thickness: int = ..., font_size: float = ..., font_thickness: int = ..., text_box_padding: int = ..., text_box_corner_radius: int = ..., text_alignment: TextAlignment = ..., text_box_position: Union[TextAlignment, Tuple[int, int]] = ...) -> np.ndarray: ...
