import numpy as np
from _typeshed import Incomplete
from edgeiq._constants import SupportedPurposes as SupportedPurposes
from edgeiq.base_service import BaseService as BaseService, ResultsT as ResultsT
from edgeiq.engine_accelerator import Engine as Engine
from edgeiq.model_config import ModelConfig as ModelConfig
from edgeiq.processing import SemanticSegmentationProcessor as SemanticSegmentationProcessor
from typing import List, Optional

SUPPORTED_ENGINES: Incomplete

class SemanticSegmentationResults:
    def __init__(self, class_map: np.ndarray, duration: float, image: np.ndarray) -> None: ...
    @property
    def duration(self) -> float: ...
    @property
    def class_map(self) -> np.ndarray: ...
    @property
    def image(self) -> np.ndarray: ...

class SemanticSegmentation(BaseService[SemanticSegmentationProcessor, ResultsT]):
    def __init__(self, model_id: str, model_config: Optional[ModelConfig] = ...) -> None: ...
    def segment_image(self, image: np.ndarray) -> SemanticSegmentationResults: ...
    def build_image_mask(self, class_map: np.ndarray) -> np.ndarray: ...
    def build_legend(self) -> str: ...
    def build_object_map(self, class_map: np.ndarray, class_list: List[str]) -> np.ndarray: ...
