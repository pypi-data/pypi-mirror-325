import numpy as np
import tensorrt as trt
from .runtime import Runtime
from _typeshed import Incomplete
from edgeiq.engine_accelerator import Accelerator
from edgeiq.model_config.model_config import ModelConfig

__all__ = ['TensorRT']

class MyTRTLogger(trt.ILogger):
    def __init__(self) -> None: ...
    def log(self, severity, msg) -> None: ...

class TensorRT(Runtime):
    model_config: Incomplete
    net: Incomplete
    context: Incomplete
    stream: Incomplete
    inference_batch_size: Incomplete
    def __init__(self, model_config: ModelConfig, accelerator: Accelerator) -> None: ...
    def set_input(self, image: np.ndarray): ...
    def forward(self): ...
    def update_context(self, input_shape) -> None: ...

class CudaMemory:
    def __init__(self, host, device, shape, dtype) -> None: ...
    @property
    def host(self): ...
    @property
    def device(self): ...
    @property
    def shape(self): ...
    @property
    def dtype(self): ...
