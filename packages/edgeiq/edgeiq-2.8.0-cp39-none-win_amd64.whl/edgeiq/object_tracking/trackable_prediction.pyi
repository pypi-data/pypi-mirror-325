from _typeshed import Incomplete
from edgeiq.bounding_box import BoundingBox as BoundingBox
from edgeiq.object_detection import ObjectDetectionPrediction as ObjectDetectionPrediction
from typing import Callable, Generic, TypeVar

PredictionT = TypeVar('PredictionT', bound=ObjectDetectionPrediction)

class TrackablePrediction(ObjectDetectionPrediction, Generic[PredictionT]):
    tracker_init_id: int
    tracker_id: int
    prediction: Incomplete
    deregister_frames: Incomplete
    min_inertia: Incomplete
    inertia: int
    hits: int
    age: int
    disappeared_frames: int
    def __init__(self, prediction: PredictionT, deregister_frames: int, min_inertia: int, history_length: int, enter_cb: TrackerCbT | None = None, exit_cb: TrackerCbT | None = None, id: int | None = None, initialized: bool = False) -> None: ...
    def __eq__(self, other) -> bool: ...
    def step(self, **trackable_kwargs) -> None: ...
    def handle_found(self, prediction: PredictionT, **trackable_kwargs): ...
    def handle_disappeared(self, **trackable_kwargs) -> None: ...
    def handle_removed(self) -> None: ...
    @property
    def tid(self) -> int: ...
    @property
    def is_initialized(self) -> bool: ...
    @property
    def is_lost(self) -> bool: ...
    @property
    def history(self) -> list[PredictionT]: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, label: str): ...
    @property
    def index(self) -> int: ...
    @property
    def box(self) -> BoundingBox: ...
    @box.setter
    def box(self, box: BoundingBox): ...
    @property
    def confidence(self) -> float: ...
    @confidence.setter
    def confidence(self, confidence: float): ...
TrackablePredictionT = TypeVar('TrackablePredictionT', bound=TrackablePrediction)
TrackerCbT = Callable[[int, TrackablePredictionT], None]
