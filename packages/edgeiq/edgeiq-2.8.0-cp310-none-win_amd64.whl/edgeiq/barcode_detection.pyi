import numpy as np
from ._production_client import PRODUCTION_CLIENT as PRODUCTION_CLIENT
from .tools import to_json_serializable as to_json_serializable
from _typeshed import Incomplete
from edgeiq._constants import SupportedPurposes as SupportedPurposes
from typing import Any

class BarcodeDetectionPrediction:
    def __init__(self, box: np.ndarray, barcode_type: str, info: str) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def box(self) -> np.ndarray: ...
    @property
    def barcode_type(self) -> str: ...
    @property
    def info(self) -> str: ...

class BarcodeDetectionResults:
    def __init__(self, predictions: list[BarcodeDetectionPrediction], image: np.ndarray) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def predictions(self) -> list[BarcodeDetectionPrediction]: ...
    @property
    def image(self) -> np.ndarray: ...
    def markup_image(self) -> np.ndarray: ...
    def crop_localized(self) -> list[np.ndarray]: ...

class BarcodeDetection:
    barcode_detector: Incomplete
    def __init__(self) -> None: ...
    def localize_decode(self, image: np.ndarray) -> BarcodeDetectionResults: ...
    def localize(self, image: np.ndarray) -> np.ndarray: ...
    def decode(self, image: np.ndarray, boxes: np.ndarray) -> BarcodeDetectionResults: ...
    def publish_analytics(self, results: BarcodeDetectionResults, tag: Any = None, **kwargs): ...
