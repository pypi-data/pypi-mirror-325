from enaml.workbench.api import PluginManifest, Extension

from psi.controller.engines.nidaq import (NIDAQEngine, 
                                          NIDAQHardwareAIChannel,
                                          NIDAQHardwareAOChannel,
                                          NIDAQSoftwareDOChannel)


enamldef IOManifest(PluginManifest): manifest:
    '''
    Example of a simple configuration for noise exposure
    '''
    Extension:
        id = 'backend'
        point = 'psi.controller.io'

        NIDAQEngine:
            # Each engine must have a unique name.
            name = 'NI'

            master_clock = True

            hw_ai_monitor_period = 0.1
            hw_ao_monitor_period = 1

            NIDAQHardwareAOChannel:
                # Label as shown in the GUI
                label = 'Noise exposure speaker'

                # Label as used in the code
                name = 'speaker'

                # Sampling rate the channel runs at. The engine may impose some
                # constraints on this sampling rate. For example, all analog
                # output channels configured on a particular NIDAQmx engine
                # must run at the same sampling rate.
                fs = 25e3

                # The data type required by the channel.
                dtype = 'float64'

                # This is a NIDAQmx-specific feature and is the channel
                # identifier used by the NIDAQmx library. Channels that
                # interface with other types of hardware will have their own
                # method for identifying channels.
                channel = 'Dev1/ao1'

                # Also a NIDAQmx-specific feature. This allows the NIDAQmx
                # library to optimize the channel configuration based on the
                # expected output range. 
                expected_range = (-10, 10)

            NIDAQHardwareAIChannel:
                label = 'Experiment microphone'
                name = 'experiment_microphone'
                channel = 'Dev1/ai2'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'differential'
                gain = 20

            NIDAQHardwareAIChannel:
                label = 'Calibration microphone'
                name = 'calibration_microphone'
                channel = 'Dev1/ai1'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'differential'
                gain = 0
