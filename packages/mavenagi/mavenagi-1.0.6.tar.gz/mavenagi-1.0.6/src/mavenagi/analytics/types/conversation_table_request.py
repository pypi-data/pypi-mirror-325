# This file was auto-generated by Fern from our API Definition.

from .conversation_analytics_request import ConversationAnalyticsRequest
import typing_extensions
import typing
from ...analytics_commons.types.time_interval import TimeInterval
from ...core.serialization import FieldMetadata
import pydantic
from .group_by import GroupBy
from .column_definition import ColumnDefinition
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ConversationTableRequest(ConversationAnalyticsRequest):
    """
    Examples
    --------
    from mavenagi.analytics import (
        ColumnDefinition,
        ConversationTableRequest,
        GroupBy,
        Metric_Average,
        Metric_Count,
        Metric_Percentile,
    )
    from mavenagi.conversation import ConversationFilter

    ConversationTableRequest(
        conversation_filter=ConversationFilter(
            languages=["en", "es"],
        ),
        time_grouping="DAY",
        field_groupings=[
            GroupBy(
                field="Category",
            )
        ],
        column_definitions=[
            ColumnDefinition(
                header="count",
                metric=Metric_Count(),
            ),
            ColumnDefinition(
                header="avg_first_response_time",
                metric=Metric_Average(
                    target_field="FirstResponseTime",
                ),
            ),
            ColumnDefinition(
                header="percentile_handle_time",
                metric=Metric_Percentile(
                    target_field="HandleTime",
                    percentiles=[25.0, 75.0],
                ),
            ),
        ],
    )
    """

    time_grouping: typing_extensions.Annotated[typing.Optional[TimeInterval], FieldMetadata(alias="timeGrouping")] = (
        pydantic.Field(default=None)
    )
    """
    Defines the time interval for grouping data. If specified, data is grouped accordingly based on the time they were created.
    Example: If set to "DAY," data will be aggregated by day.
    """

    field_groupings: typing_extensions.Annotated[typing.List[GroupBy], FieldMetadata(alias="fieldGroupings")] = (
        pydantic.Field()
    )
    """
    Specifies the fields by which data should be grouped. Each unique combination forms a row.
    If multiple fields are provided, the result is grouped by their unique value combinations.
    If empty, all data is aggregated into a single row.
    """

    column_definitions: typing_extensions.Annotated[
        typing.List[ColumnDefinition], FieldMetadata(alias="columnDefinitions")
    ] = pydantic.Field()
    """
    Specifies the metrics to be displayed as columns. Column headers act as keys, with computed metric values as their mapped values. There needs to be at least one column definition in the table request.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
