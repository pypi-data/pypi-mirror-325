# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...conversation.types.conversation_field import ConversationField
from ...analytics_commons.types.field_value import FieldValue
import pydantic
from ...analytics_commons.types.cell_data import CellData
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ConversationRow(UniversalBaseModel):
    identifier: typing.Dict[ConversationField, FieldValue] = pydantic.Field()
    """
    A unique identifier for each row, consisting of field names mapped to their respective values.
    This includes time groupings and any specified field groupings.
    """

    data: typing.Dict[str, CellData] = pydantic.Field()
    """
    The actual row data, where keys represent column headers and values contain the respective metric results.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
