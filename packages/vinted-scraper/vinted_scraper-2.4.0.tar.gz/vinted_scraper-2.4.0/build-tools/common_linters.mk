# ====================================================================================
# Setup Project

ifeq ($(origin AUTOGENERATED_FILE), undefined)
AUTOGENERATED_FILE_REGEX := (?!.*)
endif

ifeq ($(origin DOCKERFILE), undefined)
DOCKERFILE := $(ROOT)/Dockerfile
endif

ifeq ($(origin MAKEFILE), undefined)
MAKEFILE := $(ROOT)/Makefile
endif

ifeq ($(origin MAKEFILE), undefined)
MAKEFILE := $(ROOT)/Makefile
endif

ifneq ($(origin GITHUB_WORKSPACE), undefined)
# Load Github Action Environment
RUN_LOCAL=false
else
RUN_LOCAL=true
endif

# ====================================================================================
# Actions
.PHONY: linter.superlinter
lint.superlinter: #! Run Super Linter as a static analysis tool to scan the codebase.
	docker run --rm --name=$(PROJECT_NAME)-$(VERSION)-scanner -e RUN_LOCAL=$(RUN_LOCAL) -e DEFAULT_BRANCH=main -e FILTER_REGEX_EXCLUDE="$(AUTOGENERATED_FILE_REGEX)" -v $(ROOT):/tmp/lint/ ghcr.io/super-linter/super-linter:v5

.PHONY: lint.hadolint
lint.hadolint: #! Run Hadolint as a static analysis tool to scan the Dockerfile.
	docker run --rm -i ghcr.io/hadolint/hadolint:v2.12.0-alpine < $(DOCKERFILE)

.PHONY: lint.checkmake
lint.checkmake: #! Run Checkmake as a static analysis tool to scan the Makefile.
	docker run --rm -v $(MAKEFILE):/Makefile mrtazz/checkmake:latest

.PHONY: lint.clean
lint.clean: #! Remove file generate by the linters.
	rm super-linter.log || true
