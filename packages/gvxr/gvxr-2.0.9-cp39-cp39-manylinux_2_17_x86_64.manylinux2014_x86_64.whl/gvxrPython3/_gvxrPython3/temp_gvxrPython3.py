# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _temp_gvxrPython3
else:
    import _temp_gvxrPython3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _temp_gvxrPython3.delete_SwigPyIterator

    def value(self):
        return _temp_gvxrPython3.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _temp_gvxrPython3.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _temp_gvxrPython3.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _temp_gvxrPython3.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _temp_gvxrPython3.SwigPyIterator_equal(self, x)

    def copy(self):
        return _temp_gvxrPython3.SwigPyIterator_copy(self)

    def next(self):
        return _temp_gvxrPython3.SwigPyIterator_next(self)

    def __next__(self):
        return _temp_gvxrPython3.SwigPyIterator___next__(self)

    def previous(self):
        return _temp_gvxrPython3.SwigPyIterator_previous(self)

    def advance(self, n):
        return _temp_gvxrPython3.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _temp_gvxrPython3.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _temp_gvxrPython3.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _temp_gvxrPython3.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _temp_gvxrPython3.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _temp_gvxrPython3.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _temp_gvxrPython3.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _temp_gvxrPython3:
_temp_gvxrPython3.SwigPyIterator_swigregister(SwigPyIterator)
class Vectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectors___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectors___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectors___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectors___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectors_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectors_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectors_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectors_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectors_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectors_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectors_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectors_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectors_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectors_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectors_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectors_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectors_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectors_swiginit(self, _temp_gvxrPython3.new_Vectors(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectors_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectors_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectors_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectors_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectors_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectors_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectors_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectors_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectors

# Register Vectors in _temp_gvxrPython3:
_temp_gvxrPython3.Vectors_swigregister(Vectors)
class Vectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectori___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectori___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectori___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectori___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectori_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectori_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectori_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectori_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectori_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectori_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectori_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectori_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectori_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectori_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectori_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectori_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectori_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectori_swiginit(self, _temp_gvxrPython3.new_Vectori(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectori_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectori_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectori_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectori_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectori_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectori_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectori_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectori_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectori

# Register Vectori in _temp_gvxrPython3:
_temp_gvxrPython3.Vectori_swigregister(Vectori)
class Vectorui(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectorui_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectorui___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectorui___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectorui___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectorui___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectorui___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectorui___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectorui___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectorui___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectorui___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectorui_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectorui_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectorui_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectorui_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectorui_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectorui_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectorui_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectorui_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectorui_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectorui_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectorui_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectorui_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectorui_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectorui_swiginit(self, _temp_gvxrPython3.new_Vectorui(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectorui_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectorui_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectorui_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectorui_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectorui_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectorui_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectorui_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectorui_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectorui

# Register Vectorui in _temp_gvxrPython3:
_temp_gvxrPython3.Vectorui_swigregister(Vectorui)
class Vectorss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectorss_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectorss___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectorss___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectorss___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectorss___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectorss___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectorss___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectorss___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectorss___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectorss___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectorss_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectorss_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectorss_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectorss_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectorss_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectorss_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectorss_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectorss_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectorss_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectorss_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectorss_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectorss_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectorss_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectorss_swiginit(self, _temp_gvxrPython3.new_Vectorss(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectorss_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectorss_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectorss_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectorss_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectorss_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectorss_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectorss_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectorss_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectorss

# Register Vectorss in _temp_gvxrPython3:
_temp_gvxrPython3.Vectorss_swigregister(Vectorss)
class Vectorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectorf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectorf___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectorf___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectorf___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectorf___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectorf___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectorf___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectorf___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectorf___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectorf___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectorf_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectorf_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectorf_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectorf_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectorf_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectorf_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectorf_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectorf_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectorf_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectorf_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectorf_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectorf_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectorf_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectorf_swiginit(self, _temp_gvxrPython3.new_Vectorf(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectorf_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectorf_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectorf_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectorf_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectorf_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectorf_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectorf_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectorf_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectorf

# Register Vectorf in _temp_gvxrPython3:
_temp_gvxrPython3.Vectorf_swigregister(Vectorf)
class Vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectord___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectord___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectord___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectord___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectord_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectord_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectord_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectord_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectord_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectord_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectord_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectord_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectord_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectord_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectord_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectord_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectord_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectord_swiginit(self, _temp_gvxrPython3.new_Vectord(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectord_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectord_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectord_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectord_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectord_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectord_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectord_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectord_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectord

# Register Vectord in _temp_gvxrPython3:
_temp_gvxrPython3.Vectord_swigregister(Vectord)
class Vectorff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectorff_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectorff___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectorff___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectorff___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectorff___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectorff___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectorff___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectorff___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectorff___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectorff___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectorff_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectorff_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectorff_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectorff_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectorff_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectorff_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectorff_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectorff_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectorff_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectorff_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectorff_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectorff_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectorff_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectorff_swiginit(self, _temp_gvxrPython3.new_Vectorff(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectorff_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectorff_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectorff_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectorff_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectorff_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectorff_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectorff_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectorff_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectorff

# Register Vectorff in _temp_gvxrPython3:
_temp_gvxrPython3.Vectorff_swigregister(Vectorff)
class Vectordd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectordd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectordd___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectordd___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectordd___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectordd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectordd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectordd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectordd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectordd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectordd___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectordd_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectordd_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectordd_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectordd_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectordd_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectordd_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectordd_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectordd_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectordd_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectordd_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectordd_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectordd_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectordd_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectordd_swiginit(self, _temp_gvxrPython3.new_Vectordd(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectordd_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectordd_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectordd_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectordd_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectordd_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectordd_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectordd_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectordd_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectordd

# Register Vectordd in _temp_gvxrPython3:
_temp_gvxrPython3.Vectordd_swigregister(Vectordd)
class Vectorfff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectorfff_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectorfff___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectorfff___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectorfff___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectorfff___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectorfff___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectorfff___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectorfff___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectorfff___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectorfff___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectorfff_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectorfff_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectorfff_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectorfff_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectorfff_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectorfff_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectorfff_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectorfff_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectorfff_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectorfff_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectorfff_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectorfff_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectorfff_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectorfff_swiginit(self, _temp_gvxrPython3.new_Vectorfff(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectorfff_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectorfff_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectorfff_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectorfff_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectorfff_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectorfff_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectorfff_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectorfff_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectorfff

# Register Vectorfff in _temp_gvxrPython3:
_temp_gvxrPython3.Vectorfff_swigregister(Vectorfff)
class Vectorddd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectorddd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectorddd___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectorddd___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectorddd___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectorddd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectorddd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectorddd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectorddd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectorddd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectorddd___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectorddd_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectorddd_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectorddd_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectorddd_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectorddd_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectorddd_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectorddd_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectorddd_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectorddd_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectorddd_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectorddd_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectorddd_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectorddd_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectorddd_swiginit(self, _temp_gvxrPython3.new_Vectorddd(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectorddd_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectorddd_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectorddd_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectorddd_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectorddd_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectorddd_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectorddd_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectorddd_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectorddd

# Register Vectorddd in _temp_gvxrPython3:
_temp_gvxrPython3.Vectorddd_swigregister(Vectorddd)
class Vectorpdd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectorpdd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectorpdd___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectorpdd___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectorpdd___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectorpdd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectorpdd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectorpdd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectorpdd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectorpdd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectorpdd___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectorpdd_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectorpdd_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectorpdd_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectorpdd_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectorpdd_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectorpdd_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectorpdd_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectorpdd_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectorpdd_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectorpdd_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectorpdd_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectorpdd_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectorpdd_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectorpdd_swiginit(self, _temp_gvxrPython3.new_Vectorpdd(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectorpdd_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectorpdd_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectorpdd_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectorpdd_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectorpdd_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectorpdd_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectorpdd_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectorpdd_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectorpdd

# Register Vectorpdd in _temp_gvxrPython3:
_temp_gvxrPython3.Vectorpdd_swigregister(Vectorpdd)
class Vectorpff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectorpff_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectorpff___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectorpff___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectorpff___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectorpff___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectorpff___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectorpff___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectorpff___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectorpff___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectorpff___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectorpff_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectorpff_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectorpff_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectorpff_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectorpff_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectorpff_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectorpff_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectorpff_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectorpff_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectorpff_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectorpff_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectorpff_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectorpff_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectorpff_swiginit(self, _temp_gvxrPython3.new_Vectorpff(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectorpff_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectorpff_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectorpff_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectorpff_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectorpff_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectorpff_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectorpff_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectorpff_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectorpff

# Register Vectorpff in _temp_gvxrPython3:
_temp_gvxrPython3.Vectorpff_swigregister(Vectorpff)
class Vectorpuif(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _temp_gvxrPython3.Vectorpuif_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _temp_gvxrPython3.Vectorpuif___nonzero__(self)

    def __bool__(self):
        return _temp_gvxrPython3.Vectorpuif___bool__(self)

    def __len__(self):
        return _temp_gvxrPython3.Vectorpuif___len__(self)

    def __getslice__(self, i, j):
        return _temp_gvxrPython3.Vectorpuif___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _temp_gvxrPython3.Vectorpuif___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _temp_gvxrPython3.Vectorpuif___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _temp_gvxrPython3.Vectorpuif___delitem__(self, *args)

    def __getitem__(self, *args):
        return _temp_gvxrPython3.Vectorpuif___getitem__(self, *args)

    def __setitem__(self, *args):
        return _temp_gvxrPython3.Vectorpuif___setitem__(self, *args)

    def pop(self):
        return _temp_gvxrPython3.Vectorpuif_pop(self)

    def append(self, x):
        return _temp_gvxrPython3.Vectorpuif_append(self, x)

    def empty(self):
        return _temp_gvxrPython3.Vectorpuif_empty(self)

    def size(self):
        return _temp_gvxrPython3.Vectorpuif_size(self)

    def swap(self, v):
        return _temp_gvxrPython3.Vectorpuif_swap(self, v)

    def begin(self):
        return _temp_gvxrPython3.Vectorpuif_begin(self)

    def end(self):
        return _temp_gvxrPython3.Vectorpuif_end(self)

    def rbegin(self):
        return _temp_gvxrPython3.Vectorpuif_rbegin(self)

    def rend(self):
        return _temp_gvxrPython3.Vectorpuif_rend(self)

    def clear(self):
        return _temp_gvxrPython3.Vectorpuif_clear(self)

    def get_allocator(self):
        return _temp_gvxrPython3.Vectorpuif_get_allocator(self)

    def pop_back(self):
        return _temp_gvxrPython3.Vectorpuif_pop_back(self)

    def erase(self, *args):
        return _temp_gvxrPython3.Vectorpuif_erase(self, *args)

    def __init__(self, *args):
        _temp_gvxrPython3.Vectorpuif_swiginit(self, _temp_gvxrPython3.new_Vectorpuif(*args))

    def push_back(self, x):
        return _temp_gvxrPython3.Vectorpuif_push_back(self, x)

    def front(self):
        return _temp_gvxrPython3.Vectorpuif_front(self)

    def back(self):
        return _temp_gvxrPython3.Vectorpuif_back(self)

    def assign(self, n, x):
        return _temp_gvxrPython3.Vectorpuif_assign(self, n, x)

    def resize(self, *args):
        return _temp_gvxrPython3.Vectorpuif_resize(self, *args)

    def insert(self, *args):
        return _temp_gvxrPython3.Vectorpuif_insert(self, *args)

    def reserve(self, n):
        return _temp_gvxrPython3.Vectorpuif_reserve(self, n)

    def capacity(self):
        return _temp_gvxrPython3.Vectorpuif_capacity(self)
    __swig_destroy__ = _temp_gvxrPython3.delete_Vectorpuif

# Register Vectorpuif in _temp_gvxrPython3:
_temp_gvxrPython3.Vectorpuif_swigregister(Vectorpuif)

def getMajorVersionOfCoreGVXR():
    return _temp_gvxrPython3.getMajorVersionOfCoreGVXR()

def getMinorVersionOfCoreGVXR():
    return _temp_gvxrPython3.getMinorVersionOfCoreGVXR()

def getPatchVersionOfCoreGVXR():
    return _temp_gvxrPython3.getPatchVersionOfCoreGVXR()

def getVersionOfCoreGVXR():
    return _temp_gvxrPython3.getVersionOfCoreGVXR()

def getMajorVersionOfSimpleGVXR():
    return _temp_gvxrPython3.getMajorVersionOfSimpleGVXR()

def getMinorVersionOfSimpleGVXR():
    return _temp_gvxrPython3.getMinorVersionOfSimpleGVXR()

def getPatchVersionOfSimpleGVXR():
    return _temp_gvxrPython3.getPatchVersionOfSimpleGVXR()

def getVersionOfSimpleGVXR():
    return _temp_gvxrPython3.getVersionOfSimpleGVXR()

def getOpenGlRenderer():
    return _temp_gvxrPython3.getOpenGlRenderer()

def getOpenGlVersion():
    return _temp_gvxrPython3.getOpenGlVersion()

def getOpenGlVendor():
    return _temp_gvxrPython3.getOpenGlVendor()

def getNoiseGenerator():
    return _temp_gvxrPython3.getNoiseGenerator()

def useLogFile(*args):
    return _temp_gvxrPython3.useLogFile(*args)

def setSeed(aRandomGeneratorSeed):
    return _temp_gvxrPython3.setSeed(aRandomGeneratorSeed)

def autoCreateOpenGLContext(aFlag=True):
    return _temp_gvxrPython3.autoCreateOpenGLContext(aFlag)

def getIdentityMatrix4():
    return _temp_gvxrPython3.getIdentityMatrix4()

def displayNode(aLabel):
    return _temp_gvxrPython3.displayNode(aLabel)

def moveToCenter(*args):
    return _temp_gvxrPython3.moveToCenter(*args)

def moveToCentre(*args):
    return _temp_gvxrPython3.moveToCentre(*args)

def scaleNode(aLabel, x, y, z):
    return _temp_gvxrPython3.scaleNode(aLabel, x, y, z)

def rotateNode(*args):
    return _temp_gvxrPython3.rotateNode(*args)

def translateNode(aLabel, x, y, z, aUnitOfLength):
    return _temp_gvxrPython3.translateNode(aLabel, x, y, z, aUnitOfLength)

def shearNode(aLabel, yx, zx, xy, zy, xz, yz):
    return _temp_gvxrPython3.shearNode(aLabel, yx, zx, xy, zy, xz, yz)

def resetSceneTransformation():
    return _temp_gvxrPython3.resetSceneTransformation()

def scaleScene(*args):
    return _temp_gvxrPython3.scaleScene(*args)

def rotateScene(*args):
    return _temp_gvxrPython3.rotateScene(*args)

def translateScene(x, y, z, aUnitOfLength):
    return _temp_gvxrPython3.translateScene(x, y, z, aUnitOfLength)

def getSceneTransformationMatrix():
    return _temp_gvxrPython3.getSceneTransformationMatrix()

def getRootTransformationMatrix():
    return _temp_gvxrPython3.getRootTransformationMatrix()

def getNodeLocalTransformationMatrix(aLabel):
    return _temp_gvxrPython3.getNodeLocalTransformationMatrix(aLabel)

def getNodeWorldTransformationMatrix(aLabel):
    return _temp_gvxrPython3.getNodeWorldTransformationMatrix(aLabel)

def setSceneTransformationMatrix(aMatrix):
    return _temp_gvxrPython3.setSceneTransformationMatrix(aMatrix)

def setRootTransformationMatrix(aMatrix):
    return _temp_gvxrPython3.setRootTransformationMatrix(aMatrix)

def setNodeTransformationMatrix(aLabel, aMatrix):
    return _temp_gvxrPython3.setNodeTransformationMatrix(aLabel, aMatrix)

def setHU(aLabel, HU):
    return _temp_gvxrPython3.setHU(aLabel, HU)

def setHounsfieldUnit(aLabel, HU):
    return _temp_gvxrPython3.setHounsfieldUnit(aLabel, HU)

def setHounsfieldValue(aLabel, HU):
    return _temp_gvxrPython3.setHounsfieldValue(aLabel, HU)

def setElement(*args):
    return _temp_gvxrPython3.setElement(*args)

def setMixture(*args):
    return _temp_gvxrPython3.setMixture(*args)

def setCompound(aLabel, aCompound):
    return _temp_gvxrPython3.setCompound(aLabel, aCompound)

def setMassAttenuationCoefficient(aLabel, aCoefficient, aUnit):
    return _temp_gvxrPython3.setMassAttenuationCoefficient(aLabel, aCoefficient, aUnit)

def setLinearAttenuationCoefficient(aLabel, aCoefficient, aUnit):
    return _temp_gvxrPython3.setLinearAttenuationCoefficient(aLabel, aCoefficient, aUnit)

def setMu(aLabel, aCoefficient, aUnit):
    return _temp_gvxrPython3.setMu(aLabel, aCoefficient, aUnit)

def setDensity(aLabel, aDensity, aUnit):
    return _temp_gvxrPython3.setDensity(aLabel, aDensity, aUnit)

def getDensity(aLabel):
    return _temp_gvxrPython3.getDensity(aLabel)

def getMassAttenuationCoefficient(aLabel, anEnergy, aUnitOfEnergy):
    return _temp_gvxrPython3.getMassAttenuationCoefficient(aLabel, anEnergy, aUnitOfEnergy)

def getLinearAttenuationCoefficient(aLabel, anEnergy, aUnitOfEnergy):
    return _temp_gvxrPython3.getLinearAttenuationCoefficient(aLabel, anEnergy, aUnitOfEnergy)

def getMaterialLabel(aLabel):
    return _temp_gvxrPython3.getMaterialLabel(aLabel)

def displayScene(aSceneRotationFlag=True, aWindowID=-1):
    return _temp_gvxrPython3.displayScene(aSceneRotationFlag, aWindowID)

def renderLoop(aWindowID=-1):
    return _temp_gvxrPython3.renderLoop(aWindowID)

def startArcBallRotation(x, y):
    return _temp_gvxrPython3.startArcBallRotation(x, y)

def stopArcBallRotation():
    return _temp_gvxrPython3.stopArcBallRotation()

def usingArcBallRotation():
    return _temp_gvxrPython3.usingArcBallRotation()

def cursorPositionCallback(x, y, aViewportWidth, aViewportHeight):
    return _temp_gvxrPython3.cursorPositionCallback(x, y, aViewportWidth, aViewportHeight)

def scrollCallback(xoffset, yoffset):
    return _temp_gvxrPython3.scrollCallback(xoffset, yoffset)

def setZoom(aZoomValue):
    return _temp_gvxrPython3.setZoom(aZoomValue)

def getZoom():
    return _temp_gvxrPython3.getZoom()

def setSceneRotationMatrix(aRotationMatrix):
    return _temp_gvxrPython3.setSceneRotationMatrix(aRotationMatrix)

def getSceneRotationMatrix():
    return _temp_gvxrPython3.getSceneRotationMatrix()

def showWindow(aWindowID=-1):
    return _temp_gvxrPython3.showWindow(aWindowID)

def hideWindow(aWindowID=-1):
    return _temp_gvxrPython3.hideWindow(aWindowID)

def setWindowPosition(aPositionX, aPositionY, aWindowID=-1):
    return _temp_gvxrPython3.setWindowPosition(aPositionX, aPositionY, aWindowID)

def setWindowBackGroundColour(R, G, B, aWindowID=-1):
    return _temp_gvxrPython3.setWindowBackGroundColour(R, G, B, aWindowID)

def setWindowBackGroundColor(R, G, B, aWindowID=-1):
    return _temp_gvxrPython3.setWindowBackGroundColor(R, G, B, aWindowID)

def takeScreenshot(aWindowID=-1):
    return _temp_gvxrPython3.takeScreenshot(aWindowID)

def getLatestScreenshot():
    return _temp_gvxrPython3.getLatestScreenshot()

def getWhiteImage(anIntegrateEnergyFlag=True):
    return _temp_gvxrPython3.getWhiteImage(anIntegrateEnergyFlag)

def getWhiteSpectralImage():
    return _temp_gvxrPython3.getWhiteSpectralImage()

def saveSTLfile(*args):
    return _temp_gvxrPython3.saveSTLfile(*args)

def getMaxRadiusLbufferArtefactFilter():
    return _temp_gvxrPython3.getMaxRadiusLbufferArtefactFilter()

def setMaxRadiusLbufferArtefactFilter(aRadius):
    return _temp_gvxrPython3.setMaxRadiusLbufferArtefactFilter(aRadius)

def isArtefactFilteringOnGPUEnabled():
    return _temp_gvxrPython3.isArtefactFilteringOnGPUEnabled()

def isArtefactFilteringOnCPUEnabled():
    return _temp_gvxrPython3.isArtefactFilteringOnCPUEnabled()

def getImageWidth(anImage):
    return _temp_gvxrPython3.getImageWidth(anImage)

def getImageHeght(anImage):
    return _temp_gvxrPython3.getImageHeght(anImage)

def getImageRow(anImage, j):
    return _temp_gvxrPython3.getImageRow(anImage, j)

def getElementName(*args):
    return _temp_gvxrPython3.getElementName(*args)

def getElementSymbol(Z):
    return _temp_gvxrPython3.getElementSymbol(Z)

def getElementAtomicNumber(anElement):
    return _temp_gvxrPython3.getElementAtomicNumber(anElement)

def getDensityFromElement(*args):
    return _temp_gvxrPython3.getDensityFromElement(*args)

def getDensityFromHU(HU):
    return _temp_gvxrPython3.getDensityFromHU(HU)

def getMassAttenuationFromElement(*args):
    return _temp_gvxrPython3.getMassAttenuationFromElement(*args)

def getMassAttenuationFromHU(HU, anEnergy, aUnitOfEnergy):
    return _temp_gvxrPython3.getMassAttenuationFromHU(HU, anEnergy, aUnitOfEnergy)

def getMassAttenuationFromMixture(aMixture, anEnergy, aUnitOfEnergy):
    return _temp_gvxrPython3.getMassAttenuationFromMixture(aMixture, anEnergy, aUnitOfEnergy)

def getMassAttenuationFromCompound(aCompound, anEnergy, aUnitOfEnergy):
    return _temp_gvxrPython3.getMassAttenuationFromCompound(aCompound, anEnergy, aUnitOfEnergy)

def getMuFromHU(HU, anEnergy, aUnitOfEnergy):
    return _temp_gvxrPython3.getMuFromHU(HU, anEnergy, aUnitOfEnergy)

def convertHU2mu(anImage, anEnergy, aUnitOfEnergy):
    return _temp_gvxrPython3.convertHU2mu(anImage, anEnergy, aUnitOfEnergy)

def rayIntersect(aLabel, aRayOriginX, aRayOriginY, aRayOriginZ, aRayDirectionX, aRayDirectionY, aRayDirectionZ):
    return _temp_gvxrPython3.rayIntersect(aLabel, aRayOriginX, aRayOriginY, aRayOriginZ, aRayDirectionX, aRayDirectionY, aRayDirectionZ)

def getMean(anImage):
    return _temp_gvxrPython3.getMean(anImage)

def getStddev(anImage):
    return _temp_gvxrPython3.getStddev(anImage)

def loadReference(aReferenceSet):
    return _temp_gvxrPython3.loadReference(aReferenceSet)

def loadTest(aTestSet):
    return _temp_gvxrPython3.loadTest(aTestSet)

def lineariseTest(aThreshold, aScalingFactor):
    return _temp_gvxrPython3.lineariseTest(aThreshold, aScalingFactor)

def loadImage2D(aFileName):
    return _temp_gvxrPython3.loadImage2D(aFileName)

def loadImage3D(aFileName):
    return _temp_gvxrPython3.loadImage3D(aFileName)

def getMinValue(a3DVolume):
    return _temp_gvxrPython3.getMinValue(a3DVolume)

def getMaxValue(a3DVolume):
    return _temp_gvxrPython3.getMaxValue(a3DVolume)

def computeZNCC(*args):
    return _temp_gvxrPython3.computeZNCC(*args)

def computeRMSE(*args):
    return _temp_gvxrPython3.computeRMSE(*args)

def computeXRayImage(anIntegrateEnergyFlag=True):
    return _temp_gvxrPython3.computeXRayImage(anIntegrateEnergyFlag)

def computeSpectralImage():
    return _temp_gvxrPython3.computeSpectralImage()

def computeLBuffer(aLabel):
    return _temp_gvxrPython3.computeLBuffer(aLabel)

def computePathLength(aLabel):
    return _temp_gvxrPython3.computePathLength(aLabel)

def computeSinogram(x, y, z, aUnitOfLength, aNumberOfAngle, anAngleOffset):
    return _temp_gvxrPython3.computeSinogram(x, y, z, aUnitOfLength, aNumberOfAngle, anAngleOffset)

def computeProjectionSet(x, y, z, aUnitOfLength, aNumberOfAngle, anAngleOffset):
    return _temp_gvxrPython3.computeProjectionSet(x, y, z, aUnitOfLength, aNumberOfAngle, anAngleOffset)

def computeCTAcquisition(aProjectionOutputPath, aScreenshotOutputPath, aNumberOfProjections, aFirstAngle, anIncludeLastAngleFlag, aLastAngle, aNumberOfWhiteImagesInFlatField, aPositionOfCentreOfRotationX, aPositionOfCentreOfRotationY, aPositionOfCentreOfRotationZ, aUnitOfLength, aAxisOfRotationX, aAxisOfRotationY, aAxisOfRotationZ, anIntegrateEnergyFlag=True, aVerboseLevel=0):
    return _temp_gvxrPython3.computeCTAcquisition(aProjectionOutputPath, aScreenshotOutputPath, aNumberOfProjections, aFirstAngle, anIncludeLastAngleFlag, aLastAngle, aNumberOfWhiteImagesInFlatField, aPositionOfCentreOfRotationX, aPositionOfCentreOfRotationY, aPositionOfCentreOfRotationZ, aUnitOfLength, aAxisOfRotationX, aAxisOfRotationY, aAxisOfRotationZ, anIntegrateEnergyFlag, aVerboseLevel)

def getSourcePositionSet(aUnitOfLength):
    return _temp_gvxrPython3.getSourcePositionSet(aUnitOfLength)

def getDetectorPositionSet(aUnitOfLength):
    return _temp_gvxrPython3.getDetectorPositionSet(aUnitOfLength)

def getDetectorRightVectorSet():
    return _temp_gvxrPython3.getDetectorRightVectorSet()

def getDetectorUpVectorSet():
    return _temp_gvxrPython3.getDetectorUpVectorSet()

def getProjectionOutputPathCT():
    return _temp_gvxrPython3.getProjectionOutputPathCT()

def getScreenshotOutputPathCT():
    return _temp_gvxrPython3.getScreenshotOutputPathCT()

def getNumberOfProjectionsCT():
    return _temp_gvxrPython3.getNumberOfProjectionsCT()

def getOptimalNumberOfProjectionsCT():
    return _temp_gvxrPython3.getOptimalNumberOfProjectionsCT()

def getFirstAngleCT():
    return _temp_gvxrPython3.getFirstAngleCT()

def getLastAngleCT():
    return _temp_gvxrPython3.getLastAngleCT()

def getIncludeLastAngleFlagCT():
    return _temp_gvxrPython3.getIncludeLastAngleFlagCT()

def getWhiteImagesInFlatFieldCT():
    return _temp_gvxrPython3.getWhiteImagesInFlatFieldCT()

def getCentreOfRotationPositionCT(aUnitOfLength):
    return _temp_gvxrPython3.getCentreOfRotationPositionCT(aUnitOfLength)

def getRotationAxisCT():
    return _temp_gvxrPython3.getRotationAxisCT()

def getAngleSetCT():
    return _temp_gvxrPython3.getAngleSetCT()

def getLastXRayImage():
    return _temp_gvxrPython3.getLastXRayImage()

def getLastLBuffer():
    return _temp_gvxrPython3.getLastLBuffer()

def getLastSinogram():
    return _temp_gvxrPython3.getLastSinogram()

def getLastProjectionSet():
    return _temp_gvxrPython3.getLastProjectionSet()

def saveLastXRayImage(*args):
    return _temp_gvxrPython3.saveLastXRayImage(*args)

def saveLastLBuffer(*args):
    return _temp_gvxrPython3.saveLastLBuffer(*args)

def saveLastPathLength(*args):
    return _temp_gvxrPython3.saveLastPathLength(*args)

def saveLastCumulatedLBuffer(*args):
    return _temp_gvxrPython3.saveLastCumulatedLBuffer(*args)

def saveLastSinogram(*args):
    return _temp_gvxrPython3.saveLastSinogram(*args)

def saveLastProjectionSet(*args):
    return _temp_gvxrPython3.saveLastProjectionSet(*args)

def setDetectorNumberOfPixels(aWidth, aHeight):
    return _temp_gvxrPython3.setDetectorNumberOfPixels(aWidth, aHeight)

def getDetectorNumberOfPixels():
    return _temp_gvxrPython3.getDetectorNumberOfPixels()

def setOversamplingFactor(aFactor=1):
    return _temp_gvxrPython3.setOversamplingFactor(aFactor)

def getOversamplingFactor():
    return _temp_gvxrPython3.getOversamplingFactor()

def setDetectorPixelSize(aWidth, aHeight, aUnitOfLength):
    return _temp_gvxrPython3.setDetectorPixelSize(aWidth, aHeight, aUnitOfLength)

def setDetectorPixelPitch(aWidth, aHeight, aUnitOfLength):
    return _temp_gvxrPython3.setDetectorPixelPitch(aWidth, aHeight, aUnitOfLength)

def getDetectorPixelSpacing(aUnitOfLength):
    return _temp_gvxrPython3.getDetectorPixelSpacing(aUnitOfLength)

def getDetectorSize(aUnitOfLength):
    return _temp_gvxrPython3.getDetectorSize(aUnitOfLength)

def getDetectorPixelArea(aUnitOfLength):
    return _temp_gvxrPython3.getDetectorPixelArea(aUnitOfLength)

def setDetectorPosition(x, y, z, aUnitOfLength):
    return _temp_gvxrPython3.setDetectorPosition(x, y, z, aUnitOfLength)

def getDetectorPosition(aUnitOfLength):
    return _temp_gvxrPython3.getDetectorPosition(aUnitOfLength)

def setDetectorUpVector(x, y, z):
    return _temp_gvxrPython3.setDetectorUpVector(x, y, z)

def getDetectorUpVector():
    return _temp_gvxrPython3.getDetectorUpVector()

def setDetectorRightVector(x, y, z):
    return _temp_gvxrPython3.setDetectorRightVector(x, y, z)

def getDetectorRightVector():
    return _temp_gvxrPython3.getDetectorRightVector()

def rotateDetector(anAngle, x, y, z):
    return _temp_gvxrPython3.rotateDetector(anAngle, x, y, z)

def autoAlignDetector(aFlag=True):
    return _temp_gvxrPython3.autoAlignDetector(aFlag)

def getDetectorVertices():
    return _temp_gvxrPython3.getDetectorVertices()

def setLSF(*args):
    return _temp_gvxrPython3.setLSF(*args)

def getLSF():
    return _temp_gvxrPython3.getLSF()

def clearLSF():
    return _temp_gvxrPython3.clearLSF()

def setDetectorEnergyResponse(anEnergyResponse, aUnitOfEnergy):
    return _temp_gvxrPython3.setDetectorEnergyResponse(anEnergyResponse, aUnitOfEnergy)

def loadDetectorEnergyResponse(aFileName, aUnitOfEnergy):
    return _temp_gvxrPython3.loadDetectorEnergyResponse(aFileName, aUnitOfEnergy)

def clearDetectorEnergyResponse():
    return _temp_gvxrPython3.clearDetectorEnergyResponse()

def setScintillator(aMaterial, aThickness, aUnitOfLength):
    return _temp_gvxrPython3.setScintillator(aMaterial, aThickness, aUnitOfLength)

def getScintillatorMaterial():
    return _temp_gvxrPython3.getScintillatorMaterial()

def getSupportedScintillatorMaterials():
    return _temp_gvxrPython3.getSupportedScintillatorMaterials()

def getEnergyResponse(*args):
    return _temp_gvxrPython3.getEnergyResponse(*args)

def getScintillatorThickness(aUnitOfLength):
    return _temp_gvxrPython3.getScintillatorThickness(aUnitOfLength)

def setPhotonCountingBands(aMinEnergy, aMaxEnergy, aUnitOfEnergy, aNumberOfBands):
    return _temp_gvxrPython3.setPhotonCountingBands(aMinEnergy, aMaxEnergy, aUnitOfEnergy, aNumberOfBands)

def getNumberOfPhotonCountingBands():
    return _temp_gvxrPython3.getNumberOfPhotonCountingBands()

def mergePhotonCountingBands():
    return _temp_gvxrPython3.mergePhotonCountingBands()

def getPhotonCountingBands(aUnitOfEnergy):
    return _temp_gvxrPython3.getPhotonCountingBands(aUnitOfEnergy)

def getNumberOfImplicitSurfaces():
    return _temp_gvxrPython3.getNumberOfImplicitSurfaces()

def getImplicitSurfaceLabelSet():
    return _temp_gvxrPython3.getImplicitSurfaceLabelSet()

def implicitSurfaceExists(aLabel):
    return _temp_gvxrPython3.implicitSurfaceExists(aLabel)

def createImplicitSurface(aLabel):
    return _temp_gvxrPython3.createImplicitSurface(aLabel)

def destroyImplicitSurface(aLabel):
    return _temp_gvxrPython3.destroyImplicitSurface(aLabel)

def destroyAllImplicitSurfaces():
    return _temp_gvxrPython3.destroyAllImplicitSurfaces()

def addControlPoint(aLabel, aPositionX, aPositionY, aPositionZ, aUnitOfLength, aDentityFunction, aParameterA, aParameterB=0.0):
    return _temp_gvxrPython3.addControlPoint(aLabel, aPositionX, aPositionY, aPositionZ, aUnitOfLength, aDentityFunction, aParameterA, aParameterB)

def addControlLineSegment(aLabel, aPosition1X, aPosition1Y, aPosition1Z, aPosition2X, aPosition2Y, aPosition2Z, aUnitOfLength, aDentityFunction, aParameterA, aParameterB=0.0):
    return _temp_gvxrPython3.addControlLineSegment(aLabel, aPosition1X, aPosition1Y, aPosition1Z, aPosition2X, aPosition2Y, aPosition2Z, aUnitOfLength, aDentityFunction, aParameterA, aParameterB)

def getNumberOfControlPoints(aLabel):
    return _temp_gvxrPython3.getNumberOfControlPoints(aLabel)

def getNumberOfControlLineSegments(aLabel):
    return _temp_gvxrPython3.getNumberOfControlLineSegments(aLabel)

def setControlPointParameters(aLabel, aPointID, aDentityFunction, aParameterA, aParameterB=0.0):
    return _temp_gvxrPython3.setControlPointParameters(aLabel, aPointID, aDentityFunction, aParameterA, aParameterB)

def setControlLineSegmentParameters(aLabel, aLineSegmentID, aDentityFunction, aParameterA, aParameterB=0.0):
    return _temp_gvxrPython3.setControlLineSegmentParameters(aLabel, aLineSegmentID, aDentityFunction, aParameterA, aParameterB)

def voxeliseImplicitSurface(aLabel, aNumberOfVoxelX, aNumberOfVoxelY, aNumberOfVoxelZ, aCentrePositionX, aCentrePositionY, aCentrePositionZ, aVoxelWidth, aVoxelHeight, aVoxelDepth, aUnitOfLength, aVerboseLevel=0):
    return _temp_gvxrPython3.voxeliseImplicitSurface(aLabel, aNumberOfVoxelX, aNumberOfVoxelY, aNumberOfVoxelZ, aCentrePositionX, aCentrePositionY, aCentrePositionZ, aVoxelWidth, aVoxelHeight, aVoxelDepth, aUnitOfLength, aVerboseLevel)

def voxelizeImplicitSurface(aLabel, aNumberOfVoxelX, aNumberOfVoxelY, aNumberOfVoxelZ, aCentrePositionX, aCentrePositionY, aCentrePositionZ, aVoxelWidth, aVoxelHeight, aVoxelDepth, aUnitOfLength, aVerboseLevel=0):
    return _temp_gvxrPython3.voxelizeImplicitSurface(aLabel, aNumberOfVoxelX, aNumberOfVoxelY, aNumberOfVoxelZ, aCentrePositionX, aCentrePositionY, aCentrePositionZ, aVoxelWidth, aVoxelHeight, aVoxelDepth, aUnitOfLength, aVerboseLevel)

def getImplicitSurfaceLastVoxelisation(aLabel):
    return _temp_gvxrPython3.getImplicitSurfaceLastVoxelisation(aLabel)

def getImplicitSurfaceLastVoxelization(aLabel):
    return _temp_gvxrPython3.getImplicitSurfaceLastVoxelization(aLabel)

def createMeshFromImplicitSurface(*args):
    return _temp_gvxrPython3.createMeshFromImplicitSurface(*args)

def loadMeshFile(*args):
    return _temp_gvxrPython3.loadMeshFile(*args)

def getMeshFilename(aLabel):
    return _temp_gvxrPython3.getMeshFilename(aLabel)

def getMeshUnitOfLength(aLabel):
    return _temp_gvxrPython3.getMeshUnitOfLength(aLabel)

def loadSceneGraph(aFileName, aUnitOfLength):
    return _temp_gvxrPython3.loadSceneGraph(aFileName, aUnitOfLength)

def getNumberOfPrimitives(aLabel):
    return _temp_gvxrPython3.getNumberOfPrimitives(aLabel)

def getNumberOfFaceNormalVectors(aLabel):
    return _temp_gvxrPython3.getNumberOfFaceNormalVectors(aLabel)

def getNumberOfVertexNormalVectors(aLabel):
    return _temp_gvxrPython3.getNumberOfVertexNormalVectors(aLabel)

def getVertexNumber(aLabel):
    return _temp_gvxrPython3.getVertexNumber(aLabel)

def getIndexNumber(aLabel):
    return _temp_gvxrPython3.getIndexNumber(aLabel)

def getVertexSet(aLabel):
    return _temp_gvxrPython3.getVertexSet(aLabel)

def getFaceNormalVectorSet(aLabel):
    return _temp_gvxrPython3.getFaceNormalVectorSet(aLabel)

def getVertexNormalVectorSet(aLabel):
    return _temp_gvxrPython3.getVertexNormalVectorSet(aLabel)

def getIndexSet(aLabel):
    return _temp_gvxrPython3.getIndexSet(aLabel)

def isInnerSurface(aLabel):
    return _temp_gvxrPython3.isInnerSurface(aLabel)

def isOuterSurface(aLabel):
    return _temp_gvxrPython3.isOuterSurface(aLabel)

def emptyMesh(*args):
    return _temp_gvxrPython3.emptyMesh(*args)

def removeMeshAndChildren(aLabel):
    return _temp_gvxrPython3.removeMeshAndChildren(aLabel)

def makeCube(*args):
    return _temp_gvxrPython3.makeCube(*args)

def makeCuboid(*args):
    return _temp_gvxrPython3.makeCuboid(*args)

def makeCylinder(*args):
    return _temp_gvxrPython3.makeCylinder(*args)

def makeSphere(*args):
    return _temp_gvxrPython3.makeSphere(*args)

def makeStepWedge(*args):
    return _temp_gvxrPython3.makeStepWedge(*args)

def makeIsoSurface(*args):
    return _temp_gvxrPython3.makeIsoSurface(*args)

def makeFoamInCuboid(aPorosityName, aBoundingVolumeName, aCuboidWidth, aCuboidHeight, aCuboidDepth, aPorosityRadius, aPercentageOfVolume, aPercentageDeviation, aVoxelSpacing, aUnitOfLength, aVerboseLevel=0):
    return _temp_gvxrPython3.makeFoamInCuboid(aPorosityName, aBoundingVolumeName, aCuboidWidth, aCuboidHeight, aCuboidDepth, aPorosityRadius, aPercentageOfVolume, aPercentageDeviation, aVoxelSpacing, aUnitOfLength, aVerboseLevel)

def makeTriangularMesh(*args):
    return _temp_gvxrPython3.makeTriangularMesh(*args)

def makeSpheresInCylinder(*args):
    return _temp_gvxrPython3.makeSpheresInCylinder(*args)

def addMesh(aDestination, aSource):
    return _temp_gvxrPython3.addMesh(aDestination, aSource)

def subtractMesh(aDestination, aSource):
    return _temp_gvxrPython3.subtractMesh(aDestination, aSource)

def getNumberOfChildren(aLabel):
    return _temp_gvxrPython3.getNumberOfChildren(aLabel)

def getChildLabel(aLabel, i):
    return _temp_gvxrPython3.getChildLabel(aLabel, i)

def getLocalTransformationMatrix(aLabel):
    return _temp_gvxrPython3.getLocalTransformationMatrix(aLabel)

def setLocalTransformationMatrix(aLabel, aMatrix):
    return _temp_gvxrPython3.setLocalTransformationMatrix(aLabel, aMatrix)

def applyCurrentLocalTransformation(aLabel):
    return _temp_gvxrPython3.applyCurrentLocalTransformation(aLabel)

def getNodeAndChildrenBoundingBox(*args):
    return _temp_gvxrPython3.getNodeAndChildrenBoundingBox(*args)

def getNodeOnlyBoundingBox(*args):
    return _temp_gvxrPython3.getNodeOnlyBoundingBox(*args)

def invertNormalVectors(aLabel):
    return _temp_gvxrPython3.invertNormalVectors(aLabel)

def hasNormalVectorsInverted(aLabel):
    return _temp_gvxrPython3.hasNormalVectorsInverted(aLabel)

def setColor(aLabel, R, G, B, A):
    return _temp_gvxrPython3.setColor(aLabel, R, G, B, A)

def setColour(aLabel, R, G, B, A):
    return _temp_gvxrPython3.setColour(aLabel, R, G, B, A)

def setAmbiantColour(aLabel, R, G, B, A):
    return _temp_gvxrPython3.setAmbiantColour(aLabel, R, G, B, A)

def getAmbientColour(aLabel):
    return _temp_gvxrPython3.getAmbientColour(aLabel)

def setDiffuseColour(aLabel, R, G, B, A):
    return _temp_gvxrPython3.setDiffuseColour(aLabel, R, G, B, A)

def getDiffuseColour(aLabel):
    return _temp_gvxrPython3.getDiffuseColour(aLabel)

def setSpecularColour(aLabel, R, G, B, A):
    return _temp_gvxrPython3.setSpecularColour(aLabel, R, G, B, A)

def getSpecularColour(aLabel):
    return _temp_gvxrPython3.getSpecularColour(aLabel)

def setShininess(aLabel, aShininessValue):
    return _temp_gvxrPython3.setShininess(aLabel, aShininessValue)

def getShininess(aLabel):
    return _temp_gvxrPython3.getShininess(aLabel)

def addPolygonMeshAsInnerSurface(aLabel):
    return _temp_gvxrPython3.addPolygonMeshAsInnerSurface(aLabel)

def addPolygonMeshAsOuterSurface(aLabel):
    return _temp_gvxrPython3.addPolygonMeshAsOuterSurface(aLabel)

def removePolygonMeshesFromSceneGraph():
    return _temp_gvxrPython3.removePolygonMeshesFromSceneGraph()

def removePolygonMeshesFromXRayRenderer():
    return _temp_gvxrPython3.removePolygonMeshesFromXRayRenderer()

def setSourcePosition(x, y, z, aUnitOfLength):
    return _temp_gvxrPython3.setSourcePosition(x, y, z, aUnitOfLength)

def getSourceShape():
    return _temp_gvxrPython3.getSourceShape()

def getSourcePosition(aUnitOfLength):
    return _temp_gvxrPython3.getSourcePosition(aUnitOfLength)

def usePointSource():
    return _temp_gvxrPython3.usePointSource()

def useConeBeam():
    return _temp_gvxrPython3.useConeBeam()

def useParallelBeam():
    return _temp_gvxrPython3.useParallelBeam()

def useParallelSource():
    return _temp_gvxrPython3.useParallelSource()

def isUsingParallelBeam():
    return _temp_gvxrPython3.isUsingParallelBeam()

def isUsingParallelSource():
    return _temp_gvxrPython3.isUsingParallelSource()

def isUsingPointSource():
    return _temp_gvxrPython3.isUsingPointSource()

def isUsingConeBeam():
    return _temp_gvxrPython3.isUsingConeBeam()

def isUsingFocalSpot():
    return _temp_gvxrPython3.isUsingFocalSpot()

def setFocalSpot(x, y, z, l, aUnitOfLength, i):
    return _temp_gvxrPython3.setFocalSpot(x, y, z, l, aUnitOfLength, i)

def setFocalSpotAsSquare(x, y, z, l, aUnitOfLength, i):
    return _temp_gvxrPython3.setFocalSpotAsSquare(x, y, z, l, aUnitOfLength, i)

def setFocalSpotAsRectangle(x, y, z, l, k, aUnitOfLength, i, j):
    return _temp_gvxrPython3.setFocalSpotAsRectangle(x, y, z, l, k, aUnitOfLength, i, j)

def rotateFocalSpot(aRotationAngle, u, v, w):
    return _temp_gvxrPython3.rotateFocalSpot(aRotationAngle, u, v, w)

def rotateSource(aRotationAngle, x, y, z, u, v, w):
    return _temp_gvxrPython3.rotateSource(aRotationAngle, x, y, z, u, v, w)

def resetBeamSpectrum(aClearTubeParameterFlag=True):
    return _temp_gvxrPython3.resetBeamSpectrum(aClearTubeParameterFlag)

def setMonoChromatic(anEnergy, aUnitOfEnergy, aNumberOfPhotons):
    return _temp_gvxrPython3.setMonoChromatic(anEnergy, aUnitOfEnergy, aNumberOfPhotons)

def addEnergyBinToSpectrum(anEnergy, aUnitOfEnergy, aNumberOfPhotons):
    return _temp_gvxrPython3.addEnergyBinToSpectrum(anEnergy, aUnitOfEnergy, aNumberOfPhotons)

def loadSpectrumFromTSV(aFileName, aUnitOfEnergy, aNormalisationFlag):
    return _temp_gvxrPython3.loadSpectrumFromTSV(aFileName, aUnitOfEnergy, aNormalisationFlag)

def getEnergyBins(aUnitOfEnergy):
    return _temp_gvxrPython3.getEnergyBins(aUnitOfEnergy)

def getPhotonCountEnergyBins():
    return _temp_gvxrPython3.getPhotonCountEnergyBins()

def getTotalEnergyWithDetectorResponse():
    return _temp_gvxrPython3.getTotalEnergyWithDetectorResponse()

def setVoltage(aVoltage, aUnitOfElectriPotential):
    return _temp_gvxrPython3.setVoltage(aVoltage, aUnitOfElectriPotential)

def getVoltage(aUnitOfElectriPotential):
    return _temp_gvxrPython3.getVoltage(aUnitOfElectriPotential)

def setmAs(an_mAs):
    return _temp_gvxrPython3.setmAs(an_mAs)

def getmAs():
    return _temp_gvxrPython3.getmAs()

def setTubeAngle(anAngle):
    return _temp_gvxrPython3.setTubeAngle(anAngle)

def getTubeAngle():
    return _temp_gvxrPython3.getTubeAngle()

def clearFiltration():
    return _temp_gvxrPython3.clearFiltration()

def setFiltration(aSetOfFilters, aUnitOfLength):
    return _temp_gvxrPython3.setFiltration(aSetOfFilters, aUnitOfLength)

def addFilter(*args):
    return _temp_gvxrPython3.addFilter(*args)

def getFiltrationMaterial():
    return _temp_gvxrPython3.getFiltrationMaterial()

def getFiltrationThickness(aUnitOfLength):
    return _temp_gvxrPython3.getFiltrationThickness(aUnitOfLength)

def hasSpekpy():
    return _temp_gvxrPython3.hasSpekpy()

def hasXpecgen():
    return _temp_gvxrPython3.hasXpecgen()

def useSpekpy():
    return _temp_gvxrPython3.useSpekpy()

def useXpecgen():
    return _temp_gvxrPython3.useXpecgen()

def usingSpekpy():
    return _temp_gvxrPython3.usingSpekpy()

def usingXpecgen():
    return _temp_gvxrPython3.usingXpecgen()

def enablePoissonNoise():
    return _temp_gvxrPython3.enablePoissonNoise()

def disablePoissonNoise():
    return _temp_gvxrPython3.disablePoissonNoise()

def setNumberOfPhotons(aNumberOfPhotons):
    return _temp_gvxrPython3.setNumberOfPhotons(aNumberOfPhotons)

def setNumberOfPhotonsPerPixel(aNumberOfPhotons):
    return _temp_gvxrPython3.setNumberOfPhotonsPerPixel(aNumberOfPhotons)

def setNumberOfPhotonsPerCM2(aNumberOfPhotons):
    return _temp_gvxrPython3.setNumberOfPhotonsPerCM2(aNumberOfPhotons)

def getNumberOfPhotons():
    return _temp_gvxrPython3.getNumberOfPhotons()

def getNumberOfPhotonsPerPixel():
    return _temp_gvxrPython3.getNumberOfPhotonsPerPixel()

def getNumberOfPhotonsPerCM2():
    return _temp_gvxrPython3.getNumberOfPhotonsPerCM2()

def usePoissonNoise(*args):
    return _temp_gvxrPython3.usePoissonNoise(*args)

def radian2degree(anAngle):
    return _temp_gvxrPython3.radian2degree(anAngle)

def getUnitOfEnergy(aUnitOfEnergy):
    return _temp_gvxrPython3.getUnitOfEnergy(aUnitOfEnergy)

def getUnitOfLength(aUnitOfLength):
    return _temp_gvxrPython3.getUnitOfLength(aUnitOfLength)

def getUnitOfElectriPotential(aUnitOfElectriPotential):
    return _temp_gvxrPython3.getUnitOfElectriPotential(aUnitOfElectriPotential)

def enableArtefactFilteringOnGPU():
    return _temp_gvxrPython3.enableArtefactFilteringOnGPU()

def enableArtifactFilteringOnGPU():
    return _temp_gvxrPython3.enableArtifactFilteringOnGPU()

def enableArtefactFilteringOnCPU():
    return _temp_gvxrPython3.enableArtefactFilteringOnCPU()

def enableArtifactFilteringOnCPU():
    return _temp_gvxrPython3.enableArtifactFilteringOnCPU()

def disableArtefactFiltering():
    return _temp_gvxrPython3.disableArtefactFiltering()

def disableArtifactFiltering():
    return _temp_gvxrPython3.disableArtifactFiltering()

def getNumberOfEGLDevices():
    return _temp_gvxrPython3.getNumberOfEGLDevices()

def findEGLClients():
    return _temp_gvxrPython3.findEGLClients()

def createOpenGLContext(aWindowID=-1, aRendererMajorVersion=4, aRendererMinorVersion=3):
    return _temp_gvxrPython3.createOpenGLContext(aWindowID, aRendererMajorVersion, aRendererMinorVersion)

def createWindow(*args):
    return _temp_gvxrPython3.createWindow(*args)

def createNewContext(*args):
    return _temp_gvxrPython3.createNewContext(*args)

def setWindowSize(aWidth, aHeight, aWindowID=-1):
    return _temp_gvxrPython3.setWindowSize(aWidth, aHeight, aWindowID)

def getWindowSize(aWindowID=-1):
    return _temp_gvxrPython3.getWindowSize(aWindowID)

def destroyWindow(aWindowID=-1):
    return _temp_gvxrPython3.destroyWindow(aWindowID)

def destroyAllWindows():
    return _temp_gvxrPython3.destroyAllWindows()

def terminate():
    return _temp_gvxrPython3.terminate()

def displayBeam(aState=True):
    return _temp_gvxrPython3.displayBeam(aState)

def displayDetector(aState=True):
    return _temp_gvxrPython3.displayDetector(aState)

def displayNormalVectors(aState=True):
    return _temp_gvxrPython3.displayNormalVectors(aState)

def useWireframe(aState=True):
    return _temp_gvxrPython3.useWireframe(aState)

def useLighing(aState=True):
    return _temp_gvxrPython3.useLighing(aState)

def useNegative(aState=True):
    return _temp_gvxrPython3.useNegative(aState)

def setAxisLength(aLength, aUnitOfLength):
    return _temp_gvxrPython3.setAxisLength(aLength, aUnitOfLength)

def orthographic(left, right, bottom, top, zNear, zFar):
    return _temp_gvxrPython3.orthographic(left, right, bottom, top, zNear, zFar)

def perspective(fovy, aspect, zNear, zFar):
    return _temp_gvxrPython3.perspective(fovy, aspect, zNear, zFar)

def lookAt(eyeX, eyeY, eyeZ, lookAtX, lookAtY, lookAtZ, upX, upY, upZ):
    return _temp_gvxrPython3.lookAt(eyeX, eyeY, eyeZ, lookAtX, lookAtY, lookAtZ, upX, upY, upZ)

def pushModelViewMatrix():
    return _temp_gvxrPython3.pushModelViewMatrix()

def popModelViewMatrix():
    return _temp_gvxrPython3.popModelViewMatrix()

def rotateModelView(anAngle, x, y, z):
    return _temp_gvxrPython3.rotateModelView(anAngle, x, y, z)

