# This file was auto-generated by Fern from our API Definition.

from ...core.client_wrapper import SyncClientWrapper
import typing
from ...core.request_options import RequestOptions
from .types.plot_points_response import PlotPointsResponse
from ...core.pydantic_utilities import parse_obj_as
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper


class PlotClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def points(
        self,
        *,
        b_64_img_str: str,
        method: typing.Optional[int] = None,
        plot_info: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PlotPointsResponse:
        """
        Extracts points from plots

        Parameters
        ----------
        b_64_img_str : str
            Img of plot as a base64 string

        method : typing.Optional[int]
            Can specify specific method to extract points

        plot_info : typing.Optional[str]
            Can add specific plot info

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlotPointsResponse
            Successful Response

        Examples
        --------
        from axiomatic import Axiomatic

        client = Axiomatic(
            api_key="YOUR_API_KEY",
        )
        client.document.plot.points(
            b_64_img_str="b64_img_str",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "document/plot/points",
            method="POST",
            params={
                "b64_img_str": b_64_img_str,
                "method": method,
                "plot_info": plot_info,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PlotPointsResponse,
                    parse_obj_as(
                        type_=PlotPointsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPlotClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def points(
        self,
        *,
        b_64_img_str: str,
        method: typing.Optional[int] = None,
        plot_info: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PlotPointsResponse:
        """
        Extracts points from plots

        Parameters
        ----------
        b_64_img_str : str
            Img of plot as a base64 string

        method : typing.Optional[int]
            Can specify specific method to extract points

        plot_info : typing.Optional[str]
            Can add specific plot info

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlotPointsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from axiomatic import AsyncAxiomatic

        client = AsyncAxiomatic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.document.plot.points(
                b_64_img_str="b64_img_str",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "document/plot/points",
            method="POST",
            params={
                "b64_img_str": b_64_img_str,
                "method": method,
                "plot_info": plot_info,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PlotPointsResponse,
                    parse_obj_as(
                        type_=PlotPointsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
