{"version":3,"file":"index.I-NvuqNE.js","sources":["../../../../../../src/lib/apis/openai/index.ts"],"sourcesContent":["import { OPENAI_API_BASE_URL, WEBUI_API_BASE_URL, WEBUI_BASE_URL } from '$lib/constants';\n\nexport const getOpenAIConfig = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\ntype OpenAIConfig = {\n\tENABLE_OPENAI_API: boolean;\n\tOPENAI_API_BASE_URLS: string[];\n\tOPENAI_API_KEYS: string[];\n\tOPENAI_API_CONFIGS: object;\n};\n\nexport const updateOpenAIConfig = async (token: string = '', config: OpenAIConfig) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config/update`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\t...config\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getOpenAIUrls = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.OPENAI_API_BASE_URLS;\n};\n\nexport const updateOpenAIUrls = async (token: string = '', urls: string[]) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls/update`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turls: urls\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.OPENAI_API_BASE_URLS;\n};\n\nexport const getOpenAIKeys = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.OPENAI_API_KEYS;\n};\n\nexport const updateOpenAIKeys = async (token: string = '', keys: string[]) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys/update`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tkeys: keys\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = 'Server connection failed';\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.OPENAI_API_KEYS;\n};\n\nexport const getOpenAIModels = async (token: string, urlIdx?: number) => {\n\tlet error = null;\n\n\tconst res = await fetch(\n\t\t`${OPENAI_API_BASE_URL}/models${typeof urlIdx === 'number' ? `/${urlIdx}` : ''}`,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t}\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\n\t\t\treturn [];\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const verifyOpenAIConnection = async (\n\ttoken: string = '',\n\turl: string = 'https://api.openai.com/v1',\n\tkey: string = ''\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/verify`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turl,\n\t\t\tkey\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\n\t\t\treturn [];\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const chatCompletion = async (\n\ttoken: string = '',\n\tbody: object,\n\turl: string = `${WEBUI_BASE_URL}/api`\n): Promise<[Response | null, AbortController]> => {\n\tconst controller = new AbortController();\n\tlet error = null;\n\n\tconst res = await fetch(`${url}/chat/completions`, {\n\t\tsignal: controller.signal,\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t}).catch((err) => {\n\t\tconsole.log(err);\n\t\terror = err;\n\t\treturn null;\n\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn [res, controller];\n};\n\nexport const generateOpenAIChatCompletion = async (\n\ttoken: string = '',\n\tbody: object,\n\turl: string = `${WEBUI_BASE_URL}/api`\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${url}/chat/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = `${err?.detail ?? err}`;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const synthesizeOpenAISpeech = async (\n\ttoken: string = '',\n\tspeaker: string = 'alloy',\n\ttext: string = '',\n\tmodel: string = 'tts-1'\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/audio/speech`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tinput: text,\n\t\t\tvoice: speaker\n\t\t})\n\t}).catch((err) => {\n\t\tconsole.log(err);\n\t\terror = err;\n\t\treturn null;\n\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n"],"names":["getOpenAIConfig","token","error","res","OPENAI_API_BASE_URL","err","updateOpenAIConfig","config","getOpenAIModels","urlIdx","_a","verifyOpenAIConnection","url","key","chatCompletion","body","WEBUI_BASE_URL","controller","generateOpenAIChatCompletion"],"mappings":"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"}