{"version":3,"file":"index.dby4y7SL.js","sources":["../../../../../../src/lib/apis/index.ts"],"sourcesContent":["import { WEBUI_API_BASE_URL, WEBUI_BASE_URL } from '$lib/constants';\n\nexport const getModels = async (token: string = '', base: boolean = false) => {\n\tlet error = null;\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/models${base ? '/base' : ''}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\terror = err;\n\t\t\tconsole.log(err);\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tlet models = res?.data ?? [];\n\treturn models;\n};\n\ntype ChatCompletedForm = {\n\tmodel: string;\n\tmessages: string[];\n\tchat_id: string;\n\tsession_id: string;\n};\n\nexport const chatCompleted = async (token: string, body: ChatCompletedForm) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/chat/completed`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\ntype ChatActionForm = {\n\tmodel: string;\n\tmessages: string[];\n\tchat_id: string;\n};\n\nexport const chatAction = async (token: string, action_id: string, body: ChatActionForm) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/chat/actions/${action_id}`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify(body)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const stopTask = async (token: string, id: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/tasks/stop/${id}`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getTaskConfig = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/config`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updateTaskConfig = async (token: string, config: object) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/config/update`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify(config)\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const generateTitle = async (\n\ttoken: string = '',\n\tmodel: string,\n\tmessages: string[],\n\tchat_id?: string\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/title/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tmessages: messages,\n\t\t\t...(chat_id && { chat_id: chat_id })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? 'New Chat';\n};\n\nexport const generateTags = async (\n\ttoken: string = '',\n\tmodel: string,\n\tmessages: string,\n\tchat_id?: string\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/tags/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tmessages: messages,\n\t\t\t...(chat_id && { chat_id: chat_id })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\ttry {\n\t\t// Step 1: Safely extract the response string\n\t\tconst response = res?.choices[0]?.message?.content ?? '';\n\n\t\t// Step 2: Attempt to fix common JSON format issues like single quotes\n\t\tconst sanitizedResponse = response.replace(/['‘’`]/g, '\"'); // Convert single quotes to double quotes for valid JSON\n\n\t\t// Step 3: Find the relevant JSON block within the response\n\t\tconst jsonStartIndex = sanitizedResponse.indexOf('{');\n\t\tconst jsonEndIndex = sanitizedResponse.lastIndexOf('}');\n\n\t\t// Step 4: Check if we found a valid JSON block (with both `{` and `}`)\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n\t\t\tconst jsonResponse = sanitizedResponse.substring(jsonStartIndex, jsonEndIndex + 1);\n\n\t\t\t// Step 5: Parse the JSON block\n\t\t\tconst parsed = JSON.parse(jsonResponse);\n\n\t\t\t// Step 6: If there's a \"tags\" key, return the tags array; otherwise, return an empty array\n\t\t\tif (parsed && parsed.tags) {\n\t\t\t\treturn Array.isArray(parsed.tags) ? parsed.tags : [];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// If no valid JSON block found, return an empty array\n\t\treturn [];\n\t} catch (e) {\n\t\t// Catch and safely return empty array on any parsing errors\n\t\tconsole.error('Failed to parse response: ', e);\n\t\treturn [];\n\t}\n};\n\nexport const generateEmoji = async (\n\ttoken: string = '',\n\tmodel: string,\n\tprompt: string,\n\tchat_id?: string\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/emoji/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tprompt: prompt,\n\t\t\t...(chat_id && { chat_id: chat_id })\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tconst response = res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? null;\n\n\tif (response) {\n\t\tif (/\\p{Extended_Pictographic}/u.test(response)) {\n\t\t\treturn response.match(/\\p{Extended_Pictographic}/gu)[0];\n\t\t}\n\t}\n\n\treturn null;\n};\n\nexport const generateQueries = async (\n\ttoken: string = '',\n\tmodel: string,\n\tmessages: object[],\n\tprompt: string,\n\ttype?: string = 'web_search'\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/queries/completions`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tmessages: messages,\n\t\t\tprompt: prompt,\n\t\t\ttype: type\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\t// Step 1: Safely extract the response string\n\tconst response = res?.choices[0]?.message?.content ?? '';\n\n\ttry {\n\t\tconst jsonStartIndex = response.indexOf('{');\n\t\tconst jsonEndIndex = response.lastIndexOf('}');\n\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n\t\t\tconst jsonResponse = response.substring(jsonStartIndex, jsonEndIndex + 1);\n\n\t\t\t// Step 5: Parse the JSON block\n\t\t\tconst parsed = JSON.parse(jsonResponse);\n\n\t\t\t// Step 6: If there's a \"queries\" key, return the queries array; otherwise, return an empty array\n\t\t\tif (parsed && parsed.queries) {\n\t\t\t\treturn Array.isArray(parsed.queries) ? parsed.queries : [];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// If no valid JSON block found, return response as is\n\t\treturn [response];\n\t} catch (e) {\n\t\t// Catch and safely return empty array on any parsing errors\n\t\tconsole.error('Failed to parse response: ', e);\n\t\treturn [response];\n\t}\n};\n\nexport const generateAutoCompletion = async (\n\ttoken: string = '',\n\tmodel: string,\n\tprompt: string,\n\tmessages?: object[],\n\ttype: string = 'search query'\n) => {\n\tconst controller = new AbortController();\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/auto/completions`, {\n\t\tsignal: controller.signal,\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tprompt: prompt,\n\t\t\t...(messages && { messages: messages }),\n\t\t\ttype: type,\n\t\t\tstream: false\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tconst response = res?.choices[0]?.message?.content ?? '';\n\n\ttry {\n\t\tconst jsonStartIndex = response.indexOf('{');\n\t\tconst jsonEndIndex = response.lastIndexOf('}');\n\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\n\t\t\tconst jsonResponse = response.substring(jsonStartIndex, jsonEndIndex + 1);\n\n\t\t\t// Step 5: Parse the JSON block\n\t\t\tconst parsed = JSON.parse(jsonResponse);\n\n\t\t\t// Step 6: If there's a \"queries\" key, return the queries array; otherwise, return an empty array\n\t\t\tif (parsed && parsed.text) {\n\t\t\t\treturn parsed.text;\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\t// If no valid JSON block found, return response as is\n\t\treturn response;\n\t} catch (e) {\n\t\t// Catch and safely return empty array on any parsing errors\n\t\tconsole.error('Failed to parse response: ', e);\n\t\treturn response;\n\t}\n};\n\nexport const generateMoACompletion = async (\n\ttoken: string = '',\n\tmodel: string,\n\tprompt: string,\n\tresponses: string[]\n) => {\n\tconst controller = new AbortController();\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/moa/completions`, {\n\t\tsignal: controller.signal,\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodel: model,\n\t\t\tprompt: prompt,\n\t\t\tresponses: responses,\n\t\t\tstream: true\n\t\t})\n\t}).catch((err) => {\n\t\tconsole.log(err);\n\t\terror = err;\n\t\treturn null;\n\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn [res, controller];\n};\n\nexport const getPipelinesList = async (token: string = '') => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/list`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tlet pipelines = res?.data ?? [];\n\treturn pipelines;\n};\n\nexport const uploadPipeline = async (token: string, file: File, urlIdx: string) => {\n\tlet error = null;\n\n\t// Create a new FormData object to handle the file upload\n\tconst formData = new FormData();\n\tformData.append('file', file);\n\tformData.append('urlIdx', urlIdx);\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/upload`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t// 'Content-Type': 'multipart/form-data' is not needed as Fetch API will set it automatically\n\t\t},\n\t\tbody: formData\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const downloadPipeline = async (token: string, url: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/add`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turl: url,\n\t\t\turlIdx: urlIdx\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const deletePipeline = async (token: string, id: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/delete`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tid: id,\n\t\t\turlIdx: urlIdx\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getPipelines = async (token: string, urlIdx?: string) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/?${searchParams.toString()}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\tlet pipelines = res?.data ?? [];\n\treturn pipelines;\n};\n\nexport const getPipelineValves = async (token: string, pipeline_id: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves?${searchParams.toString()}`,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t}\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getPipelineValvesSpec = async (token: string, pipeline_id: string, urlIdx: string) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves/spec?${searchParams.toString()}`,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t}\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updatePipelineValves = async (\n\ttoken: string = '',\n\tpipeline_id: string,\n\tvalves: object,\n\turlIdx: string\n) => {\n\tlet error = null;\n\n\tconst searchParams = new URLSearchParams();\n\tif (urlIdx !== undefined) {\n\t\tsearchParams.append('urlIdx', urlIdx);\n\t}\n\n\tconst res = await fetch(\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves/update?${searchParams.toString()}`,\n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\n\t\t\t},\n\t\t\tbody: JSON.stringify(valves)\n\t\t}\n\t)\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\n\t\t\tif ('detail' in err) {\n\t\t\t\terror = err.detail;\n\t\t\t} else {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getBackendConfig = async () => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config`, {\n\t\tmethod: 'GET',\n\t\tcredentials: 'include',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getChangelog = async () => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/changelog`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getVersionUpdates = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/version/updates`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getModelFilterConfig = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/model/filter`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const updateModelFilterConfig = async (\n\ttoken: string,\n\tenabled: boolean,\n\tmodels: string[]\n) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/model/filter`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tenabled: enabled,\n\t\t\tmodels: models\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getWebhookUrl = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/webhook`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.url;\n};\n\nexport const updateWebhookUrl = async (token: string, url: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/webhook`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turl: url\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.url;\n};\n\nexport const getCommunitySharingEnabledStatus = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/community_sharing`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const toggleCommunitySharingEnabledStatus = async (token: string) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/community_sharing/toggle`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err.detail;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n\nexport const getModelConfig = async (token: string): Promise<GlobalModelConfig> => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/models`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res.models;\n};\n\nexport interface ModelConfig {\n\tid: string;\n\tname: string;\n\tmeta: ModelMeta;\n\tbase_model_id?: string;\n\tparams: ModelParams;\n}\n\nexport interface ModelMeta {\n\tdescription?: string;\n\tcapabilities?: object;\n\tprofile_image_url?: string;\n}\n\nexport interface ModelParams {}\n\nexport type GlobalModelConfig = ModelConfig[];\n\nexport const updateModelConfig = async (token: string, config: GlobalModelConfig) => {\n\tlet error = null;\n\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/models`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tmodels: config\n\t\t})\n\t})\n\t\t.then(async (res) => {\n\t\t\tif (!res.ok) throw await res.json();\n\t\t\treturn res.json();\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\terror = err;\n\t\t\treturn null;\n\t\t});\n\n\tif (error) {\n\t\tthrow error;\n\t}\n\n\treturn res;\n};\n"],"names":["getModels","token","base","error","res","WEBUI_BASE_URL","err","chatCompleted","body","chatAction","action_id","stopTask","id","getTaskConfig","updateTaskConfig","config","generateTags","model","messages","chat_id","sanitizedResponse","_b","_a","jsonStartIndex","jsonEndIndex","jsonResponse","parsed","e","generateEmoji","prompt","response","generateAutoCompletion","type","controller","generateMoACompletion","responses","getPipelinesList","uploadPipeline","file","urlIdx","formData","downloadPipeline","url","deletePipeline","getPipelines","searchParams","getPipelineValves","pipeline_id","getPipelineValvesSpec","updatePipelineValves","valves","getBackendConfig","getChangelog","getVersionUpdates","getWebhookUrl","updateWebhookUrl"],"mappings":"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"}