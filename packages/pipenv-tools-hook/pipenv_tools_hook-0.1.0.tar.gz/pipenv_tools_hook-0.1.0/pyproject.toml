[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pipenv-tools-hook"
version = "0.1.0"
description = "A pre-commit hook for running Python tools in multiple Pipenv environments"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    { name = "Maciej Nachtygal", email = "maciej.nachtygal@gmail.com" },
]
dependencies = [
    "pipenv>=2023.0",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.scripts]
pipenv-tools-hook = "pipenv_tools_hook:main"

[project.urls]
Homepage = "https://github.com/yourusername/pipenv-tools-hook"
Repository = "https://github.com/yourusername/pipenv-tools-hook.git"
Issues = "https://github.com/yourusername/pipenv-tools-hook/issues"

[tool.hatch.build.targets.wheel]
packages = ["pipenv_tools_hook"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "coverage-badge>=1.0.0",
]

[tool.hatch.envs.default.scripts]
test = [
    "pytest tests/ -v --cov=pipenv_tools_hook --cov-report=term-missing --junitxml=junit.xml -o junit_family=legacy",
]

[tool.hatch.envs.lint]
dependencies = [
    "ruff>=0.3.0",
]

[tool.hatch.envs.lint.scripts]
style = [
    "ruff format --check .",
    "ruff check .",
]

[tool.hatch.envs.typecheck]
dependencies = [
    "mypy>=1.8.0",
    "types-setuptools",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[tool.hatch.envs.typecheck.scripts]
check = "mypy pipenv_tools_hook.py tests/test_pipenv_tools_hook.py"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-ra -q --cov=pipenv_tools_hook --cov-report=term-missing"

[tool.coverage.run]
source = ["pipenv_tools_hook"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
]
show_missing = true
fail_under = 80

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "S101",  # Use of assert detected (in tests)
    "S603",  # subprocess call - check for execution of untrusted input
    "S607",  # Starting a process with a partial executable path
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
