# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import alvin_cli.datafakehouse.grpc_generated.datafakehouse_pb2 as datafakehouse__pb2


class DatafakehouseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDbInstance = channel.unary_unary(
                '/datafakehouse.Datafakehouse/CreateDbInstance',
                request_serializer=datafakehouse__pb2.CreateDbInstanceRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.DbInstance.FromString,
                )
        self.RunSQLQuery = channel.unary_unary(
                '/datafakehouse.Datafakehouse/RunSQLQuery',
                request_serializer=datafakehouse__pb2.RunSQLQueryRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.RunSQLQueryResponse.FromString,
                )
        self.ExitDbInstance = channel.unary_unary(
                '/datafakehouse.Datafakehouse/ExitDbInstance',
                request_serializer=datafakehouse__pb2.ExitDbInstanceRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.ExitDbInstanceResponse.FromString,
                )
        self.GetDbInstance = channel.unary_unary(
                '/datafakehouse.Datafakehouse/GetDbInstance',
                request_serializer=datafakehouse__pb2.GetDbInstanceRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.DbInstance.FromString,
                )
        self.CreateCatalog = channel.unary_unary(
                '/datafakehouse.Datafakehouse/CreateCatalog',
                request_serializer=datafakehouse__pb2.CreateCatalogRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.Catalog.FromString,
                )
        self.CreateCatalogFromDbInstance = channel.unary_unary(
                '/datafakehouse.Datafakehouse/CreateCatalogFromDbInstance',
                request_serializer=datafakehouse__pb2.CreateCatalogFromDbInstanceRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.Catalog.FromString,
                )
        self.ListCatalogs = channel.unary_stream(
                '/datafakehouse.Datafakehouse/ListCatalogs',
                request_serializer=datafakehouse__pb2.ListCatalogsRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.Catalog.FromString,
                )
        self.GetCatalog = channel.unary_unary(
                '/datafakehouse.Datafakehouse/GetCatalog',
                request_serializer=datafakehouse__pb2.GetCatalogRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.Catalog.FromString,
                )
        self.DiffCatalogs = channel.unary_unary(
                '/datafakehouse.Datafakehouse/DiffCatalogs',
                request_serializer=datafakehouse__pb2.DiffCatalogsRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.DiffCatalogsResponse.FromString,
                )
        self.SnapshotCatalog = channel.unary_unary(
                '/datafakehouse.Datafakehouse/SnapshotCatalog',
                request_serializer=datafakehouse__pb2.SnapshotCatalogRequest.SerializeToString,
                response_deserializer=datafakehouse__pb2.Catalog.FromString,
                )


class DatafakehouseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateDbInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunSQLQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExitDbInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDbInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCatalog(self, request, context):
        """Create a Catalog when we have all the info required 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCatalogFromDbInstance(self, request, context):
        """Creating from the DbInstance is more involved and the user has more limited data about what is going on 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCatalogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCatalog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiffCatalogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SnapshotCatalog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatafakehouseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDbInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDbInstance,
                    request_deserializer=datafakehouse__pb2.CreateDbInstanceRequest.FromString,
                    response_serializer=datafakehouse__pb2.DbInstance.SerializeToString,
            ),
            'RunSQLQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.RunSQLQuery,
                    request_deserializer=datafakehouse__pb2.RunSQLQueryRequest.FromString,
                    response_serializer=datafakehouse__pb2.RunSQLQueryResponse.SerializeToString,
            ),
            'ExitDbInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.ExitDbInstance,
                    request_deserializer=datafakehouse__pb2.ExitDbInstanceRequest.FromString,
                    response_serializer=datafakehouse__pb2.ExitDbInstanceResponse.SerializeToString,
            ),
            'GetDbInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDbInstance,
                    request_deserializer=datafakehouse__pb2.GetDbInstanceRequest.FromString,
                    response_serializer=datafakehouse__pb2.DbInstance.SerializeToString,
            ),
            'CreateCatalog': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCatalog,
                    request_deserializer=datafakehouse__pb2.CreateCatalogRequest.FromString,
                    response_serializer=datafakehouse__pb2.Catalog.SerializeToString,
            ),
            'CreateCatalogFromDbInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCatalogFromDbInstance,
                    request_deserializer=datafakehouse__pb2.CreateCatalogFromDbInstanceRequest.FromString,
                    response_serializer=datafakehouse__pb2.Catalog.SerializeToString,
            ),
            'ListCatalogs': grpc.unary_stream_rpc_method_handler(
                    servicer.ListCatalogs,
                    request_deserializer=datafakehouse__pb2.ListCatalogsRequest.FromString,
                    response_serializer=datafakehouse__pb2.Catalog.SerializeToString,
            ),
            'GetCatalog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCatalog,
                    request_deserializer=datafakehouse__pb2.GetCatalogRequest.FromString,
                    response_serializer=datafakehouse__pb2.Catalog.SerializeToString,
            ),
            'DiffCatalogs': grpc.unary_unary_rpc_method_handler(
                    servicer.DiffCatalogs,
                    request_deserializer=datafakehouse__pb2.DiffCatalogsRequest.FromString,
                    response_serializer=datafakehouse__pb2.DiffCatalogsResponse.SerializeToString,
            ),
            'SnapshotCatalog': grpc.unary_unary_rpc_method_handler(
                    servicer.SnapshotCatalog,
                    request_deserializer=datafakehouse__pb2.SnapshotCatalogRequest.FromString,
                    response_serializer=datafakehouse__pb2.Catalog.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datafakehouse.Datafakehouse', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Datafakehouse(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateDbInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datafakehouse.Datafakehouse/CreateDbInstance',
            datafakehouse__pb2.CreateDbInstanceRequest.SerializeToString,
            datafakehouse__pb2.DbInstance.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunSQLQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datafakehouse.Datafakehouse/RunSQLQuery',
            datafakehouse__pb2.RunSQLQueryRequest.SerializeToString,
            datafakehouse__pb2.RunSQLQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExitDbInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datafakehouse.Datafakehouse/ExitDbInstance',
            datafakehouse__pb2.ExitDbInstanceRequest.SerializeToString,
            datafakehouse__pb2.ExitDbInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDbInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datafakehouse.Datafakehouse/GetDbInstance',
            datafakehouse__pb2.GetDbInstanceRequest.SerializeToString,
            datafakehouse__pb2.DbInstance.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCatalog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datafakehouse.Datafakehouse/CreateCatalog',
            datafakehouse__pb2.CreateCatalogRequest.SerializeToString,
            datafakehouse__pb2.Catalog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCatalogFromDbInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datafakehouse.Datafakehouse/CreateCatalogFromDbInstance',
            datafakehouse__pb2.CreateCatalogFromDbInstanceRequest.SerializeToString,
            datafakehouse__pb2.Catalog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCatalogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/datafakehouse.Datafakehouse/ListCatalogs',
            datafakehouse__pb2.ListCatalogsRequest.SerializeToString,
            datafakehouse__pb2.Catalog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCatalog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datafakehouse.Datafakehouse/GetCatalog',
            datafakehouse__pb2.GetCatalogRequest.SerializeToString,
            datafakehouse__pb2.Catalog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiffCatalogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datafakehouse.Datafakehouse/DiffCatalogs',
            datafakehouse__pb2.DiffCatalogsRequest.SerializeToString,
            datafakehouse__pb2.DiffCatalogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SnapshotCatalog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datafakehouse.Datafakehouse/SnapshotCatalog',
            datafakehouse__pb2.SnapshotCatalogRequest.SerializeToString,
            datafakehouse__pb2.Catalog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
