workflow:
  rules:
    # Run build, test, format stages if commit is made to main branch
    # Sync and deploymeny stages require additional checks
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_TAG'

default:
  image: python:3.11
  cache:
    paths:
      - .cache/pip
  before_script:
    - python --version
    - pip install --upgrade pip

stages:
  - build
  - test
  - format
  - sync
  - publish

variables:
  PIP_CACHE_DIR: '$CI_PROJECT_DIR/.cache/pip'

build:
  stage: build
  parallel:
    matrix:
      - PYTHON_VERSION: ['3.9', '3.10', '3.11', '3.12']
  image: python:${PYTHON_VERSION}
  script:
    - pip install build
    - python -m build
  artifacts:
    paths:
      - dist/

docs:
  stage: build
  script:
    - pip install sphinx sphinx-rtd-theme
    - pip install -e .
    - cd docs
    - make html
    - mv _build/html/ ../public/
  artifacts:
    paths:
      - public/

test:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ['3.9', '3.10', '3.11', '3.12']
  image: python:${PYTHON_VERSION}
  script:
    - pip install pytest
    - pip install dist/*.whl
    - pytest tests/

lint:
  stage: format
  script:
    - pip install pylint
    - pylint congrads/

sync:
  stage: sync
  script:
    # 0. Install requirements
    - apt-get update && apt-get install -y rsync

    # 1. Set up SSH
    - mkdir -p ~/.ssh
    - echo "$GITHUB_DEPLOY_KEY" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - cat ~/.ssh/id_rsa
    - ssh-add -v ~/.ssh/id_rsa

    # 2. Add GitHub to known hosts
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

    # 3. Configure Git
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"

    # 4. Clone the GitHub repo (without history)
    - git clone git@github.com:ML-KULeuven/congrads.git ~/congrads-github/

    # 5. Install rsync and copy files from GitLab repository to GitHub repo, including hidden files
    - rsync -avh --delete --exclude='.git' --exclude='.gitlab-ci.yml' --exclude='dist' --exclude='public' ./ ~/congrads-github/

    # 6. Stage, commit and tag the files
    - cd ~/congrads-github/
    - git add .
    - git commit -m "Release $CI_COMMIT_TAG"
    - git tag "$CI_COMMIT_TAG"

    # 7. Push to GitHub, creating the main branch if it doesn't exist
    - git push origin main
    - git push origin "$CI_COMMIT_TAG"

  rules:
    # Only sync if commit is tagged
    - if: '$CI_COMMIT_TAG'

publish:
  stage: publish
  script:
    - pip install twine
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
  rules:
    # Only publish if commit is tagged
    - if: '$CI_COMMIT_TAG'
