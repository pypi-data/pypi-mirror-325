[project]
name = "leaguemanager"
version = "0.5.1"
authors = [
  { name="Mario Munoz", email="pythonbynight@gmail.com" },
]
description = "Build and manage sports leagues."
readme = "README.md"
requires-python = ">=3.12"


license-file = ["LICENSE"]

keywords = ["sqlalchemy", "advanced alchemy", "alembic", "sports", "league"]

dependencies = [
    "advanced-alchemy>=0.28.0",
    "aiosqlite>=0.20.0",
    "alembic>=1.14.0",
    "attrs>=24.3.0",
    "svcs>=24.1.0",
    "typer>=0.15.1",
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Typing :: Typed",
]

[project.urls]
"Homepage" = "https://leaguemanager.readthedocs.io/en/latest/"
"Documentation" = "https://leaguemanager.readthedocs.io/en/latest/"
"Source" = "https://codeberg.org/pythonbynight/leaguemanager"
"Issue" = "https://codeberg.org/pythonbynight/leaguemanager/issues"
"Changelog" = "https://codeberg.org/pythonbynight/leaguemanager/releases"

[project.scripts]
mgr = "leaguemanager:cli.app"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.wheel]
packages = ["src/leaguemanager"]

[dependency-groups]
dev = [
    "pytest-asyncio>=0.24.0",
    "pytest>=8.3.3",
    "pytest-mock>=3.14.0",
    "coverage>=7.6.10",
    "leaguemanager",
]
docs = [
    "auto-pytabs[sphinx]>=0.5.0",
    "furo>=2024.8.6",
    "karma-sphinx-theme>=0.0.8",
    "myst-parser>=4.0.0",
    "mystmd>=1.3.20",
    "piccolo-theme>=0.24.0",
    "shibuya>=2024.12.21",
    "sphinx>=8.1.3",
    "sphinx-autobuild>=2024.10.3",
    "sphinx-autodoc-typehints>=3.0.0",
    "sphinx-autodoc2>=0.5.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.6.1",
    "sphinx-togglebutton>=0.3.2",
    "sphinx-toolbox>=3.8.1",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".github",
    ".hg",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "migrations",
    "node_modules",
    "static",
]

# Same as Black.
line-length = 120

# Enable flake8-bugbear (`B`) rules.
select = ["B", "E", "F", "Q", "W"]

src = ["src", "tests"]
target-version = "py312"

# Never enforce `E501` (line length violations).
ignore = ["E501"]

# Disable autofix for unused imports
unfixable = ["F401"]

# Ignore `E402` (import violations) in all `__init__.py` files.
[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
pythonpath = [
  "src"
]
asyncio_default_fixture_loop_scope = "session"
addopts = "--asyncio-mode=strict -s -vv"
asyncio_mode = "auto"

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    ]

ignore_errors = true
