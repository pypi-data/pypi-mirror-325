#--------------------------------------------------------------------------------
# 참조 모듈 목록.
#--------------------------------------------------------------------------------
from __future__ import annotations
from typing import Awaitable, Callable, Final, Generic, Iterable, Iterator, Optional, Sequence, Type, TypeVar, Tuple, Union
from typing import ItemsView, KeysView, ValuesView
from typing import Any, List, Dict, Set
from typing import cast, overload
from ..console.console import Console


#--------------------------------------------------------------------------------
# 전역 상수 목록.
#--------------------------------------------------------------------------------
BASE: str = "base"


# #--------------------------------------------------------------------------------
# # 부모 클래스가 더이상 없는 예외.
# #--------------------------------------------------------------------------------
# class BaseClassException(Exception):
#     """부모 클래스가 더 이상 없을 때 발생하는 예외"""
#     pass


# #--------------------------------------------------------------------------------
# # 베이스 클래스의 메타클래스 (클래스 타입 클래스).
# #--------------------------------------------------------------------------------
# class MetaClass(type):
# 	#--------------------------------------------------------------------------------
# 	# 프록시 클래스.
# 	#--------------------------------------------------------------------------------
# 	class Proxy:
# 		#--------------------------------------------------------------------------------
# 		# 프록시 반환.
# 		# - instance: 현재 클래스의 인스턴스.
# 		# - classType: 현재 클래스.
# 		# - 내부적으로 파이썬의 MRO 에 의해 계층구조가 관리되므로 다이아몬드 상속이던 뭐든 관계 없음.
# 		#--------------------------------------------------------------------------------
# 		def __get__(thisInstance, instance: Any, classType: Any):
# 			methodResolutionOrder = super(thisClassType, instance)
# 			if isinstance(methodResolutionOrder, classType):
# 				raise BaseClassException(f"Inheritance chain has reached its terminus in {classType.__name__}.")
# 			return methodResolutionOrder


# 	#--------------------------------------------------------------------------------
# 	# 클래스 생성됨.
# 	#--------------------------------------------------------------------------------
# 	def __new__(cls, name, bases, dct) -> MetaClass:
# 		dct[BASE] = MetaClass.Proxy()
# 		return super().__new__(cls, name, bases, dct)


# #--------------------------------------------------------------------------------
# # 기본 클래스.
# #--------------------------------------------------------------------------------
# class BaseClass(metaclass = MetaClass):
# 	pass


#--------------------------------------------------------------------------------
# 기본 클래스.
#--------------------------------------------------------------------------------
class BaseClass(object):
	pass