# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from tetherhelix_grpc import transaction_pb2 as tetherhelix__grpc_dot_transaction__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tetherhelix_grpc/transaction_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TransactionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCurrentTransactions = channel.unary_unary(
                '/tetherhelix_grpc.Transaction/GetCurrentTransactions',
                request_serializer=tetherhelix__grpc_dot_transaction__pb2.TransactionRequest.SerializeToString,
                response_deserializer=tetherhelix__grpc_dot_transaction__pb2.TransactionsResponse.FromString,
                _registered_method=True)
        self.GetPastTransactions = channel.unary_unary(
                '/tetherhelix_grpc.Transaction/GetPastTransactions',
                request_serializer=tetherhelix__grpc_dot_transaction__pb2.ScopedTransactionRequest.SerializeToString,
                response_deserializer=tetherhelix__grpc_dot_transaction__pb2.TransactionsResponse.FromString,
                _registered_method=True)
        self.BidPlaced = channel.unary_unary(
                '/tetherhelix_grpc.Transaction/BidPlaced',
                request_serializer=tetherhelix__grpc_dot_transaction__pb2.BidPlaceRequest.SerializeToString,
                response_deserializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
                _registered_method=True)
        self.BidFilled = channel.unary_unary(
                '/tetherhelix_grpc.Transaction/BidFilled',
                request_serializer=tetherhelix__grpc_dot_transaction__pb2.BidFillRequest.SerializeToString,
                response_deserializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
                _registered_method=True)
        self.AskPlaced = channel.unary_unary(
                '/tetherhelix_grpc.Transaction/AskPlaced',
                request_serializer=tetherhelix__grpc_dot_transaction__pb2.AskPlaceRequest.SerializeToString,
                response_deserializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
                _registered_method=True)
        self.AskFilled = channel.unary_unary(
                '/tetherhelix_grpc.Transaction/AskFilled',
                request_serializer=tetherhelix__grpc_dot_transaction__pb2.AskFillRequest.SerializeToString,
                response_deserializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
                _registered_method=True)
        self.OrderFailedAfterBidPlaced = channel.unary_unary(
                '/tetherhelix_grpc.Transaction/OrderFailedAfterBidPlaced',
                request_serializer=tetherhelix__grpc_dot_transaction__pb2.UuidRequest.SerializeToString,
                response_deserializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
                _registered_method=True)
        self.OrderFailedAfterAskPlaced = channel.unary_unary(
                '/tetherhelix_grpc.Transaction/OrderFailedAfterAskPlaced',
                request_serializer=tetherhelix__grpc_dot_transaction__pb2.UuidRequest.SerializeToString,
                response_deserializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
                _registered_method=True)


class TransactionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCurrentTransactions(self, request, context):
        """1. 현재 보유 포지션 조회 bot 및 front가 둘다 요청 가능 (단일 요청-응답)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPastTransactions(self, request, context):
        """2. 과거 포지션 내역 조회 (단일 요청-응답)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidPlaced(self, request, context):
        """3. bot에서 기존에 불렀던 함수들 재추가
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidFilled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskPlaced(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskFilled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderFailedAfterBidPlaced(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderFailedAfterAskPlaced(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCurrentTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentTransactions,
                    request_deserializer=tetherhelix__grpc_dot_transaction__pb2.TransactionRequest.FromString,
                    response_serializer=tetherhelix__grpc_dot_transaction__pb2.TransactionsResponse.SerializeToString,
            ),
            'GetPastTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPastTransactions,
                    request_deserializer=tetherhelix__grpc_dot_transaction__pb2.ScopedTransactionRequest.FromString,
                    response_serializer=tetherhelix__grpc_dot_transaction__pb2.TransactionsResponse.SerializeToString,
            ),
            'BidPlaced': grpc.unary_unary_rpc_method_handler(
                    servicer.BidPlaced,
                    request_deserializer=tetherhelix__grpc_dot_transaction__pb2.BidPlaceRequest.FromString,
                    response_serializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.SerializeToString,
            ),
            'BidFilled': grpc.unary_unary_rpc_method_handler(
                    servicer.BidFilled,
                    request_deserializer=tetherhelix__grpc_dot_transaction__pb2.BidFillRequest.FromString,
                    response_serializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.SerializeToString,
            ),
            'AskPlaced': grpc.unary_unary_rpc_method_handler(
                    servicer.AskPlaced,
                    request_deserializer=tetherhelix__grpc_dot_transaction__pb2.AskPlaceRequest.FromString,
                    response_serializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.SerializeToString,
            ),
            'AskFilled': grpc.unary_unary_rpc_method_handler(
                    servicer.AskFilled,
                    request_deserializer=tetherhelix__grpc_dot_transaction__pb2.AskFillRequest.FromString,
                    response_serializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.SerializeToString,
            ),
            'OrderFailedAfterBidPlaced': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderFailedAfterBidPlaced,
                    request_deserializer=tetherhelix__grpc_dot_transaction__pb2.UuidRequest.FromString,
                    response_serializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.SerializeToString,
            ),
            'OrderFailedAfterAskPlaced': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderFailedAfterAskPlaced,
                    request_deserializer=tetherhelix__grpc_dot_transaction__pb2.UuidRequest.FromString,
                    response_serializer=tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tetherhelix_grpc.Transaction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tetherhelix_grpc.Transaction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Transaction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCurrentTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tetherhelix_grpc.Transaction/GetCurrentTransactions',
            tetherhelix__grpc_dot_transaction__pb2.TransactionRequest.SerializeToString,
            tetherhelix__grpc_dot_transaction__pb2.TransactionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPastTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tetherhelix_grpc.Transaction/GetPastTransactions',
            tetherhelix__grpc_dot_transaction__pb2.ScopedTransactionRequest.SerializeToString,
            tetherhelix__grpc_dot_transaction__pb2.TransactionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BidPlaced(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tetherhelix_grpc.Transaction/BidPlaced',
            tetherhelix__grpc_dot_transaction__pb2.BidPlaceRequest.SerializeToString,
            tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BidFilled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tetherhelix_grpc.Transaction/BidFilled',
            tetherhelix__grpc_dot_transaction__pb2.BidFillRequest.SerializeToString,
            tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AskPlaced(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tetherhelix_grpc.Transaction/AskPlaced',
            tetherhelix__grpc_dot_transaction__pb2.AskPlaceRequest.SerializeToString,
            tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AskFilled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tetherhelix_grpc.Transaction/AskFilled',
            tetherhelix__grpc_dot_transaction__pb2.AskFillRequest.SerializeToString,
            tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OrderFailedAfterBidPlaced(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tetherhelix_grpc.Transaction/OrderFailedAfterBidPlaced',
            tetherhelix__grpc_dot_transaction__pb2.UuidRequest.SerializeToString,
            tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OrderFailedAfterAskPlaced(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tetherhelix_grpc.Transaction/OrderFailedAfterAskPlaced',
            tetherhelix__grpc_dot_transaction__pb2.UuidRequest.SerializeToString,
            tetherhelix__grpc_dot_transaction__pb2.DBCommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
