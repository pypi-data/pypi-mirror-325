# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatflow

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BroadcastResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BroadcastResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBroadcastResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BroadcastResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BroadcastResponse
    def Indices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # BroadcastResponse
    def IndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # BroadcastResponse
    def IndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BroadcastResponse
    def IndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # BroadcastResponse
    def Converged(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def BroadcastResponseStart(builder):
    builder.StartObject(2)

def Start(builder):
    BroadcastResponseStart(builder)

def BroadcastResponseAddIndices(builder, indices):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)

def AddIndices(builder, indices):
    BroadcastResponseAddIndices(builder, indices)

def BroadcastResponseStartIndicesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartIndicesVector(builder, numElems):
    return BroadcastResponseStartIndicesVector(builder, numElems)

def BroadcastResponseAddConverged(builder, converged):
    builder.PrependBoolSlot(1, converged, 0)

def AddConverged(builder, converged):
    BroadcastResponseAddConverged(builder, converged)

def BroadcastResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return BroadcastResponseEnd(builder)
