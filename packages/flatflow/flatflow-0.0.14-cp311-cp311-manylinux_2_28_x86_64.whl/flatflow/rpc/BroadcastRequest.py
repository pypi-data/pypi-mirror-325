# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatflow

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BroadcastRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BroadcastRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBroadcastRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BroadcastRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BroadcastRequest
    def Epoch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # BroadcastRequest
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # BroadcastRequest
    def Costs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # BroadcastRequest
    def CostsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # BroadcastRequest
    def CostsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BroadcastRequest
    def CostsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def BroadcastRequestStart(builder):
    builder.StartObject(3)

def Start(builder):
    BroadcastRequestStart(builder)

def BroadcastRequestAddEpoch(builder, epoch):
    builder.PrependUint64Slot(0, epoch, 0)

def AddEpoch(builder, epoch):
    BroadcastRequestAddEpoch(builder, epoch)

def BroadcastRequestAddRank(builder, rank):
    builder.PrependUint64Slot(1, rank, 0)

def AddRank(builder, rank):
    BroadcastRequestAddRank(builder, rank)

def BroadcastRequestAddCosts(builder, costs):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(costs), 0)

def AddCosts(builder, costs):
    BroadcastRequestAddCosts(builder, costs)

def BroadcastRequestStartCostsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartCostsVector(builder, numElems):
    return BroadcastRequestStartCostsVector(builder, numElems)

def BroadcastRequestEnd(builder):
    return builder.EndObject()

def End(builder):
    return BroadcastRequestEnd(builder)
