# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatflow

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InitRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InitRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInitRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InitRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InitRequest
    def GlobalBatchSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InitRequest
    def HiddenSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InitRequest
    def MicroBatchSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InitRequest
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InitRequest
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InitRequest
    def Seed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InitRequest
    def Sizes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # InitRequest
    def SizesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # InitRequest
    def SizesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InitRequest
    def SizesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # InitRequest
    def Heterogeneous(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # InitRequest
    def UseFlatShuffle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def InitRequestStart(builder):
    builder.StartObject(9)

def Start(builder):
    InitRequestStart(builder)

def InitRequestAddGlobalBatchSize(builder, globalBatchSize):
    builder.PrependUint64Slot(0, globalBatchSize, 0)

def AddGlobalBatchSize(builder, globalBatchSize):
    InitRequestAddGlobalBatchSize(builder, globalBatchSize)

def InitRequestAddHiddenSize(builder, hiddenSize):
    builder.PrependUint64Slot(1, hiddenSize, 0)

def AddHiddenSize(builder, hiddenSize):
    InitRequestAddHiddenSize(builder, hiddenSize)

def InitRequestAddMicroBatchSize(builder, microBatchSize):
    builder.PrependUint64Slot(2, microBatchSize, 0)

def AddMicroBatchSize(builder, microBatchSize):
    InitRequestAddMicroBatchSize(builder, microBatchSize)

def InitRequestAddOrder(builder, order):
    builder.PrependUint64Slot(3, order, 0)

def AddOrder(builder, order):
    InitRequestAddOrder(builder, order)

def InitRequestAddRank(builder, rank):
    builder.PrependUint64Slot(4, rank, 0)

def AddRank(builder, rank):
    InitRequestAddRank(builder, rank)

def InitRequestAddSeed(builder, seed):
    builder.PrependUint64Slot(5, seed, 0)

def AddSeed(builder, seed):
    InitRequestAddSeed(builder, seed)

def InitRequestAddSizes(builder, sizes):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(sizes), 0)

def AddSizes(builder, sizes):
    InitRequestAddSizes(builder, sizes)

def InitRequestStartSizesVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartSizesVector(builder, numElems):
    return InitRequestStartSizesVector(builder, numElems)

def InitRequestAddHeterogeneous(builder, heterogeneous):
    builder.PrependBoolSlot(7, heterogeneous, 0)

def AddHeterogeneous(builder, heterogeneous):
    InitRequestAddHeterogeneous(builder, heterogeneous)

def InitRequestAddUseFlatShuffle(builder, useFlatShuffle):
    builder.PrependBoolSlot(8, useFlatShuffle, 0)

def AddUseFlatShuffle(builder, useFlatShuffle):
    InitRequestAddUseFlatShuffle(builder, useFlatShuffle)

def InitRequestEnd(builder):
    return builder.EndObject()

def End(builder):
    return InitRequestEnd(builder)
