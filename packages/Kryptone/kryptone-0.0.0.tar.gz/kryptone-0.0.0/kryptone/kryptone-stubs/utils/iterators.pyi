import itertools
from functools import cached_property
from typing import DefaultDict, Generator, List, Literal, Union

def drop_null(
    items, 
    remove_empty_strings: bool = ...
) -> Generator[str, None, None]: ...


def keep_while(predicate, items) -> Generator[str, None, None]: ...


def drop_while(predicate, items) -> Generator[str, None, None]: ...


def group_by(predicate, items) -> tuple[List[str, int], List[str, int]]: ...


def iterate_chunks(
    items: Union[list, tuple], n: int) -> Generator[itertools.chain, None, None]: ...


class CombinedIterators:
    iterators: List[JPEGImagesIterator, EcommercePageImagesIterator] = ...

    def __init__(self, *iterators): ...
    def __repr__(self) -> str: ...
    def __iter__(self) -> str: ...

    def __add__(
        self,
        obj: Union[JPEGImagesIterator, EcommercePageImagesIterator]
    ) -> CombinedIterators: ...

    @cached_property
    def urls(self) -> List[str]: ...

    @cached_property
    def classified_images(self) -> List[List[str]]: ...
    @cached_property
    def as_dict(self) -> dict: ...
    @cached_property
    def as_csv(self) -> List: ...


class PageImagesIterator:
    images_list_filter: list = ...
    urls: list = ...
    page_url: str = ...
    extensions: set = ...
    _cached_images: list = ...

    def __init__(self, current_url: str, image_elements) -> None: ...
    def __repr__(self) -> str: ...
    def __iter__(self) -> Generator[str, None, None]: ...
    def __len__(self) -> int: ...

    def __add__(
        self,
        obj: Union[JPEGImagesIterator, EcommercePageImagesIterator]
    ) -> CombinedIterators: ...

    @cached_property
    def urls(self) -> List[int]: ...
    @cached_property
    def classified_images(self) -> DefaultDict: ...
    @cached_property
    def as_dict(self) -> dict: ...
    @cached_property
    def as_csv(self) -> list: ...


class JPEGImagesIterator(PageImagesIterator):
    ...


class EcommercePageImagesIterator(JPEGImagesIterator):
    ...


class AsyncIterator:
    data: Union[list, tuple] = ...
    by: int = ...

    def __init__(self, data: Union[list, tuple], by: int = Literal[10]): ...
    def __alen__(self) -> int: ...
    def __aiter__(self) -> Generator[list, None, None]: ...
