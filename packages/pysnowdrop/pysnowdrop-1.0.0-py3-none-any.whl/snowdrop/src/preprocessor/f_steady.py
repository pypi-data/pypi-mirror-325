from numba import njit
    
@njit
def f_steady(x,p,exog=[0]):
    
    ### This code was generated by Python.
    ### Eichenbaum, Rebelo and Trabandt Model with Resistant Virus Strain.
    
    from sympy import DiracDelta
    from snowdrop.src.preprocessor.condition import IfThenElse,IfThen,Derivative,Subs,Positive,Negative,myzif
    from snowdrop.src.preprocessor.functions import Heaviside

    import numpy as np
    from numpy import log,exp,sin,cos,tan,sqrt,sign
    from numpy import maximum as Max, minimum as Min, abs as Abs
    
    # Initialize variables
    y__ = x[0]
    k__ = x[1]
    n__ = x[2]
    w__ = x[3]
    rk__ = x[4]
    x__ = x[5]
    c__ = x[6]
    s1__ = x[8]
    s2__ = x[9]
    i__ = x[10]
    i1__ = x[11]
    i2__ = x[12]
    r__ = x[13]
    r1__ = x[14]
    r2__ = x[15]
    v__ = x[16]
    ns__ = x[17]
    ni__ = x[18]
    nr__ = x[19]
    cs__ = x[20]
    ci__ = x[21]
    cr__ = x[22]
    tau__ = x[23]
    tau1__ = x[24]
    tau2__ = x[25]
    lambtilde__ = x[26]
    lamtau__ = x[27]
    lami__ = x[28]
    lams__ = x[29]
    lamr__ = x[30]
    Rb__ = x[33]
    pie__ = x[34]
    mc__ = x[35]
    F__ = x[36]
    Kf__ = x[37]
    rr__ = x[38]
    pbreve__ = x[39]
    yF__ = x[40]
    kF__ = x[41]
    nF__ = x[42]
    wF__ = x[43]
    rkF__ = x[44]
    xF__ = x[45]
    cF__ = x[46]
    sF1__ = x[48]
    sF2__ = x[49]
    iF__ = x[50]
    iF1__ = x[51]
    iF2__ = x[52]
    rF__ = x[53]
    rF1__ = x[54]
    rF2__ = x[55]
    vF__ = x[56]
    nsF__ = x[57]
    niF__ = x[58]
    nrF__ = x[59]
    csF__ = x[60]
    ciF__ = x[61]
    crF__ = x[62]
    tauF__ = x[63]
    tauF1__ = x[64]
    tauF2__ = x[65]
    lambtildeF__ = x[66]
    lamtauF__ = x[67]
    lamiF__ = x[68]
    lamsF__ = x[69]
    lamrF__ = x[70]
    RbF__ = x[73]
    pieF__ = x[74]
    mcF__ = x[75]
    FF__ = x[76]
    KfF__ = x[77]
    rrF__ = x[78]
    pbreveF__ = x[79]
    ei1__ = x[80]
    ei2__ = x[81]
    ed__ = x[82]


    # Set parameters
    xi = p[0]
    rpi = p[1]
    rx = p[2]
    gam = p[3]
    pi1 = p[4]
    pi2 = p[5]
    pi3 = p[6]
    mult = p[7]
    mult2 = p[8]
    pir = p[9]
    pid = p[10]
    betta = p[11]
    i_ini = p[12]
    d_ini = p[13]
    A = p[14]
    theta = p[15]
    alfa = p[16]
    inc_target = p[17]
    n_target = p[18]
    delta = p[19]
    g_ss = p[20]
    eta = p[21]
    xi_flex = p[22]
    pie_ss = p[23]
    rr_ss = p[24]
    Rb_ss = p[25]
    lockdown_policy = p[26]
    sigma = p[27]
    theta_lockdown = p[28]
    vaccination_policy = p[29]
    vaccination_rate = p[30]
    virus_resistant_strain = p[31]
    virus_variant_start = p[32]
    ex = p[33]

    # Function:

    function = list()
    function.append(-A*k__**(1 - alfa)*n__**alfa*pbreve__ + y__)
    function.append(mc__ - rk__**(1 - alfa)*w__**alfa*(1 - alfa)**(alfa - 1)/(A*alfa**alfa))
    function.append(-A*alfa*k__**(1 - alfa)*mc__*n__**(alfa - 1) + w__)
    function.append(-k__*(1 - delta) + k__ - x__)
    function.append(-c__ - g_ss - x__ + y__)
    function.append(-i1__*ni__ + n__ - nr__*r1__ - ns__*s1__)
    function.append(c__ - ci__*i1__ - cr__*r1__ - cs__*s1__)
    function.append(tau1__ - (-lockdown_policy*theta_lockdown + 1)**2*(ci__*cs__*i1__*pi1*s1__ + i1__*ni__*ns__*pi2*s1__ + i1__*pi3*s1__))
    function.append(tau2__ - virus_resistant_strain*(-lockdown_policy*theta_lockdown + 1)**2*(ci__*cs__*i2__*pi1*s2__ + i2__*mult*pi3*s2__ + i2__*ni__*ns__*pi2*s2__))
    function.append(-tau1__ - tau2__ + tau__)
    function.append(tau1__ + v__)
    function.append(tau2__)
    function.append(tau__ + v__)
    function.append(-ei1__ + i1__*(pid + pir) - tau1__)
    function.append(-ei2__ - virus_resistant_strain*(-i2__*(pir + pid/mult2) + tau2__))
    function.append(-ex*i2__ - i1__ + i__)
    function.append(-i1__*pir - v__)
    function.append(-i2__*pir)
    function.append(-r1__ - r2__ + r__)
    function.append(-s1__*vaccination_rate + v__)
    function.append(-ed__ - i1__*pid - i2__*pid/mult2)
    function.append(i1__*pid + i2__*pid/mult2)
    function.append(ci__*i__*lamtau__*pi1 - lambtilde__ + 1/cs__)
    function.append(-lambtilde__ + 1/ci__)
    function.append(-lambtilde__ + 1/cr__)
    function.append(ns__*theta - (-lockdown_policy*theta_lockdown + 1)*(i__*lamtau__*ni__*pi2 + lambtilde__*w__))
    function.append(-lambtilde__*w__*(-lockdown_policy*theta_lockdown + 1) + ni__*theta)
    function.append(-lambtilde__*w__ + nr__*theta)
    function.append(-betta*lambtilde__*(-delta + rk__ + 1) + lambtilde__)
    function.append(lami__ - lams__ - lamtau__)
    function.append(lambtilde__*(-cs__ + ns__*w__) + lams__ + lamtau__*(ci__*cs__*i__*pi1 + i__*ni__*ns__*pi2 + i__*pi3) - ns__**2*theta/2 + log(cs__) - lams__/betta)
    function.append(lambtilde__*(-ci__ + ni__*w__) + lami__*(-pid - pir + 1) + lamr__*pir - ni__**2*theta/2 + log(ci__) - lami__/betta)
    function.append(lambtilde__*(-cr__ + nr__*w__) + lamr__ - nr__**2*theta/2 + log(cr__) - lamr__/betta)
    function.append(-Rb__*betta*lambtilde__/pie__ + lambtilde__)
    function.append(-Rb__/pie__ + rr__)
    function.append(-Kf__*betta*pie__**(gam/(gam - 1))*xi + Kf__ - gam*lambtilde__*mc__*y__)
    function.append(-F__*betta*pie__**(1/(gam - 1))*xi + F__ - lambtilde__*y__)
    function.append(-F__*((-pie__**(1/(gam - 1))*xi + 1)/(1 - xi))**(1 - gam) + Kf__)
    function.append(-((-pie__**(1/(gam - 1))*xi + 1)/(1 - xi))**gam*(1 - xi) - pie__**(gam/(gam - 1))*xi/pbreve__ + 1/pbreve__)
    function.append(Rb__ - rpi*log(pie__/pie_ss) - rr_ss - rx*log(y__/yF__))
    function.append(-A*kF__**(1 - alfa)*nF__**alfa*pbreveF__ + yF__)
    function.append(mcF__ - rkF__**(1 - alfa)*wF__**alfa*(1 - alfa)**(alfa - 1)/(A*alfa**alfa))
    function.append(-A*alfa*kF__**(1 - alfa)*mcF__*nF__**(alfa - 1) + wF__)
    function.append(-kF__*(1 - delta) + kF__ - xF__)
    function.append(-cF__ - g_ss - xF__ + yF__)
    function.append(-iF1__*niF__ + nF__ - nrF__*rF1__ - nsF__*sF1__)
    function.append(cF__ - ciF__*iF1__ - crF__*rF1__ - csF__*sF1__)
    function.append(tauF1__ - (-lockdown_policy*theta_lockdown + 1)**2*(ciF__*csF__*iF1__*pi1*sF1__ + iF1__*niF__*nsF__*pi2*sF1__ + iF1__*pi3*sF1__))
    function.append(tauF2__ - virus_resistant_strain*(-lockdown_policy*theta_lockdown + 1)**2*(ciF__*csF__*iF2__*pi1*sF2__ + iF2__*mult*pi3*sF2__ + iF2__*niF__*nsF__*pi2*sF2__))
    function.append(-tauF1__ - tauF2__ + tauF__)
    function.append(tauF1__ + vF__)
    function.append(tauF2__)
    function.append(tauF__ + vF__)
    function.append(-ei1__ + iF1__*(pid + pir) - tauF1__)
    function.append(-ei2__ - virus_resistant_strain*(-iF2__*(pir + pid/mult2) + tauF2__))
    function.append(-ex*iF2__ - iF1__ + iF__)
    function.append(-iF1__*pir - vF__)
    function.append(-iF2__*pir)
    function.append(-rF1__ - rF2__ + rF__)
    function.append(-sF1__*vaccination_rate + vF__)
    function.append(-ed__ - iF1__*pid - iF2__*pid/mult2)
    function.append(iF1__*pid + iF2__*pid/mult2)
    function.append(ciF__*iF__*lamtauF__*pi1 - lambtildeF__ + 1/csF__)
    function.append(-lambtildeF__ + 1/ciF__)
    function.append(-lambtildeF__ + 1/crF__)
    function.append(nsF__*theta - (-lockdown_policy*theta_lockdown + 1)*(iF__*lamtauF__*niF__*pi2 + lambtildeF__*wF__))
    function.append(-lambtildeF__*wF__*(-lockdown_policy*theta_lockdown + 1) + niF__*theta)
    function.append(-lambtildeF__*wF__ + nrF__*theta)
    function.append(-betta*lambtildeF__*(-delta + rkF__ + 1) + lambtildeF__)
    function.append(lamiF__ - lamsF__ - lamtauF__)
    function.append(lambtildeF__*(-csF__ + nsF__*wF__) + lamsF__ + lamtauF__*(ciF__*csF__*iF__*pi1 + iF__*niF__*nsF__*pi2 + iF__*pi3) - nsF__**2*theta/2 + log(csF__) - lamsF__/betta)
    function.append(lambtildeF__*(-ciF__ + niF__*wF__) + lamiF__*(-pid - pir + 1) + lamrF__*pir - niF__**2*theta/2 + log(ciF__) - lamiF__/betta)
    function.append(lambtildeF__*(-crF__ + nrF__*wF__) + lamrF__ - nrF__**2*theta/2 + log(crF__) - lamrF__/betta)
    function.append(-RbF__*betta*lambtildeF__/pieF__ + lambtildeF__)
    function.append(-RbF__/pieF__ + rrF__)
    function.append(-KfF__*betta*pieF__**(gam/(gam - 1))*xi_flex + KfF__ - gam*lambtildeF__*mcF__*yF__)
    function.append(-FF__*betta*pieF__**(1/(gam - 1))*xi_flex + FF__ - lambtildeF__*yF__)
    function.append(-FF__*((-pieF__**(1/(gam - 1))*xi_flex + 1)/(1 - xi_flex))**(1 - gam) + KfF__)
    function.append(-((-pieF__**(1/(gam - 1))*xi_flex + 1)/(1 - xi_flex))**gam*(1 - xi_flex) - pieF__**(gam/(gam - 1))*xi_flex/pbreveF__ + 1/pbreveF__)
    function.append(RbF__ - Rb_ss - rpi*log(pieF__/pie_ss))

    return np.array(function)
