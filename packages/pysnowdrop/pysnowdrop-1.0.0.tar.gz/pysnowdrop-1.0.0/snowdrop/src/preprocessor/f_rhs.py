from numba import njit
    
@njit
def f_rhs(x, p, exog=[0], order=0, ind=None):
        
    ### This code was generated by Python.
    ### Eichenbaum, Rebelo and Trabandt Model with Resistant Virus Strain.
    
    # First order derivatives are employed in most of the models to compute Jacobian.
    # Higher order derivatives are used in nonlinear rational expectations models.
    
    from scipy.special import lambertw as LambertW
    from snowdrop.src.preprocessor.functions import Heaviside,Max,Min,Abs,DiracDelta
    from snowdrop.src.preprocessor.condition import IfThenElse,IfThen,Derivative,Subs,Positive,Negative,myzif

    import numpy as np
    from numpy import exp, sin, cos, tan, sqrt, sign, log
        
    # Initialize variables
    _xi_1 = 0 
    _xi_2 = 0 
    _xi_3 = 0 
    w__p1_ = x[3]
    rk__p1_ = x[4]
    ns__p1_ = x[17]
    ni__p1_ = x[18]
    nr__p1_ = x[19]
    cs__p1_ = x[20]
    ci__p1_ = x[21]
    cr__p1_ = x[22]
    lambtilde__p1_ = x[26]
    lamtau__p1_ = x[27]
    lami__p1_ = x[28]
    lams__p1_ = x[29]
    lamr__p1_ = x[30]
    pie__p1_ = x[34]
    F__p1_ = x[36]
    Kf__p1_ = x[37]
    wF__p1_ = x[43]
    rkF__p1_ = x[44]
    nsF__p1_ = x[57]
    niF__p1_ = x[58]
    nrF__p1_ = x[59]
    csF__p1_ = x[60]
    ciF__p1_ = x[61]
    crF__p1_ = x[62]
    lambtildeF__p1_ = x[66]
    lamtauF__p1_ = x[67]
    lamsF__p1_ = x[69]
    lamrF__p1_ = x[70]
    pieF__p1_ = x[74]
    FF__p1_ = x[76]
    KfF__p1_ = x[77]
    y__ = x[80]
    n__ = x[82]
    w__ = x[83]
    rk__ = x[84]
    x__ = x[85]
    c__ = x[86]
    i__ = x[90]
    i1__ = x[91]
    i2__ = x[92]
    r1__ = x[94]
    r2__ = x[95]
    v__ = x[96]
    ns__ = x[97]
    ni__ = x[98]
    nr__ = x[99]
    cs__ = x[100]
    ci__ = x[101]
    cr__ = x[102]
    tau__ = x[103]
    tau1__ = x[104]
    tau2__ = x[105]
    lambtilde__ = x[106]
    lamtau__ = x[107]
    lami__ = x[108]
    lams__ = x[109]
    lamr__ = x[110]
    Rb__ = x[113]
    pie__ = x[114]
    mc__ = x[115]
    F__ = x[116]
    pbreve__ = x[119]
    yF__ = x[120]
    nF__ = x[122]
    wF__ = x[123]
    rkF__ = x[124]
    xF__ = x[125]
    cF__ = x[126]
    iF__ = x[130]
    iF1__ = x[131]
    iF2__ = x[132]
    rF1__ = x[134]
    rF2__ = x[135]
    vF__ = x[136]
    nsF__ = x[137]
    niF__ = x[138]
    nrF__ = x[139]
    csF__ = x[140]
    ciF__ = x[141]
    crF__ = x[142]
    tauF__ = x[143]
    tauF1__ = x[144]
    tauF2__ = x[145]
    lambtildeF__ = x[146]
    lamtauF__ = x[147]
    lamiF__ = x[148]
    lamsF__ = x[149]
    lamrF__ = x[150]
    RbF__ = x[153]
    pieF__ = x[154]
    mcF__ = x[155]
    FF__ = x[156]
    pbreveF__ = x[159]
    k__m1_ = x[161]
    s__m1_ = x[167]
    s1__m1_ = x[168]
    s2__m1_ = x[169]
    i__m1_ = x[170]
    i1__m1_ = x[171]
    i2__m1_ = x[172]
    r1__m1_ = x[174]
    r2__m1_ = x[175]
    dd__m1_ = x[191]
    pop__m1_ = x[192]
    pbreve__m1_ = x[199]
    kF__m1_ = x[201]
    sF__m1_ = x[207]
    sF1__m1_ = x[208]
    sF2__m1_ = x[209]
    iF__m1_ = x[210]
    iF1__m1_ = x[211]
    iF2__m1_ = x[212]
    rF1__m1_ = x[214]
    rF2__m1_ = x[215]
    ddF__m1_ = x[231]
    popF__m1_ = x[232]
    pbreveF__m1_ = x[239]
    ei1__ = x[240]
    ei2__ = x[241]
    ed__ = x[242]

    # Set parameters
    xi = p[0]
    rpi = p[1]
    rx = p[2]
    gam = p[3]
    pi1 = p[4]
    pi2 = p[5]
    pi3 = p[6]
    mult = p[7]
    mult2 = p[8]
    pir = p[9]
    pid = p[10]
    betta = p[11]
    i_ini = p[12]
    d_ini = p[13]
    A = p[14]
    theta = p[15]
    alfa = p[16]
    inc_target = p[17]
    n_target = p[18]
    delta = p[19]
    g_ss = p[20]
    eta = p[21]
    xi_flex = p[22]
    pie_ss = p[23]
    rr_ss = p[24]
    Rb_ss = p[25]
    lockdown_policy = p[26]
    sigma = p[27]
    theta_lockdown = p[28]
    vaccination_policy = p[29]
    vaccination_rate = p[30]
    virus_resistant_strain = p[31]
    virus_variant_start = p[32]
    ex = p[33]

    # Function:
    function = np.zeros(80)
    function[0] = A*k__m1_**(1 - alfa)*n__**alfa*pbreve__
    function[1] = rk__**(1 - alfa)*w__**alfa*(1 - alfa)**(alfa - 1)/(A*alfa**alfa)
    function[2] = A*alfa*k__m1_**(1 - alfa)*mc__*n__**(alfa - 1)
    function[3] = k__m1_*(1 - delta) + x__
    function[4] = c__ + g_ss + x__
    function[5] = i1__m1_*ni__ + nr__*r1__m1_ + ns__*s1__m1_
    function[6] = ci__*i1__m1_ + cr__*r1__m1_ + cs__*s1__m1_
    function[7] = (-lockdown_policy*theta_lockdown + 1)**2*(ci__*cs__*i1__m1_*pi1*s1__m1_ + i1__m1_*ni__*ns__*pi2*s1__m1_ + i1__m1_*pi3*s1__m1_)
    function[8] = virus_resistant_strain*(-lockdown_policy*theta_lockdown + 1)**2*(ci__*cs__*i2__m1_*pi1*s2__m1_ + i2__m1_*mult*pi3*s2__m1_ + i2__m1_*ni__*ns__*pi2*s2__m1_)
    function[9] = tau1__ + tau2__
    function[10] = s1__m1_ - tau1__ - v__
    function[11] = s2__m1_ - tau2__
    function[12] = s__m1_ - tau__ - v__
    function[13] = ei1__ - i1__m1_*(pid + pir) + i1__m1_ + tau1__
    function[14] = ei2__ + i2__m1_ + virus_resistant_strain*(-i2__m1_*(pir + pid/mult2) + tau2__)
    function[15] = ex*i2__ + i1__
    function[16] = i1__m1_*pir + r1__m1_ + v__
    function[17] = i2__m1_*pir + r2__m1_
    function[18] = r1__ + r2__
    function[19] = s1__m1_*vaccination_rate
    function[20] = dd__m1_ + ed__ + i1__m1_*pid + i2__m1_*pid/mult2
    function[21] = -i1__m1_*pid - i2__m1_*pid/mult2 + pop__m1_
    function[22] = -ci__*i__m1_*lamtau__*pi1 + lambtilde__
    function[23] = lambtilde__
    function[24] = lambtilde__
    function[25] = (-lockdown_policy*theta_lockdown + 1)*(i__m1_*lamtau__*ni__*pi2 + lambtilde__*w__)
    function[26] = lambtilde__*w__*(-lockdown_policy*theta_lockdown + 1)
    function[27] = lambtilde__*w__
    function[28] = betta*lambtilde__p1_*(-delta + rk__p1_ + 1)
    function[29] = lams__ + lamtau__
    function[30] = lambtilde__p1_*(-cs__p1_ + ns__p1_*w__p1_) + lams__p1_ + lamtau__p1_*(ci__p1_*cs__p1_*i__*pi1 + i__*ni__p1_*ns__p1_*pi2 + i__*pi3) - ns__p1_**2*theta/2 + log(cs__p1_) - lams__/betta
    function[31] = lambtilde__p1_*(-ci__p1_ + ni__p1_*w__p1_) + lami__p1_*(-pid - pir + 1) + lamr__p1_*pir - ni__p1_**2*theta/2 + log(ci__p1_) - lami__/betta
    function[32] = lambtilde__p1_*(-cr__p1_ + nr__p1_*w__p1_) + lamr__p1_ - nr__p1_**2*theta/2 + log(cr__p1_) - lamr__/betta
    function[33] = Rb__*betta*lambtilde__p1_/pie__p1_
    function[34] = Rb__/pie__p1_
    function[35] = Kf__p1_*betta*pie__p1_**(gam/(gam - 1))*xi + gam*lambtilde__*mc__*y__
    function[36] = F__p1_*betta*pie__p1_**(1/(gam - 1))*xi + lambtilde__*y__
    function[37] = F__*((-pie__**(1/(gam - 1))*xi + 1)/(1 - xi))**(1 - gam)
    function[38] = ((-pie__**(1/(gam - 1))*xi + 1)/(1 - xi))**gam*(1 - xi) + pie__**(gam/(gam - 1))*xi/pbreve__m1_
    function[39] = rpi*log(pie__/pie_ss) + rr_ss + rx*log(y__/yF__)
    function[40] = A*kF__m1_**(1 - alfa)*nF__**alfa*pbreveF__
    function[41] = rkF__**(1 - alfa)*wF__**alfa*(1 - alfa)**(alfa - 1)/(A*alfa**alfa)
    function[42] = A*alfa*kF__m1_**(1 - alfa)*mcF__*nF__**(alfa - 1)
    function[43] = kF__m1_*(1 - delta) + xF__
    function[44] = cF__ + g_ss + xF__
    function[45] = iF1__m1_*niF__ + nrF__*rF1__m1_ + nsF__*sF1__m1_
    function[46] = ciF__*iF1__m1_ + crF__*rF1__m1_ + csF__*sF1__m1_
    function[47] = (-lockdown_policy*theta_lockdown + 1)**2*(ciF__*csF__*iF1__m1_*pi1*sF1__m1_ + iF1__m1_*niF__*nsF__*pi2*sF1__m1_ + iF1__m1_*pi3*sF1__m1_)
    function[48] = virus_resistant_strain*(-lockdown_policy*theta_lockdown + 1)**2*(ciF__*csF__*iF2__m1_*pi1*sF2__m1_ + iF2__m1_*mult*pi3*sF2__m1_ + iF2__m1_*niF__*nsF__*pi2*sF2__m1_)
    function[49] = tauF1__ + tauF2__
    function[50] = sF1__m1_ - tauF1__ - vF__
    function[51] = sF2__m1_ - tauF2__
    function[52] = sF__m1_ - tauF__ - vF__
    function[53] = ei1__ - iF1__m1_*(pid + pir) + iF1__m1_ + tauF1__
    function[54] = ei2__ + iF2__m1_ + virus_resistant_strain*(-iF2__m1_*(pir + pid/mult2) + tauF2__)
    function[55] = ex*iF2__ + iF1__
    function[56] = iF1__m1_*pir + rF1__m1_ + vF__
    function[57] = iF2__m1_*pir + rF2__m1_
    function[58] = rF1__ + rF2__
    function[59] = sF1__m1_*vaccination_rate
    function[60] = ddF__m1_ + ed__ + iF1__m1_*pid + iF2__m1_*pid/mult2
    function[61] = -iF1__m1_*pid - iF2__m1_*pid/mult2 + popF__m1_
    function[62] = -ciF__*iF__m1_*lamtauF__*pi1 + lambtildeF__
    function[63] = lambtildeF__
    function[64] = lambtildeF__
    function[65] = (-lockdown_policy*theta_lockdown + 1)*(iF__m1_*lamtauF__*niF__*pi2 + lambtildeF__*wF__)
    function[66] = lambtildeF__*wF__*(-lockdown_policy*theta_lockdown + 1)
    function[67] = lambtildeF__*wF__
    function[68] = betta*lambtildeF__p1_*(-delta + rkF__p1_ + 1)
    function[69] = lamsF__ + lamtauF__
    function[70] = lambtildeF__p1_*(-csF__p1_ + nsF__p1_*wF__p1_) + lamsF__p1_ + lamtauF__p1_*(ciF__p1_*csF__p1_*iF__*pi1 + iF__*niF__p1_*nsF__p1_*pi2 + iF__*pi3) - nsF__p1_**2*theta/2 + log(csF__p1_) - lamsF__/betta
    function[71] = lambtildeF__p1_*(-ciF__p1_ + niF__p1_*wF__p1_) + lamiF__*(-pid - pir + 1) + lamrF__p1_*pir - niF__p1_**2*theta/2 + log(ciF__p1_) - lamiF__/betta
    function[72] = lambtildeF__p1_*(-crF__p1_ + nrF__p1_*wF__p1_) + lamrF__p1_ - nrF__p1_**2*theta/2 + log(crF__p1_) - lamrF__/betta
    function[73] = RbF__*betta*lambtildeF__p1_/pieF__p1_
    function[74] = RbF__/pieF__p1_
    function[75] = KfF__p1_*betta*pieF__p1_**(gam/(gam - 1))*xi_flex + gam*lambtildeF__*mcF__*yF__
    function[76] = FF__p1_*betta*pieF__p1_**(1/(gam - 1))*xi_flex + lambtildeF__*yF__
    function[77] = FF__*((-pieF__**(1/(gam - 1))*xi_flex + 1)/(1 - xi_flex))**(1 - gam)
    function[78] = ((-pieF__**(1/(gam - 1))*xi_flex + 1)/(1 - xi_flex))**gam*(1 - xi_flex) + pieF__**(gam/(gam - 1))*xi_flex/pbreveF__m1_
    function[79] = Rb_ss + rpi*log(pieF__/pie_ss)

    if order == 0:
        return function
    