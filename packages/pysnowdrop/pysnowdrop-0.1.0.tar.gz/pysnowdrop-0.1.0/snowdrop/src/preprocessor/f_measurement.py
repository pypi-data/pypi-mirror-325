from numba import njit
    
@njit
def f_measurement(x, p, exog=[0], order=1, ind=None):
        
    ### This code was generated by Python.
    ### Ghana GAP Model
    
    # First order derivatives are employed in most of the models to compute Jacobian.
    # Higher order derivatives are used in nonlinear rational expectations models.
    
    from scipy.special import lambertw as LambertW
    from snowdrop.src.preprocessor.functions import Heaviside,Max,Min,Abs,DiracDelta
    from snowdrop.src.preprocessor.condition import IfThenElse,IfThen,Derivative,Subs,Positive,Negative,myzif

    import numpy as np
    from numpy import exp, sin, cos, tan, sqrt, sign, log
        
    # Initialize variables
    _xi_1 = 0 
    _xi_2 = 0 
    _xi_3 = 0 
    RS_RW__ = x[2]
    L_WFOOD__ = x[10]
    RR_RW_BAR__ = x[16]
    RS__ = x[17]
    D4L_CPI_TAR__ = x[19]
    L_CPIE__ = x[30]
    L_GDP_RW_GAP__ = x[33]
    L_S__ = x[40]
    L_RWFOOD_BAR__ = x[41]
    L_RWOIL_BAR__ = x[63]
    L_CPIXFE__ = x[69]
    L_WOIL__ = x[77]
    L_GDP__ = x[100]
    L_CPI_RW__ = x[101]
    L_CPI__ = x[109]
    L_CPIF__ = x[111]
    OBS_L_GDP__ = x[116]
    OBS_L_S__ = x[117]
    OBS_L_CPI__ = x[118]
    OBS_RS__ = x[119]
    OBS_L_CPI_RW__ = x[120]
    OBS_RS_RW__ = x[121]
    OBS_L_CPIXFE__ = x[122]
    OBS_L_CPIF__ = x[123]
    OBS_L_CPIE__ = x[124]
    OBS_L_WFOOD__ = x[125]
    OBS_L_WOIL__ = x[126]
    OBS_L_GDP_RW_GAP__ = x[127]
    OBS_D4L_CPI_TAR__ = x[128]
    OBS_L_RWFOOD_BAR__ = x[129]
    OBS_L_RWOIL_BAR__ = x[130]
    OBS_RR_RW_BAR__ = x[131]

    # Set parameters

    # Function:
    function = np.zeros(16)
    function[0] = -L_GDP__ + OBS_L_GDP__
    function[1] = -L_S__ + OBS_L_S__
    function[2] = -L_CPI__ + OBS_L_CPI__
    function[3] = OBS_RS__ - RS__
    function[4] = -L_CPI_RW__ + OBS_L_CPI_RW__
    function[5] = OBS_RS_RW__ - RS_RW__
    function[6] = -L_CPIXFE__ + OBS_L_CPIXFE__
    function[7] = -L_CPIF__ + OBS_L_CPIF__
    function[8] = -L_CPIE__ + OBS_L_CPIE__
    function[9] = -L_WFOOD__ + OBS_L_WFOOD__
    function[10] = -L_WOIL__ + OBS_L_WOIL__
    function[11] = -L_GDP_RW_GAP__ + OBS_L_GDP_RW_GAP__
    function[12] = -D4L_CPI_TAR__ + OBS_D4L_CPI_TAR__
    function[13] = -L_RWFOOD_BAR__ + OBS_L_RWFOOD_BAR__
    function[14] = -L_RWOIL_BAR__ + OBS_L_RWOIL_BAR__
    function[15] = OBS_RR_RW_BAR__ - RR_RW_BAR__

    if order == 0:
        return function
    
    # Jacobian: 
    jacobian = np.zeros((16,148))
    jacobian[0,100] = -1
    jacobian[0,116] = 1
    jacobian[1,40] = -1
    jacobian[1,117] = 1
    jacobian[2,109] = -1
    jacobian[2,118] = 1
    jacobian[3,17] = -1
    jacobian[3,119] = 1
    jacobian[4,101] = -1
    jacobian[4,120] = 1
    jacobian[5,2] = -1
    jacobian[5,121] = 1
    jacobian[6,69] = -1
    jacobian[6,122] = 1
    jacobian[7,111] = -1
    jacobian[7,123] = 1
    jacobian[8,30] = -1
    jacobian[8,124] = 1
    jacobian[9,10] = -1
    jacobian[9,125] = 1
    jacobian[10,77] = -1
    jacobian[10,126] = 1
    jacobian[11,33] = -1
    jacobian[11,127] = 1
    jacobian[12,19] = -1
    jacobian[12,128] = 1
    jacobian[13,41] = -1
    jacobian[13,129] = 1
    jacobian[14,63] = -1
    jacobian[14,130] = 1
    jacobian[15,16] = -1
    jacobian[15,131] = 1

    if order == 1:
        return [function, jacobian]
